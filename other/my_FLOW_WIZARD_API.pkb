create or replace PACKAGE BODY my_FLOW_WIZARD_API AS
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
   G_NAV_LIST_ITEM_ID       NUMBER := NULL;
   G_VALID_DATA_TYPES       VARCHAR2(32767) := ':NVARCHAR2:NCHAR:NCLOB:CLOB:VARCHAR2:NUMBER:DATE:CHAR:FLOAT:VARCHAR:INT:';
   G_VALID_LOV_DISPLAY_TYPE VARCHAR2(32767) := ':NATIVE_CHECKBOX:DISPLAY_ONLY_LOV:NATIVE_DISPLAY_ONLY:DISPLAY_AND_SAVE_LOV:LIST_MGR:LIST_MGR2:LIST_MGR3:NATIVE_LIST_MANAGER:MULTIPLESELECT:POPUP_KEY_LOV:POPUP_KEY_LOV_NOFETCH:POPUP_FILTER:POPUP:POPUP2:NATIVE_POPUP_LOV:RADIOGROUP:RADIOGROUP_WITH_SUBMIT:RADIOGROUP_WITH_REDIRECT:NATIVE_RADIOGROUP:NATIVE_SELECT_LIST:TEXT_FROM_LOV:SELECT_LIST_FROM_LOV:NATIVE_AUTO_COMPLETE:NATIVE_SHUTTLE:';
 
   L_REGION_ID        NUMBER;
 
   L_BRANCH           NUMBER;
   L_BRANCH_ON_SUBMIT NUMBER;
 
   L_CANCEL_BUTTON_REDIRECT_URL VARCHAR2(4000);
   L_CANCEL_BUTTON_ACTION       apex_180100.WWV_FLOW_STEP_BUTTONS.BUTTON_ACTION%TYPE;
 
   L_CANCEL_BUTTON_ID    NUMBER;
   L_SUBMIT_BUTTON_ID    NUMBER;
   L_CREATE_BUTTON_ID    NUMBER;
   L_SAVE_BUTTON_ID      NUMBER;
   L_DELETE_BUTTON_ID    NUMBER;
   L_ADD_BUTTON_ID       NUMBER;
   L_CANCEL_BUTTON_DA_ID NUMBER;
 
   L_PAGE_PROCESS_ID  NUMBER;
   L_PROCESS          VARCHAR2(32767);
 
   L_ITEM_ID          NUMBER;
   L_ITEM_NAME        VARCHAR2(1000);
 
   
   
   
   FUNCTION TAB_EXISTS (
      P_FLOW_ID       IN NUMBER,
      P_TAB_SET       IN VARCHAR2,
      P_TAB_TEXT      IN VARCHAR2) RETURN BOOLEAN
   IS
      L_PARENT_TABSET      VARCHAR2(255);
      L_COUNT              NUMBER := 0;
   BEGIN
      FOR C1 IN (SELECT TAB_PARENT_TABSET
                 FROM APEX_180100.WWV_FLOW_TABS
                 WHERE TAB_SET = P_TAB_SET AND
                       FLOW_ID = P_FLOW_ID AND
                       SECURITY_GROUP_ID = APEX_180100.WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID) LOOP
         L_PARENT_TABSET := C1.TAB_PARENT_TABSET;
         EXIT;
      END LOOP;
 
      IF L_PARENT_TABSET IS NOT NULL THEN
          SELECT COUNT(*)
          INTO L_COUNT
          FROM APEX_180100.WWV_FLOW_TABS
          WHERE FLOW_ID = P_FLOW_ID
          AND TAB_SET = P_TAB_SET
          AND TAB_NAME = P_TAB_TEXT
          AND TAB_PARENT_TABSET = L_PARENT_TABSET;
      ELSE
          SELECT COUNT(*)
          INTO L_COUNT
          FROM APEX_180100.WWV_FLOW_TABS
          WHERE FLOW_ID = P_FLOW_ID
          AND TAB_SET = P_TAB_SET
          AND TAB_NAME = P_TAB_TEXT
          AND TAB_PARENT_TABSET IS NULL;
      END IF;
 
      IF L_COUNT > 0 THEN
        RETURN TRUE;
      ELSE
        RETURN FALSE;
      END IF;
   END TAB_EXISTS;
   
   
   
   
   FUNCTION ARRAY_ELEMENT(
       P_VCARR IN WWV_FLOW_GLOBAL.VC_ARR2,
       P_INDEX IN NUMBER )
       RETURN VARCHAR2
   IS
   BEGIN
       RETURN SUBSTR(P_VCARR( P_INDEX ), 1, 4000);
   EXCEPTION
       WHEN OTHERS THEN
           RETURN NULL;
   END;
   
   
   
   FUNCTION GET_MAX_REGION_DISPLAY_SEQ (
       P_FLOW_ID   IN NUMBER,
       P_PAGE_ID   IN NUMBER)
   RETURN NUMBER
   IS
       L_DISPLAY_SEQ   NUMBER;
   BEGIN
     FOR C1 IN (SELECT NVL(MAX(PLUG_DISPLAY_SEQUENCE),0)+10 S
                FROM APEX_180100.WWV_FLOW_PAGE_PLUGS
                WHERE PAGE_ID = P_PAGE_ID
                AND FLOW_ID = P_FLOW_ID)
     LOOP
         L_DISPLAY_SEQ := C1.S;
         EXIT;
     END LOOP;
     RETURN L_DISPLAY_SEQ;
   END GET_MAX_REGION_DISPLAY_SEQ;
   
   
   
   FUNCTION ORDER_TABLES_BY_PARENTS (
       P_OWNER  IN VARCHAR2,
       P_TABLES IN WWV_FLOW_T_VARCHAR2 )
       RETURN WWV_FLOW_T_VARCHAR2
   IS
       L_CHILDREN WWV_FLOW_T_VARCHAR2;
       L_PARENTS  WWV_FLOW_T_VARCHAR2;
       L_RESULT   WWV_FLOW_T_VARCHAR2;
       L_TMP      WWV_FLOW_GLOBAL.T_DBMS_ID;
       FUNCTION IS_CHILD (
           P_PARENT IN VARCHAR2,
           P_CHILD  IN VARCHAR2 )
           RETURN BOOLEAN
       IS
       BEGIN
           FOR I IN 1 .. L_CHILDREN.COUNT LOOP
               IF L_CHILDREN(I) = P_CHILD AND L_PARENTS(I) = P_PARENT THEN
                   RETURN TRUE;
               END IF;
           END LOOP;
           RETURN FALSE;
       END IS_CHILD;
   BEGIN
       apex_180100.WWV_FLOW_DEBUG.ENTER (
           'order_tables_by_parents',
           'p_owner', P_OWNER,
           'p_tables', WWV_FLOW_STRING.JOIN(P_TABLES, ',') );
 
       apex_180100.WWV_FLOW_SW_API.CHECK_PRIV (
           P_SCHEMA => P_OWNER );
       
       
       
       
       
       
       
       /* TODO
       WITH T AS (
           SELECT COLUMN_VALUE TABLE_NAME
             FROM TABLE(P_TABLES) ),
       CC AS (
           SELECT --+materialize
                  DISTINCT
                  CC.OWNER,
                  CC.TABLE_NAME,
                  CC.CONSTRAINT_NAME
             FROM SYS.DBA_CONS_COLUMNS CC,
                  T
            WHERE CC.OWNER      = P_OWNER
              AND CC.TABLE_NAME = T.TABLE_NAME ),
       CONS_COLS AS (
           SELECT CC.OWNER,
                  CC.TABLE_NAME,
                  CC.CONSTRAINT_NAME,
                  C.CONSTRAINT_TYPE,
                  C.R_OWNER,
                  C.R_CONSTRAINT_NAME
             FROM CC,
                  SYS.DBA_CONSTRAINTS  C
            WHERE CC.OWNER           =  C.OWNER
              AND CC.CONSTRAINT_NAME =  C.CONSTRAINT_NAME
              AND C.CONSTRAINT_TYPE  IN ('R', 'P', 'U') ),
       FKS AS (
           SELECT CHILD.TABLE_NAME  CHILD_TABLE,
                  PARENT.TABLE_NAME PARENT_TABLE
           FROM CONS_COLS CHILD,CONS_COLS PARENT
           WHERE CHILD.CONSTRAINT_TYPE  =  'R'
            AND PARENT.CONSTRAINT_TYPE  IN ('P','U')
            AND CHILD.R_CONSTRAINT_NAME =  PARENT.CONSTRAINT_NAME
            AND CHILD.R_OWNER           =  PARENT.OWNER )
       SELECT T.TABLE_NAME,
              FKS.PARENT_TABLE
         BULK COLLECT INTO L_CHILDREN,
                           L_PARENTS
         FROM T, FKS
        WHERE T.TABLE_NAME = FKS.CHILD_TABLE(+);
      */ 
       
       
       L_RESULT := WWV_FLOW_T_VARCHAR2();
       FOR I IN 1 .. L_CHILDREN.COUNT LOOP
           IF L_CHILDREN(I) NOT MEMBER OF L_RESULT THEN
               L_RESULT.EXTEND;
               L_RESULT(L_RESULT.COUNT) := L_CHILDREN(I);
           END IF;
       END LOOP;
       
       
       
       FOR I IN 2 .. L_RESULT.COUNT LOOP
           FOR J IN 1 .. I-1 LOOP
               IF IS_CHILD ( 
                      P_PARENT => L_RESULT(I),
                      P_CHILD  => L_RESULT(J) )
               THEN
                   
                   
                   
                   L_TMP := L_RESULT(I);
                   FOR K IN REVERSE J+1 .. I LOOP
                       L_RESULT(K) := L_RESULT(K-1);
                   END LOOP;
                   L_RESULT(J) := L_TMP;
                   EXIT;
               END IF;
           END LOOP;    
       END LOOP;
 
       RETURN L_RESULT;
   END ORDER_TABLES_BY_PARENTS;
   
   
   
   FUNCTION GET_PK (
   
   
   
       P_TABLE_OWNER  IN VARCHAR2,
       P_TABLE_NAME   IN VARCHAR2) RETURN VARCHAR2
   IS
       L_PRIMARY_KEY VARCHAR2(255);
       L_CNT         PLS_INTEGER := 0;
   BEGIN
      /* TODO
       FOR C1 IN (
           SELECT CL.COLUMN_NAME,
                  CL.POSITION
           FROM SYS.DBA_CONS_COLUMNS CL, SYS.DBA_CONSTRAINTS CN
           WHERE    CN.OWNER           = CL.OWNER
           AND      CN.TABLE_NAME      = CL.TABLE_NAME
           AND      CN.CONSTRAINT_NAME = CL.CONSTRAINT_NAME
           AND      CL.TABLE_NAME      = P_TABLE_NAME
           AND      CL.OWNER           = P_TABLE_OWNER
           AND      CN.CONSTRAINT_TYPE = 'P'
           ORDER BY CL.POSITION)
       LOOP
        L_CNT := L_CNT + 1;
        IF L_CNT > 1 THEN
           L_PRIMARY_KEY := L_PRIMARY_KEY||':';
        END IF;
           L_PRIMARY_KEY := L_PRIMARY_KEY||C1.COLUMN_NAME;
       END LOOP;
       */
       RETURN L_PRIMARY_KEY;
   END GET_PK;
 
 
   
   
   
   FUNCTION GET_FK (
       P_TABLE_OWNER IN VARCHAR2,
       P_TABLE_NAME  IN VARCHAR2,
       P_PARENT_TABLE_NAME IN VARCHAR2
       )
       RETURN VARCHAR2
   IS
         L_PREV_CONSTRAINT WWV_FLOW_GLOBAL.T_DBMS_ID;
       L_FK    VARCHAR2(4000);
   BEGIN
         FOR C1 IN (WITH CC AS (
                      SELECT /*+materialize*/CC.OWNER,
                             CC.TABLE_NAME,
                             CC.CONSTRAINT_NAME,
                             CC.POSITION,
                             CC.COLUMN_NAME
                        FROM SYS.DBA_CONS_COLUMNS CC
                       WHERE CC.OWNER           =  P_TABLE_OWNER
                         AND CC.TABLE_NAME      IN (P_TABLE_NAME, P_PARENT_TABLE_NAME)),
                    CONS_COLS AS (
                      SELECT CC.TABLE_NAME,
                             CC.CONSTRAINT_NAME,
                             C.CONSTRAINT_TYPE,
                             C.R_CONSTRAINT_NAME,
                             CC.POSITION,
                             CC.COLUMN_NAME
                        FROM CC,
                             SYS.DBA_CONSTRAINTS  C
                       WHERE CC.OWNER           =  C.OWNER
                         AND CC.CONSTRAINT_NAME =  C.CONSTRAINT_NAME
                         AND C.CONSTRAINT_TYPE  IN ('R', 'P', 'U') )
                  SELECT CHILD.R_CONSTRAINT_NAME,
                         CHILD.POSITION,
                         CHILD.COLUMN_NAME
                    FROM CONS_COLS CHILD,
                         CONS_COLS PARENT
                   WHERE CHILD.R_CONSTRAINT_NAME = PARENT.CONSTRAINT_NAME
                     AND CHILD.POSITION          = PARENT.POSITION
                     AND CHILD.CONSTRAINT_TYPE   = 'R'
                     AND CHILD.TABLE_NAME        = P_TABLE_NAME
                     AND PARENT.CONSTRAINT_TYPE  IN ('P', 'U')
                     AND PARENT.TABLE_NAME       = P_PARENT_TABLE_NAME
                  ORDER BY CHILD.R_CONSTRAINT_NAME, CHILD.POSITION )
       LOOP
             L_FK := L_FK||
                     CASE
                     WHEN L_PREV_CONSTRAINT <> C1.R_CONSTRAINT_NAME THEN ':'
                     WHEN C1.POSITION > 1 THEN ','
                     END||
                     C1.COLUMN_NAME;
             L_PREV_CONSTRAINT := C1.R_CONSTRAINT_NAME;
       END LOOP;
       RETURN L_FK;
   END GET_FK;
 
   
   
   
   FUNCTION GET_COLUMN_DATA_TYPE (
      P_TABLE_OWNER IN VARCHAR2,
      P_TABLE_NAME  IN VARCHAR2,
      P_COLUMN_NAME IN VARCHAR2
      ) RETURN VARCHAR2
   IS
      L_DATA_TYPE VARCHAR2(4000);
   BEGIN
      FOR C1 IN (SELECT DATA_TYPE
                   FROM SYS.DBA_TAB_COLUMNS
                  WHERE OWNER       = P_TABLE_OWNER
                    AND TABLE_NAME  = P_TABLE_NAME
                    AND COLUMN_NAME = P_COLUMN_NAME)
      LOOP
         L_DATA_TYPE := C1.DATA_TYPE;
      END LOOP;
      RETURN L_DATA_TYPE;
   END GET_COLUMN_DATA_TYPE;
 
   
   
   
   FUNCTION TABLE_VIEW_EXISTS (
      P_NAME IN VARCHAR2,
      P_OWNER IN VARCHAR2
      ) RETURN BOOLEAN
   IS
      L_FOUND BOOLEAN := FALSE;
   BEGIN
      FOR C1 IN (
        SELECT 1 FROM SYS.DBA_TABLES WHERE TABLE_NAME = P_NAME AND OWNER = P_OWNER
      ) LOOP
        L_FOUND := TRUE;
      END LOOP;
      IF NOT L_FOUND THEN
         FOR C1 IN (
           SELECT 1 FROM SYS.DBA_VIEWS WHERE VIEW_NAME = P_NAME AND OWNER = P_OWNER
         ) LOOP
           L_FOUND := TRUE;
         END LOOP;
      END IF;
      RETURN L_FOUND;
   END TABLE_VIEW_EXISTS;
   
   
   
   
 
   FUNCTION GET_DBMS_SQL_CURSOR(
     P_QUERY IN VARCHAR2,
     P_OWNER IN VARCHAR2 DEFAULT WWV_FLOW_SECURITY.G_PARSE_AS_SCHEMA
   ) RETURN INTEGER IS
 
     L_REPORT_CURSOR INTEGER;
     L_OWNER         VARCHAR2(256);
 
   BEGIN
     BEGIN
       L_OWNER := WWV_FLOW_ASSERT.SIMPLE_SQL_NAME(P_OWNER);
 
       
       L_REPORT_CURSOR := SYS.DBMS_SQL.OPEN_CURSOR;
 
       WWV_FLOW_DYNAMIC_EXEC.PARSE_SQL_STATEMENT (
           P_CURSOR          => L_REPORT_CURSOR,
           P_SQL_STATEMENT   => P_QUERY,
           P_PARSE_AS_SCHEMA => L_OWNER,
           P_DO_SUBSTITUTIONS => FALSE );
 
       IF L_REPORT_CURSOR IS NULL THEN
           WWV_FLOW_ERROR.RAISE_INTERNAL_ERROR (
               P_ERROR_CODE => 'WWV_FLOW_WIZARD_API.PARSE_ERROR2',
               P0           => SQLERRM );
       END IF;
 
     EXCEPTION WHEN OTHERS THEN
       IF SYS.DBMS_SQL.IS_OPEN(L_REPORT_CURSOR) THEN
         SYS.DBMS_SQL.CLOSE_CURSOR(L_REPORT_CURSOR);
       END IF;
       WWV_FLOW_ERROR.RAISE_INTERNAL_ERROR (
           P_ERROR_CODE => 'WWV_FLOW_WIZARD_API.PARSE_ERROR2',
           P0           => SQLERRM );
     END;
 
     RETURN L_REPORT_CURSOR;
 
   END GET_DBMS_SQL_CURSOR;
 
   
   
   
   FUNCTION UPDATEABLE_QUERY_EXISTS (
      P_FLOW_ID IN NUMBER,
      P_PAGE_ID IN NUMBER)
   RETURN BOOLEAN
   IS
      L_COUNT  NUMBER := 0;
   BEGIN
      SELECT COUNT(*)
        INTO L_COUNT
        FROM WWV_FLOW_PAGE_PLUGS
       WHERE SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
         AND FLOW_ID           = P_FLOW_ID
         AND PAGE_ID           = P_PAGE_ID
         AND PLUG_SOURCE_TYPE  = WWV_FLOW_REGION_NATIVE.C_TABFORM;
 
      IF L_COUNT > 0 THEN
         RETURN TRUE;
      ELSE
         RETURN FALSE;
      END IF;
   END;
 
   
   
   
   FUNCTION IR_REPORT_EXISTS (
      P_FLOW_ID   IN NUMBER,
      P_PAGE_ID   IN NUMBER,
      P_REGION_ID IN NUMBER DEFAULT NULL)
   RETURN BOOLEAN
   IS
      L_COUNT  NUMBER := 0;
   BEGIN
      IF P_REGION_ID IS NULL THEN
          
          SELECT COUNT(*)
          INTO L_COUNT
          FROM WWV_FLOW_PAGE_PLUGS
          WHERE SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
          AND FLOW_ID = P_FLOW_ID
          AND PAGE_ID = P_PAGE_ID
          AND PLUG_SOURCE_TYPE = WWV_FLOW_REGION_NATIVE.C_IR;
 
          IF L_COUNT > 0 THEN
            RETURN TRUE;
          ELSE
            RETURN FALSE;
          END IF;
      ELSE
          
          SELECT COUNT(*)
          INTO L_COUNT
          FROM WWV_FLOW_PAGE_PLUGS
          WHERE SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
          AND FLOW_ID             = P_FLOW_ID
          AND PAGE_ID             = P_PAGE_ID
          AND ID                  = P_REGION_ID
          AND PLUG_SOURCE_TYPE    = WWV_FLOW_REGION_NATIVE.C_IR;
 
          IF L_COUNT > 0 THEN
              RETURN TRUE;
          ELSE
             RETURN FALSE;
          END IF;
      END IF;
   END IR_REPORT_EXISTS;
 
   
   
   
   FUNCTION MAP_EXISTS (
      P_FLOW_ID   IN NUMBER,
      P_PAGE_ID   IN NUMBER,
      P_REGION_ID IN NUMBER DEFAULT NULL)
   RETURN BOOLEAN
   IS
      L_COUNT     NUMBER := 0;
   BEGIN
 
      IF P_REGION_ID IS NULL THEN
          
          SELECT COUNT(*)
          INTO L_COUNT
          FROM WWV_FLOW_PAGE_PLUGS
          WHERE SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
          AND FLOW_ID = P_FLOW_ID
          AND PAGE_ID = P_PAGE_ID
          AND PLUG_SOURCE_TYPE = WWV_FLOW_REGION_NATIVE.C_FLASH_MAP;
 
          IF L_COUNT > 0 THEN
             RETURN TRUE;
          ELSE
             RETURN FALSE;
          END IF;
 
      ELSE
          
          SELECT COUNT(*)
          INTO L_COUNT
          FROM WWV_FLOW_PAGE_PLUGS
          WHERE SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
          AND FLOW_ID             = P_FLOW_ID
          AND PAGE_ID             = P_PAGE_ID
          AND ID                  = P_REGION_ID
          AND PLUG_SOURCE_TYPE    = WWV_FLOW_REGION_NATIVE.C_FLASH_MAP;
 
      IF L_COUNT > 0 THEN
         RETURN TRUE;
      ELSE
         RETURN FALSE;
      END IF;
      END IF;
 
   END MAP_EXISTS;
 
   
   
   
   FUNCTION FLASH_CHART_EXISTS (
      P_FLOW_ID   IN NUMBER,
      P_PAGE_ID   IN NUMBER,
      P_REGION_ID IN NUMBER DEFAULT NULL)
   RETURN BOOLEAN
   IS
      L_COUNT  NUMBER := 0;
   BEGIN
      IF P_REGION_ID IS NULL THEN
          
          SELECT COUNT(A.ID) INTO L_COUNT
            FROM WWV_FLOW_PAGE_PLUGS A, WWV_FLOW_FLASH_CHARTS_5 B
           WHERE A.SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
             AND A.SECURITY_GROUP_ID = B.SECURITY_GROUP_ID
             AND A.FLOW_ID           = P_FLOW_ID
             AND A.FLOW_ID           = B.FLOW_ID
             AND A.PAGE_ID           = P_PAGE_ID
             AND A.PAGE_ID           = B.PAGE_ID
             AND A.ID                = B.REGION_ID
             AND A.PLUG_SOURCE_TYPE  = WWV_FLOW_REGION_NATIVE.C_FLASH_CHART5
             AND B.CHART_RENDERING   = 'FLASH_PREFERRED';
 
          IF L_COUNT > 0 THEN
             RETURN TRUE;
          ELSE
             RETURN FALSE;
          END IF;
      ELSE
          
          SELECT COUNT(A.ID) INTO L_COUNT
            FROM WWV_FLOW_PAGE_PLUGS A, WWV_FLOW_FLASH_CHARTS_5 B
           WHERE A.SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
             AND A.SECURITY_GROUP_ID = B.SECURITY_GROUP_ID
             AND A.FLOW_ID           = P_FLOW_ID
             AND A.FLOW_ID           = B.FLOW_ID
             AND A.PAGE_ID           = P_PAGE_ID
             AND A.PAGE_ID           = B.PAGE_ID
             AND A.PLUG_SOURCE_TYPE  = WWV_FLOW_REGION_NATIVE.C_FLASH_CHART5
             AND B.CHART_RENDERING   = 'FLASH_PREFERRED'
             AND A.ID                = P_REGION_ID
             AND A.ID                = B.REGION_ID;
 
          IF L_COUNT > 0 THEN
             RETURN TRUE;
          ELSE
             RETURN FALSE;
          END IF;
      END IF;
   END FLASH_CHART_EXISTS;
 
 
   
   
   
   FUNCTION JSTREE_EXISTS (
      P_FLOW_ID   IN NUMBER,
      P_PAGE_ID   IN NUMBER,
      P_REGION_ID IN NUMBER DEFAULT NULL)
   RETURN BOOLEAN
   IS
      L_COUNT  NUMBER := 0;
   BEGIN
      IF P_REGION_ID IS NULL THEN
          
          SELECT COUNT(*)
          INTO L_COUNT
          FROM WWV_FLOW_PAGE_PLUGS
          WHERE SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
          AND FLOW_ID             = P_FLOW_ID
          AND PAGE_ID             = P_PAGE_ID
          AND PLUG_SOURCE_TYPE    = WWV_FLOW_REGION_NATIVE.C_JSTREE;
 
          IF L_COUNT > 0 THEN
             RETURN TRUE;
          ELSE
             RETURN FALSE;
          END IF;
      ELSE
          
          SELECT COUNT(*)
          INTO L_COUNT
          FROM WWV_FLOW_PAGE_PLUGS
          WHERE SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
          AND FLOW_ID             = P_FLOW_ID
          AND PAGE_ID             = P_PAGE_ID
          AND ID                  = P_REGION_ID
          AND PLUG_SOURCE_TYPE    = WWV_FLOW_REGION_NATIVE.C_JSTREE;
 
          IF L_COUNT > 0 THEN
             RETURN TRUE;
          ELSE
             RETURN FALSE;
          END IF;
      END IF;
   END JSTREE_EXISTS;
 
   
   
   
   FUNCTION TABULAR_FORM_EXISTS (
      P_FLOW_ID   IN NUMBER,
      P_PAGE_ID   IN NUMBER,
      P_REGION_ID IN NUMBER DEFAULT NULL)
   RETURN BOOLEAN
   IS
      L_COUNT  NUMBER := 0;
   BEGIN
      IF P_REGION_ID IS NULL THEN
          
          SELECT COUNT(*)
            INTO L_COUNT
            FROM WWV_FLOW_PAGE_PLUGS
           WHERE SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
             AND FLOW_ID           = P_FLOW_ID
             AND PAGE_ID           = P_PAGE_ID
             AND PLUG_SOURCE_TYPE  = WWV_FLOW_REGION_NATIVE.C_TABFORM;
 
          IF L_COUNT > 0 THEN
             RETURN TRUE;
          ELSE
             RETURN FALSE;
          END IF;
      ELSE
          
          SELECT COUNT(*)
            INTO L_COUNT
            FROM WWV_FLOW_PAGE_PLUGS
           WHERE SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
             AND FLOW_ID           = P_FLOW_ID
             AND PAGE_ID           = P_PAGE_ID
             AND ID                = P_REGION_ID
             AND PLUG_SOURCE_TYPE  = WWV_FLOW_REGION_NATIVE.C_TABFORM;
 
          IF L_COUNT > 0 THEN
             RETURN TRUE;
          ELSE
             RETURN FALSE;
          END IF;
      END IF;
   END TABULAR_FORM_EXISTS;
 
 
   
   
   
   FUNCTION GET_DEFAULT_TEMPLATE_ID (
       P_FLOW_ID       IN NUMBER,
       P_TEMPLATE_TYPE IN VARCHAR2
       ) RETURN NUMBER
   IS
       L_TEMPLATE_TYPE VARCHAR2(4000) := UPPER(P_TEMPLATE_TYPE);
   BEGIN
      IF L_TEMPLATE_TYPE = 'REGION' THEN
         RETURN WWV_FLOW_THEME_GLOBALS.G_DEFAULT_REGION_TEMPLATE;
      END IF;
      IF L_TEMPLATE_TYPE = 'LABEL' THEN
          RETURN WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE;
      END IF;
      IF L_TEMPLATE_TYPE = 'REPORT' THEN
          RETURN WWV_FLOW_THEME_GLOBALS.G_DEFAULT_REPORT_TEMPLATE;
      END IF;
      IF L_TEMPLATE_TYPE = 'MENU' THEN
         RETURN WWV_FLOW_THEME_GLOBALS.G_DEFAULT_MENU_TEMPLATE;
      END IF;
      IF L_TEMPLATE_TYPE = 'BUTTON' THEN
          RETURN WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE;
      END IF;
      RETURN NULL;
   END GET_DEFAULT_TEMPLATE_ID;
 
     
     
     
     FUNCTION GET_PRESET_TEMPLATE_OPTIONS (
         P_TEMPLATE_ID    NUMBER,
         P_TEMPLATE_TYPE VARCHAR
     ) RETURN VARCHAR2 IS
 
         L_PRESET_TEMPATE_OPTIONS VARCHAR2(255) := NULL;
 
     BEGIN
 
         IF P_TEMPLATE_TYPE = 'PAGE' THEN
             FOR C1 IN (
                 SELECT PRESET_TEMPLATE_OPTIONS
                   FROM WWV_FLOW_TEMPLATES
                  WHERE SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                    AND ID = P_TEMPLATE_ID
             ) LOOP
                 L_PRESET_TEMPATE_OPTIONS := C1.PRESET_TEMPLATE_OPTIONS;
             END LOOP;
         ELSIF P_TEMPLATE_TYPE = 'REGION' THEN
             FOR C1 IN (
                 SELECT PRESET_TEMPLATE_OPTIONS
                   FROM WWV_FLOW_PAGE_PLUG_TEMPLATES
                  WHERE SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                    AND ID = P_TEMPLATE_ID
             ) LOOP
                 L_PRESET_TEMPATE_OPTIONS := C1.PRESET_TEMPLATE_OPTIONS;
             END LOOP;
         ELSIF P_TEMPLATE_TYPE = 'REPORT' THEN
             FOR C1 IN (
                 SELECT PRESET_TEMPLATE_OPTIONS
                   FROM WWV_FLOW_ROW_TEMPLATES
                  WHERE SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                    AND ID = P_TEMPLATE_ID
             ) LOOP
                 L_PRESET_TEMPATE_OPTIONS := C1.PRESET_TEMPLATE_OPTIONS;
             END LOOP;
         ELSIF P_TEMPLATE_TYPE = 'LIST' THEN
             FOR C1 IN (
                 SELECT PRESET_TEMPLATE_OPTIONS
                   FROM WWV_FLOW_LIST_TEMPLATES
                  WHERE SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                    AND ID = P_TEMPLATE_ID
             ) LOOP
                 L_PRESET_TEMPATE_OPTIONS := C1.PRESET_TEMPLATE_OPTIONS;
             END LOOP;
         ELSIF P_TEMPLATE_TYPE = 'BREADCRUMB' THEN
             FOR C1 IN (
                 SELECT PRESET_TEMPLATE_OPTIONS
                   FROM WWV_FLOW_MENU_TEMPLATES
                  WHERE SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                    AND ID = P_TEMPLATE_ID
             ) LOOP
                 L_PRESET_TEMPATE_OPTIONS := C1.PRESET_TEMPLATE_OPTIONS;
             END LOOP;
         ELSIF P_TEMPLATE_TYPE = 'ITEM' THEN
             FOR C1 IN (
                 SELECT PRESET_TEMPLATE_OPTIONS
                   FROM WWV_FLOW_FIELD_TEMPLATES
                  WHERE SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                    AND ID = P_TEMPLATE_ID
             ) LOOP
                 L_PRESET_TEMPATE_OPTIONS := C1.PRESET_TEMPLATE_OPTIONS;
             END LOOP;
         ELSIF P_TEMPLATE_TYPE = 'BUTTON' THEN
             FOR C1 IN (
                 SELECT PRESET_TEMPLATE_OPTIONS
                   FROM WWV_FLOW_BUTTON_TEMPLATES
                  WHERE SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                    AND ID = P_TEMPLATE_ID
             ) LOOP
                 L_PRESET_TEMPATE_OPTIONS := C1.PRESET_TEMPLATE_OPTIONS;
             END LOOP;
         END IF;
 
         IF L_PRESET_TEMPATE_OPTIONS IS NOT NULL THEN
             RETURN '#DEFAULT#:'||L_PRESET_TEMPATE_OPTIONS;
         ELSE
             RETURN '#DEFAULT#';
         END IF;
 
     END;
 
     
     
     
     FUNCTION PAGE_EXISTS (P_FLOW_ID IN NUMBER, P_PAGE_ID IN NUMBER) RETURN BOOLEAN
     IS
         R BOOLEAN := FALSE;
     BEGIN
         FOR C1 IN (SELECT 1
                      FROM WWV_FLOW_STEPS
                     WHERE SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                       AND ID = P_PAGE_ID
                       AND FLOW_ID = P_FLOW_ID) LOOP
             R := TRUE;
          END LOOP;
          RETURN R;
     END PAGE_EXISTS;
 
     
     
     
     FUNCTION RESERVE_PAGE(
         P_FLOW_ID    IN NUMBER,
         P_PAGE_ID    IN NUMBER,
         P_REUSE      IN BOOLEAN DEFAULT FALSE ) RETURN VARCHAR2
     IS
     BEGIN
         
         IF PAGE_EXISTS( P_FLOW_ID => P_FLOW_ID, P_PAGE_ID => P_PAGE_ID ) THEN
             RETURN WWV_FLOW_LANG.SYSTEM_MESSAGE( 'WIZ.RESERVE_PAGE.PAGE_ID.EXISTS' );
         END IF;
 
         
         DELETE FROM WWV_FLOW_PAGES_RESERVED WHERE CREATED_ON < SYSDATE - 1;
 
         IF P_REUSE THEN
             
             FOR L_RESERVED_PAGE IN (
                 SELECT ID
                 FROM WWV_FLOW_PAGES_RESERVED
                 WHERE FLOW_ID = P_FLOW_ID
                 AND ID = P_PAGE_ID
                 AND CREATED_BY = WWV_FLOW.G_USER )
             LOOP
                 
                 RETURN NULL;
             END LOOP;
         END IF;
 
         FOR L_RESERVED_PAGE IN (
             SELECT ID
             FROM WWV_FLOW_PAGES_RESERVED
             WHERE FLOW_ID = P_FLOW_ID
             AND ID = P_PAGE_ID )
         LOOP
             
             RETURN WWV_FLOW_LANG.SYSTEM_MESSAGE( 'WIZ.RESERVE_PAGE.PAGE_ID.RESERVED' );
         END LOOP;
        
         
         INSERT INTO WWV_FLOW_PAGES_RESERVED
             (ID, FLOW_ID, CREATED_ON, CREATED_BY, FLOW_SESSION)
         VALUES
             (P_PAGE_ID, P_FLOW_ID, SYSDATE, WWV_FLOW.G_USER, WWV_FLOW.G_INSTANCE);
 
         
         RETURN NULL;
     END RESERVE_PAGE;
 
     PROCEDURE RESERVE_PAGE(
         P_FLOW_ID    IN NUMBER,
         P_PAGE_ID    IN NUMBER,
         P_REUSE      IN BOOLEAN DEFAULT FALSE )
     IS
         L_ERROR      VARCHAR2(4000);
     BEGIN
         L_ERROR := RESERVE_PAGE(
                         P_FLOW_ID    => P_FLOW_ID,
                         P_PAGE_ID    => P_PAGE_ID,
                         P_REUSE      => P_REUSE );
 
         IF L_ERROR IS NOT NULL THEN
             RAISE_APPLICATION_ERROR(-20001, L_ERROR);
         END IF;
     END RESERVE_PAGE;
 
     
     
     
     
     FUNCTION GET_MAXIMUM_FREE_PAGE ( 
         P_FLOW_ID IN NUMBER ) RETURN NUMBER
     IS
         L_RESERVED_PAGE_ID NUMBER := 0;
         L_MAX_PAGE_ID      NUMBER;
     BEGIN
         
         FOR L_PAGE IN (
             SELECT MAX(ID) ID
             FROM WWV_FLOW_STEPS
             WHERE FLOW_ID = P_FLOW_ID
             AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
             AND NVL(ALIAS,'*') <> 'LOGIN_DESKTOP')
         LOOP
             L_MAX_PAGE_ID := (TRUNC(L_PAGE.ID/10)*10 + 10);
 
             
             IF L_MAX_PAGE_ID <= 10000 THEN
                 L_MAX_PAGE_ID := 10010;
             
             ELSIF MOD(L_MAX_PAGE_ID, 100) = 0 THEN
                 L_MAX_PAGE_ID := L_MAX_PAGE_ID + 10;
             END IF;
         END LOOP;
     
         
         
         FOR L_RESERVED IN (
             SELECT ID, CREATED_BY
             FROM WWV_FLOW_PAGES_RESERVED
             WHERE FLOW_ID = P_FLOW_ID
             AND   MOD(ID,10) = 0 
             AND   MOD(ID,100) != 0
             AND   ID >= L_MAX_PAGE_ID
             ORDER BY ID )
         LOOP
             
             IF L_RESERVED.CREATED_BY = WWV_FLOW.G_USER THEN
                 L_RESERVED_PAGE_ID := 0;
                 L_MAX_PAGE_ID := L_RESERVED.ID;
                 EXIT;
             ELSE
                 
                 
                 L_RESERVED_PAGE_ID := L_RESERVED.ID;
             END IF;
         END LOOP;
     
         
         IF L_RESERVED_PAGE_ID > 0 THEN
             L_MAX_PAGE_ID := (L_RESERVED_PAGE_ID + 10);
 
             
             IF MOD(L_MAX_PAGE_ID,100) = 0 THEN
                 L_MAX_PAGE_ID := L_MAX_PAGE_ID + 10;
             END IF;
         END IF;
 
         
         RESERVE_PAGE(
             P_FLOW_ID    => P_FLOW_ID,
             P_PAGE_ID    => L_MAX_PAGE_ID,
             P_REUSE      => TRUE );
         
         RETURN L_MAX_PAGE_ID;
     END GET_MAXIMUM_FREE_PAGE;
     
     
     
     
     
     FUNCTION GET_MAXIMUM_FREE_ADMIN_PAGE ( 
         P_FLOW_ID IN NUMBER ) RETURN NUMBER
     IS
         L_RESERVED_PAGE_ID   NUMBER := 0;
         L_MAX_ADMIN_PAGE_ID  NUMBER := 10100; 
     BEGIN
         
         IF NOT PAGE_EXISTS( P_FLOW_ID => P_FLOW_ID, P_PAGE_ID => 10000 ) THEN
             L_MAX_ADMIN_PAGE_ID := 10000;
             
             
             FOR L_RESERVED IN (
                 SELECT ID
                 FROM WWV_FLOW_PAGES_RESERVED
                 WHERE FLOW_ID = P_FLOW_ID
                 AND ID = 10000
                 AND CREATED_BY <> WWV_FLOW.G_USER)
             LOOP
                 L_MAX_ADMIN_PAGE_ID := 10100;  
             END LOOP;
         END IF;
 
         
         IF L_MAX_ADMIN_PAGE_ID <> 10000 THEN
             FOR L_PAGE IN (
                 SELECT MAX(ID) ID
                 FROM WWV_FLOW_STEPS
                 WHERE FLOW_ID = P_FLOW_ID
                 AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                 AND NVL(ALIAS,'*') <> 'LOGIN_DESKTOP')
             LOOP
                 IF L_PAGE.ID < 10100 THEN
                     L_MAX_ADMIN_PAGE_ID := 10100;
                 ELSE
                     L_MAX_ADMIN_PAGE_ID := (TRUNC(L_PAGE.ID/100)*100 + 100);
                 END IF;
             END LOOP;
         
             
             FOR L_RESERVED IN (
                 SELECT ID, CREATED_BY
                 FROM WWV_FLOW_PAGES_RESERVED
                 WHERE FLOW_ID = P_FLOW_ID
                 AND   MOD(ID,100) = 0 
                 AND   ID >= L_MAX_ADMIN_PAGE_ID
                 ORDER BY ID)
             LOOP
                 
                 IF L_RESERVED.CREATED_BY = WWV_FLOW.G_USER THEN
                     L_RESERVED_PAGE_ID := 0;
                     L_MAX_ADMIN_PAGE_ID := L_RESERVED.ID;
                     EXIT;
                 ELSIF L_RESERVED.CREATED_BY <> WWV_FLOW.G_USER THEN
                     
                     
                     L_RESERVED_PAGE_ID := L_RESERVED.ID;
                 END IF;
             END LOOP;
         
             
             IF L_RESERVED_PAGE_ID > 0 THEN
                 L_MAX_ADMIN_PAGE_ID := (L_RESERVED_PAGE_ID + 100);
             END IF;
         END IF;
     
         
         RESERVE_PAGE(
             P_FLOW_ID    => P_FLOW_ID,
             P_PAGE_ID    => L_MAX_ADMIN_PAGE_ID,
             P_REUSE      => TRUE );
 
         RETURN L_MAX_ADMIN_PAGE_ID;
     END GET_MAXIMUM_FREE_ADMIN_PAGE;
 
     
     
     
     FUNCTION GET_OWNER (
         
         
         
         P_FLOW_ID    IN NUMBER,
         P_OWNER      IN VARCHAR2 )
         RETURN VARCHAR2
     IS
         L_OWNER WWV_FLOWS.OWNER%TYPE;
     BEGIN
         FOR C1 IN (SELECT OWNER
                      FROM WWV_FLOWS
                     WHERE ID = P_FLOW_ID
                       AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID) LOOP
             L_OWNER := C1.OWNER;
         END LOOP;
 
         IF P_OWNER = L_OWNER THEN
             RETURN '#OWNER#';
             ELSE
           RETURN P_OWNER;
       END IF;
   END GET_OWNER;
 
   
   
   
   FUNCTION GET_FLOW_OWNER (
   
   
   P_FLOW_ID   IN NUMBER DEFAULT NULL)
   RETURN VARCHAR2
   IS
       L_FLOW_ID NUMBER := P_FLOW_ID;
       L_OWNER   WWV_FLOWS.OWNER%TYPE;
   BEGIN
   	  
       IF L_FLOW_ID IS NULL THEN
           L_FLOW_ID := V('FB_FLOW_ID');
       END IF;
 
       FOR C1 IN (SELECT OWNER
                  FROM WWV_FLOWS
                  WHERE ID = L_FLOW_ID
                  AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID) LOOP
           L_OWNER := C1.OWNER;
       END LOOP;
 
       RETURN L_OWNER;
   END;
 
   
   
   
   FUNCTION SHORTCUT_EXIST(
       P_FLOW_ID IN NUMBER,
       P_SHORTCUT_NAME IN VARCHAR2)
       RETURN BOOLEAN
   IS
   BEGIN
     FOR C1 IN (SELECT 1
                FROM WWV_FLOW_SHORTCUTS
                WHERE SHORTCUT_NAME = P_SHORTCUT_NAME
                AND SHORTCUT_TYPE = 'TEXT_ESCAPE_JS'
                AND FLOW_ID = P_FLOW_ID)
     LOOP
         RETURN TRUE;
     END LOOP;
     RETURN FALSE;
   END SHORTCUT_EXIST;
 
 
   
   
   
   FUNCTION SHORTCUT_NAME_EXIST(
       P_FLOW_ID IN NUMBER,
       P_SHORTCUT_NAME IN VARCHAR2)
       RETURN BOOLEAN
   IS
   BEGIN
     FOR C1 IN (SELECT 1
                FROM WWV_FLOW_SHORTCUTS
                WHERE SHORTCUT_NAME = P_SHORTCUT_NAME
                AND FLOW_ID = P_FLOW_ID)
     LOOP
         RETURN TRUE;
     END LOOP;
     RETURN FALSE;
   END SHORTCUT_NAME_EXIST;
 
   
   
   
   FUNCTION GET_SHORTCUT_NAME(
       P_FLOW_ID IN NUMBER,
       P_SHORTCUT_NAME IN VARCHAR2)
       RETURN VARCHAR2
   IS
       L_SHORTCUT  VARCHAR2(1000);
       L_CNT       NUMBER := 1;
   BEGIN
     L_SHORTCUT := P_SHORTCUT_NAME;
     IF NOT SHORTCUT_NAME_EXIST(P_FLOW_ID=>P_FLOW_ID,P_SHORTCUT_NAME=>L_SHORTCUT) THEN
         RETURN L_SHORTCUT;
     ELSE
         LOOP
             L_SHORTCUT := P_SHORTCUT_NAME||'_'||L_CNT;
             IF NOT SHORTCUT_NAME_EXIST(P_FLOW_ID=>P_FLOW_ID,P_SHORTCUT_NAME=>L_SHORTCUT) THEN
                 RETURN L_SHORTCUT;
             ELSE
                 L_CNT := L_CNT+1;
             END IF;
         END LOOP;
     END IF;
   END GET_SHORTCUT_NAME;
 
 
 
 
 
 
  FUNCTION GET_VALID_ITEM_NAME (
      P_COLUMN_NAME IN VARCHAR2,
      P_PAGE_ID     IN NUMBER DEFAULT NULL )
      RETURN VARCHAR2
  IS
      C_MAX_ITEM_NAME_LENGTH CONSTANT NUMBER := WWV_FLOW_GLOBAL.C_DBMS_ID_LENGTH;
 
      L_PREFIX      VARCHAR2(255);
      L_COLUMN_NAME VARCHAR2(255);
  BEGIN
      L_COLUMN_NAME := WWV_FLOW_BUILDER.GET_VALID_ITEM_NAME(P_COLUMN_NAME);
 
      IF P_PAGE_ID IS NOT NULL THEN
          L_PREFIX := 'P'||P_PAGE_ID||'_';
          L_COLUMN_NAME := SUBSTR(L_COLUMN_NAME, 1, C_MAX_ITEM_NAME_LENGTH-LENGTH(L_PREFIX));
      END IF;
 
      RETURN L_PREFIX || L_COLUMN_NAME;
 
  END GET_VALID_ITEM_NAME;
 
 
 
 
 
 
 FUNCTION GET_VALID_BUTTON_NAME (
    P_NAME IN VARCHAR2 )
    RETURN VARCHAR2
 IS
 BEGIN
  RETURN WWV_FLOW_BUILDER.GET_VALID_BUTTON_NAME(P_NAME);
 END GET_VALID_BUTTON_NAME;
 
 FUNCTION IS_SIMPLE_ITEM_NAME (
    P_VALUE IN VARCHAR2 )
    RETURN BOOLEAN
 IS
    C_VALID_CHARS CONSTANT VARCHAR2(255) := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890_$#';
    C_INTO        CONSTANT VARCHAR2(255) := 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'; 
 BEGIN
    IF TRANSLATE(UPPER(P_VALUE), C_VALID_CHARS, C_INTO) = RPAD('A', LENGTH(P_VALUE), 'A') THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
 END IS_SIMPLE_ITEM_NAME;
 
 
 
 
 
 FUNCTION GET_ITEM_SUBSTITUTION_VALUE (
    P_ITEM_NAME IN VARCHAR2 )
    RETURN VARCHAR2
 IS
 BEGIN
    IF IS_SIMPLE_ITEM_NAME(P_ITEM_NAME) THEN
        RETURN '&'||UPPER(P_ITEM_NAME)||'.';
    ELSE
        RETURN '&"'||UPPER(P_ITEM_NAME)||'".';
    END IF;
 END GET_ITEM_SUBSTITUTION_VALUE;
 
 
 
 
 
 
 FUNCTION GET_ITEM_BIND_VARIABLE (
    P_ITEM_NAME IN VARCHAR2 )
    RETURN VARCHAR2
 IS
 BEGIN
    IF IS_SIMPLE_ITEM_NAME(P_ITEM_NAME) THEN
        RETURN ':'||UPPER(P_ITEM_NAME);
    ELSE
        RETURN ':"'||UPPER(P_ITEM_NAME)||'"';
    END IF;
 END GET_ITEM_BIND_VARIABLE;
 
  
  
  
  FUNCTION GET_GROUP_REGION_ID (
      P_FLOW_ID       IN NUMBER,
      P_PAGE_ID       IN NUMBER,
      P_GROUP_SEQ     IN NUMBER,
      P_GROUP_NAME    IN VARCHAR2
      ) RETURN NUMBER
  IS
  BEGIN
      FOR C1 IN ( SELECT ID FROM WWV_FLOW_PAGE_PLUGS
                  WHERE FLOW_ID = P_FLOW_ID
                  AND   PAGE_ID = P_PAGE_ID
                  AND   SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                  AND   PLUG_NAME = P_GROUP_NAME
                  AND   PLUG_DISPLAY_SEQUENCE = P_GROUP_SEQ)
      LOOP
          RETURN C1.ID;
      END LOOP;
      RETURN NULL;
  END GET_GROUP_REGION_ID;
 
  FUNCTION UI_DEF_GROUPS_EXIST(
      P_TABLE_OWNER   IN VARCHAR2,
      P_TABLE_NAME    IN VARCHAR2
  )RETURN BOOLEAN
  IS
      L_COUNT NUMBER := 0;
  BEGIN
      SELECT COUNT(GROUP_ID) INTO L_COUNT
        FROM WWV_FLOW_HNT_GROUPS G,
             WWV_FLOW_HNT_TABLE_INFO T
       WHERE T.TABLE_ID    = G.TABLE_ID
         AND T.SCHEMA      = P_TABLE_OWNER
         AND T.TABLE_NAME  = P_TABLE_NAME;
 
      IF L_COUNT > 0 THEN
         RETURN TRUE;
      ELSE
         RETURN FALSE;
      END IF;
  END UI_DEF_GROUPS_EXIST;
 
  FUNCTION IR_COL_GROUP_EXISTS(
      P_FLOW_ID      IN NUMBER,
      P_WORKSHEET_ID IN NUMBER,
      P_GROUP_NAME   IN VARCHAR2
  ) RETURN BOOLEAN
  IS
  BEGIN
      FOR C1 IN (SELECT 1
                 FROM WWV_FLOW_WORKSHEET_COL_GROUPS
                 WHERE FLOW_ID = P_FLOW_ID
                 AND WORKSHEET_ID = P_WORKSHEET_ID
                 AND NAME = P_GROUP_NAME
      ) LOOP
          RETURN TRUE;
      END LOOP;
      RETURN FALSE;
  END IR_COL_GROUP_EXISTS;
 
 
 
 
 FUNCTION GET_BUTTON_TEMPLATE_ID (
     P_FLOW_ID        IN NUMBER,
     P_THEME_ID       IN NUMBER DEFAULT WWV_FLOW_THEME_GLOBALS.G_THEME_ID )
     RETURN NUMBER
 IS
     C_BUTTON_TEMPLATE VARCHAR2(10) := 'ICON';
 BEGIN
     FOR L_TEMPLATE IN ( SELECT ID
                           FROM WWV_FLOW_BUTTON_TEMPLATES
                           WHERE FLOW_ID              = P_FLOW_ID
                                AND SECURITY_GROUP_ID    = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                                AND THEME_ID             = P_THEME_ID
                                AND UPPER(TEMPLATE_NAME) = C_BUTTON_TEMPLATE      )
         LOOP
             RETURN L_TEMPLATE.ID;
         END LOOP;
         RETURN NULL;
     END GET_BUTTON_TEMPLATE_ID;
 
 
 
 
 
 
 
 
 
 
 FUNCTION ESCAPE_REPORT_LABEL (
     P_STRING IN VARCHAR2 )
     RETURN VARCHAR2
 IS
 BEGIN
     RETURN SYS.HTF.ESCAPE_SC(P_STRING);
 END ESCAPE_REPORT_LABEL;
 
 FUNCTION BUILD_LOOKUP_SQL(
     P_FLOW_ID         IN NUMBER,
     P_OWNER           IN VARCHAR2,
     P_TABLE_NAME      IN VARCHAR2,
     P_DISPLAY_COLUMN  IN OUT VARCHAR2,
     P_LOOKUPS         IN OUT T_LOOKUPS ) RETURN VARCHAR2
 IS
     L_SQL_TEMP            VARCHAR2(32767);
     L_COLUMN_CNT          PLS_INTEGER := 0;
     L_SELECT              VARCHAR2(4000);
     L_DATA_TYPE           VARCHAR2(255);
     L_SQL                 VARCHAR2(32767);
     L_COLUMNS             SYS.DBMS_SQL.DESC_TAB3;
     L_OLD_DISPLAY_COLUMN  VARCHAR2(32767) := P_DISPLAY_COLUMN;
     L_NEW_DISPLAY_COLUMN  VARCHAR2(32767);
     L_CNT                 PLS_INTEGER := 0;
     L_LOOKUP_CNT          PLS_INTEGER := 0;
     L_COL_ALIAS           VARCHAR2(4000);
 
     
     FUNCTION ENQUOTE_NAME(
         P_NAME IN VARCHAR2 )
         RETURN VARCHAR2
     IS
         C_ALPHA CONSTANT VARCHAR2( 26 ) := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
     BEGIN
         
         IF REGEXP_LIKE( P_NAME, '^[' || C_ALPHA || ']+[' || C_ALPHA || '0-9_$]*$' ) THEN
             RETURN P_NAME;
         ELSE
             RETURN '"' || P_NAME || '"';
         END IF;
     END ENQUOTE_NAME;
 BEGIN
     IF P_DISPLAY_COLUMN IS NULL THEN
         L_SQL_TEMP := 'select * from '|| ENQUOTE_NAME( P_TABLE_NAME );
     ELSE
         
         FOR L_DISPLAY_COLUMN IN (
             SELECT COLUMN_VALUE
             FROM TABLE( WWV_FLOW_STRING.SPLIT( P_DISPLAY_COLUMN, ':' ) ) )
         LOOP
             L_COLUMN_CNT := L_COLUMN_CNT + 1;
             IF L_COLUMN_CNT = 1 THEN
                 L_SQL_TEMP := 'select ';
             ELSE
                 L_SQL_TEMP := L_SQL_TEMP||','||WWV_FLOW.LF;
             END IF;
     
             L_SQL_TEMP := L_SQL_TEMP||ENQUOTE_NAME( L_DISPLAY_COLUMN.COLUMN_VALUE );
         END LOOP;
         
         IF L_SQL_TEMP IS NOT NULL THEN
             L_SQL_TEMP := L_SQL_TEMP||' from '|| ENQUOTE_NAME( P_TABLE_NAME );
         END IF;
     END IF;
 
     IF L_SQL_TEMP IS NOT NULL THEN
         L_COLUMNS := WWV_FLOW_PLUGIN_DEV.GET_COLUMNS_OF_SQL( P_APPLICATION_ID => P_FLOW_ID, P_SQL => L_SQL_TEMP );
     END IF;
 
     
     
     L_COLUMN_CNT := 0;
     FOR I IN 1..L_COLUMNS.COUNT
     LOOP
         IF L_COLUMNS(I).COL_NAME != 'ROWID' THEN
 
             L_DATA_TYPE := WWV_FLOW_PLUGIN_UTIL.GET_DATA_TYPE(
                 P_COL_TYPE      => L_COLUMNS( I ).COL_TYPE,
                 P_COL_TYPE_NAME => L_COLUMNS( I ).COL_TYPE_NAME );
     
             L_COLUMN_CNT := L_COLUMN_CNT + 1;
 
             IF L_COLUMN_CNT > 1 THEN
                 L_SELECT := L_SELECT||','||WWV_FLOW.LF;
                 L_SELECT := L_SELECT||'       ';
 
                 L_NEW_DISPLAY_COLUMN := L_NEW_DISPLAY_COLUMN||':';
             END IF;
         
             IF L_DATA_TYPE = WWV_FLOW_PLUGIN_UTIL.C_DATA_TYPE_CLOB THEN
                L_SELECT := L_SELECT||'sys.dbms_lob.substr('||ENQUOTE_NAME( L_COLUMNS(I).COL_NAME )||', 4000, 1) '||ENQUOTE_NAME( L_COLUMNS(I).COL_NAME );
             ELSIF L_DATA_TYPE = WWV_FLOW_PLUGIN_UTIL.C_DATA_TYPE_BLOB THEN
                 L_SELECT := L_SELECT||'sys.dbms_lob.getlength('||ENQUOTE_NAME( L_COLUMNS(I).COL_NAME )||') '||ENQUOTE_NAME( L_COLUMNS(I).COL_NAME );
             ELSE
                 L_SELECT := L_SELECT||ENQUOTE_NAME( L_COLUMNS(I).COL_NAME );
             END IF;
 
             L_NEW_DISPLAY_COLUMN := L_NEW_DISPLAY_COLUMN||L_COLUMNS(I).COL_NAME;
     
             FOR J IN 1..P_LOOKUPS.COUNT
             LOOP
                 IF P_LOOKUPS(J).COLUMN_NAME = L_COLUMNS(I).COL_NAME THEN
                     L_LOOKUP_CNT := L_LOOKUP_CNT + 1;
                     
                     
                     L_CNT := 0;
                     IF INSTR( P_LOOKUPS(J).LOOKUP_TABLE_DISPLAY_COL, '.', 1 ) > 0 THEN
                         FOR L_DISPLAY IN (
                             SELECT COLUMN_VALUE
                             FROM TABLE( WWV_FLOW_STRING.SPLIT( P_LOOKUPS(J).LOOKUP_TABLE_DISPLAY_COL, '.' ) ) )
                         LOOP
                             L_CNT := L_CNT + 1;
                             IF L_CNT = 1 THEN
                                 P_LOOKUPS(J).LOOKUP_TABLE_NAME := L_DISPLAY.COLUMN_VALUE;
                             ELSIF L_CNT = 2 THEN
                                 P_LOOKUPS(J).LOOKUP_TABLE_DISPLAY_COL := L_DISPLAY.COLUMN_VALUE;
                             END IF;
                         END LOOP;
                     END IF;
     
                     
                     FOR L_PK IN (
                         SELECT S.COLUMN_NAME
                         FROM WWV_FLOW_CONS_SYNC$ S
                         WHERE S.TABLE_NAME = P_LOOKUPS(J).LOOKUP_TABLE_NAME
                         AND S.OWNER = COALESCE( P_OWNER, GET_FLOW_OWNER(P_FLOW_ID) )
                         AND S.CONSTRAINT_TYPE = 'P'
                         AND S.OWNER IN (SELECT SCHEMA FROM WWV_FLOW_COMPANY_SCHEMAS WHERE SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID)
                         ORDER BY S.POSITION )
                     LOOP
                         P_LOOKUPS(J).LOOKUP_TABLE_PK := L_PK.COLUMN_NAME;
                         
                         EXIT;
                     END LOOP;
                     
                     IF  P_LOOKUPS(J).LOOKUP_TABLE_NAME IS NOT NULL AND
                         P_LOOKUPS(J).LOOKUP_TABLE_DISPLAY_COL IS NOT NULL AND
                         P_LOOKUPS(J).LOOKUP_TABLE_PK IS NOT NULL THEN
                         
                         L_COL_ALIAS := P_LOOKUPS(J).COLUMN_NAME || '_L$' || L_LOOKUP_CNT;
                         L_COL_ALIAS := SUBSTR( L_COL_ALIAS, GREATEST ( -30,  -LENGTH( L_COL_ALIAS ) ), 30 );
                         P_LOOKUPS(J).LOOKUP_COLUMN_ALIAS := L_COL_ALIAS;
             
                         L_SELECT := L_SELECT||','||WWV_FLOW.LF;
                         L_SELECT := L_SELECT||'       ';
                         L_SELECT := L_SELECT||'( select l.'||ENQUOTE_NAME( P_LOOKUPS(J).LOOKUP_TABLE_DISPLAY_COL )||
                                     ' from '||ENQUOTE_NAME( P_LOOKUPS(J).LOOKUP_TABLE_NAME )||' l'||
                                     ' where l.'||ENQUOTE_NAME( P_LOOKUPS(J).LOOKUP_TABLE_PK )||' = m.'||ENQUOTE_NAME( P_LOOKUPS(J).COLUMN_NAME )||
                                     ') '|| ENQUOTE_NAME( L_COL_ALIAS );
 
                         L_NEW_DISPLAY_COLUMN := L_NEW_DISPLAY_COLUMN||':'||L_COL_ALIAS;          
                     END IF;
                 END IF;
             END LOOP;
         END IF;
     END LOOP;
 
     P_DISPLAY_COLUMN := L_NEW_DISPLAY_COLUMN;
 
     IF L_SELECT IS NOT NULL THEN
         L_SQL := 'select '|| L_SELECT ||WWV_FLOW.LF||'from '||ENQUOTE_NAME( P_TABLE_NAME )||
                  (CASE WHEN L_LOOKUP_CNT != 0 THEN ' m' END );
     END IF;
 
     RETURN L_SQL;
 END BUILD_LOOKUP_SQL;
 
   
   
   
 
  PROCEDURE GET_QUERY_COLUMNS (
      P_OWNER        IN VARCHAR2,
      P_QUERY        IN VARCHAR2,
      P_INCLUDE_BLOB IN VARCHAR2 DEFAULT 'N',
      P_INCLUDE_TZ   IN VARCHAR2 DEFAULT 'N',
      P_COLUMNS      OUT WWV_FLOW_GLOBAL.VC_ARR2,
      P_TYPES        OUT WWV_FLOW_GLOBAL.VC_ARR2,
      P_COL_MAX_LEN  OUT WWV_FLOW_GLOBAL.VC_ARR2
  ) IS
 
       L_REPORT_CURSOR  INTEGER;
       L_DESC_TBL       SYS.DBMS_SQL.DESC_TAB2;
       L_COL_CNT        NUMBER;
       L_COLUMN_NAMES   WWV_FLOW_GLOBAL.VC_ARR2;
       L_COLUMN_TYPES   WWV_FLOW_GLOBAL.VC_ARR2;
       L_COL_MAX_LEN    WWV_FLOW_GLOBAL.VC_ARR2;
 
   BEGIN
       
       L_REPORT_CURSOR := SYS.DBMS_SQL.OPEN_CURSOR;
 
       
       WWV_FLOW_SECURITY.G_CONTEXT := 'WWV_FLOW_WIZARD_API';
 
       WWV_FLOW_DYNAMIC_EXEC.PARSE_SQL_STATEMENT (
           P_CURSOR           => L_REPORT_CURSOR,
           P_SQL_STATEMENT    => P_QUERY,
           P_PARSE_AS_SCHEMA  => P_OWNER,
           P_DO_SUBSTITUTIONS => FALSE );
 
       
       WWV_FLOW_SECURITY.G_CONTEXT := 'NULL';
 
       
 
       SYS.DBMS_SQL.DESCRIBE_COLUMNS2(L_REPORT_CURSOR, L_COL_CNT, L_DESC_TBL );
 
       FOR I IN 1 .. L_COL_CNT LOOP
           L_COLUMN_NAMES(I) := L_DESC_TBL(I).COL_NAME;
           IF L_DESC_TBL(I).COL_TYPE = 1 THEN
               L_COLUMN_TYPES(I) := 'VARCHAR2';
               L_COL_MAX_LEN(I)  := L_DESC_TBL(I).COL_MAX_LEN;
           ELSIF L_DESC_TBL(I).COL_TYPE = 2 THEN
               L_COLUMN_TYPES(I) := 'NUMBER';
               L_COL_MAX_LEN(I)  := L_DESC_TBL(I).COL_MAX_LEN;
           ELSIF L_DESC_TBL(I).COL_TYPE = 12 THEN
               L_COLUMN_TYPES(I) := 'DATE';
               L_COL_MAX_LEN(I)  := WWV_FLOW_GLOBAL.C_DBMS_ID_LENGTH;
           ELSIF L_DESC_TBL(I).COL_TYPE IN (180,181,231) THEN
               L_COL_MAX_LEN(I)  := WWV_FLOW_GLOBAL.C_DBMS_ID_LENGTH;
               L_COLUMN_TYPES(I) := 'TIMESTAMP';
               IF NVL(P_INCLUDE_TZ,'N') = 'Y' AND L_DESC_TBL(I).COL_TYPE = 231 THEN
                   L_COLUMN_TYPES(I) := 'TIMESTAMP_LTZ';
               END IF;
           ELSIF L_DESC_TBL(I).COL_TYPE = 112 THEN
               L_COLUMN_TYPES(I) := 'CLOB';
               L_COL_MAX_LEN(I)  := L_DESC_TBL(I).COL_MAX_LEN;
           ELSIF L_DESC_TBL(I).COL_TYPE = 113 THEN
               IF P_INCLUDE_BLOB = 'Y' THEN
                   L_COLUMN_TYPES(I) := 'BLOB';
               ELSE
                   L_COLUMN_TYPES(I) := 'OTHER';
               END IF;
               L_COL_MAX_LEN(I)  := L_DESC_TBL(I).COL_MAX_LEN;
           ELSIF L_DESC_TBL(I).COL_TYPE = 96 THEN
               L_COLUMN_TYPES(I) := 'CHAR';
               L_COL_MAX_LEN(I)  := L_DESC_TBL(I).COL_MAX_LEN;
           ELSE
               L_COLUMN_TYPES(I) := 'OTHER';
               L_COL_MAX_LEN(I)  := L_DESC_TBL(I).COL_MAX_LEN;
           END IF;
       END LOOP;
 
      P_COLUMNS     := L_COLUMN_NAMES;
      P_TYPES       := L_COLUMN_TYPES;
      P_COL_MAX_LEN := L_COL_MAX_LEN;
 
      SYS.DBMS_SQL.CLOSE_CURSOR(L_REPORT_CURSOR);
   END;
 
 
     PROCEDURE GET_VARCHAR_QUERY_COLUMNS (
          P_OWNER         IN VARCHAR2,
          P_QUERY          IN VARCHAR2,
          P_COLUMNS     OUT WWV_FLOW_GLOBAL.VC_ARR2
      ) IS
 
           L_REPORT_CURSOR  INTEGER;
           L_DESC_TBL       SYS.DBMS_SQL.DESC_TAB2;
           L_COL_CNT        NUMBER;
           L_COLUMN_NAMES   WWV_FLOW_GLOBAL.VC_ARR2;
           L_COUNT INTEGER := 1;
 
       BEGIN
 
           
           L_REPORT_CURSOR := SYS.DBMS_SQL.OPEN_CURSOR;
 
           WWV_FLOW_DYNAMIC_EXEC.PARSE_SQL_STATEMENT (
               P_CURSOR           => L_REPORT_CURSOR,
               P_SQL_STATEMENT    => P_QUERY,
               P_PARSE_AS_SCHEMA  => P_OWNER,
               P_DO_SUBSTITUTIONS => FALSE );
 
           
 
           SYS.DBMS_SQL.DESCRIBE_COLUMNS2(L_REPORT_CURSOR, L_COL_CNT, L_DESC_TBL );
 
           FOR I IN 1 .. L_COL_CNT LOOP
               IF  L_DESC_TBL(I).COL_TYPE = 1 THEN
                   L_COLUMN_NAMES(L_COUNT) := L_DESC_TBL(I).COL_NAME;
                   L_COUNT := L_COUNT +1;
               END IF;
           END LOOP;
          P_COLUMNS     := L_COLUMN_NAMES;
     END;
 
 
 
     FUNCTION CREATE_STATIC_LOV (
         P_FLOW_ID        IN NUMBER,
         P_NAME           IN VARCHAR2,
         P_DISPLAY_VALUE1 IN VARCHAR2,
         P_RETURN_VALUE1  IN VARCHAR2,
         P_DISPLAY_VALUE2 IN VARCHAR2 DEFAULT NULL,
         P_RETURN_VALUE2  IN VARCHAR2 DEFAULT NULL,
         P_DISPLAY_VALUE3 IN VARCHAR2 DEFAULT NULL,
         P_RETURN_VALUE3  IN VARCHAR2 DEFAULT NULL )
         RETURN NUMBER
     IS
         L_ID NUMBER;
     BEGIN
         
         BEGIN
             SELECT ID
               INTO L_ID
               FROM WWV_FLOW_LISTS_OF_VALUES$
              WHERE FLOW_ID           = P_FLOW_ID
                AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                AND LOV_NAME          = P_NAME;
 
             RETURN L_ID;
 
         EXCEPTION WHEN NO_DATA_FOUND THEN
             L_ID := WWV_FLOW_ID.NEXT_VAL;
         END;
 
         WWV_FLOW_API.CREATE_LIST_OF_VALUES (
             P_ID        => L_ID,
             P_FLOW_ID   => P_FLOW_ID,
             P_LOV_NAME  => P_NAME,
             P_LOV_QUERY => '.'||TO_CHAR(L_ID)||'.' );
 
         WWV_FLOW_API.CREATE_STATIC_LOV_DATA (
             P_LOV_ID            => L_ID,
             P_LOV_DISP_SEQUENCE => 10,
             P_LOV_DISP_VALUE    => P_DISPLAY_VALUE1,
             P_LOV_RETURN_VALUE  => P_RETURN_VALUE1 );
 
         IF P_DISPLAY_VALUE2 IS NOT NULL THEN
             WWV_FLOW_API.CREATE_STATIC_LOV_DATA (
                 P_LOV_ID            => L_ID,
                 P_LOV_DISP_SEQUENCE => 20,
                 P_LOV_DISP_VALUE    => P_DISPLAY_VALUE2,
                 P_LOV_RETURN_VALUE  => P_RETURN_VALUE2 );
         END IF;
 
         IF P_DISPLAY_VALUE3 IS NOT NULL THEN
             WWV_FLOW_API.CREATE_STATIC_LOV_DATA (
                 P_LOV_ID            => L_ID,
                 P_LOV_DISP_SEQUENCE => 30,
                 P_LOV_DISP_VALUE    => P_DISPLAY_VALUE3,
                 P_LOV_RETURN_VALUE  => P_RETURN_VALUE3 );
         END IF;
 
         RETURN L_ID;
 
     END CREATE_STATIC_LOV;
 
 
     PROCEDURE CREATE_STATIC_LIST (
         P_ID                         OUT NUMBER,
         P_FLOW_ID                 IN     NUMBER,
         P_NAME                    IN     VARCHAR2 )
     IS
     BEGIN
         P_ID := WWV_FLOW_ID.NEXT_VAL;
         WWV_FLOW_API.CREATE_LIST (
             P_ID                      => P_ID,
             P_FLOW_ID                 => P_FLOW_ID,
             P_NAME                    => P_NAME,
             P_LIST_TYPE               => 'STATIC',
             P_LIST_STATUS             => 'PUBLIC',
             P_LIST_DISPLAYED          => 'BY_DEFAULT' );
     END CREATE_STATIC_LIST;
 
 
     PROCEDURE CREATE_LINK_LIST_ITEM (
         P_LIST_ID     IN NUMBER,
         P_SEQ         IN NUMBER,
         P_LINK_TEXT   IN VARCHAR2,
         P_TARGET_PAGE IN VARCHAR2 )
     IS
     BEGIN
         WWV_FLOW_API.CREATE_LIST_ITEM (
             P_LIST_ID                    => P_LIST_ID,
             P_LIST_ITEM_TYPE             => 'LINK',
             P_LIST_ITEM_STATUS           => 'PUBLIC',
             P_ITEM_DISPLAYED             => 'BY_DEFAULT',
             P_LIST_ITEM_DISPLAY_SEQUENCE => P_SEQ,
             P_LIST_ITEM_LINK_TEXT        => P_LINK_TEXT,
             P_LIST_ITEM_LINK_TARGET      => 'f?p=&APP_ID.:'||P_TARGET_PAGE||':&SESSION.::&DEBUG.',
             P_LIST_COUNTCLICKS_Y_N       => 'N',
             P_LIST_ITEM_CURRENT_TYPE     => 'TARGET_PAGE' );
     END CREATE_LINK_LIST_ITEM;
 
 
 
   
   
   
   PROCEDURE UPDATE_COLUMN_DISPLAY_DEFAULTS (
       P_REGION_ID  NUMBER,
                            P_OWNER      VARCHAR2,
                            P_TABLE_NAME VARCHAR2
   ) IS
 
                L_REPORT_COLUMNS WWV_FLOW_GLOBAL.VC_ARR2 := EMPTY_VC_ARR;
 
   BEGIN
              IF WWV_FLOW_HINT.G_USE_UI_DEFAULTS THEN
       FOR C1 IN (
           SELECT T.TABLE_NAME, C.COLUMN_NAME, C.DISPLAY_SEQ_REPORT
           FROM   WWV_FLOW_HNT_TABLE_INFO T, WWV_FLOW_HNT_COLUMN_INFO C, WWV_FLOW_REGION_REPORT_COLUMN R
           WHERE  C.TABLE_ID    = T.TABLE_ID
           AND    T.TABLE_NAME  = R.REF_TABLE_NAME
           AND    C.COLUMN_NAME = R.REF_COLUMN_NAME
           AND    T.SCHEMA      = P_OWNER
           AND    R.REGION_ID   = P_REGION_ID
           ORDER BY C.DISPLAY_SEQ_REPORT ASC
       ) LOOP
           L_REPORT_COLUMNS(L_REPORT_COLUMNS.COUNT+1) :=    C1.COLUMN_NAME;
       END LOOP;
 
                            FOR I IN 1..L_REPORT_COLUMNS.COUNT LOOP
                                UPDATE WWV_FLOW_REGION_REPORT_COLUMN
                                            SET    COLUMN_DISPLAY_SEQUENCE = I
                                            WHERE  REGION_ID       = P_REGION_ID
                                            AND    REF_SCHEMA      = P_OWNER
                                            AND    REF_TABLE_NAME  = P_TABLE_NAME
                                            AND    REF_COLUMN_NAME = L_REPORT_COLUMNS(I);
                            END LOOP;
                    END IF;
   END;
 
   
   
   
   PROCEDURE UPDATE_JS_CODE_W_SHORTCUT (
       P_FLOW_ID             IN NUMBER,
       P_PAGE_ID             IN NUMBER,
       P_SHORTCUT_NAME       IN VARCHAR2,
       P_ADD_JAVASCRIPT_CODE IN VARCHAR2 )
   IS
       L_JAVASCRIPT_CODE VARCHAR2(32767);
   BEGIN
       FOR C1 IN (SELECT JAVASCRIPT_CODE
                  FROM WWV_FLOW_STEPS
                  WHERE ID = P_PAGE_ID
                  AND FLOW_ID = P_FLOW_ID)
       LOOP
           L_JAVASCRIPT_CODE := WWV_FLOW_UTILITIES.CLOB_TO_VARCHAR2(C1.JAVASCRIPT_CODE);
       END LOOP;
 
       IF L_JAVASCRIPT_CODE IS NULL THEN
           L_JAVASCRIPT_CODE := P_ADD_JAVASCRIPT_CODE;
       ELSE
           IF INSTR(L_JAVASCRIPT_CODE,P_SHORTCUT_NAME) = 0 THEN
             L_JAVASCRIPT_CODE := L_JAVASCRIPT_CODE||WWV_FLOW.LF||P_ADD_JAVASCRIPT_CODE;
           END IF;
       END IF;
 
       UPDATE WWV_FLOW_STEPS
       SET JAVASCRIPT_CODE = L_JAVASCRIPT_CODE
       WHERE ID = P_PAGE_ID
       AND FLOW_ID = P_FLOW_ID
       AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
   END UPDATE_JS_CODE_W_SHORTCUT;
   
   
   
   PROCEDURE CREATE_TAB (
      P_FLOW_ID       IN NUMBER,
      P_PAGE_ID       IN NUMBER,
      P_TAB_SET       IN VARCHAR2,
      P_TAB_NAME      IN VARCHAR2 DEFAULT NULL,
      P_TAB_TEXT      IN VARCHAR2 DEFAULT NULL,
      P_TAB_ALSO_CURRENT_FOR_PAGES IN VARCHAR2 DEFAULT NULL)
   IS
      L_PARENT_TABSET               VARCHAR2(255);
      L_TAB_SEQUENCE                NUMBER := 0;
      L_TAB_ALSO_CURRENT_FOR_PAGES  VARCHAR2(4000);
   BEGIN
      
      
      
      
      IF P_TAB_SET IS NOT NULL AND P_TAB_NAME IS NOT NULL THEN
         FOR C1 IN (SELECT TAB_ALSO_CURRENT_FOR_PAGES
                     FROM  WWV_FLOW_TABS
                     WHERE FLOW_ID = P_FLOW_ID
                       AND TAB_SET = P_TAB_SET
                       AND TAB_NAME = P_TAB_NAME)
         LOOP
            L_TAB_ALSO_CURRENT_FOR_PAGES := C1.TAB_ALSO_CURRENT_FOR_PAGES;
         END LOOP;
 
         IF L_TAB_ALSO_CURRENT_FOR_PAGES IS NOT NULL THEN
            L_TAB_ALSO_CURRENT_FOR_PAGES := L_TAB_ALSO_CURRENT_FOR_PAGES||',';
         END IF;
         L_TAB_ALSO_CURRENT_FOR_PAGES := L_TAB_ALSO_CURRENT_FOR_PAGES||P_PAGE_ID;
 
         UPDATE WWV_FLOW_TABS
         SET    TAB_ALSO_CURRENT_FOR_PAGES =  L_TAB_ALSO_CURRENT_FOR_PAGES
         WHERE  FLOW_ID = P_FLOW_ID AND
                TAB_SET = P_TAB_SET AND
                TAB_NAME = P_TAB_NAME;
      END IF;
 
      
      
      
      IF P_TAB_SET IS NOT NULL AND P_TAB_TEXT IS NOT NULL THEN
         FOR C1 IN (SELECT TAB_PARENT_TABSET
                    FROM WWV_FLOW_TABS
                    WHERE TAB_SET = P_TAB_SET AND
                          FLOW_ID = P_FLOW_ID AND
                          SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID) LOOP
            L_PARENT_TABSET := C1.TAB_PARENT_TABSET;
            EXIT;
         END LOOP;
 
         FOR C2 IN (SELECT MAX(TAB_SEQUENCE) TAB_SEQUENCE
                    FROM WWV_FLOW_TABS
                    WHERE TAB_SET = P_TAB_SET AND
                          FLOW_ID = P_FLOW_ID AND
                          SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID) LOOP
             L_TAB_SEQUENCE := C2.TAB_SEQUENCE;
         END LOOP;
 
         
         
         
         IF NOT TAB_EXISTS (P_FLOW_ID=>P_FLOW_ID,P_TAB_SET=>P_TAB_SET,P_TAB_TEXT=>P_TAB_TEXT) THEN
             WWV_FLOW_API.CREATE_TAB (
              P_FLOW_ID                    => P_FLOW_ID,
              P_TAB_SET                    => P_TAB_SET,
              P_TAB_SEQUENCE               => L_TAB_SEQUENCE + 10,
              P_TAB_NAME                   => P_TAB_TEXT,
              P_TAB_IMAGE                  => NULL,
              P_TAB_NON_CURRENT_IMAGE      => NULL,
              P_TAB_IMAGE_ATTRIBUTES       => NULL,
              P_TAB_TEXT                   => P_TAB_TEXT,
              P_TAB_STEP                   => P_PAGE_ID,
              P_TAB_ALSO_CURRENT_FOR_PAGES => P_TAB_ALSO_CURRENT_FOR_PAGES,
              P_TAB_PARENT_TABSET          => L_PARENT_TABSET,
              P_TAB_PLSQL_CONDITION        => NULL,
              P_TAB_DISP_COND_TEXT         => NULL,
              P_DISPLAY_CONDITION_TYPE     => NULL,
              P_REQUIRED_PATCH             => NULL,
              P_TAB_COMMENT                => NULL);
         END IF;
      END IF;
   END;
 
 
 
 
 PROCEDURE CREATE_NAVIGATION_LIST_ITEM (
     P_FLOW_ID                  IN NUMBER,
     P_PAGE_ID                  IN NUMBER,
     P_PAGE_NAME                IN VARCHAR2,
     P_NAV_LIST_ID              IN NUMBER,
     P_NAV_LIST_ITEM_ID         IN NUMBER DEFAULT NULL,
     P_NAV_LIST_ITEM_NAME       IN VARCHAR2 DEFAULT NULL,
     P_NAV_LIST_PARENT_ITEM_ID  IN NUMBER DEFAULT NULL,
     P_NAV_LIST_CHILD_ITEM_NAME IN VARCHAR2 DEFAULT NULL,
     P_NAV_LIST_ITEM_ICON       IN VARCHAR2 DEFAULT NULL
 ) IS
 
     L_LIST_ITEM_DISPLAY_SEQUENCE NUMBER;
     L_NAV_LIST_ROOT_ITEM_ID      NUMBER;
     L_NAV_LIST_ITEM_ID           NUMBER;
 
 BEGIN
 
     IF P_NAV_LIST_PARENT_ITEM_ID IS NOT NULL THEN
         FOR C1 IN (
             SELECT CONNECT_BY_ROOT ID ROOT_ID
               FROM WWV_FLOW_LIST_ITEMS
              WHERE FLOW_ID = P_FLOW_ID
                AND LIST_ID = P_NAV_LIST_ID
                AND ID = P_NAV_LIST_PARENT_ITEM_ID
              START WITH PARENT_LIST_ITEM_ID IS NULL
            CONNECT BY PRIOR ID = PARENT_LIST_ITEM_ID
         ) LOOP
             L_NAV_LIST_ROOT_ITEM_ID := C1.ROOT_ID;
         END LOOP;
     ELSE
         IF P_NAV_LIST_ITEM_NAME IS NOT NULL THEN
             FOR C2 IN (
                 SELECT LIST_ITEM_DISPLAY_SEQUENCE, ID
                   FROM WWV_FLOW_LIST_ITEMS
                  WHERE FLOW_ID = P_FLOW_ID
                    AND LIST_ID = P_NAV_LIST_ID
                    AND LIST_ITEM_LINK_TEXT = P_NAV_LIST_ITEM_NAME
                  ORDER BY LIST_ITEM_DISPLAY_SEQUENCE DESC
             ) LOOP
                 L_NAV_LIST_ROOT_ITEM_ID := C2.ID;
                 EXIT;
             END LOOP;
         ELSE
             L_NAV_LIST_ROOT_ITEM_ID := NULL;
         END IF;
     END IF;
 
     
     FOR C2 IN (
         SELECT MAX(LIST_ITEM_DISPLAY_SEQUENCE)+10 SEQ
         FROM WWV_FLOW_LIST_ITEMS
         WHERE FLOW_ID = P_FLOW_ID
         AND LIST_ID = P_NAV_LIST_ID
     ) LOOP
         L_LIST_ITEM_DISPLAY_SEQUENCE := C2.SEQ;
     END LOOP;
 
     IF P_NAV_LIST_CHILD_ITEM_NAME IS NOT NULL THEN
         
         L_NAV_LIST_ITEM_ID := WWV_FLOW_ID.NEXT_VAL;
 
         WWV_FLOW_API.CREATE_LIST_ITEM (
             P_ID                          => L_NAV_LIST_ITEM_ID,
             P_LIST_ID                     => P_NAV_LIST_ID,
             P_LIST_ITEM_TYPE              => 'LINK',
             P_LIST_ITEM_STATUS            => 'PUBLIC',
             P_ITEM_DISPLAYED              => 'BY_DEFAULT',
             P_LIST_ITEM_DISPLAY_SEQUENCE  => L_LIST_ITEM_DISPLAY_SEQUENCE,
             P_LIST_ITEM_LINK_TEXT         => P_NAV_LIST_CHILD_ITEM_NAME,
             P_LIST_ITEM_LINK_TARGET       => 'f?p=&APP_ID.:'||P_PAGE_ID||':&SESSION.::&DEBUG.',
             P_LIST_ITEM_ICON              => P_NAV_LIST_ITEM_ICON,
             P_LIST_COUNTCLICKS_Y_N        => 'N',
             P_LIST_ITEM_CURRENT_TYPE      => 'COLON_DELIMITED_PAGE_LIST',
             P_LIST_ITEM_CURRENT_FOR_PAGES => P_PAGE_ID,
             P_PARENT_LIST_ITEM_ID         => P_NAV_LIST_PARENT_ITEM_ID
         );
 
     END IF;
 
     
     FOR C3 IN (
         SELECT LIST_ITEM_CURRENT_TYPE, LIST_ITEM_CURRENT_FOR_PAGES
         FROM WWV_FLOW_LIST_ITEMS
         WHERE FLOW_ID = P_FLOW_ID
         AND LIST_ID = P_NAV_LIST_ID
         AND ID = L_NAV_LIST_ROOT_ITEM_ID
     ) LOOP
 
         IF C3.LIST_ITEM_CURRENT_TYPE = 'COLON_DELIMITED_PAGE_LIST' THEN
 
             UPDATE WWV_FLOW_LIST_ITEMS
             SET LIST_ITEM_CURRENT_FOR_PAGES = C3.LIST_ITEM_CURRENT_FOR_PAGES || ',' || P_PAGE_ID
             WHERE FLOW_ID = P_FLOW_ID
             AND LIST_ID = P_NAV_LIST_ID
             AND ID = L_NAV_LIST_ROOT_ITEM_ID;
 
         END IF;
 
     END LOOP;
 END;
 
 
 
 
 PROCEDURE CREATE_NAMED_LOV (
    P_FLOW_ID      IN NUMBER,
    P_PAGE_ID      IN NUMBER,
    P_TABLE_OWNER  IN VARCHAR2 DEFAULT NULL,
    P_TABLE_NAME   IN VARCHAR2 DEFAULT NULL,
    P_COLUMN_NAME  IN VARCHAR2 DEFAULT NULL,
    P_COLUMN_ID    IN NUMBER   DEFAULT NULL,
    P_LOV_ID       IN NUMBER   DEFAULT NULL,
    P_LOV_NAME     IN VARCHAR2 DEFAULT NULL,
    P_LOV_TYPE     IN VARCHAR2 DEFAULT NULL,
    P_LOV_QUERY    IN VARCHAR2 DEFAULT NULL
    )
 IS
 BEGIN
    IF P_LOV_TYPE = 'S' THEN
        WWV_FLOW_API.CREATE_LIST_OF_VALUES (
            P_ID       => P_LOV_ID,
            P_FLOW_ID  => P_FLOW_ID,
            P_LOV_NAME => P_LOV_NAME,
            P_LOV_QUERY=> '.'||TO_CHAR(P_LOV_ID)||'.');
 
        FOR C1 IN (SELECT LOV_DISP_SEQUENCE, LOV_DISP_VALUE, LOV_RETURN_VALUE
                   FROM WWV_FLOW_HNT_LOV_DATA
                   WHERE COLUMN_ID = P_COLUMN_ID
                   ORDER BY LOV_DISP_SEQUENCE)
        LOOP
            WWV_FLOW_API.CREATE_STATIC_LOV_DATA (
                P_LOV_ID            => P_LOV_ID,
                P_LOV_DISP_SEQUENCE => C1.LOV_DISP_SEQUENCE,
                P_LOV_DISP_VALUE    => C1.LOV_DISP_VALUE,
                P_LOV_RETURN_VALUE  => C1.LOV_RETURN_VALUE);
        END LOOP;
    ELSIF P_LOV_TYPE = 'Q' THEN
        WWV_FLOW_API.CREATE_LIST_OF_VALUES (
            P_ID       => P_LOV_ID,
            P_FLOW_ID  => P_FLOW_ID,
            P_LOV_NAME => P_LOV_NAME,
            P_LOV_QUERY=> P_LOV_QUERY);
    END IF;
 END CREATE_NAMED_LOV;
 
 
 
 
 
 
 
 PROCEDURE CREATE_UPDATEABLE_REPORT (
   P_FLOW_ID                  IN NUMBER,
   P_PAGE_ID                  IN NUMBER,
   P_PAGE_NAME                IN VARCHAR2,
   P_GROUP_NAME               IN VARCHAR2 DEFAULT NULL,
   P_PAGE_MODE                IN VARCHAR2,
   P_USER_INTERFACE_ID        IN NUMBER,
   P_USE_UI_DEFAULT           IN VARCHAR2 DEFAULT 'Y',
   
   P_TABSET                   IN VARCHAR2 DEFAULT NULL,
   P_TAB_NAME                 IN VARCHAR2 DEFAULT NULL, 
   P_TAB_TEXT                 IN VARCHAR2 DEFAULT NULL,
   
   P_NAV_LIST_ID              IN NUMBER   DEFAULT NULL,
   P_NAV_LIST_ITEM_ID         IN NUMBER   DEFAULT NULL,
   P_NAV_LIST_ITEM_NAME       IN VARCHAR2 DEFAULT NULL,
   P_NAV_LIST_PARENT_ITEM_ID  IN NUMBER   DEFAULT NULL,
   P_NAV_LIST_CHILD_ITEM_NAME IN VARCHAR2 DEFAULT NULL,
   
   P_SELECT_COLUMNS           IN VARCHAR2 DEFAULT NULL,
   P_UPDATABLE_COLUMNS        IN VARCHAR2 DEFAULT NULL,
   P_TABLE_PK1                IN VARCHAR2 DEFAULT NULL,
   P_TABLE_PK1_SRC_TYPE       IN VARCHAR2 DEFAULT NULL,
   P_TABLE_PK1_SRC            IN VARCHAR2 DEFAULT NULL,
   P_TABLE_PK2                IN VARCHAR2 DEFAULT NULL,
   P_TABLE_PK2_SRC_TYPE       IN VARCHAR2 DEFAULT NULL,
   P_TABLE_PK2_SRC            IN VARCHAR2 DEFAULT NULL,
   P_TABLE_PK3                IN VARCHAR2 DEFAULT NULL,
   P_TABLE_PK3_SRC_TYPE       IN VARCHAR2 DEFAULT NULL,
   P_TABLE_PK3_SRC            IN VARCHAR2 DEFAULT NULL,
   P_TABLE_FK                 IN VARCHAR2 DEFAULT NULL,
   P_TABLE_FK_SRC_TYPE        IN VARCHAR2 DEFAULT NULL,
   P_TABLE_FK_SRC             IN VARCHAR2 DEFAULT NULL,
   P_IMPLEMENT_TYPE           IN NUMBER   DEFAULT NULL,
   P_SECURITY_GROUP_ID        IN NUMBER   DEFAULT NULL,
   
   P_QUERY                    IN VARCHAR2,
   P_REGION_TITLE             IN VARCHAR2,
   P_REGION_TEMPLATE          IN NUMBER,
   P_REPORT_TEMPLATE          IN NUMBER,
   P_CANCEL_BRANCH            IN NUMBER,
   P_SUBMIT_BRANCH            IN NUMBER,
   P_PROCESS                  IN VARCHAR2,
   P_CANCEL_BUTTON_NAME       IN VARCHAR2 DEFAULT NULL,
   P_DELETE_BUTTON_NAME       IN VARCHAR2 DEFAULT NULL,
   P_ADD_BUTTON_NAME          IN VARCHAR2 DEFAULT NULL,
   P_SUBMIT_BUTTON_NAME       IN VARCHAR2 DEFAULT NULL,
   P_IS_MASTER_DETAIL         IN BOOLEAN DEFAULT FALSE)
 IS
   C                           NUMBER;
   L_SUBMIT_BRANCH             NUMBER;
   L_LOV_ID                    NUMBER;
   L_COLUMN_ID                 NUMBER;
   CC                          NUMBER;
   L_GROUP_ID                  NUMBER := NULL;
   L_PROCESS_ID                NUMBER := NULL;
   L_AJAX_ENABLED              VARCHAR2(1) := 'N';
   U                           VARCHAR2(255);
   L_VALIDATION_BUTTON         VARCHAR2(255);
   L_VALIDATION_CONDITION      VARCHAR2(255);
   L_VALIDATION_CONDITION_TYPE VARCHAR2(255);
   L_REGION_PRESET_TEMPLATE_OPT VARCHAR2(255);
   L_REPORT_PRESET_TEMPLATE_OPT VARCHAR2(255);
   L_BUTTON_TEMPLATE_OPTIONS   VARCHAR2(255);
   L_SHORTCUT_NAME             VARCHAR2(1000);
   L_SHORTCUT                  VARCHAR2(1000);
   L_BUTTON_IMAGE              VARCHAR2(4000);
   L_HEADINGS                  VARCHAR2(4000);
   L_DISPLAY_AS                VARCHAR2(32767);
   L_LOV_NAME                  VARCHAR2(32767);
   L_LOV_QUERY                 VARCHAR2(32767);
   L_DESCTBL                   SYS.DBMS_SQL.DESC_TAB;
 BEGIN
   
   
   
   WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
       P_FLOW_ID           => P_FLOW_ID,
       P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
   
   
   
   
   
   
   IF P_USE_UI_DEFAULT = 'N' THEN
       WWV_FLOW_HINT.G_USE_UI_DEFAULTS := FALSE;
   END IF;
   
   
   
   IF PAGE_EXISTS (P_FLOW_ID,P_PAGE_ID) THEN
        IF UPDATEABLE_QUERY_EXISTS (P_FLOW_ID,P_PAGE_ID) THEN
           WWV_FLOW.G_NOTIFICATION := WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.UPDATEABLE_QUERY_EXISTS');
           RETURN;
        END IF;
        
        UPDATE WWV_FLOW_STEPS
           SET RELOAD_ON_SUBMIT = 'A'
         WHERE ID      = P_PAGE_ID
           AND FLOW_ID = P_FLOW_ID
           AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
   ELSE
 
        
        
        
        IF P_GROUP_NAME IS NOT NULL THEN
            L_GROUP_ID := WWV_FLOW_UTILITIES.GET_PAGE_GROUP_ID(P_GROUP_NAME => P_GROUP_NAME, P_APPLICATION_ID => P_FLOW_ID);
            
            IF L_GROUP_ID IS NULL THEN
                L_GROUP_ID := WWV_FLOW_ID.NEXT_VAL;
                WWV_FLOW_API.CREATE_PAGE_GROUP(P_ID => L_GROUP_ID, P_FLOW_ID => P_FLOW_ID, P_GROUP_NAME => P_GROUP_NAME);
            END IF;
        END IF;
 
        WWV_FLOW_API.CREATE_PAGE (
            P_ID                 => P_PAGE_ID,
            P_FLOW_ID            => P_FLOW_ID,
            P_TAB_SET            => REPLACE(P_TABSET,'%null%',NULL),
            P_NAME               => P_PAGE_NAME,
            P_PAGE_MODE          => P_PAGE_MODE,
            P_GROUP_ID           => L_GROUP_ID,
            P_USER_INTERFACE_ID  => P_USER_INTERFACE_ID,
            P_RELOAD_ON_SUBMIT   => 'A',
            P_FIRST_ITEM         => 'NO_FIRST_ITEM',
            P_STEP_TITLE         => P_PAGE_NAME,
            P_STEP_SUB_TITLE     => NULL,
            P_STEP_TEMPLATE      => NULL,
            P_PAGE_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_PAGE_TEMPLATE, 'PAGE'),
            P_WELCOME_TEXT       => NULL,
            P_BOX_WELCOME_TEXT   => NULL,
            P_BOX_FOOTER_TEXT    => NULL,
            P_FOOTER_TEXT        => NULL,
            P_PAGE_COMMENT       => NULL);
 
        IF P_NAV_LIST_ID IS NOT NULL THEN
            
            CREATE_NAVIGATION_LIST_ITEM (
                P_FLOW_ID                  => P_FLOW_ID,
                P_PAGE_ID                  => P_PAGE_ID,
                P_PAGE_NAME                => P_PAGE_NAME,
                P_NAV_LIST_ID              => P_NAV_LIST_ID,
                P_NAV_LIST_ITEM_ID         => P_NAV_LIST_ITEM_ID,
                P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_ITEM_NAME,
                P_NAV_LIST_PARENT_ITEM_ID  => P_NAV_LIST_PARENT_ITEM_ID,
                P_NAV_LIST_CHILD_ITEM_NAME => P_NAV_LIST_CHILD_ITEM_NAME);
        ELSE
            
            IF REPLACE(P_TABSET,'%null%',NULL) IS NOT NULL THEN
                CREATE_TAB (
                    P_FLOW_ID  => P_FLOW_ID,
                    P_PAGE_ID  => P_PAGE_ID,
                    P_TAB_SET  => P_TABSET,
                    P_TAB_NAME => P_TAB_NAME,
                    P_TAB_TEXT => P_TAB_TEXT);
            END IF;
        END IF;
   END IF;
 
   L_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
 
   L_REGION_PRESET_TEMPLATE_OPT :=  GET_PRESET_TEMPLATE_OPTIONS (
       P_TEMPLATE_ID    => P_REGION_TEMPLATE,
       P_TEMPLATE_TYPE  => 'REGION'
   );
 
   L_REPORT_PRESET_TEMPLATE_OPT :=  GET_PRESET_TEMPLATE_OPTIONS (
       P_TEMPLATE_ID    => P_REPORT_TEMPLATE,
       P_TEMPLATE_TYPE  => 'REPORT'
   );
 
   IF P_IMPLEMENT_TYPE = 1 THEN
      
      
      
 
      WWV_FLOW_API.CREATE_PAGE_PLUG (
         P_ID                            => L_REGION_ID,
         P_FLOW_ID                       => P_FLOW_ID,
         P_PAGE_ID                       => P_PAGE_ID,
         P_PLUG_NAME                     => P_REGION_TITLE,
         P_PLUG_TEMPLATE                 => P_REGION_TEMPLATE,
         P_REGION_TEMPLATE_OPTIONS       => L_REGION_PRESET_TEMPLATE_OPT,
         P_PLUG_DISPLAY_SEQUENCE         => '15',
         P_PLUG_DISPLAY_POINT            => 'BODY',
         P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
         P_PLUG_SOURCE                   => P_QUERY,
         P_PLUG_SOURCE_TYPE              => WWV_FLOW_REGION_NATIVE.C_TABFORM,
         P_AJAX_ENABLED                  => L_AJAX_ENABLED,                      
         P_PLUG_QUERY_ROW_TEMPLATE       => P_REPORT_TEMPLATE,
         P_COMPONENT_TEMPLATE_OPTIONS    => L_REPORT_PRESET_TEMPLATE_OPT,
         P_PLUG_QUERY_HEADINGS           => L_HEADINGS,
         P_PLUG_QUERY_HEADINGS_TYPE      => 'COLON_DELMITED_LIST',
         P_PLUG_QUERY_NUM_ROWS           => '10',
         P_PLUG_QUERY_NUM_ROWS_TYPE      => 'ROW_RANGES_IN_SELECT_LIST',
         P_PLUG_QUERY_ROW_COUNT_MAX      => WWV_FLOW_API.C_DEFAULT_QUERY_ROW_COUNT_MAX,
         P_PLUG_QUERY_FORMAT_OUT         => 'HTML',
         P_PLUG_QUERY_SHOW_NULLS_AS      => WWV_FLOW_LANG.SYSTEM_MESSAGE('NULL_IN_PAREN'),
         P_PLUG_QUERY_COL_ALLIGNMENTS    => NULL,
         P_PLUG_QUERY_BREAK_COLS         => NULL,
         P_PLUG_QUERY_SUM_COLS           => NULL,
         P_PLUG_QUERY_NUMBER_FORMATS     => NULL,
         P_PLUG_QUERY_TABLE_BORDER       => NULL,
         P_PLUG_COLUMN_WIDTH             => NULL,
         P_PLUG_QUERY_NO_DATA_FOUND      => WWV_FLOW_LANG.SYSTEM_MESSAGE('F4000.NO_DATA_FOUND'),
         P_PLUG_COMMENT                  => NULL);
 
      
      
      
      DECLARE
 
         L_PROCESS_VALUES WWV_FLOW_GLOBAL.VC_ARR2;
         L_OWNER VARCHAR2(255);
         L_TABLE VARCHAR2(255);
 
      BEGIN
         
         
         
         U := GET_FLOW_OWNER(P_FLOW_ID);
 
         C := SYS.DBMS_SQL.OPEN_CURSOR;
         BEGIN
             WWV_FLOW_DYNAMIC_EXEC.PARSE_SQL_STATEMENT (
                 P_CURSOR           => C,
                 P_SQL_STATEMENT    => P_QUERY,
                 P_PARSE_AS_SCHEMA  => U,
                 P_DO_SUBSTITUTIONS => FALSE );
         EXCEPTION WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001,
                           WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.PARSE_ERROR1',SQLERRM)
                           );
         END;
         BEGIN
           SYS.DBMS_SQL.DESCRIBE_COLUMNS( C, CC, L_DESCTBL );
         EXCEPTION WHEN OTHERS THEN NULL;
         END;
 
         L_PROCESS_VALUES := WWV_FLOW_UTILITIES.STRING_TO_TABLE2(P_PROCESS||'::::');
         L_OWNER := U;
         L_TABLE := L_PROCESS_VALUES(2);
 
         FOR I IN 1..L_DESCTBL.COUNT LOOP
 
            
            
            
            
            L_LOV_ID     := NULL;
            L_DISPLAY_AS := NULL;
 
            WWV_FLOW_HINT.GET_COL_UI_DEFAULTS (
                 P_SCHEMA              => L_OWNER,
                 P_TABLE_NAME          => L_TABLE,
                 P_COLUMN_NAME         => L_DESCTBL(I).COL_NAME
            );
 
            IF L_DESCTBL(I).COL_TYPE IN (12,180,181,231)  THEN
                L_DISPLAY_AS := NVL(WWV_FLOW_HINT.G_DISPLAY_AS_TAB_FORM,'DATE_PICKER');
            ELSIF L_DESCTBL(I).COL_TYPE = 113 THEN
                L_DISPLAY_AS := 'ESCAPE_SC';
            ELSE
                L_DISPLAY_AS := NVL(WWV_FLOW_HINT.G_DISPLAY_AS_TAB_FORM,'TEXT');
            END IF;
 
            IF INSTR(':'||P_UPDATABLE_COLUMNS||':',':'||L_DESCTBL(I).COL_NAME||':') > 0 THEN
              
              
 
              IF L_DISPLAY_AS IN ('SELECT_LIST_FROM_LOV','POPUP','TEXT_FROM_LOV') THEN    
 
                IF WWV_FLOW_HINT.G_LOV_TYPE = 'N' THEN
                    
                    
                    
                    L_DISPLAY_AS := 'TEXT';
                    L_LOV_QUERY  := NULL;
 
                ELSIF WWV_FLOW_HINT.G_LOV_TYPE IN ('S','Q') THEN
 
                   L_LOV_NAME := WWV_FLOW_HINT.GEN_LOV_NAME (
                                 P_OWNER        => L_OWNER,
                                 P_TABLE_NAME   => L_TABLE,
                                 P_COLUMN_NAME  => L_DESCTBL(I).COL_NAME,
                                 P_SGID         => WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID,
                                 P_APP_NUMBER   => P_FLOW_ID,
                                 P_PAGE_NUMBER  => P_PAGE_ID
                                 );
 
                   
                   
                   
 
                   FOR C1 IN (SELECT ID
                              FROM WWV_FLOW_LISTS_OF_VALUES$
                              WHERE LOV_NAME = L_LOV_NAME
                              AND FLOW_ID = P_FLOW_ID)
                   LOOP
                       L_LOV_ID := C1.ID;
                   END LOOP;
 
                   IF L_LOV_ID IS NULL THEN
                       L_LOV_ID := WWV_FLOW_ID.NEXT_VAL;
                       CREATE_NAMED_LOV (
                           P_FLOW_ID      => P_FLOW_ID,
                           P_PAGE_ID      => P_PAGE_ID,
                           P_TABLE_OWNER  => L_OWNER,
                           P_TABLE_NAME   => L_TABLE,
                           P_COLUMN_NAME  => L_DESCTBL(I).COL_NAME,
                           P_COLUMN_ID    => WWV_FLOW_HINT.G_COLUMN_ID,
                           P_LOV_ID       => L_LOV_ID,
                           P_LOV_NAME     => L_LOV_NAME,
                           P_LOV_TYPE     => WWV_FLOW_HINT.G_LOV_TYPE,
                           P_LOV_QUERY    => WWV_FLOW_HINT.G_LOV_QUERY
                           );
                   END IF;
 
                   L_LOV_QUERY := L_LOV_ID;
 
                END IF;
 
                WWV_FLOW_BUILDER.SET_UPD_COLUMN_DISPLAY_ATTR (
                    P_FLOW_ID            => P_FLOW_ID,
                    P_REGION_ID          => L_REGION_ID,
                    P_OWNER              => L_OWNER,
                    P_TABLE              => L_TABLE,
                    P_QUERY_COLUMN_NAME  => L_DESCTBL(I).COL_NAME,
                    P_PK_COL_SOURCE_TYPE => NULL,
                    P_PK_COL_SOURCE      => NULL,
                    P_COLUMN_DEFAULT_TYPE=> NULL,
                    P_COLUMN_DEFAULT     => NULL,
                    P_COLUMN_WIDTH       => L_DESCTBL(I).COL_MAX_LEN,
                    P_COLUMN_HEADING     => NULL,
                    P_LOV                => L_LOV_QUERY,
                    P_DISPLAY_AS         => L_DISPLAY_AS,
                    P_SECURITY_GROUP_ID  => P_SECURITY_GROUP_ID);
                    L_HEADINGS := L_HEADINGS||INITCAP(L_DESCTBL(I).COL_NAME)||':';
 
              ELSE
 
                WWV_FLOW_BUILDER.SET_UPD_COLUMN_DISPLAY_ATTR (
                    P_FLOW_ID            => P_FLOW_ID,
                    P_REGION_ID          => L_REGION_ID,
                    P_OWNER              => L_OWNER,
                    P_TABLE              => L_TABLE,
                    P_QUERY_COLUMN_NAME  => L_DESCTBL(I).COL_NAME,
                    P_PK_COL_SOURCE_TYPE => NULL,
                    P_PK_COL_SOURCE      => NULL,
                    P_COLUMN_DEFAULT_TYPE=> NULL,
                    P_COLUMN_DEFAULT     => NULL,
                    P_COLUMN_WIDTH       => GREATEST(L_DESCTBL(I).COL_MAX_LEN,12),
                    P_COLUMN_HEADING     => NULL,
                    P_LOV                => NULL,
                    P_DISPLAY_AS         => L_DISPLAY_AS,
                    P_SECURITY_GROUP_ID  => P_SECURITY_GROUP_ID);
                    L_HEADINGS := L_HEADINGS||INITCAP(L_DESCTBL(I).COL_NAME)||':';
 
              END IF;
 
            ELSIF L_DESCTBL(I).COL_NAME = P_TABLE_PK1 THEN
               IF L_DESCTBL(I).COL_NAME = 'ROWID' THEN
                    L_DISPLAY_AS := 'WITHOUT_MODIFICATION';
                 ELSE
                      L_DISPLAY_AS := 'HIDDEN';
                 END IF;
               WWV_FLOW_BUILDER.SET_UPD_COLUMN_DISPLAY_ATTR (
                    P_FLOW_ID            => P_FLOW_ID,
                    P_REGION_ID          => L_REGION_ID,
                    P_OWNER              => L_OWNER,
                    P_TABLE              => L_TABLE,
                    P_QUERY_COLUMN_NAME  => P_TABLE_PK1,
                    P_COLUMN_DEFAULT_TYPE=> NULL,
                    P_COLUMN_DEFAULT     => NULL,
                    P_PK_COL_SOURCE_TYPE => P_TABLE_PK1_SRC_TYPE,
                    P_PK_COL_SOURCE      => P_TABLE_PK1_SRC,
                    P_COLUMN_WIDTH       => L_DESCTBL(I).COL_MAX_LEN,
                    P_COLUMN_HEADING     => NULL,
                    P_LOV                => NULL,
                    P_DISPLAY_AS         => L_DISPLAY_AS,
                    P_SECURITY_GROUP_ID  => P_SECURITY_GROUP_ID);
               L_HEADINGS := L_HEADINGS||':';
            ELSIF L_DESCTBL(I).COL_NAME = P_TABLE_PK2 THEN
              WWV_FLOW_BUILDER.SET_UPD_COLUMN_DISPLAY_ATTR (
                    P_FLOW_ID            => P_FLOW_ID,
                    P_REGION_ID          => L_REGION_ID,
                    P_OWNER              => L_OWNER,
                    P_TABLE              => L_TABLE,
                    P_QUERY_COLUMN_NAME  => P_TABLE_PK2,
                    P_COLUMN_DEFAULT_TYPE=> NULL,
                    P_COLUMN_DEFAULT     => NULL,
                    P_PK_COL_SOURCE_TYPE => P_TABLE_PK1_SRC_TYPE,
                    P_PK_COL_SOURCE      => P_TABLE_PK1_SRC,
                    P_COLUMN_WIDTH       => L_DESCTBL(I).COL_MAX_LEN,
                    P_COLUMN_HEADING     => NULL,
                    P_LOV                => NULL,
                    P_DISPLAY_AS         => 'HIDDEN',
                    P_SECURITY_GROUP_ID  => P_SECURITY_GROUP_ID);
               L_HEADINGS := L_HEADINGS||':';
            ELSIF L_DESCTBL(I).COL_NAME = P_TABLE_PK3 THEN
                WWV_FLOW_BUILDER.SET_UPD_COLUMN_DISPLAY_ATTR (
                    P_FLOW_ID            => P_FLOW_ID,
                    P_REGION_ID          => L_REGION_ID,
                    P_OWNER              => L_OWNER,
                    P_TABLE              => L_TABLE,
                    P_QUERY_COLUMN_NAME  => P_TABLE_PK3,
                    P_COLUMN_DEFAULT_TYPE=> NULL,
                    P_COLUMN_DEFAULT     => NULL,
                    P_PK_COL_SOURCE_TYPE => P_TABLE_PK1_SRC_TYPE,
                    P_PK_COL_SOURCE      => P_TABLE_PK1_SRC,
                    P_COLUMN_WIDTH       => L_DESCTBL(I).COL_MAX_LEN,
                    P_COLUMN_HEADING     => NULL,
                    P_LOV                => NULL,
                    P_DISPLAY_AS         => 'HIDDEN',
                    P_SECURITY_GROUP_ID  => P_SECURITY_GROUP_ID);
               L_HEADINGS := L_HEADINGS||':';
            ELSIF L_DESCTBL(I).COL_NAME = P_TABLE_FK THEN
                WWV_FLOW_BUILDER.SET_UPD_COLUMN_DISPLAY_ATTR (
                    P_FLOW_ID            => P_FLOW_ID,
                    P_REGION_ID          => L_REGION_ID,
                    P_OWNER              => L_OWNER,
                    P_TABLE              => L_TABLE,
                    P_QUERY_COLUMN_NAME  => P_TABLE_FK,
                    P_PK_COL_SOURCE_TYPE => NULL,
                    P_PK_COL_SOURCE      => NULL,
                    P_COLUMN_DEFAULT_TYPE=> P_TABLE_FK_SRC_TYPE,
                    P_COLUMN_DEFAULT     => P_TABLE_FK_SRC,
                    P_COLUMN_WIDTH       => L_DESCTBL(I).COL_MAX_LEN,
                    P_COLUMN_HEADING     => NULL,
                    P_LOV                => NULL,
                    P_DISPLAY_AS         => 'HIDDEN',
                    P_SECURITY_GROUP_ID  => P_SECURITY_GROUP_ID);
               L_HEADINGS := L_HEADINGS||':';
            ELSE
              WWV_FLOW_BUILDER.SET_UPD_COLUMN_DISPLAY_ATTR (
               P_FLOW_ID            => P_FLOW_ID,
               P_REGION_ID          => L_REGION_ID,
               P_OWNER              => L_OWNER,
               P_TABLE              => L_TABLE,
               P_QUERY_COLUMN_NAME  => L_DESCTBL(I).COL_NAME,
               P_PK_COL_SOURCE_TYPE => NULL,
               P_PK_COL_SOURCE      => NULL,
               P_COLUMN_DEFAULT_TYPE=> NULL,
               P_COLUMN_DEFAULT     => NULL,
               P_COLUMN_WIDTH       => L_DESCTBL(I).COL_MAX_LEN,
               P_COLUMN_HEADING     => NULL,
               P_LOV                => NULL,
               P_DISPLAY_AS         => 'ESCAPE_SC',
               P_SECURITY_GROUP_ID  => P_SECURITY_GROUP_ID);
               L_HEADINGS := L_HEADINGS||INITCAP(L_DESCTBL(I).COL_NAME)||':';
            END IF;
 
         END LOOP;
 
         UPDATE_COLUMN_DISPLAY_DEFAULTS (
             P_REGION_ID  => L_REGION_ID,
             P_OWNER      => L_OWNER,
             P_TABLE_NAME => L_TABLE
         );
 
      END;
 
   ELSE
      
      
      
      WWV_FLOW_API.CREATE_PAGE_PLUG (
         P_ID                            => L_REGION_ID,
         P_FLOW_ID                       => P_FLOW_ID,
         P_PAGE_ID                       => P_PAGE_ID,
         P_PLUG_NAME                     => P_REGION_TITLE,
         P_PLUG_TEMPLATE                 => P_REGION_TEMPLATE,
         P_REGION_TEMPLATE_OPTIONS       => L_REGION_PRESET_TEMPLATE_OPT,
         P_PLUG_DISPLAY_SEQUENCE         => '10',
         P_PLUG_DISPLAY_POINT            => 'BODY',
         P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
         P_PLUG_SOURCE                   => WWV_FLOW_ASSERT.SQL_QUERY_START(P_QUERY),
         P_PLUG_SOURCE_TYPE              => WWV_FLOW_REGION_NATIVE.C_SQL_REPORT,
         P_AJAX_ENABLED                  => L_AJAX_ENABLED,                     
         P_PLUG_QUERY_ROW_TEMPLATE       => P_REPORT_TEMPLATE,
         P_COMPONENT_TEMPLATE_OPTIONS    => L_REPORT_PRESET_TEMPLATE_OPT,
         P_PLUG_QUERY_HEADINGS           => L_HEADINGS,
         P_PLUG_QUERY_HEADINGS_TYPE      => 'COLON_DELMITED_LIST',
         P_PLUG_QUERY_NUM_ROWS           => '15',
         P_PLUG_QUERY_NUM_ROWS_TYPE      => 'ROW_RANGES_IN_SELECT_LIST',
         P_PLUG_QUERY_ROW_COUNT_MAX      => WWV_FLOW_API.C_DEFAULT_QUERY_ROW_COUNT_MAX,
         P_PLUG_QUERY_FORMAT_OUT         => 'HTML',
         P_PLUG_QUERY_SHOW_NULLS_AS      => WWV_FLOW_LANG.SYSTEM_MESSAGE('NULL_IN_PAREN'),
         P_PLUG_QUERY_COL_ALLIGNMENTS    => NULL,
         P_PLUG_QUERY_BREAK_COLS         => NULL,
         P_PLUG_QUERY_SUM_COLS           => NULL,
         P_PLUG_QUERY_NUMBER_FORMATS     => NULL,
         P_PLUG_QUERY_TABLE_BORDER       => NULL,
         P_PLUG_COLUMN_WIDTH             => NULL,
         P_PLUG_QUERY_NO_DATA_FOUND      => WWV_FLOW_LANG.SYSTEM_MESSAGE('F4000.NO_DATA_FOUND'),
         P_PLUG_COMMENT                  => NULL);
    END IF;
 
   
   
   
   L_CANCEL_BUTTON_ID := WWV_FLOW_ID.NEXT_VAL;
   L_SUBMIT_BUTTON_ID := WWV_FLOW_ID.NEXT_VAL;
   L_DELETE_BUTTON_ID := WWV_FLOW_ID.NEXT_VAL;
   L_ADD_BUTTON_ID    := WWV_FLOW_ID.NEXT_VAL;
 
   IF WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE IS NOT NULL THEN
       L_BUTTON_IMAGE            := 'template:'||WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE;
       L_BUTTON_TEMPLATE_OPTIONS :=  GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE,'BUTTON');
   END IF;
 
   WWV_FLOW_API.CREATE_PAGE_BUTTON (
       P_ID                     => L_SUBMIT_BUTTON_ID,
       P_FLOW_ID                => P_FLOW_ID,
       P_FLOW_STEP_ID           => P_PAGE_ID,
       P_BUTTON_SEQUENCE        => '30',
       P_BUTTON_PLUG_ID         => L_REGION_ID,
       P_BUTTON_NAME            => 'SUBMIT',
       P_BUTTON_IMAGE           => L_BUTTON_IMAGE,
       P_BUTTON_TEMPLATE_OPTIONS=> L_BUTTON_TEMPLATE_OPTIONS,
       P_BUTTON_IMAGE_ALT       => P_SUBMIT_BUTTON_NAME,
       P_BUTTON_POSITION        => WWV_FLOW_THEME_MANAGER.GET_BUTTON_POSTION(
                                   P_TEMPLATE_ID => P_REGION_TEMPLATE,
                                   P_POSITION    => '#CHANGE#'),
       P_BUTTON_ALIGNMENT       => 'RIGHT',
       P_BUTTON_EXECUTE_VALIDATIONS => 'Y',
       P_BUTTON_REDIRECT_URL    => NULL,
       P_BUTTON_ACTION          => WWV_FLOW_BUTTON.C_ACTION_SUBMIT,
       P_BUTTON_CONDITION       => NULL,
       P_BUTTON_CONDITION2      => NULL,
       P_BUTTON_CONDITION_TYPE  => NULL,
       P_BUTTON_IMAGE_ATTRIBUTES=> NULL,
       P_SECURITY_SCHEME        => NULL,
       P_REQUIRED_PATCH         => NULL
   );
 
   IF P_CANCEL_BUTTON_NAME IS NOT NULL THEN
 
       IF P_CANCEL_BRANCH IS NOT NULL THEN
           L_CANCEL_BUTTON_REDIRECT_URL := 'f?p=&APP_ID.:'||P_CANCEL_BRANCH||':&SESSION.::&DEBUG.:::';
           L_CANCEL_BUTTON_ACTION := WWV_FLOW_BUTTON.C_ACTION_REDIRECT_PAGE;
       ELSE
           L_CANCEL_BUTTON_REDIRECT_URL := NULL;
           L_CANCEL_BUTTON_ACTION := WWV_FLOW_BUTTON.C_ACTION_SUBMIT;
       END IF;
 
       WWV_FLOW_API.CREATE_PAGE_BUTTON (
            P_ID                     => L_CANCEL_BUTTON_ID,
            P_FLOW_ID                => P_FLOW_ID,
            P_FLOW_STEP_ID           => P_PAGE_ID,
            P_BUTTON_SEQUENCE        => '10',
            P_BUTTON_PLUG_ID         => L_REGION_ID,
            P_BUTTON_NAME            => 'CANCEL',
            P_BUTTON_IMAGE           => L_BUTTON_IMAGE,
            P_BUTTON_IMAGE_ALT       => P_CANCEL_BUTTON_NAME,
            P_BUTTON_TEMPLATE_OPTIONS=> L_BUTTON_TEMPLATE_OPTIONS,
            P_BUTTON_POSITION        => WWV_FLOW_THEME_MANAGER.GET_BUTTON_POSTION(
                                        P_TEMPLATE_ID => P_REGION_TEMPLATE,
                                        P_POSITION    => '#CLOSE#'),
            P_BUTTON_ALIGNMENT       => 'RIGHT',
            P_BUTTON_REDIRECT_URL    => L_CANCEL_BUTTON_REDIRECT_URL,
            P_BUTTON_ACTION          => L_CANCEL_BUTTON_ACTION,
            P_BUTTON_CONDITION       => NULL,
            P_BUTTON_CONDITION2      => NULL,
            P_BUTTON_CONDITION_TYPE  => NULL,
            P_BUTTON_IMAGE_ATTRIBUTES=> NULL,
            P_SECURITY_SCHEME        => NULL,
            P_REQUIRED_PATCH         => NULL
       );
 
   END IF;
 
   IF P_DELETE_BUTTON_NAME IS NOT NULL THEN
       L_SHORTCUT_NAME := 'DELETE_CONFIRM_MSG';
       L_SHORTCUT := L_SHORTCUT_NAME;
       
       
       
       IF NOT SHORTCUT_EXIST(P_FLOW_ID=>P_FLOW_ID,P_SHORTCUT_NAME=>L_SHORTCUT_NAME) THEN
 
         L_SHORTCUT := GET_SHORTCUT_NAME(P_FLOW_ID=>P_FLOW_ID,P_SHORTCUT_NAME=>L_SHORTCUT_NAME);
         WWV_FLOW_API.CREATE_SHORTCUT (
             P_ID=> NULL,
             P_FLOW_ID=> P_FLOW_ID,
             P_SHORTCUT_NAME=> L_SHORTCUT,
             P_SHORTCUT_TYPE=> 'TEXT_ESCAPE_JS',
             P_SHORTCUT=> WWV_FLOW_LANG.SYSTEM_MESSAGE('DELETE_MSG'));
       END IF;
 
       UPDATE_JS_CODE_W_SHORTCUT (
           P_FLOW_ID             => P_FLOW_ID,
           P_PAGE_ID             => P_PAGE_ID,
           P_SHORTCUT_NAME       => L_SHORTCUT,
           P_ADD_JAVASCRIPT_CODE => 'var htmldb_delete_message=''"'||L_SHORTCUT||'"'';' );
 
       WWV_FLOW_API.CREATE_PAGE_BUTTON (
           P_ID                     => L_DELETE_BUTTON_ID,
           P_FLOW_ID                => P_FLOW_ID,
           P_FLOW_STEP_ID           => P_PAGE_ID,
           P_BUTTON_SEQUENCE        => '20',
           P_BUTTON_PLUG_ID         => L_REGION_ID,
           P_BUTTON_NAME            => 'MULTI_ROW_DELETE',
           P_BUTTON_IMAGE           => L_BUTTON_IMAGE,
           P_BUTTON_IMAGE_ALT       => P_DELETE_BUTTON_NAME,
           P_BUTTON_TEMPLATE_OPTIONS=> L_BUTTON_TEMPLATE_OPTIONS,
           P_BUTTON_POSITION        => WWV_FLOW_THEME_MANAGER.GET_BUTTON_POSTION(
                                        P_TEMPLATE_ID => P_REGION_TEMPLATE,
                                        P_POSITION    => '#DELETE#'),
           P_BUTTON_ALIGNMENT       => 'RIGHT',
           P_BUTTON_EXECUTE_VALIDATIONS => 'N',
           P_BUTTON_REDIRECT_URL    => 'javascript:apex.confirm(htmldb_delete_message,''MULTI_ROW_DELETE'');',
           P_BUTTON_ACTION          => WWV_FLOW_BUTTON.C_ACTION_REDIRECT_URL,
           P_BUTTON_CONDITION       => NULL,
           P_BUTTON_CONDITION2      => NULL,
           P_BUTTON_CONDITION_TYPE  => NULL,
           P_BUTTON_IMAGE_ATTRIBUTES=> NULL,
           P_SECURITY_SCHEME        => NULL,
           P_REQUIRED_PATCH         => NULL);
   END IF;
 
   IF P_ADD_BUTTON_NAME IS NOT NULL THEN
       WWV_FLOW_API.CREATE_PAGE_BUTTON (
           P_ID                     => L_ADD_BUTTON_ID,
           P_FLOW_ID                => P_FLOW_ID,
           P_FLOW_STEP_ID           => P_PAGE_ID,
           P_BUTTON_SEQUENCE        => '40',
           P_BUTTON_PLUG_ID         => L_REGION_ID,
           P_BUTTON_NAME            => 'ADD',
           P_BUTTON_IMAGE           => L_BUTTON_IMAGE,
           P_BUTTON_IMAGE_ALT       => P_ADD_BUTTON_NAME,
           P_BUTTON_TEMPLATE_OPTIONS=> L_BUTTON_TEMPLATE_OPTIONS,
           P_BUTTON_POSITION        => 'BOTTOM',
           P_BUTTON_ALIGNMENT       => 'RIGHT',
           P_BUTTON_EXECUTE_VALIDATIONS => 'N',
           P_BUTTON_REDIRECT_URL    => 'javascript:apex.widget.tabular.addRow();',
           P_BUTTON_ACTION          => WWV_FLOW_BUTTON.C_ACTION_REDIRECT_URL,
           P_BUTTON_CONDITION       => NULL,
           P_BUTTON_CONDITION2      => NULL,
           P_BUTTON_CONDITION_TYPE  => NULL,
           P_BUTTON_IMAGE_ATTRIBUTES=> NULL,
           P_SECURITY_SCHEME        => NULL,
           P_REQUIRED_PATCH         => NULL);
   END IF;
 
   IF P_IMPLEMENT_TYPE = 1 THEN
 
      
 
      IF P_IS_MASTER_DETAIL THEN
          L_VALIDATION_BUTTON         := NULL;
          L_VALIDATION_CONDITION      := ':request like (''SAVE'') or :request like ''GET_NEXT%'' or :request like ''GET_PREV%''';
          L_VALIDATION_CONDITION_TYPE := 'PLSQL_EXPRESSION';
      ELSE
          L_VALIDATION_BUTTON         := L_SUBMIT_BUTTON_ID;
          L_VALIDATION_CONDITION      := NULL;
          L_VALIDATION_CONDITION_TYPE := NULL;
      END IF;
 
      FOR I IN 1..L_DESCTBL.COUNT LOOP
          IF INSTR(':'||P_UPDATABLE_COLUMNS||':',':'||L_DESCTBL(I).COL_NAME||':') > 0 THEN   
              IF INSTR(L_DESCTBL(I).COL_NAME,'_DISPLAY')=0 AND L_DESCTBL(I).COL_NAME != NVL(P_TABLE_PK1,' ') AND L_DESCTBL(I).COL_NAME != NVL(P_TABLE_PK2,' ') THEN
 
                   IF NOT L_DESCTBL(I).COL_NULL_OK THEN
 
                       WWV_FLOW_API.CREATE_PAGE_VALIDATION (
                           P_FLOW_ID                   => P_FLOW_ID,
                           P_FLOW_STEP_ID              => P_PAGE_ID,
                           P_TABULAR_FORM_REGION_ID    => L_REGION_ID,
                           P_VALIDATION_NAME           => L_DESCTBL(I).COL_NAME||' not null',
                           P_VALIDATION_SEQUENCE       => (I*10),
                           P_VALIDATION                => L_DESCTBL(I).COL_NAME,
                           P_VALIDATION_TYPE           => 'ITEM_NOT_NULL',
                           P_ERROR_MESSAGE             => WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_QUICK_FLOW.COLUMN_NOT_NULL'),
                           P_WHEN_BUTTON_PRESSED       => L_VALIDATION_BUTTON,
                           P_VALIDATION_CONDITION      => L_VALIDATION_CONDITION,
                           P_VALIDATION_CONDITION_TYPE => L_VALIDATION_CONDITION_TYPE,
                           P_EXEC_COND_FOR_EACH_ROW    => 'N',
                           P_ONLY_FOR_CHANGED_ROWS     => 'Y',
                           P_ASSOCIATED_COLUMN         => L_DESCTBL(I).COL_NAME,
                           P_ERROR_DISPLAY_LOCATION    => 'INLINE_WITH_FIELD_AND_NOTIFICATION'
                       );
 
                   END IF;
 
                   IF L_DESCTBL(I).COL_TYPE IN (2, 100, 101) THEN
 
                       WWV_FLOW_API.CREATE_PAGE_VALIDATION (
                           P_FLOW_ID                   => P_FLOW_ID,
                           P_FLOW_STEP_ID              => P_PAGE_ID,
                           P_TABULAR_FORM_REGION_ID    => L_REGION_ID,
                           P_VALIDATION_NAME           => L_DESCTBL(I).COL_NAME||' must be numeric',
                           P_VALIDATION_SEQUENCE       => (I*10),
                           P_VALIDATION                => L_DESCTBL(I).COL_NAME,
                           P_VALIDATION_TYPE           => 'ITEM_IS_NUMERIC',
                           P_ERROR_MESSAGE             => WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_QUICK_FLOW.NUMERIC_COLUMN'),
                           P_WHEN_BUTTON_PRESSED       => L_VALIDATION_BUTTON,
                           P_VALIDATION_CONDITION      => L_VALIDATION_CONDITION,
                           P_VALIDATION_CONDITION_TYPE => L_VALIDATION_CONDITION_TYPE,
                           P_EXEC_COND_FOR_EACH_ROW    => 'N',
                           P_ONLY_FOR_CHANGED_ROWS     => 'Y',
                           P_ASSOCIATED_COLUMN         => L_DESCTBL(I).COL_NAME,
                           P_ERROR_DISPLAY_LOCATION    => 'INLINE_WITH_FIELD_AND_NOTIFICATION'
                       );
 
                  END IF;
 
                  IF L_DESCTBL(I).COL_TYPE = 12 THEN
 
                      WWV_FLOW_API.CREATE_PAGE_VALIDATION (
                           P_FLOW_ID                   => P_FLOW_ID,
                           P_FLOW_STEP_ID              => P_PAGE_ID,
                           P_TABULAR_FORM_REGION_ID    => L_REGION_ID,
                           P_VALIDATION_NAME           => L_DESCTBL(I).COL_NAME||' must be a valid date',
                           P_VALIDATION_SEQUENCE       => (I*10),
                           P_VALIDATION                => L_DESCTBL(I).COL_NAME,
                           P_VALIDATION_TYPE           => 'ITEM_IS_DATE',
                           P_ERROR_MESSAGE             => WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_QUICK_FLOW.DATE_COLUMN'),
                           P_WHEN_BUTTON_PRESSED       => L_VALIDATION_BUTTON,
                           P_VALIDATION_CONDITION      => L_VALIDATION_CONDITION,
                           P_VALIDATION_CONDITION_TYPE => L_VALIDATION_CONDITION_TYPE,
                           P_EXEC_COND_FOR_EACH_ROW    => 'N',
                           P_ONLY_FOR_CHANGED_ROWS     => 'Y',
                           P_ASSOCIATED_COLUMN         => L_DESCTBL(I).COL_NAME,
                           P_ERROR_DISPLAY_LOCATION    => 'INLINE_WITH_FIELD_AND_NOTIFICATION'
                       );
 
                  END IF;
 
                  IF L_DESCTBL(I).COL_TYPE IN (180,181,231) THEN
 
                      WWV_FLOW_API.CREATE_PAGE_VALIDATION (
                           P_FLOW_ID                   => P_FLOW_ID,
                           P_FLOW_STEP_ID              => P_PAGE_ID,
                           P_TABULAR_FORM_REGION_ID    => L_REGION_ID,
                           P_VALIDATION_NAME           => L_DESCTBL(I).COL_NAME||' must be a valid timestamp',
                           P_VALIDATION_SEQUENCE       => (I*10),
                           P_VALIDATION                => L_DESCTBL(I).COL_NAME,
                           P_VALIDATION_TYPE           => 'ITEM_IS_TIMESTAMP',
                           P_ERROR_MESSAGE             => WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_QUICK_FLOW.TIMESTAMP_COLUMN'),
                           P_WHEN_BUTTON_PRESSED       => L_VALIDATION_BUTTON,
                           P_VALIDATION_CONDITION      => L_VALIDATION_CONDITION,
                           P_VALIDATION_CONDITION_TYPE => L_VALIDATION_CONDITION_TYPE,
                           P_EXEC_COND_FOR_EACH_ROW    => 'N',
                           P_ONLY_FOR_CHANGED_ROWS     => 'Y',
                           P_ASSOCIATED_COLUMN         => L_DESCTBL(I).COL_NAME,
                           P_ERROR_DISPLAY_LOCATION    => 'INLINE_WITH_FIELD_AND_NOTIFICATION'
                       );
 
                  END IF;
 
              END IF;
          END IF;
      END LOOP;
 
      
      
      
      L_PAGE_PROCESS_ID := WWV_FLOW_ID.NEXT_VAL;
 
      WWV_FLOW_API.CREATE_PAGE_PROCESS (
          P_ID                    => L_PAGE_PROCESS_ID,
          P_FLOW_ID               => P_FLOW_ID,
          P_FLOW_STEP_ID          => P_PAGE_ID,
          P_PROCESS_SEQUENCE      => '10',
          P_PROCESS_POINT         => 'AFTER_SUBMIT',
          P_REGION_ID             => L_REGION_ID,
          P_PROCESS_TYPE          => 'MULTI_ROW_UPDATE',
          P_PROCESS_NAME          => 'ApplyMRU',
          P_PROCESS_SQL_CLOB      => P_PROCESS,
          P_ERROR_DISPLAY_LOCATION=> WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION,
          P_PROCESS_WHEN_BUTTON_ID=> L_SUBMIT_BUTTON_ID,
          P_PROCESS_WHEN          => NULL,
          P_PROCESS_WHEN_TYPE     => NULL,
          P_PROCESS_SUCCESS_MESSAGE=> WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.UPDATE_INSERT_SUCCESS'),
          P_REQUIRED_PATCH        => NULL,
          P_PROCESS_COMMENT       => NULL);
 
      IF P_DELETE_BUTTON_NAME IS NOT NULL THEN
 
          L_PAGE_PROCESS_ID := WWV_FLOW_ID.NEXT_VAL;
 
          WWV_FLOW_API.CREATE_PAGE_PROCESS (
              P_ID                    => L_PAGE_PROCESS_ID,
              P_FLOW_ID               => P_FLOW_ID,
              P_FLOW_STEP_ID          => P_PAGE_ID,
              P_PROCESS_SEQUENCE      => '20',
              P_PROCESS_POINT         => 'AFTER_SUBMIT',
              P_REGION_ID             => L_REGION_ID,
              P_PROCESS_TYPE          => 'MULTI_ROW_DELETE',
              P_PROCESS_NAME          => 'ApplyMRD',
              P_PROCESS_SQL_CLOB      => P_PROCESS,
              P_ERROR_DISPLAY_LOCATION=> WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION,
              P_PROCESS_WHEN_BUTTON_ID=> NULL,
              P_PROCESS_WHEN          => 'MULTI_ROW_DELETE',
              P_PROCESS_WHEN_TYPE     => 'REQUEST_EQUALS_CONDITION',
              P_PROCESS_SUCCESS_MESSAGE=> WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.DELETE_SUCCESS'),
              P_REQUIRED_PATCH        => NULL,
              P_PROCESS_COMMENT       => NULL);
 
           L_COLUMN_ID := WWV_FLOW_EDIT_REPORT.ADD_DERIVED_COLUMN(L_REGION_ID,1,'C');
 
      END IF;
 
   ELSE
      
      
      
      L_PAGE_PROCESS_ID := WWV_FLOW_ID.NEXT_VAL;
 
      WWV_FLOW_API.CREATE_PAGE_PROCESS (
          P_ID                    => L_PAGE_PROCESS_ID,
          P_FLOW_ID               => P_FLOW_ID,
          P_FLOW_STEP_ID          => P_PAGE_ID,
          P_PROCESS_SEQUENCE      => '10',
          P_PROCESS_POINT         => 'AFTER_SUBMIT',
          P_REGION_ID             => L_REGION_ID,
          P_PROCESS_TYPE          => 'PLSQL',
          P_PROCESS_NAME          => 'ApplyMRU',
          P_PROCESS_SQL_CLOB      => P_PROCESS,
          P_ERROR_DISPLAY_LOCATION=> CASE WHEN P_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION ELSE WWV_FLOW_ERROR_API.C_ON_ERROR_PAGE END,
          P_PROCESS_WHEN_BUTTON_ID=> L_SUBMIT_BUTTON_ID,
          P_PROCESS_WHEN          => NULL,
          P_PROCESS_WHEN_TYPE     => NULL,
          P_ONLY_FOR_CHANGED_ROWS => 'Y',
          P_PROCESS_SUCCESS_MESSAGE=> WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.UPDATE_APPLIED'),
          P_REQUIRED_PATCH        => NULL,
          P_PROCESS_COMMENT       => NULL);
 
   END IF;
 
   IF P_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN
 
       
       FOR C1 IN ( SELECT ID
                     FROM WWV_FLOW_STEP_PROCESSING
                    WHERE FLOW_ID           = P_FLOW_ID
                      AND FLOW_STEP_ID      = P_PAGE_ID
                      AND PROCESS_POINT     = 'AFTER_SUBMIT'
                      AND PROCESS_TYPE      = 'NATIVE_CLOSE_WINDOW'
                      AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID )
       LOOP
           L_PROCESS_ID := C1.ID;
       END LOOP;
 
       IF L_PROCESS_ID IS NULL THEN
           WWV_FLOW_API.CREATE_PAGE_PROCESS(
               P_ID                      => NULL,
               P_FLOW_ID                 => P_FLOW_ID,
               P_FLOW_STEP_ID            => P_PAGE_ID,
               P_PROCESS_SEQUENCE        => 50,
               P_PROCESS_POINT           => 'AFTER_SUBMIT',
               P_PROCESS_TYPE            => WWV_FLOW_PROCESS_NATIVE.C_CLOSE_WINDOW,
               P_PROCESS_NAME            => 'Close Dialog',
               P_ERROR_DISPLAY_LOCATION  => WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION,
               P_PROCESS_WHEN            => 'SUBMIT,DELETE',
               P_PROCESS_WHEN_TYPE       => 'REQUEST_IN_CONDITION');
       END IF;
 
   END IF;
 
   
   
   
   L_BRANCH_ON_SUBMIT := WWV_FLOW_ID.NEXT_VAL;
 
   
   L_SUBMIT_BRANCH := NVL(P_SUBMIT_BRANCH, P_PAGE_ID);
 
   WWV_FLOW_API.CREATE_PAGE_BRANCH (
       P_ID                    => L_BRANCH_ON_SUBMIT,
       P_FLOW_ID               => P_FLOW_ID,
       P_FLOW_STEP_ID          => P_PAGE_ID,
       P_BRANCH_ACTION         => 'f?p=&APP_ID.:'||L_SUBMIT_BRANCH||':&SESSION.&success_msg=#SUCCESS_MSG#',
       P_BRANCH_POINT          => 'AFTER_PROCESSING',
       P_BRANCH_TYPE           => 'REDIRECT_URL',
       P_BRANCH_WHEN_BUTTON_ID => L_SUBMIT_BUTTON_ID,
       P_BRANCH_SEQUENCE       => '1',
       P_BRANCH_CONDITION_TYPE => '',
       P_BRANCH_CONDITION      => NULL,
       P_BRANCH_CONDITION_TEXT => NULL,
       P_REQUIRED_PATCH        => NULL,
       P_BRANCH_COMMENT        => NULL);
 
 
 EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(-20001,
        WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.CREATE_UPDATEABLE_REPORT',SQLERRM)
    );
 END CREATE_UPDATEABLE_REPORT;
 
 
 
 
 
 PROCEDURE CREATE_FORM_ON_SP (
   P_FLOW_ID                  IN NUMBER,
   P_PAGE_ID                  IN NUMBER,
   P_PAGE_NAME                IN VARCHAR2,
   P_GROUP_NAME               IN VARCHAR2 DEFAULT NULL,
   P_PAGE_MODE                IN VARCHAR2,
   P_USER_INTERFACE_ID        IN NUMBER,
   
   P_TAB_SET                  IN VARCHAR2 DEFAULT NULL,
   P_TAB_NAME                 IN VARCHAR2 DEFAULT NULL, 
   P_TAB_TEXT                 IN VARCHAR2 DEFAULT NULL,
   
   P_NAV_LIST_ID              IN NUMBER   DEFAULT NULL,
   P_NAV_LIST_ITEM_ID         IN NUMBER   DEFAULT NULL,
   P_NAV_LIST_ITEM_NAME       IN VARCHAR2 DEFAULT NULL,
   P_NAV_LIST_PARENT_ITEM_ID  IN NUMBER   DEFAULT NULL,
   P_NAV_LIST_CHILD_ITEM_NAME IN VARCHAR2 DEFAULT NULL,
   
   P_REGION_TITLE             IN VARCHAR2 DEFAULT NULL,
   P_REGION_TEMPLATE          IN NUMBER,
   P_SCHEMA                   IN VARCHAR2,
   P_PROCEDURE                IN VARCHAR2,
   P_COLLECTION_NAME          IN VARCHAR2 DEFAULT 'SP_WIZARD',
   P_CANCEL_BRANCH            IN NUMBER,
   P_SUBMIT_BRANCH            IN NUMBER,
   P_CANCEL_BUTTON_NAME       IN VARCHAR2 DEFAULT 'Cancel',
   P_SUBMIT_BUTTON_NAME       IN VARCHAR2 DEFAULT 'Submit',
   
   P_BUTTON_LABEL             IN VARCHAR2 DEFAULT 'RUN',
   P_INVOKING_PAGE_ID         IN VARCHAR2 DEFAULT NULL,
   P_INVOKING_REGION_ID       IN VARCHAR2 DEFAULT NULL,
   P_INVOKING_BUTTON_P        IN VARCHAR2 DEFAULT NULL)
 AS
   L_BUTTON_REGION_ID        NUMBER;
   L_BUTTON_REGION_TEMPLATE  NUMBER;
   L_COUNT                   NUMBER := 1;
   L_GROUP_ID                NUMBER := NULL;
   L_INVOKING_BUTTON_ID      NUMBER;
   L_ITEM_COUNT              NUMBER;
   L_ITEM_SUFFIX             NUMBER;
   L_REGION_TEMPLATE         NUMBER;
   L_BUTTON_TEMPLATE_OPTIONS VARCHAR2(255);
   L_INVOKING_BUTTON_NAME    VARCHAR2(255);
   L_BUTTON_IMAGE            VARCHAR2(4000);
 BEGIN
   
   
   
   WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
       P_FLOW_ID           => P_FLOW_ID,
       P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
   
   
   
   IF NOT PAGE_EXISTS (P_FLOW_ID,P_PAGE_ID) THEN
 
       
       
       
       IF P_GROUP_NAME IS NOT NULL THEN
           L_GROUP_ID := WWV_FLOW_UTILITIES.GET_PAGE_GROUP_ID(P_GROUP_NAME => P_GROUP_NAME, P_APPLICATION_ID => P_FLOW_ID);
           
           IF L_GROUP_ID IS NULL THEN
               L_GROUP_ID := WWV_FLOW_ID.NEXT_VAL;
               WWV_FLOW_API.CREATE_PAGE_GROUP(P_ID => L_GROUP_ID, P_FLOW_ID => P_FLOW_ID, P_GROUP_NAME => P_GROUP_NAME);
           END IF;
       END IF;
 
        WWV_FLOW_API.CREATE_PAGE (
            P_ID                 => P_PAGE_ID,
            P_FLOW_ID            => P_FLOW_ID,
            P_TAB_SET            => REPLACE(P_TAB_SET,'%null%',NULL),
            P_NAME               => P_PAGE_NAME,
            P_PAGE_MODE          => P_PAGE_MODE,
            P_GROUP_ID           => L_GROUP_ID,
            P_USER_INTERFACE_ID  => P_USER_INTERFACE_ID,
            P_FIRST_ITEM         => 'NO_FIRST_ITEM',
            P_STEP_TITLE         => P_PAGE_NAME,
            P_STEP_SUB_TITLE     => NULL,
            P_STEP_TEMPLATE      => NULL,
            P_PAGE_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_PAGE_TEMPLATE, 'PAGE'),
            P_WELCOME_TEXT       => NULL,
            P_BOX_WELCOME_TEXT   => NULL,
            P_BOX_FOOTER_TEXT    => NULL,
            P_FOOTER_TEXT        => NULL,
            P_PAGE_COMMENT       => NULL);
 
        IF P_NAV_LIST_ID IS NOT NULL THEN
            
            CREATE_NAVIGATION_LIST_ITEM (
                P_FLOW_ID                  => P_FLOW_ID,
                P_PAGE_ID                  => P_PAGE_ID,
                P_PAGE_NAME                => P_PAGE_NAME,
                P_NAV_LIST_ID              => P_NAV_LIST_ID,
                P_NAV_LIST_ITEM_ID         => P_NAV_LIST_ITEM_ID,
                P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_ITEM_NAME,
                P_NAV_LIST_PARENT_ITEM_ID  => P_NAV_LIST_PARENT_ITEM_ID,
                P_NAV_LIST_CHILD_ITEM_NAME => P_NAV_LIST_CHILD_ITEM_NAME);
        ELSE
 
            
            IF REPLACE(P_TAB_SET,'%null%',NULL) IS NOT NULL THEN
                CREATE_TAB (
                    P_FLOW_ID  => P_FLOW_ID,
                    P_PAGE_ID  => P_PAGE_ID,
                    P_TAB_SET  => P_TAB_SET,
                    P_TAB_NAME => P_TAB_NAME,
                    P_TAB_TEXT => P_TAB_TEXT);
            END IF;
        END IF;
   END IF;
 
 
   
   
   
 
   
   L_REGION_TEMPLATE := CASE
                          WHEN P_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL
                          THEN NVL(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_DIALOGR_TEMPLATE,P_REGION_TEMPLATE)
                          ELSE P_REGION_TEMPLATE
                        END;
   L_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
 
   WWV_FLOW_API.CREATE_PAGE_PLUG (
      P_ID                            => L_REGION_ID,
      P_FLOW_ID                       => P_FLOW_ID,
      P_PAGE_ID                       => P_PAGE_ID,
      P_PLUG_NAME                     => P_REGION_TITLE,
      P_PLUG_TEMPLATE                 => L_REGION_TEMPLATE,
      P_REGION_TEMPLATE_OPTIONS       => GET_PRESET_TEMPLATE_OPTIONS (L_REGION_TEMPLATE,'REGION'),
      P_PLUG_DISPLAY_SEQUENCE         => '10',
      P_PLUG_DISPLAY_POINT            => 'BODY',
      P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
      P_PLUG_COMMENT                  => NULL);
 
   
   
   
   L_CANCEL_BUTTON_ID := WWV_FLOW_ID.NEXT_VAL;
   L_SUBMIT_BUTTON_ID := WWV_FLOW_ID.NEXT_VAL;
   L_INVOKING_BUTTON_ID := WWV_FLOW_ID.NEXT_VAL;
 
   IF P_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN
       
       L_CANCEL_BUTTON_REDIRECT_URL := NULL;
       L_CANCEL_BUTTON_ACTION       := WWV_FLOW_BUTTON.C_ACTION_DEFINED_BY_DA;
 
       
       
       
       L_BUTTON_REGION_ID       := WWV_FLOW_ID.NEXT_VAL;
       
       L_BUTTON_REGION_TEMPLATE := NVL(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_DIALOGBTNR_TEMPLATE,WWV_FLOW_THEME_GLOBALS.G_DEFAULT_REGION_TEMPLATE);
 
       WWV_FLOW_API.CREATE_PAGE_PLUG (
           P_ID                            => L_BUTTON_REGION_ID,
           P_FLOW_ID                       => P_FLOW_ID,
           P_PAGE_ID                       => P_PAGE_ID,
           P_PLUG_NAME                     => WWV_FLOW_LANG.SYSTEM_MESSAGE('LAYOUT.T_BUTTON'),
           P_PLUG_TEMPLATE                 => L_BUTTON_REGION_TEMPLATE,
           P_REGION_TEMPLATE_OPTIONS       => WWV_FLOW_WIZARD_API.GET_PRESET_TEMPLATE_OPTIONS(L_BUTTON_REGION_TEMPLATE,'REGION'),
           P_PLUG_DISPLAY_SEQUENCE         => 20,
           P_PLUG_DISPLAY_POINT            => WWV_FLOW_THEME_GLOBALS.G_DIALOGBTNR_DISPLAY_POINT,
           P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
           P_PLUG_SOURCE                   => NULL,
           P_PLUG_SOURCE_TYPE              => WWV_FLOW_REGION_NATIVE.C_STATIC,
           P_PLUG_COMMENT                  => NULL);
   ELSE
       IF P_CANCEL_BRANCH IS NOT NULL THEN
           L_CANCEL_BUTTON_REDIRECT_URL := 'f?p=&APP_ID.:'||P_CANCEL_BRANCH||':&SESSION.::&DEBUG.:::';
           L_CANCEL_BUTTON_ACTION       := WWV_FLOW_BUTTON.C_ACTION_REDIRECT_PAGE;
       ELSE
           
           L_CANCEL_BUTTON_REDIRECT_URL := NULL;
           L_CANCEL_BUTTON_ACTION       := WWV_FLOW_BUTTON.C_ACTION_SUBMIT;
       END IF;
       L_BUTTON_REGION_ID       := L_REGION_ID;
       L_BUTTON_REGION_TEMPLATE := L_REGION_TEMPLATE;
   END IF;
 
   IF WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE IS NOT NULL THEN
       L_BUTTON_IMAGE := 'template:'||WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE;
       L_BUTTON_TEMPLATE_OPTIONS :=  GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE,'BUTTON');
   END IF;
 
   WWV_FLOW_API.CREATE_PAGE_BUTTON (
       P_ID                     => L_CANCEL_BUTTON_ID,
       P_FLOW_ID                => P_FLOW_ID,
       P_FLOW_STEP_ID           => P_PAGE_ID,
       P_BUTTON_SEQUENCE        => '10',
       P_BUTTON_PLUG_ID         => L_BUTTON_REGION_ID,
       P_BUTTON_NAME            => 'CANCEL',
       P_BUTTON_IMAGE           => L_BUTTON_IMAGE,
       P_BUTTON_IMAGE_ALT       => P_CANCEL_BUTTON_NAME,
       P_BUTTON_TEMPLATE_OPTIONS=> L_BUTTON_TEMPLATE_OPTIONS,
       P_BUTTON_POSITION        => WWV_FLOW_THEME_MANAGER.GET_BUTTON_POSTION(
                                   P_TEMPLATE_ID => L_BUTTON_REGION_TEMPLATE,
                                   P_POSITION    => '#CLOSE#'),
       P_BUTTON_ALIGNMENT       => 'RIGHT',
       P_BUTTON_REDIRECT_URL    => L_CANCEL_BUTTON_REDIRECT_URL,
       P_BUTTON_ACTION          => L_CANCEL_BUTTON_ACTION,
       P_BUTTON_CONDITION       => NULL,
       P_BUTTON_CONDITION_TYPE  => NULL,
       P_BUTTON_IMAGE_ATTRIBUTES=> NULL,
       P_SECURITY_SCHEME        => NULL,
       P_REQUIRED_PATCH         => NULL);
 
     
     IF P_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN
         L_CANCEL_BUTTON_DA_ID := WWV_FLOW_ID.NEXT_VAL;
         WWV_FLOW_API.CREATE_PAGE_DA_EVENT(
             P_ID                      => L_CANCEL_BUTTON_DA_ID,
             P_FLOW_ID                 => P_FLOW_ID,
             P_PAGE_ID                 => P_PAGE_ID,
             P_NAME                    => WWV_FLOW_LANG.SYSTEM_MESSAGE('DA_NAME.NATIVE_DIALOG_CANCEL'),
             P_EVENT_SEQUENCE          => 10,
             P_TRIGGERING_ELEMENT_TYPE => 'BUTTON',
             P_TRIGGERING_BUTTON_ID    => L_CANCEL_BUTTON_ID,
             P_BIND_TYPE               => 'bind',
             P_BIND_EVENT_TYPE         => 'click');
 
         WWV_FLOW_API.CREATE_PAGE_DA_ACTION(
             P_EVENT_ID                => L_CANCEL_BUTTON_DA_ID,
             P_FLOW_ID                 => P_FLOW_ID,
             P_PAGE_ID                 => P_PAGE_ID,
             P_EVENT_RESULT            => 'TRUE',
             P_ACTION_SEQUENCE         => 10,
             P_EXECUTE_ON_PAGE_INIT    => 'N',
             P_ACTION                  => 'NATIVE_DIALOG_CANCEL',
             P_STOP_EXECUTION_ON_ERROR => 'Y');
     END IF;
 
   WWV_FLOW_API.CREATE_PAGE_BUTTON (
       P_ID                     => L_SUBMIT_BUTTON_ID,
       P_FLOW_ID                => P_FLOW_ID,
       P_FLOW_STEP_ID           => P_PAGE_ID,
       P_BUTTON_SEQUENCE        => '20',
       P_BUTTON_PLUG_ID         => L_BUTTON_REGION_ID,
       P_BUTTON_NAME            => 'SUBMIT',
       P_BUTTON_IMAGE           => L_BUTTON_IMAGE,
       P_BUTTON_IMAGE_ALT       => P_SUBMIT_BUTTON_NAME,
       P_BUTTON_TEMPLATE_OPTIONS=> L_BUTTON_TEMPLATE_OPTIONS,
       P_BUTTON_POSITION        => WWV_FLOW_THEME_MANAGER.GET_BUTTON_POSTION(
                                   P_TEMPLATE_ID => L_BUTTON_REGION_TEMPLATE,
                                   P_POSITION    => CASE WHEN P_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN '#NEXT#' ELSE '#CHANGE#' END),
       P_BUTTON_ALIGNMENT       => 'RIGHT',
       P_BUTTON_EXECUTE_VALIDATIONS => 'Y',
       P_BUTTON_REDIRECT_URL    => NULL,
       P_BUTTON_ACTION          => WWV_FLOW_BUTTON.C_ACTION_SUBMIT,
       P_BUTTON_CONDITION       => NULL,
       P_BUTTON_CONDITION_TYPE  => NULL,
       P_BUTTON_IMAGE_ATTRIBUTES=> NULL,
       P_SECURITY_SCHEME        => NULL,
       P_REQUIRED_PATCH         => NULL,
       P_DATABASE_ACTION        => 'UPDATE');
 
   
   
   
 
   L_PROCESS := GET_OWNER(P_FLOW_ID,P_SCHEMA)||'.'||P_PROCEDURE||'('||WWV_FLOW.LF;
 
   FOR C IN (SELECT * FROM WWV_FLOW_COLLECTIONS
             WHERE COLLECTION_NAME = P_COLLECTION_NAME) LOOP
     IF UPPER(C.C003) = 'YES' THEN
     L_ITEM_ID := WWV_FLOW_ID.NEXT_VAL;
     L_ITEM_NAME := GET_VALID_ITEM_NAME (
                        P_COLUMN_NAME => SUBSTR(C.C001, 3),
                        P_PAGE_ID     => P_PAGE_ID );
 
     L_ITEM_SUFFIX := 0;
 
     LOOP
       SELECT COUNT(1) INTO L_ITEM_COUNT
       FROM WWV_FLOW_STEP_ITEMS
       WHERE FLOW_ID = P_FLOW_ID
       AND FLOW_STEP_ID = P_PAGE_ID
       AND NAME = L_ITEM_NAME;
       IF L_ITEM_COUNT > 0 THEN
         L_ITEM_SUFFIX := L_ITEM_SUFFIX + 1;
         L_ITEM_NAME := L_ITEM_NAME || '_' || TO_CHAR(L_ITEM_SUFFIX);
       ELSE
         EXIT;
       END IF;
     END LOOP;
 
     L_PROCESS := L_PROCESS||C.C001||' => '||GET_ITEM_BIND_VARIABLE(L_ITEM_NAME)||','||WWV_FLOW.LF;
 
     WWV_FLOW_API.CREATE_PAGE_ITEM (
         P_ID                     => L_ITEM_ID,
         P_FLOW_ID                => P_FLOW_ID,
         P_FLOW_STEP_ID           => P_PAGE_ID,
         P_NAME                   => L_ITEM_NAME,
         P_DATA_TYPE              => NULL,
         P_ACCEPT_PROCESSING      => NULL,
         P_ITEM_SEQUENCE          => TO_CHAR(10 * L_COUNT),
         P_ITEM_PLUG_ID           => L_REGION_ID,
         P_USE_CACHE_BEFORE_DEFAULT  => 'YES',
         P_ITEM_DEFAULT           => C.C004,
         P_PROMPT                 => C.C002,
         P_SOURCE                 => NULL,
         P_SOURCE_TYPE            => NULL,
         P_DISPLAY_AS             => C.C005,
         P_CSIZE                  => 30,
         P_CMAXLENGTH             => NULL,
         P_CHEIGHT                => NULL,
         P_IS_PERSISTENT          => 'Y',
         P_FIELD_TEMPLATE         => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,
         P_ITEM_TEMPLATE_OPTIONS  => GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,'ITEM'),
         P_ITEM_COMMENT           => NULL);
 
     L_COUNT := L_COUNT + 1;
     END IF;
   END LOOP;
   L_PROCESS := RTRIM(L_PROCESS,WWV_FLOW.LF||',')||');';
 
   
   
   
   L_PAGE_PROCESS_ID := WWV_FLOW_ID.NEXT_VAL;
   WWV_FLOW_API.CREATE_PAGE_PROCESS (
       P_ID                    => L_PAGE_PROCESS_ID,
       P_FLOW_ID               => P_FLOW_ID,
       P_FLOW_STEP_ID          => P_PAGE_ID,
       P_PROCESS_SEQUENCE      => '10',
       P_PROCESS_POINT         => 'AFTER_SUBMIT',
       P_PROCESS_TYPE          => 'PLSQL',
       P_PROCESS_NAME          => 'Run Stored Procedure',
       P_PROCESS_SQL_CLOB      => L_PROCESS,
       P_ERROR_DISPLAY_LOCATION=> WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION,
       P_PROCESS_WHEN_BUTTON_ID=> L_SUBMIT_BUTTON_ID,
       P_PROCESS_WHEN          => NULL,
       P_PROCESS_WHEN_TYPE     => NULL,
       P_PROCESS_SUCCESS_MESSAGE=> NULL,
       P_REQUIRED_PATCH        => NULL,
       P_PROCESS_COMMENT       => NULL);
 
   IF P_PAGE_MODE = WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN
       IF P_SUBMIT_BRANCH IS NOT NULL THEN 
           
           
           
           L_BRANCH_ON_SUBMIT := WWV_FLOW_ID.NEXT_VAL;
     
           WWV_FLOW_API.CREATE_PAGE_BRANCH (
               P_ID                    => L_BRANCH_ON_SUBMIT,
               P_FLOW_ID               => P_FLOW_ID,
               P_FLOW_STEP_ID          => P_PAGE_ID,
               P_BRANCH_ACTION         => 'f?p=&APP_ID.:'||P_SUBMIT_BRANCH||':&SESSION.&success_msg=#SUCCESS_MSG#',
               P_BRANCH_POINT          => 'AFTER_PROCESSING',
               P_BRANCH_TYPE           => 'REDIRECT_URL',
               P_BRANCH_WHEN_BUTTON_ID => L_SUBMIT_BUTTON_ID,
               P_BRANCH_SEQUENCE       => '1',
               P_BRANCH_CONDITION_TYPE => '',
               P_BRANCH_CONDITION      => NULL,
               P_BRANCH_CONDITION_TEXT => NULL,
               P_REQUIRED_PATCH        => NULL,
               P_BRANCH_COMMENT        => NULL);
       END IF;
   ELSE
       
       
       
       WWV_FLOW_API.CREATE_PAGE_PROCESS(
           P_ID                      => NULL,
           P_FLOW_ID                 => P_FLOW_ID,
           P_FLOW_STEP_ID            => P_PAGE_ID,
           P_PROCESS_SEQUENCE        => 20,
           P_PROCESS_POINT           => 'AFTER_SUBMIT',
           P_PROCESS_TYPE            => WWV_FLOW_PROCESS_NATIVE.C_CLOSE_WINDOW,
           P_PROCESS_NAME            => 'Close Dialog',
           P_ERROR_DISPLAY_LOCATION  => WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION,
           P_PROCESS_WHEN            => 'SUBMIT',
           P_PROCESS_WHEN_TYPE       => 'REQUEST_IN_CONDITION');
 
    END IF;
    
    
    
    IF P_BUTTON_LABEL       IS NOT NULL AND
       P_INVOKING_PAGE_ID   IS NOT NULL AND
       P_INVOKING_REGION_ID IS NOT NULL AND
       P_INVOKING_BUTTON_P  IS NOT NULL THEN
 
       L_INVOKING_BUTTON_NAME := UPPER(REPLACE(REPLACE(P_BUTTON_LABEL,' ','_'),'''',NULL)||'_B');
 
       
       
       
       WWV_FLOW_API.CREATE_PAGE_BUTTON (
           P_ID                     => L_INVOKING_BUTTON_ID,
           P_FLOW_ID                => P_FLOW_ID,
           P_FLOW_STEP_ID           => P_INVOKING_PAGE_ID,
           P_BUTTON_SEQUENCE        => '10',
           P_BUTTON_PLUG_ID         => P_INVOKING_REGION_ID,
           P_BUTTON_NAME            => L_INVOKING_BUTTON_NAME,
           P_BUTTON_IMAGE           => L_BUTTON_IMAGE,
           P_BUTTON_IMAGE_ALT       => P_BUTTON_LABEL,
           P_BUTTON_TEMPLATE_OPTIONS=> L_BUTTON_TEMPLATE_OPTIONS,
           P_BUTTON_POSITION        => P_INVOKING_BUTTON_P,
           P_BUTTON_ALIGNMENT       => 'RIGHT',
           P_BUTTON_REDIRECT_URL    => 'f?p=&APP_ID.:'||P_PAGE_ID||':&SESSION.::&DEBUG.:'||P_PAGE_ID,
           P_BUTTON_ACTION          => WWV_FLOW_BUTTON.C_ACTION_REDIRECT_PAGE,
           P_BUTTON_CONDITION       => NULL,
           P_BUTTON_CONDITION_TYPE  => NULL,
           P_BUTTON_IMAGE_ATTRIBUTES=> NULL,
           P_SECURITY_SCHEME        => NULL,
           P_REQUIRED_PATCH         => NULL);
    END IF;
 
 
 
 EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(-20001,
                           WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.CREATE_FORM_ON_SP',SQLERRM)
                           );
 END CREATE_FORM_ON_SP;
 
 
 
 
 PROCEDURE CREATE_FORM_ON_TABLE (
     P_FLOW_ID                   IN NUMBER   DEFAULT NULL,
     P_PAGE_ID                   IN NUMBER   DEFAULT NULL,
     P_PAGE_NAME                 IN VARCHAR2 DEFAULT 'form',
     P_GROUP_NAME                IN VARCHAR2 DEFAULT NULL,
     P_PAGE_MODE                 IN VARCHAR2,
     P_USER_INTERFACE_ID         IN NUMBER,
     P_USE_UI_DEFAULT            IN VARCHAR2 DEFAULT 'Y',
     
     P_TAB_SET                   IN VARCHAR2 DEFAULT NULL,
     P_TAB_NAME                  IN VARCHAR2 DEFAULT NULL, 
     P_TAB_TEXT                  IN VARCHAR2 DEFAULT NULL,
     
     P_NAV_LIST_ID               IN NUMBER   DEFAULT NULL,
     P_NAV_LIST_ITEM_ID          IN NUMBER   DEFAULT NULL,
     P_NAV_LIST_ITEM_NAME        IN VARCHAR2 DEFAULT NULL,
     P_NAV_LIST_PARENT_ITEM_ID   IN NUMBER   DEFAULT NULL,
     P_NAV_LIST_CHILD_ITEM_NAME  IN VARCHAR2 DEFAULT NULL,
     
     P_REGION_TITLE              IN VARCHAR2 DEFAULT NULL,
     P_REGION_TEMPLATE           IN NUMBER DEFAULT NULL,
     P_TABLE_OWNER               IN VARCHAR2 DEFAULT NULL,
     P_TABLE_NAME                IN VARCHAR2 DEFAULT NULL,
     P_TABLE_PK_COLUMN_NAME      IN VARCHAR2 DEFAULT NULL,
     P_TABLE_PK_SRC_TYPE         IN VARCHAR2 DEFAULT NULL,
     P_TABLE_PK_SRC              IN VARCHAR2 DEFAULT NULL,
     P_TABLE_PK2_COLUMN_NAME     IN VARCHAR2 DEFAULT NULL,
     P_TABLE_PK2_SRC_TYPE        IN VARCHAR2 DEFAULT NULL,
     P_TABLE_PK2_SRC             IN VARCHAR2 DEFAULT NULL,
     P_TABLE_RV_COLUMN_NAME      IN VARCHAR2 DEFAULT NULL,
     P_DISPLAY_COLUMN_LIST       IN VARCHAR2 DEFAULT NULL,
     
     P_CREATE_BUTTON_NAME        IN VARCHAR2 DEFAULT 'Create',
     P_SAVE_BUTTON_NAME          IN VARCHAR2 DEFAULT 'Apply Changes',
     P_DELETE_BUTTON_NAME        IN VARCHAR2 DEFAULT 'Delete',
     P_CANCEL_BUTTON_NAME        IN VARCHAR2 DEFAULT 'Cancel',
     P_BRANCH                    IN NUMBER DEFAULT NULL,
     P_CANCEL_BRANCH             IN NUMBER DEFAULT NULL,
     
     P_INSERT                    IN VARCHAR2 DEFAULT 'Y',
     P_UPDATE                    IN VARCHAR2 DEFAULT 'Y',
     P_DELETE                    IN VARCHAR2 DEFAULT 'Y',
     
     P_DIALOG_CHAINED            IN VARCHAR2 DEFAULT 'Y'
    )
 IS
    L_CSIZE                      INT := 0;
    L_CMAXLENGTH                 INT := 0;
    L_CHEIGHT                    INT := 0;
    L_FIELD_TEMPLATE             NUMBER;
    L_GRP_REGION_ID              NUMBER;
    L_DISP_SEQ                   NUMBER := 0;
    L_LOV_ID                     NUMBER;
    L_GROUP_ID                   NUMBER := NULL;
    L_BUTTON_REGION_ID           NUMBER;
    L_REGION_TEMPLATE            NUMBER;
    L_BUTTON_REGION_TEMPLATE     NUMBER;
    
    L_ATTRIBUTE_01               WWV_FLOW_STEP_ITEMS.ATTRIBUTE_01%TYPE;
    L_ATTRIBUTE_02               WWV_FLOW_STEP_ITEMS.ATTRIBUTE_02%TYPE;
    L_ATTRIBUTE_03               WWV_FLOW_STEP_ITEMS.ATTRIBUTE_03%TYPE;
    L_ATTRIBUTE_04               WWV_FLOW_STEP_ITEMS.ATTRIBUTE_04%TYPE;
    L_ATTRIBUTE_05               WWV_FLOW_STEP_ITEMS.ATTRIBUTE_05%TYPE;
    L_ATTRIBUTE_06               WWV_FLOW_STEP_ITEMS.ATTRIBUTE_06%TYPE;
    L_ATTRIBUTE_07               WWV_FLOW_STEP_ITEMS.ATTRIBUTE_07%TYPE;
    L_ATTRIBUTE_08               WWV_FLOW_STEP_ITEMS.ATTRIBUTE_08%TYPE;
    L_ATTRIBUTE_09               WWV_FLOW_STEP_ITEMS.ATTRIBUTE_09%TYPE;
    L_ATTRIBUTE_10               WWV_FLOW_STEP_ITEMS.ATTRIBUTE_10%TYPE;
    L_ATTRIBUTE_11               WWV_FLOW_STEP_ITEMS.ATTRIBUTE_11%TYPE;
    L_ATTRIBUTE_12               WWV_FLOW_STEP_ITEMS.ATTRIBUTE_12%TYPE;
    L_ATTRIBUTE_13               WWV_FLOW_STEP_ITEMS.ATTRIBUTE_13%TYPE;
    L_ATTRIBUTE_14               WWV_FLOW_STEP_ITEMS.ATTRIBUTE_14%TYPE;
    L_ATTRIBUTE_15               WWV_FLOW_STEP_ITEMS.ATTRIBUTE_15%TYPE;
    
    L_OWNER                      VARCHAR2(4000) := GET_OWNER(P_FLOW_ID,P_TABLE_OWNER);
    L_FORMAT_MASK                VARCHAR2(255);
    L_DISPLAY_SEQ                VARCHAR2(255);
    L_DISPLAY_AS                 VARCHAR2(255);
    L_DISPLAY_WHEN               VARCHAR2(4000);
    L_DISPLAY_WHEN_TYPE          VARCHAR2(4000);
    L_SHORTCUT_NAME              VARCHAR2(1000);
    L_SHORTCUT                   VARCHAR2(1000);
    L_SOURCE                     VARCHAR2(4000);
    L_DEFAULT_VALUE              VARCHAR2(4000);
    L_DEFAULT_TYPE               VARCHAR2(4000);
    L_LOV_NAME                   VARCHAR2(4000);
    L_LABEL                      VARCHAR2(4000);
    L_BUTTON_IMAGE               VARCHAR2(4000);
    L_PK_ITEM                    VARCHAR2(4000);
    L_PK2_ITEM                   VARCHAR2(4000);
    L_LOV_QUERY                  VARCHAR2(32767);
    L_FETCH                      VARCHAR2(32767);
    L_PK_SOURCE                  VARCHAR2(32767);
    L_PK2_SOURCE                 VARCHAR2(32767);
    L_PK_COLUMNS                 VARCHAR2(32767);
    L_VALID_DATA_TYPES           VARCHAR2(32767) := G_VALID_DATA_TYPES||'BLOB:';
    L_SEQ                        NUMBER;
    L_BUTTON_TEMPLATE_OPTIONS    VARCHAR2(255);
 
 BEGIN
    
    
    
    
    
    
    IF P_USE_UI_DEFAULT = 'N' THEN
        WWV_FLOW_HINT.G_USE_UI_DEFAULTS := FALSE;
    END IF;
 
    
    
    
   WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
       P_FLOW_ID           => P_FLOW_ID,
       P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
    
    
    
    IF NOT PAGE_EXISTS (P_FLOW_ID,P_PAGE_ID) THEN
 
        
        
        
        IF P_GROUP_NAME IS NOT NULL THEN
            L_GROUP_ID := WWV_FLOW_UTILITIES.GET_PAGE_GROUP_ID(P_GROUP_NAME => P_GROUP_NAME, P_APPLICATION_ID => P_FLOW_ID);
            
            IF L_GROUP_ID IS NULL THEN
                L_GROUP_ID := WWV_FLOW_ID.NEXT_VAL;
                WWV_FLOW_API.CREATE_PAGE_GROUP(P_ID => L_GROUP_ID, P_FLOW_ID => P_FLOW_ID, P_GROUP_NAME => P_GROUP_NAME);
            END IF;
        END IF;
 
        WWV_FLOW_API.CREATE_PAGE(
          P_ID                  => P_PAGE_ID,
          P_FLOW_ID             => P_FLOW_ID,
          P_TAB_SET             => REPLACE(P_TAB_SET,'%null%',NULL),
          P_NAME                => P_PAGE_NAME,
          P_GROUP_ID            => L_GROUP_ID,
          P_PAGE_MODE           => P_PAGE_MODE,
          P_USER_INTERFACE_ID  => P_USER_INTERFACE_ID,
          P_STEP_TITLE          => P_PAGE_NAME,
          P_STEP_SUB_TITLE      => NULL,
          P_STEP_SUB_TITLE_TYPE => 'TEXT_WITH_SUBSTITUTIONS',
          P_WELCOME_TEXT        => '',
          P_BOX_WELCOME_TEXT    => '',
          P_BOX_FOOTER_TEXT     => '',
          P_FOOTER_TEXT         => '',
          P_STEP_TEMPLATE       => '',
          P_PAGE_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_PAGE_TEMPLATE, 'PAGE'),
          P_BOX_IMAGE           => '',
          P_REQUIRED_ROLE       => '',
          P_PROTECTION_LEVEL   => WWV_FLOW_PAGE.C_PROTECTION_CHECKSUM,
          P_PAGE_COMMENT       => NULL,
          P_DIALOG_CHAINED     => P_DIALOG_CHAINED);
 
 
           IF P_NAV_LIST_ID IS NOT NULL THEN
             
             CREATE_NAVIGATION_LIST_ITEM (
                 P_FLOW_ID                  => P_FLOW_ID,
                 P_PAGE_ID                  => P_PAGE_ID,
                 P_PAGE_NAME                => P_PAGE_NAME,
                 P_NAV_LIST_ID              => P_NAV_LIST_ID,
                 P_NAV_LIST_ITEM_ID         => P_NAV_LIST_ITEM_ID,
                 P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_ITEM_NAME,
                 P_NAV_LIST_PARENT_ITEM_ID  => P_NAV_LIST_PARENT_ITEM_ID,
                 P_NAV_LIST_CHILD_ITEM_NAME => P_NAV_LIST_CHILD_ITEM_NAME
             );
           ELSE
 
                
                IF REPLACE(P_TAB_SET,'%null%',NULL) IS NOT NULL THEN
                   CREATE_TAB (
                      P_FLOW_ID  => P_FLOW_ID,
                      P_PAGE_ID  => P_PAGE_ID,
                      P_TAB_SET  => P_TAB_SET,
                      P_TAB_NAME => P_TAB_NAME,
                      P_TAB_TEXT => P_TAB_TEXT);
                END IF;
 
           END IF;
 
    END IF;
 
    
    
    
    
    
 
    
    L_REGION_TEMPLATE := CASE
                           WHEN P_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL
                           THEN NVL(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_DIALOGR_TEMPLATE,P_REGION_TEMPLATE)
                           ELSE P_REGION_TEMPLATE
                         END;
 
    IF WWV_FLOW_HINT.G_USE_UI_DEFAULTS THEN
        
        IF WWV_FLOW_HINT.TABLE_HINT_EXISTS(P_SCHEMA => P_TABLE_OWNER,P_TABLE_NAME => P_TABLE_NAME) THEN
 
            
            FOR C11 IN ( SELECT COUNT(C.COLUMN_NAME) CNT
                           FROM WWV_FLOW_HNT_COLUMN_INFO C,
                                WWV_FLOW_HNT_GROUPS G,
                                WWV_FLOW_HNT_TABLE_INFO T
                          WHERE T.TABLE_ID    = C.TABLE_ID
                            AND C.GROUP_ID    = G.GROUP_ID (+)
                            AND T.SCHEMA      = P_TABLE_OWNER
                            AND T.TABLE_NAME  = P_TABLE_NAME
                            AND C.GROUP_ID IS NULL
            )
            LOOP
                IF C11.CNT > 0 THEN
                    L_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
                    IF UI_DEF_GROUPS_EXIST(P_TABLE_OWNER => P_TABLE_OWNER,P_TABLE_NAME => P_TABLE_NAME) THEN
                        L_DISP_SEQ := 10;
                    END IF;
 
                    WWV_FLOW_API.CREATE_PAGE_PLUG (
                        P_ID                            => L_REGION_ID,
                        P_FLOW_ID                       => P_FLOW_ID,
                        P_PAGE_ID                       => P_PAGE_ID,
                        P_PLUG_NAME                     => P_REGION_TITLE,
                        P_PLUG_TEMPLATE                 => L_REGION_TEMPLATE,
                        P_REGION_TEMPLATE_OPTIONS       => GET_PRESET_TEMPLATE_OPTIONS (L_REGION_TEMPLATE,'REGION'),
                        P_PLUG_DISPLAY_SEQUENCE         => L_DISP_SEQ,
                        P_PLUG_DISPLAY_POINT            => 'BODY',
                        P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
                        P_PLUG_SOURCE                   => NULL,
                        P_PLUG_SOURCE_TYPE              => WWV_FLOW_REGION_NATIVE.C_STATIC,
                        P_PLUG_COMMENT                  => NULL);
                END IF;
            END LOOP;
 
            
            IF UI_DEF_GROUPS_EXIST(P_TABLE_OWNER => P_TABLE_OWNER,P_TABLE_NAME => P_TABLE_NAME) THEN
                FOR C12 IN (SELECT G.GROUP_ID,
                                   G.DISPLAY_SEQUENCE GROUP_SEQ,
                                   G.GROUP_NAME,
                                   ROWNUM
                            FROM WWV_FLOW_HNT_GROUPS G,
                                 WWV_FLOW_HNT_TABLE_INFO T
                           WHERE T.TABLE_ID    = G.TABLE_ID
                             AND T.SCHEMA      = P_TABLE_OWNER
                             AND T.TABLE_NAME  = P_TABLE_NAME
                             ORDER BY G.DISPLAY_SEQUENCE ASC)
                LOOP
                    IF C12.GROUP_ID IS NOT NULL THEN
                        L_GRP_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
                        IF L_REGION_ID IS NULL AND C12.ROWNUM = 1 THEN
                            L_REGION_ID := L_GRP_REGION_ID;
                        END IF;
                        WWV_FLOW_API.CREATE_PAGE_PLUG (
                            P_ID                            => L_GRP_REGION_ID,
                            P_FLOW_ID                       => P_FLOW_ID,
                            P_PAGE_ID                       => P_PAGE_ID,
                            P_PLUG_NAME                     => C12.GROUP_NAME,
                            P_PLUG_TEMPLATE                 => L_REGION_TEMPLATE,
                            P_REGION_TEMPLATE_OPTIONS       => GET_PRESET_TEMPLATE_OPTIONS (L_REGION_TEMPLATE,'REGION'),
                            P_PLUG_DISPLAY_SEQUENCE         => L_DISP_SEQ+C12.GROUP_SEQ, 
                            P_PLUG_DISPLAY_POINT            => 'BODY',
                            P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
                            P_PLUG_SOURCE                   => NULL,
                            P_PLUG_SOURCE_TYPE              => WWV_FLOW_REGION_NATIVE.C_STATIC,
                            P_PLUG_COMMENT                  => NULL);
                    END IF;
                END LOOP;
            END IF;
 
        
        ELSE
            L_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
            WWV_FLOW_API.CREATE_PAGE_PLUG (
                P_ID                            => L_REGION_ID,
                P_FLOW_ID                       => P_FLOW_ID,
                P_PAGE_ID                       => P_PAGE_ID,
                P_PLUG_NAME                     => P_REGION_TITLE,
                P_PLUG_TEMPLATE                 => L_REGION_TEMPLATE,
                P_REGION_TEMPLATE_OPTIONS       => GET_PRESET_TEMPLATE_OPTIONS (L_REGION_TEMPLATE,'REGION'),
                P_PLUG_DISPLAY_SEQUENCE         => '10',
                P_PLUG_DISPLAY_POINT            => 'BODY',
                P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
                P_PLUG_SOURCE                   => NULL,
                P_PLUG_SOURCE_TYPE              => WWV_FLOW_REGION_NATIVE.C_STATIC,
                P_PLUG_COMMENT                  => NULL);
         END IF;
 
    ELSE
        L_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
        WWV_FLOW_API.CREATE_PAGE_PLUG (
            P_ID                            => L_REGION_ID,
            P_FLOW_ID                       => P_FLOW_ID,
            P_PAGE_ID                       => P_PAGE_ID,
            P_PLUG_NAME                     => P_REGION_TITLE,
            P_PLUG_TEMPLATE                 => L_REGION_TEMPLATE,
            P_REGION_TEMPLATE_OPTIONS       => GET_PRESET_TEMPLATE_OPTIONS (L_REGION_TEMPLATE,'REGION'),
            P_PLUG_DISPLAY_SEQUENCE         => '10',
            P_PLUG_DISPLAY_POINT            => 'BODY',
            P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
            P_PLUG_SOURCE                   => NULL,
            P_PLUG_SOURCE_TYPE              => WWV_FLOW_REGION_NATIVE.C_STATIC,
            P_PLUG_COMMENT                  => NULL);
 
    END IF;
 
   
   
   
 
   IF P_INSERT = 'Y' THEN
     L_CREATE_BUTTON_ID := WWV_FLOW_ID.NEXT_VAL;
   END IF;
   IF P_UPDATE = 'Y' THEN
     L_SAVE_BUTTON_ID := WWV_FLOW_ID.NEXT_VAL;
   END IF;
   IF P_DELETE = 'Y' THEN
     L_DELETE_BUTTON_ID := WWV_FLOW_ID.NEXT_VAL;
   END IF;
 
   IF P_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN
       
       L_CANCEL_BUTTON_REDIRECT_URL := NULL;
       L_CANCEL_BUTTON_ACTION       := WWV_FLOW_BUTTON.C_ACTION_DEFINED_BY_DA;
 
       
       
       
       L_BUTTON_REGION_ID       := WWV_FLOW_ID.NEXT_VAL;
       
       L_BUTTON_REGION_TEMPLATE := COALESCE(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_DIALOGBTNR_TEMPLATE,WWV_FLOW_THEME_GLOBALS.G_DEFAULT_REGION_TEMPLATE);
 
       WWV_FLOW_API.CREATE_PAGE_PLUG (
           P_ID                            => L_BUTTON_REGION_ID,
           P_FLOW_ID                       => P_FLOW_ID,
           P_PAGE_ID                       => P_PAGE_ID,
           P_PLUG_NAME                     => WWV_FLOW_LANG.SYSTEM_MESSAGE('LAYOUT.T_BUTTON'),
           P_PLUG_TEMPLATE                 => L_BUTTON_REGION_TEMPLATE,
           P_REGION_TEMPLATE_OPTIONS       => WWV_FLOW_WIZARD_API.GET_PRESET_TEMPLATE_OPTIONS(L_BUTTON_REGION_TEMPLATE,'REGION'),
           P_PLUG_DISPLAY_SEQUENCE         => L_DISP_SEQ+10,
           P_PLUG_DISPLAY_POINT            => WWV_FLOW_THEME_GLOBALS.G_DIALOGBTNR_DISPLAY_POINT,
           P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
           P_PLUG_SOURCE                   => NULL,
           P_PLUG_SOURCE_TYPE              => WWV_FLOW_REGION_NATIVE.C_STATIC,
           P_PLUG_COMMENT                  => NULL);
 
   ELSE
       L_BUTTON_REGION_ID       := L_REGION_ID;
       L_BUTTON_REGION_TEMPLATE := L_REGION_TEMPLATE;
 
       IF P_CANCEL_BRANCH IS NOT NULL THEN
           L_CANCEL_BUTTON_REDIRECT_URL := 'f?p=&APP_ID.:'||P_CANCEL_BRANCH||':&SESSION.::&DEBUG.:::';
           L_CANCEL_BUTTON_ACTION       := WWV_FLOW_BUTTON.C_ACTION_REDIRECT_PAGE;
       ELSE
           
           L_CANCEL_BUTTON_REDIRECT_URL := NULL;
           L_CANCEL_BUTTON_ACTION       := WWV_FLOW_BUTTON.C_ACTION_SUBMIT;
       END IF;
   END IF;
 
   IF WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE IS NOT NULL THEN
       L_BUTTON_IMAGE := 'template:'||WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE;
       L_BUTTON_TEMPLATE_OPTIONS :=  GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE,'BUTTON');
   END IF;
 
   L_CANCEL_BUTTON_ID    := WWV_FLOW_ID.NEXT_VAL;
   L_CANCEL_BUTTON_DA_ID := WWV_FLOW_ID.NEXT_VAL;
 
   WWV_FLOW_API.CREATE_PAGE_BUTTON (
       P_ID                     => L_CANCEL_BUTTON_ID,
       P_FLOW_ID                => P_FLOW_ID,
       P_FLOW_STEP_ID           => P_PAGE_ID,
       P_BUTTON_SEQUENCE        => '10',
       P_BUTTON_PLUG_ID         => L_BUTTON_REGION_ID,
       P_BUTTON_NAME            => 'CANCEL',
       P_BUTTON_IMAGE           => L_BUTTON_IMAGE,
       P_BUTTON_IMAGE_ALT       => P_CANCEL_BUTTON_NAME,
       P_BUTTON_TEMPLATE_OPTIONS=> L_BUTTON_TEMPLATE_OPTIONS,
       P_BUTTON_POSITION        => WWV_FLOW_THEME_MANAGER.GET_BUTTON_POSTION(
                                   P_TEMPLATE_ID => L_BUTTON_REGION_TEMPLATE,
                                   P_POSITION    => '#CLOSE#'),
       P_BUTTON_ALIGNMENT       => 'RIGHT',
       P_BUTTON_REDIRECT_URL    => L_CANCEL_BUTTON_REDIRECT_URL,
       P_BUTTON_ACTION          => L_CANCEL_BUTTON_ACTION,
       P_BUTTON_CONDITION       => NULL,
       P_BUTTON_CONDITION_TYPE  => NULL,
       P_BUTTON_IMAGE_ATTRIBUTES=> NULL,
       P_SECURITY_SCHEME        => NULL,
       P_REQUIRED_PATCH         => NULL);
 
   IF P_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN
       WWV_FLOW_API.CREATE_PAGE_DA_EVENT(
           P_ID                      => L_CANCEL_BUTTON_DA_ID,
           P_FLOW_ID                 => P_FLOW_ID,
           P_PAGE_ID                 => P_PAGE_ID,
           P_NAME                    => 'Cancel Dialog',
           P_EVENT_SEQUENCE          => 10,
           P_TRIGGERING_ELEMENT_TYPE => 'BUTTON',
           P_TRIGGERING_BUTTON_ID    => L_CANCEL_BUTTON_ID,
           P_BIND_TYPE               => 'bind',
           P_BIND_EVENT_TYPE         => 'click');
 
       WWV_FLOW_API.CREATE_PAGE_DA_ACTION(
           P_EVENT_ID                => L_CANCEL_BUTTON_DA_ID,
           P_FLOW_ID                 => P_FLOW_ID,
           P_PAGE_ID                 => P_PAGE_ID,
           P_EVENT_RESULT            => 'TRUE',
           P_ACTION_SEQUENCE         => 10,
           P_EXECUTE_ON_PAGE_INIT    => 'N',
           P_ACTION                  => 'NATIVE_DIALOG_CANCEL',
           P_STOP_EXECUTION_ON_ERROR => 'Y');
   END IF;
 
   IF P_DELETE='Y' THEN
     L_SHORTCUT_NAME := 'DELETE_CONFIRM_MSG';
     L_SHORTCUT := L_SHORTCUT_NAME;
     
     
     
     IF NOT SHORTCUT_EXIST(P_FLOW_ID=>P_FLOW_ID,P_SHORTCUT_NAME=>L_SHORTCUT_NAME) THEN
 
       L_SHORTCUT := GET_SHORTCUT_NAME(P_FLOW_ID=>P_FLOW_ID,P_SHORTCUT_NAME=>L_SHORTCUT_NAME);
 
       WWV_FLOW_API.CREATE_SHORTCUT (
           P_ID=> NULL,
           P_FLOW_ID=> P_FLOW_ID,
           P_SHORTCUT_NAME=> L_SHORTCUT,
           P_SHORTCUT_TYPE=> 'TEXT_ESCAPE_JS',
           P_SHORTCUT=> WWV_FLOW_LANG.SYSTEM_MESSAGE('DELETE_MSG'));
     END IF;
 
     UPDATE_JS_CODE_W_SHORTCUT (
         P_FLOW_ID             => P_FLOW_ID,
         P_PAGE_ID             => P_PAGE_ID,
         P_SHORTCUT_NAME       => L_SHORTCUT,
         P_ADD_JAVASCRIPT_CODE => 'var htmldb_delete_message=''"'||L_SHORTCUT||'"'';' );
 
     WWV_FLOW_API.CREATE_PAGE_BUTTON (
       P_ID                     => L_DELETE_BUTTON_ID,
       P_FLOW_ID                => P_FLOW_ID,
       P_FLOW_STEP_ID           => P_PAGE_ID,
       P_BUTTON_SEQUENCE        => '20',
       P_BUTTON_PLUG_ID         => L_BUTTON_REGION_ID,
       P_BUTTON_NAME            => 'DELETE',
       P_BUTTON_IMAGE           => L_BUTTON_IMAGE,
       P_BUTTON_IMAGE_ALT       => P_DELETE_BUTTON_NAME,
       P_BUTTON_TEMPLATE_OPTIONS=> L_BUTTON_TEMPLATE_OPTIONS,
       P_BUTTON_POSITION        => WWV_FLOW_THEME_MANAGER.GET_BUTTON_POSTION(
                                   P_TEMPLATE_ID => L_BUTTON_REGION_TEMPLATE,
                                   P_POSITION    => '#DELETE#'),
       P_BUTTON_ALIGNMENT       => 'RIGHT',
       P_BUTTON_EXECUTE_VALIDATIONS => 'N',
       P_BUTTON_REDIRECT_URL    => 'javascript:apex.confirm(htmldb_delete_message,''DELETE'');',
       P_BUTTON_ACTION          => WWV_FLOW_BUTTON.C_ACTION_REDIRECT_URL,
       P_BUTTON_CONDITION_TYPE  => 'ITEM_IS_NOT_NULL',
       P_BUTTON_CONDITION       => GET_VALID_ITEM_NAME(P_TABLE_PK_COLUMN_NAME, P_PAGE_ID),
       P_BUTTON_IMAGE_ATTRIBUTES=> NULL,
       P_SECURITY_SCHEME        => NULL,
       P_REQUIRED_PATCH         => NULL,
       P_DATABASE_ACTION        => 'DELETE');
   END IF;
 
   IF P_UPDATE = 'Y' THEN
     WWV_FLOW_API.CREATE_PAGE_BUTTON (
       P_ID                     => L_SAVE_BUTTON_ID,
       P_FLOW_ID                => P_FLOW_ID,
       P_FLOW_STEP_ID           => P_PAGE_ID,
       P_BUTTON_SEQUENCE        => '30',
       P_BUTTON_PLUG_ID         => L_BUTTON_REGION_ID,
       P_BUTTON_NAME            => 'SAVE',
       P_BUTTON_IMAGE           => L_BUTTON_IMAGE,
       P_BUTTON_IMAGE_ALT       => P_SAVE_BUTTON_NAME,
       P_BUTTON_TEMPLATE_OPTIONS=> L_BUTTON_TEMPLATE_OPTIONS,
       P_BUTTON_POSITION        => WWV_FLOW_THEME_MANAGER.GET_BUTTON_POSTION(
                                   P_TEMPLATE_ID => L_BUTTON_REGION_TEMPLATE,
                                   P_POSITION    => CASE WHEN P_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN '#NEXT#' ELSE '#CHANGE#' END),
       P_BUTTON_IS_HOT         => 'Y',
       P_BUTTON_ALIGNMENT       => 'RIGHT',
       P_BUTTON_EXECUTE_VALIDATIONS => 'Y',
       P_BUTTON_REDIRECT_URL    => NULL,
       P_BUTTON_ACTION          => WWV_FLOW_BUTTON.C_ACTION_SUBMIT,
       P_BUTTON_CONDITION       => GET_VALID_ITEM_NAME(P_TABLE_PK_COLUMN_NAME, P_PAGE_ID),
       P_BUTTON_CONDITION_TYPE  => 'ITEM_IS_NOT_NULL',
       P_BUTTON_IMAGE_ATTRIBUTES=> NULL,
       P_SECURITY_SCHEME        => NULL,
       P_REQUIRED_PATCH         => NULL,
       P_DATABASE_ACTION        => 'UPDATE');
   END IF;
 
   IF P_INSERT = 'Y' THEN
     WWV_FLOW_API.CREATE_PAGE_BUTTON (
       P_ID                     => L_CREATE_BUTTON_ID,
       P_FLOW_ID                => P_FLOW_ID,
       P_FLOW_STEP_ID           => P_PAGE_ID,
       P_BUTTON_SEQUENCE        => '40',
       P_BUTTON_PLUG_ID         => L_BUTTON_REGION_ID,
       P_BUTTON_NAME            => 'CREATE',
       P_BUTTON_IMAGE           => L_BUTTON_IMAGE,
       P_BUTTON_IMAGE_ALT       => P_CREATE_BUTTON_NAME,
       P_BUTTON_TEMPLATE_OPTIONS=> L_BUTTON_TEMPLATE_OPTIONS,
       P_BUTTON_POSITION        => WWV_FLOW_THEME_MANAGER.GET_BUTTON_POSTION(
                                   P_TEMPLATE_ID => L_BUTTON_REGION_TEMPLATE,
                                   P_POSITION    => CASE WHEN P_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN '#NEXT#' ELSE '#CREATE#' END),
       P_BUTTON_IS_HOT         => 'Y',
       P_BUTTON_ALIGNMENT       => 'RIGHT',
       P_BUTTON_EXECUTE_VALIDATIONS => 'Y',
       P_BUTTON_REDIRECT_URL    => NULL,
       P_BUTTON_ACTION          => WWV_FLOW_BUTTON.C_ACTION_SUBMIT,
       P_BUTTON_CONDITION       => GET_VALID_ITEM_NAME(P_TABLE_PK_COLUMN_NAME, P_PAGE_ID),
       P_BUTTON_CONDITION_TYPE  => 'ITEM_IS_NULL',
       P_BUTTON_IMAGE_ATTRIBUTES=> NULL,
       P_SECURITY_SCHEME        => NULL,
       P_REQUIRED_PATCH         => NULL,
       P_DATABASE_ACTION        => 'INSERT');
   END IF;
 
   
   
   
   IF P_BRANCH IS NOT NULL AND P_PAGE_MODE = WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN
        L_BRANCH := WWV_FLOW_ID.NEXT_VAL;
        WWV_FLOW_API.CREATE_PAGE_BRANCH (
           P_ID                    => L_BRANCH,
           P_FLOW_ID               => P_FLOW_ID,
           P_FLOW_STEP_ID          => P_PAGE_ID,
           P_BRANCH_ACTION         => 'f?p=&APP_ID.:'||P_BRANCH||':&SESSION.&success_msg=#SUCCESS_MSG#',
           P_BRANCH_POINT          => 'AFTER_PROCESSING',
           P_BRANCH_TYPE           => 'REDIRECT_URL',
           P_BRANCH_WHEN_BUTTON_ID => NULL,
           P_BRANCH_SEQUENCE       => '1',
           P_BRANCH_CONDITION_TYPE => '',
           P_BRANCH_CONDITION      => NULL,
           P_BRANCH_CONDITION_TEXT => NULL,
           P_REQUIRED_PATCH        => NULL,
           P_BRANCH_COMMENT        => NULL);
    END IF;
 
 
    
    
    
 
    
    L_PK_COLUMNS := WWV_FLOW_WIZARD_API.GET_PK( P_TABLE_OWNER  => P_TABLE_OWNER,
                                         P_TABLE_NAME   => P_TABLE_NAME);
    
    
    
    L_ITEM_ID := WWV_FLOW_ID.NEXT_VAL;
    L_PK_ITEM := GET_VALID_ITEM_NAME (
                     P_COLUMN_NAME => P_TABLE_PK_COLUMN_NAME,
                     P_PAGE_ID     => P_PAGE_ID );
    
    
    
    IF ( WWV_FLOW_BUILDER.IS_ITEM_NAME_USED(P_FLOW_ID, L_PK_ITEM) ) THEN
        FOR J IN 1..100 LOOP
            IF ( WWV_FLOW_BUILDER.IS_ITEM_NAME_USED(P_FLOW_ID, L_PK_ITEM||'_'||J) = FALSE) THEN
                L_PK_ITEM := L_PK_ITEM||'_'||J;
                EXIT;
            END IF;
        END LOOP;
    ELSE
        L_PK_ITEM := L_PK_ITEM;
    END IF;
 
    IF P_TABLE_PK_SRC_TYPE IN ('F','S') AND P_TABLE_PK_SRC IS NOT NULL THEN
        
        IF P_TABLE_PK_SRC_TYPE = 'F' THEN
            L_PK_SOURCE :=              'declare'||WWV_FLOW.LF;
            L_PK_SOURCE := L_PK_SOURCE||'    function get_pk return varchar2'||WWV_FLOW.LF;
            L_PK_SOURCE := L_PK_SOURCE||'    is'||WWV_FLOW.LF;
            L_PK_SOURCE := L_PK_SOURCE||'    begin'||WWV_FLOW.LF;
            L_PK_SOURCE := L_PK_SOURCE||'        '||P_TABLE_PK_SRC||WWV_FLOW.LF;
            L_PK_SOURCE := L_PK_SOURCE||'    end; '||WWV_FLOW.LF;
            L_PK_SOURCE := L_PK_SOURCE||'begin'||WWV_FLOW.LF;
            L_PK_SOURCE := L_PK_SOURCE||'    '||GET_ITEM_BIND_VARIABLE(L_PK_ITEM)||' := get_pk;'||WWV_FLOW.LF;
            L_PK_SOURCE := L_PK_SOURCE||'end;';
        ELSIF P_TABLE_PK_SRC_TYPE = 'S' THEN
            L_PK_SOURCE :=              'begin '||WWV_FLOW.LF;
            L_PK_SOURCE := L_PK_SOURCE||'    if '||GET_ITEM_BIND_VARIABLE(L_PK_ITEM)||' is null then'||WWV_FLOW.LF;
            L_PK_SOURCE := L_PK_SOURCE||'        select '||WWV_FLOW_ASSERT.ENQUOTE_NAME(L_OWNER)||
                                                 '.'||WWV_FLOW_ASSERT.ENQUOTE_NAME(P_TABLE_PK_SRC)||'.nextval'||WWV_FLOW.LF;
            L_PK_SOURCE := L_PK_SOURCE||'          into '||GET_ITEM_BIND_VARIABLE(L_PK_ITEM)||WWV_FLOW.LF;
            L_PK_SOURCE := L_PK_SOURCE||'          from sys.dual;'||WWV_FLOW.LF;
            L_PK_SOURCE := L_PK_SOURCE||'    end if;'||WWV_FLOW.LF;
            L_PK_SOURCE := L_PK_SOURCE||'end;';
        END IF;
    END IF;
 
    WWV_FLOW_API.CREATE_PAGE_ITEM(
              P_ID                       => L_ITEM_ID,
              P_FLOW_ID                  => P_FLOW_ID,
              P_FLOW_STEP_ID             => P_PAGE_ID,
              P_NAME                     => L_PK_ITEM,
              P_DATA_TYPE                => 'VARCHAR',
              P_ITEM_PLUG_ID             => L_REGION_ID,
              P_ACCEPT_PROCESSING        => 'REPLACE_EXISTING',
              P_ITEM_SEQUENCE            => '1',
              P_USE_CACHE_BEFORE_DEFAULT => 'NO',
              P_PROMPT                   => NVL(WWV_FLOW_HINT.GET_LABEL (
                                                P_SCHEMA      => P_TABLE_OWNER,
                                                P_TABLE_NAME  => P_TABLE_NAME,
                                                P_COLUMN_NAME => P_TABLE_PK_COLUMN_NAME),
                                                REPLACE(INITCAP(P_TABLE_PK_COLUMN_NAME),'_',' ')),
              P_SOURCE                   => P_TABLE_PK_COLUMN_NAME,
              P_SOURCE_TYPE              => 'DB_COLUMN',
              P_DISPLAY_AS               => 'HIDDEN_PROTECTED',
              P_LOV                      => '',
              P_LOV_DISPLAY_NULL         => 'NO',
              P_CSIZE                    => 30,
              P_CMAXLENGTH               => 255,
              P_CHEIGHT                  => NULL,
              P_CATTRIBUTES              => '',
              P_BEGIN_ON_NEW_LINE        => 'YES',
              P_BEGIN_ON_NEW_FIELD       => 'YES',
              P_LABEL_ALIGNMENT          => 'RIGHT',
              P_FIELD_TEMPLATE           => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,
              P_ITEM_TEMPLATE_OPTIONS    => GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,'ITEM'),
              P_FIELD_ALIGNMENT          => 'LEFT',
              P_DISPLAY_WHEN             => '',
              P_IS_PERSISTENT            => 'Y',
              P_PROTECTION_LEVEL         => WWV_FLOW_ITEM.C_PROTECTION_CHECKSUM,
              P_SECURITY_SCHEME          => '',
              P_ITEM_COMMENT             => NULL);
 
    IF REPLACE(P_TABLE_PK2_COLUMN_NAME,'%null%',NULL) IS NOT NULL THEN
        L_ITEM_ID := WWV_FLOW_ID.NEXT_VAL;
        L_PK2_ITEM   := GET_VALID_ITEM_NAME (
                            P_COLUMN_NAME => P_TABLE_PK2_COLUMN_NAME,
                            P_PAGE_ID     => P_PAGE_ID );
        
        
        
        IF ( WWV_FLOW_BUILDER.IS_ITEM_NAME_USED(P_FLOW_ID, L_PK2_ITEM) ) THEN
            FOR J IN 1..100 LOOP
                IF ( WWV_FLOW_BUILDER.IS_ITEM_NAME_USED(P_FLOW_ID, L_PK2_ITEM||'_'||J) = FALSE) THEN
                    L_PK2_ITEM := L_PK2_ITEM||'_'||J;
                    EXIT;
                END IF;
            END LOOP;
        ELSE
            L_PK2_ITEM := L_PK2_ITEM;
        END IF;
 
        IF P_TABLE_PK2_SRC_TYPE = 'F' AND P_TABLE_PK2_SRC IS NOT NULL THEN
            L_PK2_SOURCE :=               'declare'||WWV_FLOW.LF;
            L_PK2_SOURCE := L_PK2_SOURCE||'    function get_pk2 return varchar2'||WWV_FLOW.LF;
            L_PK2_SOURCE := L_PK2_SOURCE||'    is'||WWV_FLOW.LF;
            L_PK2_SOURCE := L_PK2_SOURCE||'    begin'||WWV_FLOW.LF;
            L_PK2_SOURCE := L_PK2_SOURCE||'        '||P_TABLE_PK2_SRC||WWV_FLOW.LF;
            L_PK2_SOURCE := L_PK2_SOURCE||'    end; '||WWV_FLOW.LF;
            L_PK2_SOURCE := L_PK2_SOURCE||'begin'||WWV_FLOW.LF;
            L_PK2_SOURCE := L_PK2_SOURCE||'    '||GET_ITEM_BIND_VARIABLE(L_PK2_ITEM)||' := get_pk2;'||WWV_FLOW.LF;
            L_PK2_SOURCE := L_PK2_SOURCE||'end;';
        ELSIF P_TABLE_PK_SRC_TYPE = 'S' AND P_TABLE_PK2_SRC IS NOT NULL THEN
            L_PK2_SOURCE :=               'begin '||WWV_FLOW.LF;
            L_PK2_SOURCE := L_PK2_SOURCE||'    if '||GET_ITEM_BIND_VARIABLE(L_PK2_ITEM)||' is null then'||WWV_FLOW.LF;
            L_PK2_SOURCE := L_PK2_SOURCE||'        select '||WWV_FLOW_ASSERT.ENQUOTE_NAME(L_OWNER)||
                                                   '.'||WWV_FLOW_ASSERT.ENQUOTE_NAME(P_TABLE_PK2_SRC)||'.nextval'||WWV_FLOW.LF;
            L_PK2_SOURCE := L_PK2_SOURCE||'          into '||GET_ITEM_BIND_VARIABLE(L_PK2_ITEM)||WWV_FLOW.LF;
            L_PK2_SOURCE := L_PK2_SOURCE||'          from sys.dual;'||WWV_FLOW.LF;
            L_PK2_SOURCE := L_PK2_SOURCE||'    end if;'||WWV_FLOW.LF;
            L_PK2_SOURCE := L_PK2_SOURCE||'end;';
        END IF;
 
        WWV_FLOW_API.CREATE_PAGE_ITEM(
              P_ID                       => L_ITEM_ID,
              P_FLOW_ID                  => P_FLOW_ID,
              P_FLOW_STEP_ID             => P_PAGE_ID,
              P_NAME                     => L_PK2_ITEM,
              P_DATA_TYPE                => 'VARCHAR',
              P_ITEM_PLUG_ID             => L_REGION_ID,
              P_ACCEPT_PROCESSING        => 'REPLACE_EXISTING',
              P_ITEM_SEQUENCE            => '2',
              P_USE_CACHE_BEFORE_DEFAULT => 'NO',
              P_PROMPT                   => NVL(WWV_FLOW_HINT.GET_LABEL (
                                                P_SCHEMA      => P_TABLE_OWNER,
                                                P_TABLE_NAME  => P_TABLE_NAME,
                                                P_COLUMN_NAME => P_TABLE_PK2_COLUMN_NAME),
                                                REPLACE(INITCAP(P_TABLE_PK2_COLUMN_NAME),'_',' ')),
              P_SOURCE                   => P_TABLE_PK2_COLUMN_NAME,
              P_SOURCE_TYPE              => 'DB_COLUMN',
              P_DISPLAY_AS               => 'HIDDEN_PROTECTED',
              P_LOV                      => '',
              P_LOV_DISPLAY_NULL         => 'NO',
              P_CSIZE                    => 30,
              P_CMAXLENGTH               => 255,
              P_CHEIGHT                  => NULL,
              P_CATTRIBUTES              => '',
              P_BEGIN_ON_NEW_LINE        => 'YES',
              P_BEGIN_ON_NEW_FIELD       => 'YES',
              P_LABEL_ALIGNMENT          => 'RIGHT',
              P_FIELD_TEMPLATE           => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,
              P_ITEM_TEMPLATE_OPTIONS    => GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,'ITEM'),
              P_FIELD_ALIGNMENT          => 'LEFT',
              P_DISPLAY_WHEN             => '',
              P_IS_PERSISTENT            => 'Y',
              P_PROTECTION_LEVEL         => WWV_FLOW_ITEM.C_PROTECTION_CHECKSUM,
              P_SECURITY_SCHEME          => '',
              P_ITEM_COMMENT             => NULL);
    END IF;
 
    FOR C1 IN (
        SELECT COLUMN_NAME,
               DATA_TYPE,
               DATA_LENGTH,
               COLUMN_ID,
               NULLABLE,
               $IF WWV_FLOW_GLOBAL.G_12C $THEN
                 IDENTITY_COLUMN IDENT_COL
               $ELSE
                 'NO' IDENT_COL
               $END
        FROM   SYS.DBA_TAB_COLUMNS
        WHERE  OWNER = P_TABLE_OWNER AND
               TABLE_NAME = P_TABLE_NAME AND
               COLUMN_NAME NOT IN (P_TABLE_PK_COLUMN_NAME, NVL(P_TABLE_PK2_COLUMN_NAME,' ')) AND
               (INSTR(L_VALID_DATA_TYPES,':'||DATA_TYPE||':',1) > 0 OR
               DATA_TYPE LIKE 'TIMESTAMP%')
        ORDER  BY COLUMN_ID ) LOOP
 
        
        
        
        L_FIELD_TEMPLATE := NULL;
        L_DISPLAY_AS     := NULL;
        L_ATTRIBUTE_01   := NULL;
        L_ATTRIBUTE_02   := NULL;
        L_ATTRIBUTE_03   := NULL;
        L_ATTRIBUTE_04   := NULL;
        L_ATTRIBUTE_05   := NULL;
        L_ATTRIBUTE_06   := NULL;
        L_ATTRIBUTE_07   := NULL;
        L_ATTRIBUTE_08   := NULL;
        L_ATTRIBUTE_09   := NULL;
        L_ATTRIBUTE_10   := NULL;
        L_ATTRIBUTE_11   := NULL;
        L_ATTRIBUTE_12   := NULL;
        L_ATTRIBUTE_13   := NULL;
        L_ATTRIBUTE_14   := NULL;
        L_ATTRIBUTE_15   := NULL;
        L_FORMAT_MASK    := NULL;
        L_LOV_QUERY      := NULL;
        L_LOV_ID         := NULL;
        L_LOV_NAME       := NULL;
        L_SOURCE         := C1.COLUMN_NAME;
 
        
        
        
        
        WWV_FLOW_HINT.GET_COL_UI_DEFAULTS (
            P_SCHEMA              => P_TABLE_OWNER,
            P_TABLE_NAME          => P_TABLE_NAME,
            P_COLUMN_NAME         => C1.COLUMN_NAME
            );
 
        IF NVL(WWV_FLOW_HINT.G_REQUIRED,'N')  = 'Y' THEN
           L_FIELD_TEMPLATE := WWV_FLOW_THEME_GLOBALS.G_DEFAULT_REQUIRED_LABEL;
        END IF;
 
        IF L_FIELD_TEMPLATE IS NULL THEN
           IF C1.NULLABLE = 'Y' THEN
              L_FIELD_TEMPLATE := WWV_FLOW_THEME_GLOBALS.G_DEFAULT_OPTION_LABEL;
           ELSIF C1.NULLABLE = 'N' THEN
              L_FIELD_TEMPLATE := WWV_FLOW_THEME_GLOBALS.G_DEFAULT_REQUIRED_LABEL;
           END IF;
        END IF;
 
        L_DISPLAY_AS    := WWV_FLOW_HINT.G_DISPLAY_AS_FORM;
        L_ATTRIBUTE_01  := WWV_FLOW_HINT.G_FORM_ATTRIBUTE_01;
        L_ATTRIBUTE_02  := WWV_FLOW_HINT.G_FORM_ATTRIBUTE_02;
        L_ATTRIBUTE_03  := WWV_FLOW_HINT.G_FORM_ATTRIBUTE_03;
        L_ATTRIBUTE_04  := WWV_FLOW_HINT.G_FORM_ATTRIBUTE_04;
        L_ATTRIBUTE_05  := WWV_FLOW_HINT.G_FORM_ATTRIBUTE_05;
        L_ATTRIBUTE_06  := WWV_FLOW_HINT.G_FORM_ATTRIBUTE_06;
        L_ATTRIBUTE_07  := WWV_FLOW_HINT.G_FORM_ATTRIBUTE_07;
        L_ATTRIBUTE_08  := WWV_FLOW_HINT.G_FORM_ATTRIBUTE_08;
        L_ATTRIBUTE_09  := WWV_FLOW_HINT.G_FORM_ATTRIBUTE_09;
        L_ATTRIBUTE_10  := WWV_FLOW_HINT.G_FORM_ATTRIBUTE_10;
        L_ATTRIBUTE_11  := WWV_FLOW_HINT.G_FORM_ATTRIBUTE_11;
        L_ATTRIBUTE_12  := WWV_FLOW_HINT.G_FORM_ATTRIBUTE_12;
        L_ATTRIBUTE_13  := WWV_FLOW_HINT.G_FORM_ATTRIBUTE_13;
        L_ATTRIBUTE_14  := WWV_FLOW_HINT.G_FORM_ATTRIBUTE_14;
        L_ATTRIBUTE_15  := WWV_FLOW_HINT.G_FORM_ATTRIBUTE_15;
        L_CSIZE         := WWV_FLOW_HINT.G_DISPLAY_WIDTH;
        L_CMAXLENGTH    := NVL(WWV_FLOW_HINT.G_MAX_WIDTH,255);
        L_CHEIGHT       := WWV_FLOW_HINT.G_HEIGHT;
        L_DEFAULT_VALUE := WWV_FLOW_HINT.G_DEFAULT_VALUE;
 
        IF C1.DATA_TYPE IN ('NUMBER','DATE') OR
           C1.DATA_TYPE LIKE 'TIMESTAMP%' THEN
            L_FORMAT_MASK := WWV_FLOW_HINT.G_MASK_FORM;
        END IF;
 
        IF L_DEFAULT_VALUE IS NOT NULL THEN
           L_DEFAULT_TYPE := 'STATIC_TEXT_WITH_SUBSTITUTIONS';
        END IF;
 
        IF ( P_TABLE_PK_COLUMN_NAME = 'ROWID' ) AND ( INSTR(':'||L_PK_COLUMNS||':', ':'||C1.COLUMN_NAME||':', 1) > 0 ) THEN
           L_DISPLAY_AS := 'HIDDEN_PROTECTED';
        END IF;
 
        IF L_DISPLAY_AS IS NULL THEN
           L_DISPLAY_AS := 'TEXT';
           IF C1.DATA_TYPE = 'RAW' THEN
               L_DISPLAY_AS := 'HIDDEN';
               L_CSIZE      := NVL(WWV_FLOW_HINT.G_DISPLAY_WIDTH,4000);
           ELSIF C1.DATA_TYPE = 'NUMBER' THEN
               L_DISPLAY_AS := WWV_FLOW_NATIVE_ITEM.C_NUMBER_FIELD;
               L_CSIZE      := NVL(WWV_FLOW_HINT.G_DISPLAY_WIDTH,32);
               L_CHEIGHT    := NVL(WWV_FLOW_HINT.G_HEIGHT,1);
           ELSIF C1.DATA_TYPE = 'DATE' OR
               C1.DATA_TYPE LIKE 'TIMESTAMP%' THEN
               IF WWV_FLOW_PAGE.IS_JQM_UI ( P_APPLICATION_ID    => P_FLOW_ID,
                                            P_PAGE_ID           => P_PAGE_ID,
                                            P_SECURITY_GROUP_ID => WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID) THEN
                   L_DISPLAY_AS := WWV_FLOW_NATIVE_ITEM.C_DATE_PICKER_HTML5;
               ELSE
                   L_DISPLAY_AS := WWV_FLOW_NATIVE_ITEM.C_DATE_PICKER;
               END IF;
               L_CSIZE      := NVL(WWV_FLOW_HINT.G_DISPLAY_WIDTH,32);
               L_CHEIGHT    := NVL(WWV_FLOW_HINT.G_HEIGHT,1);
           ELSIF C1.DATA_TYPE = 'LONG' OR C1.DATA_TYPE = 'CLOB' OR C1.DATA_TYPE = 'NCLOB' OR
               (C1.DATA_TYPE IN ('VARCHAR2','NVARCHAR2','NCHAR') AND C1.DATA_LENGTH >= 100) THEN
               L_DISPLAY_AS   := WWV_FLOW_NATIVE_ITEM.C_TEXTAREA;
               L_CSIZE        := NVL(WWV_FLOW_HINT.G_DISPLAY_WIDTH,60);
               L_CHEIGHT      := NVL(WWV_FLOW_HINT.G_HEIGHT,4);
               IF C1.DATA_TYPE IN ('VARCHAR2','NVARCHAR2','NCHAR') THEN
                   L_CMAXLENGTH := NVL(WWV_FLOW_HINT.G_MAX_WIDTH,C1.DATA_LENGTH);
               END IF;
           ELSIF C1.DATA_TYPE IN ('VARCHAR2','NVARCHAR2','NCHAR') THEN
               L_CMAXLENGTH := NVL(WWV_FLOW_HINT.G_MAX_WIDTH,C1.DATA_LENGTH);
               
               L_CSIZE      := NVL(WWV_FLOW_HINT.G_DISPLAY_WIDTH,32);
               L_CHEIGHT    := NVL(WWV_FLOW_HINT.G_HEIGHT,1);
           ELSIF C1.DATA_TYPE = 'BLOB' THEN
               L_DISPLAY_AS := WWV_FLOW_NATIVE_ITEM.C_FILE;
               L_CSIZE      := NVL(WWV_FLOW_HINT.G_DISPLAY_WIDTH,60);
               L_CHEIGHT    := NVL(WWV_FLOW_HINT.G_HEIGHT,1);
           ELSE
               L_CSIZE      := NVL(WWV_FLOW_HINT.G_DISPLAY_WIDTH,LEAST(C1.DATA_LENGTH,32));
               L_CHEIGHT    := NVL(WWV_FLOW_HINT.G_HEIGHT,1);
           END IF;
        ELSIF L_DISPLAY_AS = WWV_FLOW_NATIVE_ITEM.C_DATE_PICKER AND (C1.DATA_TYPE = 'DATE' OR C1.DATA_TYPE LIKE 'TIMESTAMP%')
                                                                AND WWV_FLOW_PAGE.IS_JQM_UI ( P_APPLICATION_ID    => P_FLOW_ID,
                                                                                              P_PAGE_ID           => P_PAGE_ID,
                                                                                              P_SECURITY_GROUP_ID => WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID) THEN
            L_DISPLAY_AS := WWV_FLOW_NATIVE_ITEM.C_DATE_PICKER_HTML5;
        END IF;
 
        IF INSTR(UPPER(P_DISPLAY_COLUMN_LIST),UPPER(C1.COLUMN_NAME)) > 0 THEN
            L_ITEM_ID := WWV_FLOW_ID.NEXT_VAL;
            L_DISPLAY_SEQ := NVL(WWV_FLOW_HINT.G_DISPLAY_SEQ_FORM,TO_CHAR(10 * C1.COLUMN_ID));
            L_LABEL := NVL(WWV_FLOW_HINT.G_LABEL,REPLACE(INITCAP(C1.COLUMN_NAME),'_',' '));
 
            
            
            
            IF INSTR(G_VALID_LOV_DISPLAY_TYPE,':'||L_DISPLAY_AS||':',1) > 0 THEN
                IF WWV_FLOW_HINT.G_LOV_TYPE = 'N' THEN
                    
                    
                    
                    IF L_DISPLAY_AS = WWV_FLOW_NATIVE_ITEM.C_DISPLAY_ONLY AND L_ATTRIBUTE_02 <> 'LOV' THEN
                        L_DISPLAY_AS := L_DISPLAY_AS;
                    ELSE
                        L_DISPLAY_AS := 'TEXT';
                    END IF;
                ELSIF WWV_FLOW_HINT.G_LOV_TYPE IN ('S','Q') THEN
                   L_LOV_NAME := WWV_FLOW_HINT.GEN_LOV_NAME (
                                 P_OWNER        => P_TABLE_OWNER,
                                 P_TABLE_NAME   => P_TABLE_NAME,
                                 P_COLUMN_NAME  => C1.COLUMN_NAME,
                                 P_SGID         => WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID,
                                 P_APP_NUMBER   => P_FLOW_ID,
                                 P_PAGE_NUMBER  => P_PAGE_ID
                                 );
 
                   
                   
                   
                   FOR C1 IN (SELECT ID
                              FROM WWV_FLOW_LISTS_OF_VALUES$
                              WHERE LOV_NAME = L_LOV_NAME
                              AND FLOW_ID = P_FLOW_ID)
                   LOOP
                       L_LOV_ID := C1.ID;
                   END LOOP;
 
                   IF L_LOV_ID IS NULL THEN
                       L_LOV_ID := WWV_FLOW_ID.NEXT_VAL;
                       CREATE_NAMED_LOV (
                           P_FLOW_ID      => P_FLOW_ID,
                           P_PAGE_ID      => P_PAGE_ID,
                           P_TABLE_OWNER  => P_TABLE_OWNER,
                           P_TABLE_NAME   => P_TABLE_NAME,
                           P_COLUMN_NAME  => C1.COLUMN_NAME,
                           P_COLUMN_ID    => WWV_FLOW_HINT.G_COLUMN_ID,
                           P_LOV_ID       => L_LOV_ID,
                           P_LOV_NAME     => L_LOV_NAME,
                           P_LOV_TYPE     => WWV_FLOW_HINT.G_LOV_TYPE,
                           P_LOV_QUERY    => WWV_FLOW_HINT.G_LOV_QUERY
                           );
                   END IF;
 
                   L_LOV_QUERY := '.'||TO_CHAR(L_LOV_ID)||'.';
                END IF;
            END IF;
 
            L_ITEM_NAME := GET_VALID_ITEM_NAME (
                               P_COLUMN_NAME => C1.COLUMN_NAME,
                               P_PAGE_ID     => P_PAGE_ID );
            
            
            
            IF ( WWV_FLOW_BUILDER.IS_ITEM_NAME_USED(P_FLOW_ID, L_ITEM_NAME) ) THEN
                FOR J IN 1..100 LOOP
                    IF ( WWV_FLOW_BUILDER.IS_ITEM_NAME_USED(P_FLOW_ID, L_ITEM_NAME||'_'||J) = FALSE) THEN
                        L_ITEM_NAME := L_ITEM_NAME||'_'||J;
                        EXIT;
                    END IF;
                END LOOP;
            ELSE
                L_ITEM_NAME := L_ITEM_NAME;
            END IF;
 
            
            WWV_FLOW_PLUGIN_DEV.SET_DEFAULTS (
                P_PLUGIN_TYPE  => WWV_FLOW_PLUGIN.C_PLUGIN_TYPE_ITEM_TYPE,
                P_PLUGIN_NAME  => L_DISPLAY_AS,
                P_ATTRIBUTE_01 => L_ATTRIBUTE_01,
                P_ATTRIBUTE_02 => L_ATTRIBUTE_02,
                P_ATTRIBUTE_03 => L_ATTRIBUTE_03,
                P_ATTRIBUTE_04 => L_ATTRIBUTE_04,
                P_ATTRIBUTE_05 => L_ATTRIBUTE_05,
                P_ATTRIBUTE_06 => L_ATTRIBUTE_06,
                P_ATTRIBUTE_07 => L_ATTRIBUTE_07,
                P_ATTRIBUTE_08 => L_ATTRIBUTE_08,
                P_ATTRIBUTE_09 => L_ATTRIBUTE_09,
                P_ATTRIBUTE_10 => L_ATTRIBUTE_10,
                P_ATTRIBUTE_11 => L_ATTRIBUTE_11,
                P_ATTRIBUTE_12 => L_ATTRIBUTE_12,
                P_ATTRIBUTE_13 => L_ATTRIBUTE_13,
                P_ATTRIBUTE_14 => L_ATTRIBUTE_14,
                P_ATTRIBUTE_15 => L_ATTRIBUTE_15 );
 
            IF L_DISPLAY_AS = WWV_FLOW_NATIVE_ITEM.C_FILE THEN
                L_ATTRIBUTE_01 := 'DB_COLUMN';
            END IF;
 
            
            IF C1.IDENT_COL = 'YES' THEN
               L_DISPLAY_AS          := 'NATIVE_DISPLAY_ONLY';
               L_ATTRIBUTE_01        := 'N';
               L_DISPLAY_WHEN        := L_ITEM_NAME;
               L_DISPLAY_WHEN_TYPE   := 'ITEM_IS_NOT_NULL';
            ELSE
               L_DISPLAY_WHEN        := '';
               L_DISPLAY_WHEN_TYPE   := '';
            END IF;
 
            WWV_FLOW_API.CREATE_PAGE_ITEM(
              P_ID                       => L_ITEM_ID,
              P_FLOW_ID                  => P_FLOW_ID,
              P_FLOW_STEP_ID             => P_PAGE_ID,
              P_NAME                     => L_ITEM_NAME,
              P_DATA_TYPE                => 'VARCHAR',
              P_IS_REQUIRED              => (C1.NULLABLE = 'N' OR NVL(WWV_FLOW_HINT.G_REQUIRED, 'N') = 'Y'),
              P_ITEM_PLUG_ID             => NVL(GET_GROUP_REGION_ID(P_FLOW_ID => P_FLOW_ID,
                                                                    P_PAGE_ID => P_PAGE_ID,
                                                                    P_GROUP_SEQ => L_DISP_SEQ+WWV_FLOW_HINT.G_GROUP_SEQ,
                                                                    P_GROUP_NAME => WWV_FLOW_HINT.G_GROUP_NAME),L_REGION_ID),
              P_ACCEPT_PROCESSING        => 'REPLACE_EXISTING',
              P_ITEM_SEQUENCE            => L_DISPLAY_SEQ,
              P_USE_CACHE_BEFORE_DEFAULT => 'NO',
              P_ITEM_DEFAULT             => L_DEFAULT_VALUE,
              P_ITEM_DEFAULT_TYPE        => L_DEFAULT_TYPE,
              P_PROMPT                   => L_LABEL,
              P_SOURCE                   => L_SOURCE,
              P_SOURCE_TYPE              => 'DB_COLUMN',
              P_FORMAT_MASK              => L_FORMAT_MASK,
              P_DISPLAY_AS               => L_DISPLAY_AS,
              P_NAMED_LOV                => L_LOV_NAME,
              P_LOV                      => L_LOV_QUERY,
              P_LOV_DISPLAY_NULL         => 'NO',
              P_CSIZE                    => L_CSIZE,
              P_CMAXLENGTH               => L_CMAXLENGTH,
              P_CHEIGHT                  => L_CHEIGHT,
              P_CATTRIBUTES              => '',
              P_BEGIN_ON_NEW_LINE        => 'YES',
              P_BEGIN_ON_NEW_FIELD       => 'YES',
              P_LABEL_ALIGNMENT          => 'RIGHT',
              P_FIELD_TEMPLATE           => L_FIELD_TEMPLATE,
              P_ITEM_TEMPLATE_OPTIONS    => GET_PRESET_TEMPLATE_OPTIONS (L_FIELD_TEMPLATE,'ITEM'),
              P_FIELD_ALIGNMENT          => 'LEFT',
              P_DISPLAY_WHEN             => L_DISPLAY_WHEN,
              P_DISPLAY_WHEN_TYPE        => L_DISPLAY_WHEN_TYPE,
              P_IS_PERSISTENT            => 'Y',
              P_ATTRIBUTE_01             => L_ATTRIBUTE_01,
              P_ATTRIBUTE_02             => L_ATTRIBUTE_02,
              P_ATTRIBUTE_03             => L_ATTRIBUTE_03,
              P_ATTRIBUTE_04             => L_ATTRIBUTE_04,
              P_ATTRIBUTE_05             => L_ATTRIBUTE_05,
              P_ATTRIBUTE_06             => L_ATTRIBUTE_06,
              P_ATTRIBUTE_07             => L_ATTRIBUTE_07,
              P_ATTRIBUTE_08             => L_ATTRIBUTE_08,
              P_ATTRIBUTE_09             => L_ATTRIBUTE_09,
              P_ATTRIBUTE_10             => L_ATTRIBUTE_10,
              P_ATTRIBUTE_11             => L_ATTRIBUTE_11,
              P_ATTRIBUTE_12             => L_ATTRIBUTE_12,
              P_ATTRIBUTE_13             => L_ATTRIBUTE_13,
              P_ATTRIBUTE_14             => L_ATTRIBUTE_14,
              P_ATTRIBUTE_15             => L_ATTRIBUTE_15,
              P_HELP_TEXT                => WWV_FLOW_HINT.G_HELP_TEXT,
              P_SECURITY_SCHEME          => '',
              P_ITEM_COMMENT             => NULL);
 
            
            
            
            IF L_DISPLAY_AS NOT IN ('HIDDEN', 'HIDDEN_PROTECTED') THEN
                IF C1.DATA_TYPE = 'DATE' AND L_DISPLAY_AS NOT IN (WWV_FLOW_NATIVE_ITEM.C_DATE_PICKER,WWV_FLOW_NATIVE_ITEM.C_DATE_PICKER_HTML5) THEN
                    WWV_FLOW_API.CREATE_PAGE_VALIDATION (
                        P_FLOW_ID                  => P_FLOW_ID,
                        P_FLOW_STEP_ID             => P_PAGE_ID,
                        P_VALIDATION_NAME          => L_ITEM_NAME||' must be date',
                        P_VALIDATION_SEQUENCE      => L_DISPLAY_SEQ,
                        P_VALIDATION               => L_ITEM_NAME,
                        P_VALIDATION_TYPE          => 'ITEM_IS_DATE',
                        P_ERROR_MESSAGE            => WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_QUICK_FLOW.IS_DATE'),
                        P_ASSOCIATED_ITEM          => L_ITEM_ID,
                        P_ERROR_DISPLAY_LOCATION   => 'INLINE_WITH_FIELD_AND_NOTIFICATION');
                ELSIF C1.DATA_TYPE LIKE 'TIMESTAMP%' THEN
                    WWV_FLOW_API.CREATE_PAGE_VALIDATION (
                        P_FLOW_ID                  => P_FLOW_ID,
                        P_FLOW_STEP_ID             => P_PAGE_ID,
                        P_VALIDATION_NAME          => L_ITEM_NAME||' must be timestamp',
                        P_VALIDATION_SEQUENCE      => L_DISPLAY_SEQ,
                        P_VALIDATION               => L_ITEM_NAME,
                        P_VALIDATION_TYPE          => 'ITEM_IS_TIMESTAMP',
                        P_ERROR_MESSAGE            => WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_QUICK_FLOW.IS_TIMESTAMP'),
                        P_ASSOCIATED_ITEM          => L_ITEM_ID,
                        P_ERROR_DISPLAY_LOCATION   => 'INLINE_WITH_FIELD_AND_NOTIFICATION');
                END IF;
            END IF;
          END IF;
 
    END LOOP;
 
    
    L_SEQ := 0;
    FOR C1 IN (
        SELECT I.ID, I.ITEM_SEQUENCE
        FROM WWV_FLOW_STEP_ITEMS I, WWV_FLOW_PAGE_PLUGS R
        WHERE
          I.FLOW_ID           = P_FLOW_ID AND
          I.FLOW_STEP_ID      = P_PAGE_ID AND
          I.ITEM_PLUG_ID      = R.ID
        ORDER BY R.PLUG_DISPLAY_SEQUENCE, I.ITEM_SEQUENCE, I.ID
    ) LOOP
         L_SEQ := L_SEQ + 10;
         UPDATE WWV_FLOW_STEP_ITEMS I
         SET    ITEM_SEQUENCE = L_SEQ
         WHERE
           ID              = C1.ID AND
           FLOW_ID         = P_FLOW_ID AND
           I.ITEM_SEQUENCE != L_SEQ;
    END LOOP;
 
    
    
    
 
 
    L_FETCH := L_OWNER||':'||P_TABLE_NAME||':'||
                     GET_VALID_ITEM_NAME(P_TABLE_PK_COLUMN_NAME, P_PAGE_ID)||':'||
                     P_TABLE_PK_COLUMN_NAME;
    IF REPLACE(P_TABLE_PK2_COLUMN_NAME,'%null%',NULL) IS NOT NULL THEN
      L_FETCH := L_FETCH||':'||
                      GET_VALID_ITEM_NAME(P_TABLE_PK2_COLUMN_NAME, P_PAGE_ID)||':'||
                       P_TABLE_PK2_COLUMN_NAME;
        IF P_TABLE_RV_COLUMN_NAME IS NOT NULL THEN
            L_FETCH := L_FETCH||':'||P_TABLE_RV_COLUMN_NAME;
        END IF;
    ELSIF P_TABLE_RV_COLUMN_NAME IS NOT NULL THEN
        L_FETCH := L_FETCH||':::'||P_TABLE_RV_COLUMN_NAME;
    END IF;
 
    L_PROCESS := L_FETCH||'|';
    IF P_INSERT = 'Y' THEN
      L_PROCESS := L_PROCESS||'I';
    END IF;
    IF P_UPDATE = 'Y' THEN
      L_PROCESS := L_PROCESS||'U';
    END IF;
    IF P_DELETE = 'Y' THEN
      L_PROCESS := L_PROCESS||'D';
    END IF;
 
    WWV_FLOW_API.CREATE_PAGE_PROCESS(
      P_ID                      => NULL,
      P_FLOW_ID                 => P_FLOW_ID,
      P_FLOW_STEP_ID            => P_PAGE_ID,
      P_PROCESS_SEQUENCE        => 10,
      P_PROCESS_POINT           => 'AFTER_HEADER',
      P_PROCESS_TYPE            => 'DML_FETCH_ROW',
      P_PROCESS_NAME            => 'Fetch Row from '||P_TABLE_NAME,
      P_PROCESS_SQL_CLOB        => 'F|'||L_FETCH,
      P_ERROR_DISPLAY_LOCATION  => CASE WHEN P_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION ELSE WWV_FLOW_ERROR_API.C_ON_ERROR_PAGE END,
      P_PROCESS_WHEN            => '',
      P_PROCESS_WHEN_TYPE       => '',
      P_PROCESS_SUCCESS_MESSAGE => '',
      P_PROCESS_COMMENT         => NULL);
 
    
    
    
    IF P_INSERT = 'Y' THEN
        IF L_PK_SOURCE IS NOT NULL THEN
            WWV_FLOW_API.CREATE_PAGE_PROCESS(
              P_ID                      => NULL,
              P_FLOW_ID                 => P_FLOW_ID,
              P_FLOW_STEP_ID            => P_PAGE_ID,
              P_PROCESS_SEQUENCE        => 10,
              P_PROCESS_POINT           => 'AFTER_SUBMIT',
              P_PROCESS_TYPE            => 'PLSQL',
              P_PROCESS_NAME            => 'Get PK',
              P_PROCESS_SQL_CLOB        => L_PK_SOURCE,
              P_ERROR_DISPLAY_LOCATION  => WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION,
              P_PROCESS_WHEN_BUTTON_ID  => L_CREATE_BUTTON_ID,
              P_PROCESS_WHEN            => '',
              P_PROCESS_WHEN_TYPE       => '',
              P_PROCESS_SUCCESS_MESSAGE => NULL,
              P_PROCESS_COMMENT         => NULL);
        END IF;
 
        IF L_PK2_SOURCE IS NOT NULL THEN
            WWV_FLOW_API.CREATE_PAGE_PROCESS(
              P_ID                      => NULL,
              P_FLOW_ID                 => P_FLOW_ID,
              P_FLOW_STEP_ID            => P_PAGE_ID,
              P_PROCESS_SEQUENCE        => 20,
              P_PROCESS_POINT           => 'AFTER_SUBMIT',
              P_PROCESS_TYPE            => 'PLSQL',
              P_PROCESS_NAME            => 'Get PK2',
              P_PROCESS_SQL_CLOB        => L_PK2_SOURCE,
              P_ERROR_DISPLAY_LOCATION  => WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION,
              P_PROCESS_WHEN_BUTTON_ID  => L_CREATE_BUTTON_ID,
              P_PROCESS_WHEN            => '',
              P_PROCESS_WHEN_TYPE       => '',
              P_PROCESS_SUCCESS_MESSAGE => NULL,
              P_PROCESS_COMMENT         => NULL);
        END IF;
    END IF;
 
    WWV_FLOW_API.CREATE_PAGE_PROCESS(
      P_ID                      => NULL,
      P_FLOW_ID                 => P_FLOW_ID,
      P_FLOW_STEP_ID            => P_PAGE_ID,
      P_PROCESS_SEQUENCE        => 30,
      P_PROCESS_POINT           => 'AFTER_SUBMIT',
      P_PROCESS_TYPE            => 'DML_PROCESS_ROW',
      P_PROCESS_NAME            => 'Process Row of '||P_TABLE_NAME,
      P_PROCESS_SQL_CLOB        => L_PROCESS,
      P_ERROR_DISPLAY_LOCATION  => WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION,
      P_PROCESS_WHEN            => '',
      P_PROCESS_WHEN_TYPE       => '',
      P_PROCESS_SUCCESS_MESSAGE => WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.ACTION_PROCESSED'),
      P_PROCESS_COMMENT         => NULL);
 
    WWV_FLOW_API.CREATE_PAGE_PROCESS(
      P_ID                      => NULL,
      P_FLOW_ID                 => P_FLOW_ID,
      P_FLOW_STEP_ID            => P_PAGE_ID,
      P_PROCESS_SEQUENCE        => 40,
      P_PROCESS_POINT           => 'AFTER_SUBMIT',
      P_PROCESS_TYPE            => 'CLEAR_CACHE_FOR_PAGES',
      P_PROCESS_NAME            => 'reset page',
      P_PROCESS_SQL_CLOB        => P_PAGE_ID,
      P_ERROR_DISPLAY_LOCATION  => WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION,
      P_PROCESS_WHEN_BUTTON_ID  => L_DELETE_BUTTON_ID,
      P_PROCESS_SUCCESS_MESSAGE => '',
      P_PROCESS_COMMENT         => '');
 
    IF P_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN
        WWV_FLOW_API.CREATE_PAGE_PROCESS(
            P_ID                      => NULL,
            P_FLOW_ID                 => P_FLOW_ID,
            P_FLOW_STEP_ID            => P_PAGE_ID,
            P_PROCESS_SEQUENCE        => 50,
            P_PROCESS_POINT           => 'AFTER_SUBMIT',
            P_PROCESS_TYPE            => WWV_FLOW_PROCESS_NATIVE.C_CLOSE_WINDOW,
            P_PROCESS_NAME            => 'Close Dialog',
            P_ERROR_DISPLAY_LOCATION  => WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION,
            P_PROCESS_WHEN            => 'CREATE,SAVE,DELETE',
            P_PROCESS_WHEN_TYPE       => 'REQUEST_IN_CONDITION');
    END IF;
 
 EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(-20001,
                           WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.CREATE_FORM_ON_TABLE',SQLERRM)
                           );
 END CREATE_FORM_ON_TABLE;
 
 
 
 
 
 PROCEDURE CREATE_FORM_ON_WS (
    P_FLOW_ID                 IN NUMBER   DEFAULT NULL,
    P_PAGE_ID                 IN NUMBER   DEFAULT NULL,
    P_WS_ID                   IN NUMBER,
    P_OPERATION_ID            IN NUMBER,
    P_PAGE_NAME               IN VARCHAR2 DEFAULT 'form',
    P_GROUP_NAME              IN VARCHAR2 DEFAULT NULL,
    P_PAGE_MODE               IN VARCHAR2,
    P_USER_INTERFACE_ID       IN NUMBER,
    
    P_TAB_SET                 IN VARCHAR2 DEFAULT NULL,
    P_TAB_NAME                IN VARCHAR2 DEFAULT NULL, 
    P_TAB_TEXT                IN VARCHAR2 DEFAULT NULL,
    
    P_REGION_TITLE            IN VARCHAR2 DEFAULT NULL,
    P_REGION_TEMPLATE         IN NUMBER DEFAULT NULL,
    P_INPUTS_COLLECTION       IN VARCHAR2,
    P_OUTPUTS_COLLECTION      IN VARCHAR2,
    P_AUTH_COLLECTION         IN VARCHAR2,
    P_REPORT_COLLECTION_NAME  IN VARCHAR2 DEFAULT NULL
    )
 IS
    L_BUTTON_REGION_ID         NUMBER;
    L_REGION_TEMPLATE          NUMBER;
    L_BUTTON_REGION_TEMPLATE   NUMBER;
    L_SUBMIT_BUTTON_ID         NUMBER;
    L_BRANCH_ON_SUBMIT         NUMBER;
    L_PROCESS_ID               NUMBER;
    L_ITEM_ID                  NUMBER;
    L_GROUP_ID                 NUMBER := NULL;
    I                          INTEGER := 1;
    L_DISPLAY_AS               VARCHAR2(255) := 'TEXT';
    L_PARM_VALUE               VARCHAR2(4000);
 
    L_BUTTON_IMAGE             VARCHAR2(4000);
    L_PROCESS                  VARCHAR2(4000);
    L_OUTPUT_ITEMS_CREATED     BOOLEAN := FALSE;
    L_BUTTON_TEMPLATE_OPTIONS  VARCHAR2(255);
 
 BEGIN
   
   
   
   WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
       P_FLOW_ID           => P_FLOW_ID,
       P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
   
   
   
   IF NOT PAGE_EXISTS (P_FLOW_ID,P_PAGE_ID) THEN
 
        
        
        
        IF P_GROUP_NAME IS NOT NULL THEN
            L_GROUP_ID := WWV_FLOW_UTILITIES.GET_PAGE_GROUP_ID(P_GROUP_NAME => P_GROUP_NAME, P_APPLICATION_ID => P_FLOW_ID);
             
            IF L_GROUP_ID IS NULL THEN
                L_GROUP_ID := WWV_FLOW_ID.NEXT_VAL;
                WWV_FLOW_API.CREATE_PAGE_GROUP(P_ID => L_GROUP_ID, P_FLOW_ID => P_FLOW_ID, P_GROUP_NAME => P_GROUP_NAME);
            END IF;
        END IF;
 
        WWV_FLOW_API.CREATE_PAGE(
          P_ID                  => P_PAGE_ID,
          P_FLOW_ID             => P_FLOW_ID,
          P_TAB_SET             => REPLACE(P_TAB_SET,'%null%',NULL),
          P_NAME                => P_PAGE_NAME,
          P_PAGE_MODE           => P_PAGE_MODE,
          P_GROUP_ID            => L_GROUP_ID,
          P_USER_INTERFACE_ID   => P_USER_INTERFACE_ID,
          P_STEP_TITLE          => P_PAGE_NAME,
          P_STEP_SUB_TITLE      => NULL,
          P_STEP_SUB_TITLE_TYPE => 'TEXT_WITH_SUBSTITUTIONS',
          P_WELCOME_TEXT        => '',
          P_BOX_WELCOME_TEXT    => '',
          P_BOX_FOOTER_TEXT     => '',
          P_FOOTER_TEXT         => '',
          P_STEP_TEMPLATE       => '',
          P_PAGE_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_PAGE_TEMPLATE, 'PAGE'),
          P_BOX_IMAGE           => '',
          P_REQUIRED_ROLE       => '',
          P_PAGE_COMMENT       => NULL);
 
        
        IF REPLACE(P_TAB_SET,'%null%',NULL) IS NOT NULL THEN
           CREATE_TAB (
              P_FLOW_ID  => P_FLOW_ID,
              P_PAGE_ID  => P_PAGE_ID,
              P_TAB_SET  => P_TAB_SET,
              P_TAB_NAME => P_TAB_NAME,
              P_TAB_TEXT => P_TAB_TEXT);
        END IF;
   END IF;
 
   
   
   
   
   L_REGION_TEMPLATE := CASE
                          WHEN P_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL
                          THEN NVL(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_DIALOGR_TEMPLATE,P_REGION_TEMPLATE)
                          ELSE P_REGION_TEMPLATE
                        END;
 
   L_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
   WWV_FLOW_API.CREATE_PAGE_PLUG (
       P_ID                            => L_REGION_ID,
       P_FLOW_ID                       => P_FLOW_ID,
       P_PAGE_ID                       => P_PAGE_ID,
       P_PLUG_NAME                     => P_REGION_TITLE,
       P_PLUG_TEMPLATE                 => L_REGION_TEMPLATE,
       P_REGION_TEMPLATE_OPTIONS       => GET_PRESET_TEMPLATE_OPTIONS (L_REGION_TEMPLATE,'REGION'),
       P_PLUG_DISPLAY_SEQUENCE         => '10',
       P_PLUG_DISPLAY_POINT            => 'BODY',
       P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
       P_PLUG_SOURCE                   => NULL,
       P_PLUG_SOURCE_TYPE              => WWV_FLOW_REGION_NATIVE.C_STATIC,
       P_PLUG_COMMENT                  => NULL);
 
   
   
   
   IF P_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN
       L_BUTTON_REGION_ID       := WWV_FLOW_ID.NEXT_VAL;
       
       L_BUTTON_REGION_TEMPLATE := NVL(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_DIALOGBTNR_TEMPLATE,WWV_FLOW_THEME_GLOBALS.G_DEFAULT_REGION_TEMPLATE);
 
       WWV_FLOW_API.CREATE_PAGE_PLUG (
           P_ID                            => L_BUTTON_REGION_ID,
           P_FLOW_ID                       => P_FLOW_ID,
           P_PAGE_ID                       => P_PAGE_ID,
           P_PLUG_NAME                     => WWV_FLOW_LANG.SYSTEM_MESSAGE('LAYOUT.T_BUTTON'),
           P_PLUG_TEMPLATE                 => L_BUTTON_REGION_TEMPLATE,
           P_REGION_TEMPLATE_OPTIONS       => WWV_FLOW_WIZARD_API.GET_PRESET_TEMPLATE_OPTIONS(L_BUTTON_REGION_TEMPLATE,'REGION'),
           P_PLUG_DISPLAY_SEQUENCE         => 20,
           P_PLUG_DISPLAY_POINT            => WWV_FLOW_THEME_GLOBALS.G_DIALOGBTNR_DISPLAY_POINT,
           P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
           P_PLUG_SOURCE                   => NULL,
           P_PLUG_SOURCE_TYPE              => WWV_FLOW_REGION_NATIVE.C_STATIC,
           P_PLUG_COMMENT                  => NULL);
 
   ELSE
       L_BUTTON_REGION_ID       := L_REGION_ID;
       L_BUTTON_REGION_TEMPLATE := L_REGION_TEMPLATE;
   END IF;
 
   
   
   
   IF WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE IS NOT NULL THEN
       L_BUTTON_IMAGE := 'template:'||WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE;
       L_BUTTON_TEMPLATE_OPTIONS :=  GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE,'BUTTON');
   END IF;
 
   L_SUBMIT_BUTTON_ID := WWV_FLOW_ID.NEXT_VAL;
 
 
   WWV_FLOW_API.CREATE_PAGE_BUTTON (
       P_ID                     => L_SUBMIT_BUTTON_ID,
       P_FLOW_ID                => P_FLOW_ID,
       P_FLOW_STEP_ID           => P_PAGE_ID,
       P_BUTTON_SEQUENCE        => '10',
       P_BUTTON_PLUG_ID         => L_BUTTON_REGION_ID,
       P_BUTTON_NAME            => 'SUBMIT',
       P_BUTTON_IMAGE           => L_BUTTON_IMAGE,
       P_BUTTON_TEMPLATE_OPTIONS=> L_BUTTON_TEMPLATE_OPTIONS,
       P_BUTTON_IMAGE_ALT       => WWV_FLOW_LANG.SYSTEM_MESSAGE('SUBMIT'),
       P_BUTTON_POSITION        => WWV_FLOW_THEME_MANAGER.GET_BUTTON_POSTION(
                                   P_TEMPLATE_ID => L_BUTTON_REGION_TEMPLATE,
                                   P_POSITION    => CASE WHEN P_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN '#NEXT#' ELSE '#CHANGE#' END),
       P_BUTTON_ALIGNMENT       => 'RIGHT',
       P_BUTTON_EXECUTE_VALIDATIONS => 'Y',
       P_BUTTON_REDIRECT_URL    => NULL,
       P_BUTTON_ACTION          => WWV_FLOW_BUTTON.C_ACTION_SUBMIT,
       P_BUTTON_CONDITION       => NULL,
       P_BUTTON_CONDITION_TYPE  => NULL,
       P_BUTTON_IMAGE_ATTRIBUTES=> NULL,
       P_SECURITY_SCHEME        => NULL,
       P_REQUIRED_PATCH         => NULL);
 
   
   
   
   L_BRANCH_ON_SUBMIT := WWV_FLOW_ID.NEXT_VAL;
   WWV_FLOW_API.CREATE_PAGE_BRANCH (
       P_ID                    => L_BRANCH_ON_SUBMIT,
       P_FLOW_ID               => P_FLOW_ID,
       P_FLOW_STEP_ID          => P_PAGE_ID,
       P_BRANCH_ACTION         => 'f?p=&APP_ID.:'||P_PAGE_ID||':&SESSION.&success_msg=#SUCCESS_MSG#',
       P_BRANCH_POINT          => 'AFTER_PROCESSING',
       P_BRANCH_TYPE           => 'REDIRECT_URL',
       P_BRANCH_WHEN_BUTTON_ID => L_SUBMIT_BUTTON_ID,
       P_BRANCH_SEQUENCE       => '1',
       P_BRANCH_CONDITION_TYPE => '',
       P_BRANCH_CONDITION      => NULL,
       P_BRANCH_CONDITION_TEXT => NULL,
       P_REQUIRED_PATCH        => NULL,
       P_BRANCH_COMMENT        => NULL);
 
    
    
    
 
    L_PROCESS_ID := WWV_FLOW_ID.NEXT_VAL;
 
    IF P_OPERATION_ID IS NOT NULL THEN
        L_PROCESS := P_WS_ID||':'||P_OPERATION_ID;
    ELSE
        L_PROCESS := P_WS_ID;
    END IF;
 
    WWV_FLOW_API.CREATE_PAGE_PROCESS(
      P_ID                      => L_PROCESS_ID,
      P_FLOW_ID                 => P_FLOW_ID,
      P_FLOW_STEP_ID            => P_PAGE_ID,
      P_PROCESS_SEQUENCE        => 10,
      P_PROCESS_POINT           => 'AFTER_SUBMIT',
      P_PROCESS_TYPE            => 'WEB_SERVICE',
      P_PROCESS_NAME            => 'Web Service Request',
      P_PROCESS_SQL_CLOB        => L_PROCESS,
      P_ERROR_DISPLAY_LOCATION  => WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION,
      P_PROCESS_WHEN_BUTTON_ID  => L_SUBMIT_BUTTON_ID,
      P_PROCESS_WHEN            => NULL,
      P_PROCESS_WHEN_TYPE       => NULL,
      P_PROCESS_SUCCESS_MESSAGE => '',
      P_PROCESS_IS_STATEFUL_Y_N => 'N' );
 
    
    
    
    FOR C1 IN (SELECT SEQ_ID, C001, C002, C004, C005, C006
                 FROM WWV_FLOW_COLLECTIONS
                WHERE COLLECTION_NAME = P_AUTH_COLLECTION
                ORDER BY 1 ) LOOP
 
        IF C1.C002 = WWV_FLOW_LANG.SYSTEM_MESSAGE('PASSWORD') THEN
            L_DISPLAY_AS := 'PASSWORD';
        ELSE
            L_DISPLAY_AS := 'TEXT';
        END IF;
 
        
        IF C1.C004 IS NOT NULL AND C1.C006 = 'Y' THEN
            L_ITEM_ID := WWV_FLOW_ID.NEXT_VAL;
 
            WWV_FLOW_API.CREATE_PAGE_ITEM(
                  P_ID                       => L_ITEM_ID,
                  P_FLOW_ID                  => P_FLOW_ID,
                  P_FLOW_STEP_ID             => P_PAGE_ID,
                  P_NAME                     => C1.C004,
                  P_DATA_TYPE                => 'VARCHAR',
                  P_ITEM_PLUG_ID             => L_REGION_ID,
                  P_ACCEPT_PROCESSING        => 'REPLACE_EXISTING',
                  P_ITEM_SEQUENCE            => I,
                  P_USE_CACHE_BEFORE_DEFAULT => 'YES',
                  P_ITEM_DEFAULT             => '',
                  P_PROMPT                   => C1.C005,
                  P_DISPLAY_AS               => L_DISPLAY_AS,
                  P_LOV                      => '',
                  P_LOV_DISPLAY_NULL         => 'NO',
                  P_CSIZE                    => 30,
                  P_CMAXLENGTH               => 255,
                  P_CHEIGHT                  => NULL,
                  P_CATTRIBUTES              => '',
                  P_BEGIN_ON_NEW_LINE        => 'YES',
                  P_BEGIN_ON_NEW_FIELD       => 'YES',
                  P_LABEL_ALIGNMENT          => 'RIGHT',
                  P_FIELD_TEMPLATE           => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,
                  P_ITEM_TEMPLATE_OPTIONS    => GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,'ITEM'),
                  P_FIELD_ALIGNMENT          => 'LEFT',
                  P_DISPLAY_WHEN             => '',
                  P_IS_PERSISTENT            => 'Y',
                  P_SECURITY_SCHEME          => '',
                  P_ITEM_COMMENT             => NULL);
            END IF;
        
        
        
        L_PARM_VALUE := NULL;
        IF C1.C006 = 'Y' THEN
            L_PARM_VALUE := C1.C004;
        END IF;
        INSERT INTO WWV_FLOW_WS_PROCESS_PARMS_MAP
               (PARAMETER_ID, PROCESS_ID, MAP_TYPE, PARM_VALUE)
        VALUES (C1.C001, L_PROCESS_ID, 'ITEM', L_PARM_VALUE);
 
        I := I + 1;
 
    END LOOP;
    
    
    
 
    FOR C1 IN (SELECT SEQ_ID, C001, C003, C004, C005, C006
                 FROM WWV_FLOW_COLLECTIONS
                WHERE COLLECTION_NAME = P_INPUTS_COLLECTION ) LOOP
 
        IF C1.C003 = 'binary' THEN
            L_DISPLAY_AS := 'FILE';
        ELSE
            L_DISPLAY_AS := 'TEXT';
        END IF;
 
        
        IF C1.C004 IS NOT NULL AND C1.C006 = 'Y' THEN
            L_ITEM_ID := WWV_FLOW_ID.NEXT_VAL;
 
            WWV_FLOW_API.CREATE_PAGE_ITEM(
                  P_ID                       => L_ITEM_ID,
                  P_FLOW_ID                  => P_FLOW_ID,
                  P_FLOW_STEP_ID             => P_PAGE_ID,
                  P_NAME                     => C1.C004,
                  P_DATA_TYPE                => 'VARCHAR',
                  P_ITEM_PLUG_ID             => L_REGION_ID,
                  P_ACCEPT_PROCESSING        => 'REPLACE_EXISTING',
                  P_ITEM_SEQUENCE            => I,
                  P_USE_CACHE_BEFORE_DEFAULT => 'YES',
                  P_ITEM_DEFAULT             => '',
                  P_PROMPT                   => C1.C005,
                  P_DISPLAY_AS               => L_DISPLAY_AS,
                  P_LOV                      => '',
                  P_LOV_DISPLAY_NULL         => 'NO',
                  P_CSIZE                    => 30,
                  P_CMAXLENGTH               => 255,
                  P_CHEIGHT                  => NULL,
                  P_CATTRIBUTES              => '',
                  P_BEGIN_ON_NEW_LINE        => 'YES',
                  P_BEGIN_ON_NEW_FIELD       => 'YES',
                  P_LABEL_ALIGNMENT          => 'RIGHT',
                  P_FIELD_TEMPLATE           => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,
                  P_FIELD_ALIGNMENT          => 'LEFT',
                  P_DISPLAY_WHEN             => '',
                  P_IS_PERSISTENT            => 'Y',
                  P_SECURITY_SCHEME          => '',
                  P_ITEM_COMMENT             => NULL);
            END IF;
        
        
        
        IF P_OPERATION_ID IS NOT NULL THEN
            L_PARM_VALUE := NULL;
            IF C1.C006 = 'Y' THEN
                L_PARM_VALUE := C1.C004;
            END IF;
            INSERT INTO WWV_FLOW_WS_PROCESS_PARMS_MAP
                (PARAMETER_ID, PROCESS_ID, MAP_TYPE, PARM_VALUE)
            VALUES (C1.C001, L_PROCESS_ID, 'ITEM', L_PARM_VALUE);
        END IF;
        I := I + 1;
 
    END LOOP;
 
    
    
    
    IF P_OPERATION_ID IS NOT NULL THEN
        L_DISPLAY_AS := 'TEXT';
 
        FOR C1 IN (SELECT C001, C004, C005, C006
                     FROM WWV_FLOW_COLLECTIONS
                    WHERE COLLECTION_NAME = P_OUTPUTS_COLLECTION ) LOOP
            
            IF C1.C004 IS NOT NULL AND C1.C006 = 'Y' THEN
                L_OUTPUT_ITEMS_CREATED := TRUE;
                L_ITEM_ID := WWV_FLOW_ID.NEXT_VAL;
 
                WWV_FLOW_API.CREATE_PAGE_ITEM(
                      P_ID                       => L_ITEM_ID,
                      P_FLOW_ID                  => P_FLOW_ID,
                      P_FLOW_STEP_ID             => P_PAGE_ID,
                      P_NAME                     => C1.C004,
                      P_DATA_TYPE                => 'VARCHAR',
                      P_ITEM_PLUG_ID             => L_REGION_ID,
                      P_ACCEPT_PROCESSING        => 'REPLACE_EXISTING',
                      P_ITEM_SEQUENCE            => I,
                      P_USE_CACHE_BEFORE_DEFAULT => 'YES',
                      P_ITEM_DEFAULT             => '',
                      P_PROMPT                   => C1.C005,
                      P_DISPLAY_AS               => L_DISPLAY_AS,
                      P_LOV                      => '',
                      P_LOV_DISPLAY_NULL         => 'NO',
                      P_CSIZE                    => 30,
                      P_CMAXLENGTH               => 255,
                      P_CHEIGHT                  => NULL,
                      P_CATTRIBUTES              => '',
                      P_BEGIN_ON_NEW_LINE        => 'YES',
                      P_BEGIN_ON_NEW_FIELD       => 'YES',
                      P_LABEL_ALIGNMENT          => 'RIGHT',
                      P_FIELD_TEMPLATE           => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,
                      P_ITEM_TEMPLATE_OPTIONS    => GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,'ITEM'),
                      P_FIELD_ALIGNMENT          => 'LEFT',
                      P_DISPLAY_WHEN             => '',
                      P_IS_PERSISTENT            => 'Y',
                      P_SECURITY_SCHEME          => '',
                      P_ITEM_COMMENT             => NULL);
            END IF;
            
            
            
            L_PARM_VALUE := NULL;
            IF C1.C006 = 'Y' THEN
                L_PARM_VALUE := C1.C004;
            END IF;
            INSERT INTO WWV_FLOW_WS_PROCESS_PARMS_MAP
                   (PARAMETER_ID, PROCESS_ID, MAP_TYPE, PARM_VALUE)
            VALUES (C1.C001, L_PROCESS_ID, 'ITEM', L_PARM_VALUE);
 
            I := I + 1;
 
        END LOOP;
 
        IF NOT L_OUTPUT_ITEMS_CREATED AND P_REPORT_COLLECTION_NAME IS NOT NULL THEN 
 
            FOR C1 IN (SELECT ID
                         FROM WWV_FLOW_WS_PARAMETERS
                        WHERE INPUT_OR_OUTPUT = 'O'
                          AND PATH IS NULL
                          AND NAME = 'json'
                          AND PARM_TYPE = 'json'
                          AND WS_OPERS_ID = P_OPERATION_ID ) LOOP
 
                 UPDATE WWV_FLOW_STEP_PROCESSING
                    SET ATTRIBUTE_02 = 'COLLECTION',
                        ATTRIBUTE_03 = UPPER(P_REPORT_COLLECTION_NAME)
                  WHERE ID = L_PROCESS_ID;
                 EXIT;
 
            END LOOP;
 
        END IF;
    END IF;
 
 EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(-20001,
                           WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.CREATE_FORM_ON_TABLE',SQLERRM)
                           );
 END CREATE_FORM_ON_WS;
 
 PROCEDURE CREATE_FORM_ON_WS_RPT (
   P_FLOW_ID                   IN NUMBER   DEFAULT NULL,
    P_PAGE_ID                  IN NUMBER   DEFAULT NULL,
    P_WS_ID                    IN NUMBER,
    P_OPERATION_ID             IN NUMBER,
    P_PAGE_NAME                IN VARCHAR2 DEFAULT 'form',
    P_GROUP_NAME               IN VARCHAR2 DEFAULT NULL,
    P_PAGE_MODE                IN VARCHAR2,
    P_USER_INTERFACE_ID        IN NUMBER,
    
    P_TAB_SET                  IN VARCHAR2 DEFAULT NULL,
    P_TAB_NAME                 IN VARCHAR2 DEFAULT NULL, 
    P_TAB_TEXT                 IN VARCHAR2 DEFAULT NULL,
    
    P_NAV_LIST_ID              IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_ITEM_ID         IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_ITEM_NAME       IN VARCHAR2 DEFAULT NULL,
    P_NAV_LIST_PARENT_ITEM_ID  IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_CHILD_ITEM_NAME IN VARCHAR2 DEFAULT NULL,
    
    P_RESULT_NODE              IN VARCHAR2 DEFAULT NULL,
    P_SOAP_STYLE               IN VARCHAR2 DEFAULT NULL,
    P_MESSAGE_FORMAT           IN VARCHAR2 DEFAULT NULL,
    P_NAMESPACE                IN VARCHAR2 DEFAULT NULL,
    
    P_REGION_TITLE             IN VARCHAR2 DEFAULT NULL,
    P_REGION_TEMPLATE          IN NUMBER DEFAULT NULL,
    P_REGION_TITLE2            IN VARCHAR2 DEFAULT NULL,
    P_REGION_TEMPLATE2         IN NUMBER DEFAULT NULL,
    P_REPORT_TEMPLATE          IN VARCHAR2,
    P_INPUTS_COLLECTION        IN VARCHAR2,
    P_AUTH_COLLECTION          IN VARCHAR2,
    P_ARRAY_PARM               IN NUMBER,
    P_REPORT_COLLECTION_NAME   IN VARCHAR2,
    P_ARRAY_PARMS_COLLECTION   IN VARCHAR2
    )
 IS
    L_BUTTON_REGION_ID         NUMBER;
    L_REGION_TEMPLATE          NUMBER;
    L_BUTTON_REGION_TEMPLATE   NUMBER;
    L_SUBMIT_BUTTON_ID         NUMBER;
    L_BRANCH_ON_SUBMIT         NUMBER;
    L_PROCESS_ID               NUMBER;
    L_ITEM_ID                  NUMBER;
    L_GROUP_ID                 NUMBER := NULL;
    I                          INTEGER := 1;
    L_DISPLAY_AS               VARCHAR2(255) := 'TEXT';
    L_PARM_VALUE               VARCHAR2(4000);
    L_SQL                      VARCHAR2(32000);
 
    L_BUTTON_IMAGE             VARCHAR2(4000);
    L_PROCESS                  VARCHAR2(4000);
    L_BUTTON_TEMPLATE_OPTIONS  VARCHAR2(255);
 
 BEGIN
    
    
    
   WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
       P_FLOW_ID           => P_FLOW_ID,
       P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
    
    
    
    IF NOT PAGE_EXISTS (P_FLOW_ID,P_PAGE_ID) THEN
 
        
        
        
        IF P_GROUP_NAME IS NOT NULL THEN
            L_GROUP_ID := WWV_FLOW_UTILITIES.GET_PAGE_GROUP_ID(P_GROUP_NAME => P_GROUP_NAME, P_APPLICATION_ID => P_FLOW_ID);
            
            IF L_GROUP_ID IS NULL THEN
                L_GROUP_ID := WWV_FLOW_ID.NEXT_VAL;
                WWV_FLOW_API.CREATE_PAGE_GROUP(P_ID => L_GROUP_ID, P_FLOW_ID => P_FLOW_ID, P_GROUP_NAME => P_GROUP_NAME);
            END IF;
        END IF;
 
        WWV_FLOW_API.CREATE_PAGE(
          P_ID                  => P_PAGE_ID,
          P_FLOW_ID             => P_FLOW_ID,
          P_TAB_SET             => REPLACE(P_TAB_SET,'%null%',NULL),
          P_NAME                => P_PAGE_NAME,
          P_PAGE_MODE           => P_PAGE_MODE,
          P_GROUP_ID            => L_GROUP_ID,
          P_USER_INTERFACE_ID   => P_USER_INTERFACE_ID,
          P_STEP_TITLE          => P_PAGE_NAME,
          P_STEP_SUB_TITLE      => NULL,
          P_STEP_SUB_TITLE_TYPE => 'TEXT_WITH_SUBSTITUTIONS',
          P_WELCOME_TEXT        => '',
          P_BOX_WELCOME_TEXT    => '',
          P_BOX_FOOTER_TEXT     => '',
          P_FOOTER_TEXT         => '',
          P_STEP_TEMPLATE       => '',
          P_PAGE_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_PAGE_TEMPLATE, 'PAGE'),
          P_BOX_IMAGE           => '',
          P_REQUIRED_ROLE      => '',
          P_PAGE_COMMENT       => NULL);
 
        IF P_NAV_LIST_ID IS NOT NULL THEN
             
             CREATE_NAVIGATION_LIST_ITEM (
                 P_FLOW_ID                  => P_FLOW_ID,
                 P_PAGE_ID                  => P_PAGE_ID,
                 P_PAGE_NAME                => P_PAGE_NAME,
                 P_NAV_LIST_ID              => P_NAV_LIST_ID,
                 P_NAV_LIST_ITEM_ID         => P_NAV_LIST_ITEM_ID,
                 P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_ITEM_NAME,
                 P_NAV_LIST_PARENT_ITEM_ID  => P_NAV_LIST_PARENT_ITEM_ID,
                 P_NAV_LIST_CHILD_ITEM_NAME => P_NAV_LIST_CHILD_ITEM_NAME);
        ELSE
            
            IF REPLACE(P_TAB_SET,'%null%',NULL) IS NOT NULL THEN
                CREATE_TAB (
                    P_FLOW_ID  => P_FLOW_ID,
                    P_PAGE_ID  => P_PAGE_ID,
                    P_TAB_SET  => P_TAB_SET,
                    P_TAB_NAME => P_TAB_NAME,
                    P_TAB_TEXT => P_TAB_TEXT);
            END IF;
        END IF;
    END IF;
 
 
    
    
    
 
    
    L_REGION_TEMPLATE := CASE
                           WHEN P_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL
                           THEN NVL(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_DIALOGR_TEMPLATE,P_REGION_TEMPLATE)
                           ELSE P_REGION_TEMPLATE
                         END;
 
    L_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
 
 
    WWV_FLOW_API.CREATE_PAGE_PLUG (
            P_ID                            => L_REGION_ID,
            P_FLOW_ID                       => P_FLOW_ID,
            P_PAGE_ID                       => P_PAGE_ID,
            P_PLUG_NAME                     => P_REGION_TITLE,
            P_PLUG_TEMPLATE                 => L_REGION_TEMPLATE,
            P_REGION_TEMPLATE_OPTIONS       => GET_PRESET_TEMPLATE_OPTIONS (L_REGION_TEMPLATE,'REGION'),
            P_PLUG_DISPLAY_SEQUENCE         => '10',
            P_PLUG_DISPLAY_POINT            => 'BODY',
            P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
            P_PLUG_SOURCE                   => NULL,
            P_PLUG_SOURCE_TYPE              => WWV_FLOW_REGION_NATIVE.C_STATIC,
            P_PLUG_COMMENT                  => NULL);
 
 
   
   
   
   IF P_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN
       
       
       
       L_BUTTON_REGION_ID       := WWV_FLOW_ID.NEXT_VAL;
       
       L_BUTTON_REGION_TEMPLATE := NVL(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_DIALOGBTNR_TEMPLATE,WWV_FLOW_THEME_GLOBALS.G_DEFAULT_REGION_TEMPLATE);
 
       WWV_FLOW_API.CREATE_PAGE_PLUG (
           P_ID                            => L_BUTTON_REGION_ID,
           P_FLOW_ID                       => P_FLOW_ID,
           P_PAGE_ID                       => P_PAGE_ID,
           P_PLUG_NAME                     => WWV_FLOW_LANG.SYSTEM_MESSAGE('LAYOUT.T_BUTTON'),
           P_PLUG_TEMPLATE                 => L_BUTTON_REGION_TEMPLATE,
           P_REGION_TEMPLATE_OPTIONS       => WWV_FLOW_WIZARD_API.GET_PRESET_TEMPLATE_OPTIONS(L_BUTTON_REGION_TEMPLATE,'REGION'),
           P_PLUG_DISPLAY_SEQUENCE         => 20,
           P_PLUG_DISPLAY_POINT            => WWV_FLOW_THEME_GLOBALS.G_DIALOGBTNR_DISPLAY_POINT,
           P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
           P_PLUG_SOURCE                   => NULL,
           P_PLUG_SOURCE_TYPE              => WWV_FLOW_REGION_NATIVE.C_STATIC,
           P_PLUG_COMMENT                  => NULL);
   ELSE
       L_BUTTON_REGION_ID       := L_REGION_ID;
       L_BUTTON_REGION_TEMPLATE := L_REGION_TEMPLATE;
   END IF;
 
   IF WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE IS NOT NULL THEN
       L_BUTTON_IMAGE := 'template:'||WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE;
       L_BUTTON_TEMPLATE_OPTIONS :=  GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE,'BUTTON');
   END IF;
 
   L_SUBMIT_BUTTON_ID := WWV_FLOW_ID.NEXT_VAL;
 
   WWV_FLOW_API.CREATE_PAGE_BUTTON (
       P_ID                     => L_SUBMIT_BUTTON_ID,
       P_FLOW_ID                => P_FLOW_ID,
       P_FLOW_STEP_ID           => P_PAGE_ID,
       P_BUTTON_SEQUENCE        => '10',
       P_BUTTON_PLUG_ID         => L_BUTTON_REGION_ID,
       P_BUTTON_NAME            => 'SUBMIT',
       P_BUTTON_IMAGE           => L_BUTTON_IMAGE,
       P_BUTTON_IMAGE_ALT       => WWV_FLOW_LANG.SYSTEM_MESSAGE('SUBMIT'),
       P_BUTTON_TEMPLATE_OPTIONS=> L_BUTTON_TEMPLATE_OPTIONS,
       P_BUTTON_POSITION        => WWV_FLOW_THEME_MANAGER.GET_BUTTON_POSTION(
                                   P_TEMPLATE_ID => L_BUTTON_REGION_TEMPLATE,
                                   P_POSITION    => CASE WHEN P_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN '#NEXT#' ELSE '#CHANGE#' END),
       P_BUTTON_ALIGNMENT       => 'RIGHT',
       P_BUTTON_EXECUTE_VALIDATIONS => 'Y',
       P_BUTTON_REDIRECT_URL    => NULL,
       P_BUTTON_ACTION          => WWV_FLOW_BUTTON.C_ACTION_SUBMIT,
       P_BUTTON_CONDITION       => NULL,
       P_BUTTON_CONDITION_TYPE  => NULL,
       P_BUTTON_IMAGE_ATTRIBUTES=> NULL,
       P_SECURITY_SCHEME        => NULL,
       P_REQUIRED_PATCH         => NULL);
 
   
   
   
   L_BRANCH_ON_SUBMIT := WWV_FLOW_ID.NEXT_VAL;
   WWV_FLOW_API.CREATE_PAGE_BRANCH (
       P_ID                    => L_BRANCH_ON_SUBMIT,
       P_FLOW_ID               => P_FLOW_ID,
       P_FLOW_STEP_ID          => P_PAGE_ID,
       P_BRANCH_ACTION         => 'f?p=&APP_ID.:'||P_PAGE_ID||':&SESSION.&success_msg=#SUCCESS_MSG#',
       P_BRANCH_POINT          => 'AFTER_PROCESSING',
       P_BRANCH_TYPE           => 'REDIRECT_URL',
       P_BRANCH_SEQUENCE       => '1',
       P_BRANCH_CONDITION_TYPE => '',
       P_BRANCH_CONDITION      => NULL,
       P_BRANCH_CONDITION_TEXT => NULL,
       P_REQUIRED_PATCH        => NULL,
       P_BRANCH_COMMENT        => NULL);
 
    
    
    
 
    L_PROCESS_ID := WWV_FLOW_ID.NEXT_VAL;
 
    IF P_OPERATION_ID IS NOT NULL THEN
        L_PROCESS := P_WS_ID||':'||P_OPERATION_ID;
    ELSE
        L_PROCESS := P_WS_ID;
    END IF;
 
    WWV_FLOW_API.CREATE_PAGE_PROCESS(
      P_ID                      => L_PROCESS_ID,
      P_FLOW_ID                 => P_FLOW_ID,
      P_FLOW_STEP_ID            => P_PAGE_ID,
      P_PROCESS_SEQUENCE        => 10,
      P_PROCESS_POINT           => 'AFTER_SUBMIT',
      P_PROCESS_TYPE            => 'WEB_SERVICE',
      P_PROCESS_NAME            => 'Web Service Request',
      P_PROCESS_SQL_CLOB        => L_PROCESS,
      P_ERROR_DISPLAY_LOCATION  => WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION,
      P_PROCESS_WHEN            => NULL,
      P_PROCESS_WHEN_TYPE       => NULL,
      P_PROCESS_SUCCESS_MESSAGE => '',
      P_PROCESS_IS_STATEFUL_Y_N => 'N' );
 
    
    
    
    FOR C1 IN (SELECT SEQ_ID, C001, C002, C004, C005, C006
                 FROM WWV_FLOW_COLLECTIONS
                WHERE COLLECTION_NAME = P_AUTH_COLLECTION
                ORDER BY 1 ) LOOP
 
        IF C1.C002 = WWV_FLOW_LANG.SYSTEM_MESSAGE('PASSWORD') THEN
            L_DISPLAY_AS := 'PASSWORD';
        ELSE
            L_DISPLAY_AS := 'TEXT';
        END IF;
 
        
        IF C1.C004 IS NOT NULL AND C1.C006 = 'Y' THEN
            L_ITEM_ID := WWV_FLOW_ID.NEXT_VAL;
 
            WWV_FLOW_API.CREATE_PAGE_ITEM(
                  P_ID                       => L_ITEM_ID,
                  P_FLOW_ID                  => P_FLOW_ID,
                  P_FLOW_STEP_ID             => P_PAGE_ID,
                  P_NAME                     => C1.C004,
                  P_DATA_TYPE                => 'VARCHAR',
                  P_ITEM_PLUG_ID             => L_REGION_ID,
                  P_ACCEPT_PROCESSING        => 'REPLACE_EXISTING',
                  P_ITEM_SEQUENCE            => I,
                  P_USE_CACHE_BEFORE_DEFAULT => 'YES',
                  P_ITEM_DEFAULT             => '',
                  P_PROMPT                   => C1.C005,
                  P_DISPLAY_AS               => L_DISPLAY_AS,
                  P_LOV                      => '',
                  P_LOV_DISPLAY_NULL         => 'NO',
                  P_CSIZE                    => 30,
                  P_CMAXLENGTH               => 255,
                  P_CHEIGHT                  => NULL,
                  P_CATTRIBUTES              => '',
                  P_BEGIN_ON_NEW_LINE        => 'YES',
                  P_BEGIN_ON_NEW_FIELD       => 'YES',
                  P_LABEL_ALIGNMENT          => 'RIGHT',
                  P_FIELD_TEMPLATE           => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,
                  P_ITEM_TEMPLATE_OPTIONS    => GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,'ITEM'),
                  P_FIELD_ALIGNMENT          => 'LEFT',
                  P_DISPLAY_WHEN             => '',
                  P_IS_PERSISTENT            => 'Y',
                  P_SECURITY_SCHEME          => '',
                  P_ITEM_COMMENT             => NULL);
            END IF;
        
        
        
        L_PARM_VALUE := NULL;
        IF C1.C006 = 'Y' THEN
            L_PARM_VALUE := C1.C004;
        END IF;
        INSERT INTO WWV_FLOW_WS_PROCESS_PARMS_MAP
               (PARAMETER_ID, PROCESS_ID, MAP_TYPE, PARM_VALUE)
        VALUES (C1.C001, L_PROCESS_ID, 'ITEM', L_PARM_VALUE);
 
        I := I + 1;
 
    END LOOP;
    
    
    
 
    FOR C1 IN (SELECT SEQ_ID, C001, C003, C004, C005, C006
                 FROM WWV_FLOW_COLLECTIONS
                WHERE COLLECTION_NAME = P_INPUTS_COLLECTION ) LOOP
 
        IF C1.C003 = 'binary' THEN
            L_DISPLAY_AS := 'FILE';
        ELSE
            L_DISPLAY_AS := 'TEXT';
        END IF;
 
        
        IF C1.C004 IS NOT NULL AND C1.C006 = 'Y' THEN
            L_ITEM_ID := WWV_FLOW_ID.NEXT_VAL;
 
            WWV_FLOW_API.CREATE_PAGE_ITEM(
                  P_ID                       => L_ITEM_ID,
                  P_FLOW_ID                  => P_FLOW_ID,
                  P_FLOW_STEP_ID             => P_PAGE_ID,
                  P_NAME                     => C1.C004,
                  P_DATA_TYPE                => 'VARCHAR',
                  P_ITEM_PLUG_ID             => L_REGION_ID,
                  P_ACCEPT_PROCESSING        => 'REPLACE_EXISTING',
                  P_ITEM_SEQUENCE            => I,
                  P_USE_CACHE_BEFORE_DEFAULT => 'YES',
                  P_ITEM_DEFAULT             => '',
                  P_PROMPT                   => C1.C005,
                  P_DISPLAY_AS               => L_DISPLAY_AS,
                  P_LOV                      => '',
                  P_LOV_DISPLAY_NULL         => 'NO',
                  P_CSIZE                    => 30,
                  P_CMAXLENGTH               => 255,
                  P_CHEIGHT                  => NULL,
                  P_CATTRIBUTES              => '',
                  P_BEGIN_ON_NEW_LINE        => 'YES',
                  P_BEGIN_ON_NEW_FIELD       => 'YES',
                  P_LABEL_ALIGNMENT          => 'RIGHT',
                  P_FIELD_TEMPLATE           => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,
                  P_ITEM_TEMPLATE_OPTIONS    => GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,'ITEM'),
                  P_FIELD_ALIGNMENT          => 'LEFT',
                  P_DISPLAY_WHEN             => '',
                  P_IS_PERSISTENT            => 'Y',
                  P_SECURITY_SCHEME          => '',
                  P_ITEM_COMMENT             => NULL);
            END IF;
        
        
        
        IF  P_OPERATION_ID IS NOT NULL THEN
            L_PARM_VALUE := NULL;
            IF C1.C006 = 'Y' THEN
                L_PARM_VALUE := C1.C004;
            END IF;
            INSERT INTO WWV_FLOW_WS_PROCESS_PARMS_MAP
                   (PARAMETER_ID, PROCESS_ID, MAP_TYPE, PARM_VALUE)
            VALUES (C1.C001, L_PROCESS_ID, 'ITEM', L_PARM_VALUE);
        END IF;
 
        I := I + 1;
 
    END LOOP;
 
    
    
    
    IF P_OPERATION_ID IS NOT NULL THEN
 
        UPDATE WWV_FLOW_STEP_PROCESSING
           SET ATTRIBUTE_02 = 'COLLECTION',
               ATTRIBUTE_03 = UPPER(P_REPORT_COLLECTION_NAME)
         WHERE ID = L_PROCESS_ID;
 
        
        
        
        L_SQL := WWV_FLOW_WEB_SERVICES.GENERATE_QUERY(
                    P_OPERATION_ID              => P_OPERATION_ID,
                    P_ARRAY_PARM                => P_ARRAY_PARM,
                    P_REPORT_COLLECTION_NAME    => P_REPORT_COLLECTION_NAME,
                    P_ARRAY_PARMS_COLLECTION    => P_ARRAY_PARMS_COLLECTION );
 
    ELSE
        
        
        
        L_SQL := WWV_FLOW_WEB_SERVICES.GENERATE_QUERY_MANUAL(
                    P_RESULT_NODE               => P_RESULT_NODE,
                    P_SOAP_STYLE                => P_SOAP_STYLE,
                    P_MESSAGE_FORMAT            => P_MESSAGE_FORMAT,
                    P_NAMESPACE                 => P_NAMESPACE,
                    P_REPORT_COLLECTION_NAME    => P_REPORT_COLLECTION_NAME,
                    P_ARRAY_PARMS_COLLECTION    => P_ARRAY_PARMS_COLLECTION );
    END IF;
    
    
    
    L_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
 
    CREATE_QUERY_REGION (
          P_ID                        => L_REGION_ID,
          P_FLOW_ID                   => P_FLOW_ID,
          P_PAGE_ID                   => P_PAGE_ID,
          P_PLUG_NAME                 => P_REGION_TITLE2,
          P_PLUG_TEMPLATE             => P_REGION_TEMPLATE2,
          P_PLUG_DISPLAY_SEQUENCE     => '20',
          P_PLUG_DISPLAY_POINT        => 'BODY',
          P_PLUG_SOURCE               => LTRIM(L_SQL),
          P_PLUG_SOURCE_TYPE          => WWV_FLOW_REGION_NATIVE.C_SQL_REPORT,
          P_PLUG_QUERY_NUM_ROWS_TYPE  => 'ROW_RANGES_IN_SELECT_LIST',
          P_PLUG_QUERY_ROW_COUNT_MAX  => WWV_FLOW_API.C_DEFAULT_QUERY_ROW_COUNT_MAX,
          P_PLUG_QUERY_NUM_ROWS       => '15',
          P_PLUG_QUERY_ROW_TEMPLATE   => P_REPORT_TEMPLATE,
          P_PLUG_QUERY_FORMAT_OUT     => 'HTML',
          P_PLUG_QUERY_NUMBER_FORMATS => NULL,
          P_PLUG_QUERY_COL_ALLIGNMENTS => NULL,
          P_PLUG_QUERY_NO_DATA_FOUND  => WWV_FLOW_LANG.SYSTEM_MESSAGE('F4000.NO_DATA_FOUND'),
          
          P_PLUG_COMMENT              => NULL);
 
 
 EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(-20001,
                           WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.CREATE_FORM_ON_TABLE',SQLERRM)
                           );
 END CREATE_FORM_ON_WS_RPT;
 
 
 
 
 PROCEDURE CREATE_FORM_AND_IR_PAGE (
    P_FLOW_ID                  IN NUMBER   DEFAULT NULL,
    P_FORM_PAGE_ID             IN NUMBER   DEFAULT NULL,
    P_REPORT_PAGE_ID           IN VARCHAR2 DEFAULT NULL,
    P_FORM_PAGE_NAME           IN VARCHAR2 DEFAULT 'form',
    P_REPORT_PAGE_NAME         IN VARCHAR2 DEFAULT 'report',
    P_GROUP_NAME               IN VARCHAR2 DEFAULT NULL,
    P_FORM_PAGE_MODE           IN VARCHAR2 DEFAULT NULL,
    P_REPORT_PAGE_MODE         IN VARCHAR2 DEFAULT NULL,
    P_USER_INTERFACE_ID        IN NUMBER,
    P_USE_UI_DEFAULT           IN VARCHAR2 DEFAULT 'Y',
    
    P_TAB_SET                  IN VARCHAR2 DEFAULT NULL,
    P_TAB_NAME                 IN VARCHAR2 DEFAULT NULL, 
    P_TAB_TEXT                 IN VARCHAR2 DEFAULT NULL,
    
    P_NAV_LIST_ID              IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_ITEM_ID         IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_ITEM_NAME       IN VARCHAR2 DEFAULT NULL,
    P_NAV_LIST_PARENT_ITEM_ID  IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_CHILD_ITEM_NAME IN VARCHAR2 DEFAULT NULL,
    
    P_TABLE_OWNER              IN VARCHAR2 DEFAULT NULL,
    P_TABLE_NAME               IN VARCHAR2 DEFAULT NULL,
    P_TABLE_PK_COLUMN_NAME     IN VARCHAR2 DEFAULT NULL,
    P_TABLE_PK_SRC_TYPE        IN VARCHAR2 DEFAULT NULL,
    P_TABLE_PK_SRC             IN VARCHAR2 DEFAULT NULL,
    P_TABLE_PK2_COLUMN_NAME    IN VARCHAR2 DEFAULT NULL,
    P_TABLE_PK2_SRC_TYPE       IN VARCHAR2 DEFAULT NULL,
    P_TABLE_PK2_SRC            IN VARCHAR2 DEFAULT NULL,
    P_TABLE_RV_COLUMN_NAME     IN VARCHAR2 DEFAULT NULL,
    
    P_DISPLAY_COLUMN_LIST      IN VARCHAR2 DEFAULT NULL,
    P_REPORT_SELECT_LIST       IN VARCHAR2 DEFAULT NULL,
    
    P_RPT_REGION_NAME          IN VARCHAR2 DEFAULT NULL,
    P_FORM_REGION_TEMPLATE     IN NUMBER DEFAULT NULL,
    P_FORM_REGION_NAME         IN VARCHAR2 DEFAULT NULL,
    
    P_WHERE_CLAUSE             IN VARCHAR2 DEFAULT NULL,
    P_EDIT_LINK                IN VARCHAR2 DEFAULT 'Edit',
    
    P_FORM_INSERT              IN VARCHAR2 DEFAULT 'Y',
    P_FORM_UPDATE              IN VARCHAR2 DEFAULT 'Y',
    P_FORM_DELETE              IN VARCHAR2 DEFAULT 'Y'
    )
 IS
    C_DIALOG_CLOSED_EVENT_TYPE    CONSTANT VARCHAR2(20) := 'apexafterclosedialog';
    L_GROUP_ID                    NUMBER := NULL;
    L_CREATE_BUTTON_ID            NUMBER := NULL;
    L_CREATE_BUTTON_DA_ID         NUMBER := NULL;
    L_EDIT_REPORT_DA_ID           NUMBER := NULL;
 
    L_SHOW_DETAIL_LINK            VARCHAR2(1) := 'Y';
    L_CREATE_BUTTON_NAME          VARCHAR2(255) := WWV_FLOW_LANG.SYSTEM_MESSAGE('LAYOUT.T_CREATE_BUTTON');
    L_SAVE_BUTTON_NAME            VARCHAR2(255) := WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_CUSTOMIZE.T_APPLY');
    L_DELETE_BUTTON_NAME          VARCHAR2(255) := WWV_FLOW_LANG.SYSTEM_MESSAGE('F4350.DELETE');
    L_CANCEL_BUTTON_NAME          VARCHAR2(255) := WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_SPELING.BUTTON_CANCEL');
    L_EDIT                        VARCHAR2(255) := WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW.EDIT');
    L_CREATE_BUTTON_DA            VARCHAR2(255) := WWV_FLOW_LANG.SYSTEM_MESSAGE('CREATE_DIALOG_CLOSED_DA');
    L_EDIT_REPORT_DA              VARCHAR2(255) := WWV_FLOW_LANG.SYSTEM_MESSAGE('EDIT_REPORT_DIALOG_CLOSED_DA');
    L_BUTTON_TEMPLATE_OPTIONS     VARCHAR2(255);
    L_PK_ITEM                     VARCHAR2(4000);
    L_PK2_ITEM                    VARCHAR2(4000);
    L_VALID_PK_COLUMN             VARCHAR2(4000);
    L_VALID_PK2_COLUMN            VARCHAR2(4000);
    L_VALID_COL_ALIAS             VARCHAR2(4000);
    L_BUTTON_IMAGE                VARCHAR2(4000);
    L_LINK_TEXT                   VARCHAR2(4000);
    L_WHERE_CLAUSE                VARCHAR2(5000);
    L_LINK                        VARCHAR2(32767);
    L_SQL                         VARCHAR2(32767);
    
    LA_COLUMN                     WWV_FLOW_GLOBAL.VC_ARR2;
    LA_DATA_TYPE                  WWV_FLOW_GLOBAL.VC_ARR2;
    LA_LABEL                      WWV_FLOW_GLOBAL.VC_ARR2;
    LA_NUMBER_FORMAT              WWV_FLOW_GLOBAL.VC_ARR2;
    LA_ALIGNMENT                  WWV_FLOW_GLOBAL.VC_ARR2;
    LA_DISPLAY_TEXT_AS            WWV_FLOW_GLOBAL.VC_ARR2;
    LA_DISPLAY_SEQ_REPORT         WWV_FLOW_GLOBAL.VC_ARR2;
    LA_HELP_TEXT                  WWV_FLOW_GLOBAL.VC_ARR2;
    LA_GROUP                      WWV_FLOW_GLOBAL.VC_ARR2;
 BEGIN
    
    
    
    
    
    
    IF P_USE_UI_DEFAULT = 'N' THEN
        WWV_FLOW_HINT.G_USE_UI_DEFAULTS := FALSE;
    END IF;
 
    
    
    
   WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
       P_FLOW_ID           => P_FLOW_ID,
       P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
    
    
    
 
    IF LOWER(WWV_FLOW.G_BROWSER_LANGUAGE) = 'en' THEN
        NULL;
    ELSE
        L_CREATE_BUTTON_NAME := WWV_FLOW_LANG.SYSTEM_MESSAGE('LAYOUT.T_CREATE_BUTTON');
        L_SAVE_BUTTON_NAME   := WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_CUSTOMIZE.T_APPLY');
        L_DELETE_BUTTON_NAME := WWV_FLOW_LANG.SYSTEM_MESSAGE('F4350.DELETE');
        L_CANCEL_BUTTON_NAME := WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_SPELING.BUTTON_CANCEL');
        L_EDIT               := WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW.EDIT');
    END IF;
 
    CREATE_FORM_ON_TABLE (
        P_FLOW_ID                 => P_FLOW_ID,
        P_PAGE_ID                 => P_FORM_PAGE_ID,
        P_PAGE_NAME               => P_FORM_PAGE_NAME,
        P_GROUP_NAME              => P_GROUP_NAME,
        P_PAGE_MODE               => P_FORM_PAGE_MODE,
        P_USER_INTERFACE_ID       => P_USER_INTERFACE_ID,
        P_TAB_SET                 => P_TAB_SET,
        P_TAB_NAME                => P_TAB_NAME,
        P_TAB_TEXT                => P_TAB_TEXT,
        P_REGION_TITLE            => P_FORM_REGION_NAME,
        P_REGION_TEMPLATE         => P_FORM_REGION_TEMPLATE,
        P_TABLE_OWNER             => P_TABLE_OWNER,
        P_TABLE_NAME              => P_TABLE_NAME,
        P_TABLE_PK_COLUMN_NAME    => P_TABLE_PK_COLUMN_NAME,
        P_TABLE_PK_SRC_TYPE       => P_TABLE_PK_SRC_TYPE,
        P_TABLE_PK_SRC            => P_TABLE_PK_SRC,
        P_TABLE_PK2_COLUMN_NAME   => P_TABLE_PK2_COLUMN_NAME,
        P_TABLE_PK2_SRC_TYPE      => P_TABLE_PK2_SRC_TYPE,
        P_TABLE_PK2_SRC           => P_TABLE_PK2_SRC,
        P_TABLE_RV_COLUMN_NAME    => P_TABLE_RV_COLUMN_NAME,
        P_DISPLAY_COLUMN_LIST     => P_DISPLAY_COLUMN_LIST,
        P_BRANCH                  => NVL(P_REPORT_PAGE_ID,P_FORM_PAGE_ID),
        P_CANCEL_BRANCH           => P_REPORT_PAGE_ID,
        P_CREATE_BUTTON_NAME      => L_CREATE_BUTTON_NAME,
        P_SAVE_BUTTON_NAME        => L_SAVE_BUTTON_NAME,
        P_DELETE_BUTTON_NAME      => L_DELETE_BUTTON_NAME,
        P_CANCEL_BUTTON_NAME      => L_CANCEL_BUTTON_NAME,
        P_INSERT                  => P_FORM_INSERT,
        P_UPDATE                  => P_FORM_UPDATE,
        P_DELETE                  => P_FORM_DELETE);
 
 
    
    
    
    IF NOT PAGE_EXISTS (P_FLOW_ID,P_REPORT_PAGE_ID) THEN
 
        
        
        
        IF P_GROUP_NAME IS NOT NULL THEN
            L_GROUP_ID := WWV_FLOW_UTILITIES.GET_PAGE_GROUP_ID(P_GROUP_NAME => P_GROUP_NAME, P_APPLICATION_ID => P_FLOW_ID);
            
            IF L_GROUP_ID IS NULL THEN
              L_GROUP_ID := WWV_FLOW_ID.NEXT_VAL;
              WWV_FLOW_API.CREATE_PAGE_GROUP(P_ID => L_GROUP_ID, P_FLOW_ID => P_FLOW_ID, P_GROUP_NAME => P_GROUP_NAME);
            END IF;
        END IF;
 
        WWV_FLOW_API.CREATE_PAGE(
              P_ID                  => P_REPORT_PAGE_ID,
              P_FLOW_ID             => P_FLOW_ID,
              P_TAB_SET             => REPLACE(P_TAB_SET,'%null%',NULL),
              P_NAME                => P_REPORT_PAGE_NAME,
              P_PAGE_MODE           => P_REPORT_PAGE_MODE,
              P_GROUP_ID            => L_GROUP_ID,
              P_USER_INTERFACE_ID   => P_USER_INTERFACE_ID,
              P_STEP_TITLE          => P_REPORT_PAGE_NAME,
              P_STEP_SUB_TITLE      => NULL,
              P_STEP_SUB_TITLE_TYPE => 'TEXT_WITH_SUBSTITUTIONS',
              P_WELCOME_TEXT        => '',
              P_BOX_WELCOME_TEXT    => '',
              P_BOX_FOOTER_TEXT     => '',
              P_FOOTER_TEXT         => '',
              P_STEP_TEMPLATE       => '',
              P_PAGE_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_PAGE_TEMPLATE, 'PAGE'),
              P_BOX_IMAGE           => '',
              P_REQUIRED_ROLE      => '',
              P_PAGE_COMMENT       => NULL);
 
        IF P_NAV_LIST_ID IS NOT NULL THEN
             G_NAV_LIST_ITEM_ID := NULL;
             
             CREATE_NAVIGATION_LIST_ITEM (
                 P_FLOW_ID                  => P_FLOW_ID,
                 P_PAGE_ID                  => P_REPORT_PAGE_ID,
                 P_PAGE_NAME                => P_REPORT_PAGE_NAME,
                 P_NAV_LIST_ID              => P_NAV_LIST_ID,
                 P_NAV_LIST_ITEM_ID         => P_NAV_LIST_ITEM_ID,
                 P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_ITEM_NAME,
                 P_NAV_LIST_PARENT_ITEM_ID  => P_NAV_LIST_PARENT_ITEM_ID,
                 P_NAV_LIST_CHILD_ITEM_NAME => P_NAV_LIST_CHILD_ITEM_NAME );
 
              
              CREATE_NAVIGATION_LIST_ITEM (
                 P_FLOW_ID                  => P_FLOW_ID,
                 P_PAGE_ID                  => P_FORM_PAGE_ID,
                 P_PAGE_NAME                => P_FORM_PAGE_NAME,
                 P_NAV_LIST_ID              => P_NAV_LIST_ID,
                 P_NAV_LIST_ITEM_ID         => NVL(P_NAV_LIST_ITEM_ID,G_NAV_LIST_ITEM_ID),
                 P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_CHILD_ITEM_NAME,
                 P_NAV_LIST_PARENT_ITEM_ID  => CASE WHEN (P_NAV_LIST_PARENT_ITEM_ID IS NOT NULL AND P_NAV_LIST_CHILD_ITEM_NAME IS NULL) THEN P_NAV_LIST_PARENT_ITEM_ID ELSE NULL END,
                 P_NAV_LIST_CHILD_ITEM_NAME => NULL);
        ELSE
            IF REPLACE(P_TAB_SET,'%null%',NULL) IS NOT NULL THEN
                CREATE_TAB (
                    P_FLOW_ID  => P_FLOW_ID,
                    P_PAGE_ID  => P_REPORT_PAGE_ID,
                    P_TAB_SET  => P_TAB_SET,
                    P_TAB_NAME => P_TAB_NAME,
                    P_TAB_TEXT => P_TAB_TEXT);
 
                
                
                
                UPDATE WWV_FLOW_TABS
                   SET TAB_STEP = P_REPORT_PAGE_ID,
                       TAB_ALSO_CURRENT_FOR_PAGES = P_FORM_PAGE_ID
                 WHERE FLOW_ID = P_FLOW_ID
                   AND TAB_SET = P_TAB_SET
                   AND TAB_TEXT = P_TAB_TEXT;
            END IF;
        END IF;
    END IF;
 
    SELECT COLUMN_NAME, DT, LABEL, MASK, ALIGNMENT, DISPLAY_SEQ_REPORT, HELP_TEXT, GROUP_ID
      BULK COLLECT INTO
        LA_COLUMN,
        LA_DATA_TYPE,
        LA_LABEL,
        LA_NUMBER_FORMAT,
        LA_ALIGNMENT,
        LA_DISPLAY_SEQ_REPORT,
        LA_HELP_TEXT,
        LA_GROUP
      FROM
    (SELECT 'ROWID' COLUMN_NAME, 'OTHER' DT, 'ROWID' LABEL, NULL MASK, 'LEFT' ALIGNMENT, 0 DISPLAY_SEQ_REPORT,
            NULL HELP_TEXT, NULL GROUP_ID
       FROM SYS.DUAL
      WHERE P_TABLE_PK_COLUMN_NAME = 'ROWID'
        AND EXISTS (SELECT NULL
                     FROM WWV_FLOW_HNT_COLUMN_INFO C, WWV_FLOW_HNT_TABLE_INFO T
                    WHERE C.TABLE_ID = T.TABLE_ID
                      AND T.SCHEMA = P_TABLE_OWNER
                      AND T.TABLE_NAME = P_TABLE_NAME
                      AND INSTR(':'||P_REPORT_SELECT_LIST||':',':'||C.COLUMN_NAME||':',1) > 0 )
     UNION
    SELECT C.COLUMN_NAME,
           WWV_FLOW_WIZARD_API.GET_COLUMN_DATA_TYPE (P_TABLE_OWNER,P_TABLE_NAME,C.COLUMN_NAME) DT,
           C.LABEL,
           C.MASK_REPORT MASK,
           DECODE(C.ALIGNMENT,'R','RIGHT','C','CENTER','LEFT') ALIGNMENT,
           C.DISPLAY_SEQ_REPORT,
           C.HELP_TEXT,
           C.GROUP_ID
    FROM   WWV_FLOW_HNT_COLUMN_INFO C, WWV_FLOW_HNT_TABLE_INFO T
    WHERE  C.TABLE_ID = T.TABLE_ID AND
           T.SCHEMA = P_TABLE_OWNER AND
           T.TABLE_NAME = P_TABLE_NAME AND
           (INSTR(':'||P_REPORT_SELECT_LIST||':',':'||C.COLUMN_NAME||':',1) > 0
            OR C.COLUMN_NAME = P_TABLE_PK_COLUMN_NAME) )
    ORDER BY DISPLAY_SEQ_REPORT;
 
    IF LA_COLUMN.COUNT = 0 THEN
       SELECT COLUMN_NAME, DATA_TYPE, LABEL, MASK, ALIGNMENT
              BULK COLLECT INTO
       LA_COLUMN,
       LA_DATA_TYPE,
       LA_LABEL,
       LA_NUMBER_FORMAT,
       LA_ALIGNMENT FROM (
       SELECT 0 COLUMN_ID, 'ROWID' COLUMN_NAME, 'OTHER' DATA_TYPE, 'ROWID' LABEL, NULL MASK, 'LEFT' ALIGNMENT FROM SYS.DUAL WHERE P_TABLE_PK_COLUMN_NAME = 'ROWID'
        UNION
       SELECT COLUMN_ID, COLUMN_NAME,
              DATA_TYPE,
              NVL(WWV_FLOW_HINT.GET_LABEL (P_TABLE_OWNER,P_TABLE_NAME,COLUMN_NAME),INITCAP(REPLACE(COLUMN_NAME,'_',' '))) LABEL,
              NVL(WWV_FLOW_HINT.GET_REPORT_MASK (P_TABLE_OWNER,P_TABLE_NAME,COLUMN_NAME),'') MASK,
              DECODE(NVL(WWV_FLOW_HINT.GET_ALIGNMENT (P_TABLE_OWNER,P_TABLE_NAME,COLUMN_NAME),''),'R','RIGHT','C','CENTER','LEFT') ALIGNMENT
 
       FROM   SYS.DBA_TAB_COLUMNS
       WHERE  OWNER = P_TABLE_OWNER AND
              TABLE_NAME = P_TABLE_NAME AND
              (INSTR(':'||P_REPORT_SELECT_LIST||':',':'||COLUMN_NAME||':',1) > 0
              OR COLUMN_NAME = P_TABLE_PK_COLUMN_NAME) )
       ORDER BY COLUMN_ID;
    END IF;
 
    
    
    
    IF P_TABLE_PK_COLUMN_NAME IS NOT NULL THEN
      L_SHOW_DETAIL_LINK := 'C';
        L_LINK_TEXT := P_EDIT_LINK;
        L_PK_ITEM := GET_VALID_ITEM_NAME(P_TABLE_PK_COLUMN_NAME, P_FORM_PAGE_ID);
      L_VALID_PK_COLUMN := GET_VALID_ITEM_NAME(P_TABLE_PK_COLUMN_NAME);
 
      IF REPLACE(P_TABLE_PK2_COLUMN_NAME,'%null%',NULL) IS NULL THEN
        L_LINK := 'f?p=&APP_ID.:'||P_FORM_PAGE_ID||':&APP_SESSION.::::';
        L_LINK := L_LINK||L_PK_ITEM||':'||'#'||L_VALID_PK_COLUMN||'#';
      ELSE
        L_PK2_ITEM := GET_VALID_ITEM_NAME(P_TABLE_PK2_COLUMN_NAME, P_FORM_PAGE_ID);
        L_VALID_PK2_COLUMN := GET_VALID_ITEM_NAME(P_TABLE_PK2_COLUMN_NAME);
 
        L_LINK := 'f?p=&APP_ID.:'||P_FORM_PAGE_ID||':&APP_SESSION.::::';
        L_LINK := L_LINK||L_PK_ITEM||','||L_PK2_ITEM||':';
        L_LINK := L_LINK||'#'||L_VALID_PK_COLUMN||'#'||','||'#'||L_VALID_PK2_COLUMN||'#';
      END IF;
    END IF;
 
    IF P_WHERE_CLAUSE IS NOT NULL THEN
       L_WHERE_CLAUSE := ' where '||P_WHERE_CLAUSE||' '||WWV_FLOW.LF;
    END IF;
 
    IF L_VALID_PK_COLUMN = P_TABLE_PK_COLUMN_NAME THEN
        L_SQL := 'select "'||P_TABLE_PK_COLUMN_NAME||'", '||WWV_FLOW.LF;
    ELSE
        L_SQL := 'select "'||P_TABLE_PK_COLUMN_NAME||'" "'||L_VALID_PK_COLUMN||'", '||WWV_FLOW.LF;
    END IF;
 
    FOR I IN 1..LA_COLUMN.COUNT
    LOOP
        LA_DISPLAY_TEXT_AS(I) := 'ESCAPE_SC';
 
        IF P_TABLE_PK_COLUMN_NAME IS NOT NULL THEN
            IF LA_COLUMN(I) = P_TABLE_PK_COLUMN_NAME THEN
                
                
                
                IF INSTR(':'||P_REPORT_SELECT_LIST||':',':'||P_TABLE_PK_COLUMN_NAME||':',1) = 0 THEN
                    LA_DISPLAY_TEXT_AS(I) := 'HIDDEN';
                END IF;
            END IF;
        END IF;
 
        IF LA_COLUMN(I) != P_TABLE_PK_COLUMN_NAME THEN
            L_VALID_COL_ALIAS := GET_VALID_ITEM_NAME(LA_COLUMN(I));
            IF LA_DATA_TYPE(I) IN ('CLOB','NCLOB') THEN
               L_SQL := L_SQL||'dbms_lob.substr("'||LA_COLUMN(I)||'",4000,1) "'||L_VALID_COL_ALIAS||'",'||WWV_FLOW.LF;
            ELSIF LA_DATA_TYPE(I) = 'BLOB' THEN
               L_SQL := L_SQL||'dbms_lob.getlength("'||LA_COLUMN(I)||'") "'||L_VALID_COL_ALIAS||'",'||WWV_FLOW.LF;
            ELSE
               IF LA_COLUMN(I) = L_VALID_COL_ALIAS THEN
                   L_SQL := L_SQL||'"'||LA_COLUMN(I)||'",'||WWV_FLOW.LF;
               ELSE
                   L_SQL := L_SQL||'"'||LA_COLUMN(I)||'" "'||L_VALID_COL_ALIAS||'",'||WWV_FLOW.LF;
               END IF;
            END IF;
        END IF;
    END LOOP;
    L_SQL := RTRIM(L_SQL,','||WWV_FLOW.LF);
    L_SQL := L_SQL||WWV_FLOW.LF;
    L_SQL := L_SQL||'from "'||GET_OWNER(P_FLOW_ID,P_TABLE_OWNER)||'"."'||P_TABLE_NAME||'" ' || WWV_FLOW.LF ||
             L_WHERE_CLAUSE||
             '  '||WWV_FLOW.LF;
 
    
    
    
    L_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
    CREATE_IR_REGION_ON_COL_INFO (
        P_FLOW_ID                 => P_FLOW_ID,
        P_PAGE_ID                 => P_REPORT_PAGE_ID,
        P_REGION_ID               => L_REGION_ID,
        P_REGION_TITLE            => P_RPT_REGION_NAME,
        P_SQL                     => L_SQL,
        
        P_SHOW_DETAIL_LINK        => L_SHOW_DETAIL_LINK,
        P_DETAIL_LINK             => L_LINK,
        P_DETAIL_LINK_TEXT        => L_LINK_TEXT,
        
        P_TABLE_NAME              => P_TABLE_NAME,
        P_PK1                     => P_TABLE_PK_COLUMN_NAME,
        P_PK2                     => P_TABLE_PK2_COLUMN_NAME,
        
        P_DB_COLUMN_NAME          => LA_COLUMN,
        P_DISPLAY_ORDER           => LA_DISPLAY_SEQ_REPORT,
        P_COLUMN_LABEL            => LA_LABEL,
        P_REPORT_LABEL            => LA_LABEL,
        P_COLUMN_TYPE             => LA_DATA_TYPE,
        P_DISPLAY_TEXT_AS         => LA_DISPLAY_TEXT_AS,
        P_FORMAT_MASK             => LA_NUMBER_FORMAT,
        P_COLUMN_ALIGNMENT        => LA_ALIGNMENT,
        P_HELP_TEXT               => LA_HELP_TEXT,
        P_GROUP                   => LA_GROUP);
 
    
    IF P_FORM_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN
            L_EDIT_REPORT_DA_ID := WWV_FLOW_ID.NEXT_VAL;
            WWV_FLOW_API.CREATE_PAGE_DA_EVENT(
                P_ID                      => L_EDIT_REPORT_DA_ID,
                P_FLOW_ID                 => P_FLOW_ID,
                P_PAGE_ID                 => P_REPORT_PAGE_ID,
                P_NAME                    => L_EDIT_REPORT_DA,
                P_EVENT_SEQUENCE          => 10,
                P_TRIGGERING_ELEMENT_TYPE => 'REGION',
                P_TRIGGERING_REGION_ID    => L_REGION_ID,
                P_BIND_TYPE               => 'bind',
                P_BIND_EVENT_TYPE         => C_DIALOG_CLOSED_EVENT_TYPE);
 
           WWV_FLOW_API.CREATE_PAGE_DA_ACTION(
               P_ID                      => NULL,
               P_FLOW_ID                 => P_FLOW_ID,
               P_PAGE_ID                 => P_REPORT_PAGE_ID,
               P_EVENT_ID                => L_EDIT_REPORT_DA_ID,
               P_EVENT_RESULT            => 'TRUE',
               P_ACTION_SEQUENCE         => 10,
               P_EXECUTE_ON_PAGE_INIT    => 'N',
               P_ACTION                  => 'NATIVE_REFRESH',
               P_AFFECTED_ELEMENTS_TYPE  => 'REGION',
               P_AFFECTED_REGION_ID      => L_REGION_ID,
               P_STOP_EXECUTION_ON_ERROR => 'Y');
     END IF;
 
    
    
    
    IF P_FORM_INSERT = 'Y' THEN
        IF WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE IS NOT NULL THEN
            L_BUTTON_IMAGE := 'template:'||WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE;
            L_BUTTON_TEMPLATE_OPTIONS :=  GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE,'BUTTON');
        END IF;
        L_CREATE_BUTTON_ID := WWV_FLOW_ID.NEXT_VAL;
        WWV_FLOW_API.CREATE_PAGE_BUTTON(
              P_ID                    => L_CREATE_BUTTON_ID,
              P_FLOW_ID               => P_FLOW_ID,
              P_FLOW_STEP_ID          => P_REPORT_PAGE_ID,
              P_BUTTON_PLUG_ID        => L_REGION_ID,
              P_BUTTON_SEQUENCE       => 30,
              P_BUTTON_NAME           => 'CREATE',
              P_BUTTON_IMAGE          => L_BUTTON_IMAGE,
              P_BUTTON_IS_HOT         => 'Y',
              P_BUTTON_IMAGE_ALT      => L_CREATE_BUTTON_NAME,
              P_BUTTON_TEMPLATE_OPTIONS=> L_BUTTON_TEMPLATE_OPTIONS,
              P_BUTTON_POSITION       => 'RIGHT_OF_IR_SEARCH_BAR',
              P_BUTTON_REDIRECT_URL   => 'f?p=&APP_ID.:'||P_FORM_PAGE_ID||':&SESSION.::&DEBUG.:'||P_FORM_PAGE_ID,
              P_BUTTON_ACTION         => WWV_FLOW_BUTTON.C_ACTION_REDIRECT_PAGE
              );
 
        
        IF P_FORM_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN
            L_CREATE_BUTTON_DA_ID := WWV_FLOW_ID.NEXT_VAL;
            WWV_FLOW_API.CREATE_PAGE_DA_EVENT(
                P_ID                      => L_CREATE_BUTTON_DA_ID,
                P_FLOW_ID                 => P_FLOW_ID,
                P_PAGE_ID                 => P_REPORT_PAGE_ID,
                P_NAME                    => L_CREATE_BUTTON_DA,
                P_EVENT_SEQUENCE          => 20,
                P_TRIGGERING_ELEMENT_TYPE => 'BUTTON',
                P_TRIGGERING_BUTTON_ID    => L_CREATE_BUTTON_ID,
                P_BIND_TYPE               => 'bind',
                P_BIND_EVENT_TYPE         => C_DIALOG_CLOSED_EVENT_TYPE);
 
            WWV_FLOW_API.CREATE_PAGE_DA_ACTION(
                P_ID                      => NULL,
                P_FLOW_ID                 => P_FLOW_ID,
                P_PAGE_ID                 => P_REPORT_PAGE_ID,
                P_EVENT_ID                => L_CREATE_BUTTON_DA_ID,
                P_EVENT_RESULT            => 'TRUE',
                P_ACTION_SEQUENCE         => 10,
                P_EXECUTE_ON_PAGE_INIT    => 'N',
                P_ACTION                  => 'NATIVE_REFRESH',
                P_AFFECTED_ELEMENTS_TYPE  => 'REGION',
                P_AFFECTED_REGION_ID      => L_REGION_ID,
                P_STOP_EXECUTION_ON_ERROR => 'Y');
        END IF;
    END IF;
 EXCEPTION WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20001,WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.CREATE_QUERY_AND_UPDATE_PAGE',SQLERRM));
 END CREATE_FORM_AND_IR_PAGE;
 
 
 
 
 PROCEDURE CREATE_FORM_AND_CR_PAGE (
    P_FLOW_ID                  IN NUMBER   DEFAULT NULL,
    P_FORM_PAGE_ID             IN NUMBER   DEFAULT NULL,
    P_REPORT_PAGE_ID           IN VARCHAR2 DEFAULT NULL,
    P_FORM_PAGE_NAME           IN VARCHAR2 DEFAULT 'form',
    P_REPORT_PAGE_NAME         IN VARCHAR2 DEFAULT 'report',
    P_GROUP_NAME               IN VARCHAR2 DEFAULT NULL,
    P_FORM_PAGE_MODE           IN VARCHAR2 DEFAULT NULL,
    P_REPORT_PAGE_MODE         IN VARCHAR2 DEFAULT NULL,
    P_USER_INTERFACE_ID        IN NUMBER,
    P_USE_UI_DEFAULT           IN VARCHAR2 DEFAULT 'Y',
    
    P_TAB_SET                  IN VARCHAR2 DEFAULT NULL,
    P_TAB_NAME                 IN VARCHAR2 DEFAULT NULL, 
    P_TAB_TEXT                 IN VARCHAR2 DEFAULT NULL,
    
    P_NAV_LIST_ID              IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_ITEM_ID         IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_ITEM_NAME       IN VARCHAR2 DEFAULT NULL,
    P_NAV_LIST_PARENT_ITEM_ID  IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_CHILD_ITEM_NAME IN VARCHAR2 DEFAULT NULL,
    
    P_TABLE_OWNER              IN VARCHAR2 DEFAULT NULL,
    P_TABLE_NAME               IN VARCHAR2 DEFAULT NULL,
    P_TABLE_PK_COLUMN_NAME     IN VARCHAR2 DEFAULT NULL,
    P_TABLE_PK_SRC_TYPE        IN VARCHAR2 DEFAULT NULL,
    P_TABLE_PK_SRC             IN VARCHAR2 DEFAULT NULL,
    P_TABLE_PK2_COLUMN_NAME    IN VARCHAR2 DEFAULT NULL,
    P_TABLE_PK2_SRC_TYPE       IN VARCHAR2 DEFAULT NULL,
    P_TABLE_PK2_SRC            IN VARCHAR2 DEFAULT NULL,
    P_TABLE_RV_COLUMN_NAME     IN VARCHAR2 DEFAULT NULL,
    
    P_DISPLAY_COLUMN_LIST      IN VARCHAR2 DEFAULT NULL,
    P_REPORT_SELECT_LIST       IN VARCHAR2 DEFAULT NULL,
    
    P_RPT_REGION_TEMPLATE      IN NUMBER   DEFAULT NULL,
    P_RPT_TEMPLATE             IN NUMBER   DEFAULT NULL,
    P_RPT_REGION_NAME          IN VARCHAR2 DEFAULT NULL,
    P_FORM_REGION_TEMPLATE     IN NUMBER   DEFAULT NULL,
    P_FORM_REGION_NAME         IN VARCHAR2 DEFAULT NULL,
    
    P_WHERE_CLAUSE             IN VARCHAR2 DEFAULT NULL,
    P_PAGINATION_SIZE          IN VARCHAR2 DEFAULT '10',
    P_EDIT_LINK                IN VARCHAR2 DEFAULT 'Edit',
    
    P_FORM_INSERT              IN VARCHAR2 DEFAULT 'Y',
    P_FORM_UPDATE              IN VARCHAR2 DEFAULT 'Y',
    P_FORM_DELETE              IN VARCHAR2 DEFAULT 'Y'
    )
 IS
    L_GROUP_ID                  NUMBER := NULL;
    L_CREATE_BUTTON_ID          NUMBER := NULL;
    L_CREATE_BUTTON_DA_ID       NUMBER := NULL;
    L_EDIT_REPORT_DA_ID         NUMBER := NULL;
    L_CNT                       PLS_INTEGER := 1;
    L_CREATE_BUTTON_NAME        VARCHAR2(255) := WWV_FLOW_LANG.SYSTEM_MESSAGE('LAYOUT.T_CREATE_BUTTON');
    L_SAVE_BUTTON_NAME          VARCHAR2(255) := WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_CUSTOMIZE.T_APPLY');
    L_DELETE_BUTTON_NAME        VARCHAR2(255) := WWV_FLOW_LANG.SYSTEM_MESSAGE('F4350.DELETE');
    L_CANCEL_BUTTON_NAME        VARCHAR2(255) := WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_SPELING.BUTTON_CANCEL');
    L_CREATE_BUTTON_DA          VARCHAR2(255) := WWV_FLOW_LANG.SYSTEM_MESSAGE('CREATE_DIALOG_CLOSED_DA');
    L_EDIT_REPORT_DA            VARCHAR2(255) := WWV_FLOW_LANG.SYSTEM_MESSAGE('EDIT_REPORT_DIALOG_CLOSED_DA');
    L_BUTTON_TEMPLATE_OPTIONS   VARCHAR2(255);
    L_VALID_COL_ALIAS           VARCHAR2(4000);
    L_DATA_TYPE                 VARCHAR2(4000);
    L_BUTTON_IMAGE              VARCHAR2(4000);
    L_QUERY_HEADINGS            VARCHAR2(5000);
    L_WHERE_CLAUSE              VARCHAR2(5000);
    L_SQL                       VARCHAR2(32767);
    L_EDIT_LINK                 VARCHAR2(32767);
    L_NUMBER_FORMATS            VARCHAR2(32767);
    L_ALIGNMENTS                VARCHAR2(32767);
    L_REPORT_COLS               WWV_FLOW_GLOBAL.VC_ARR2;
 BEGIN
    
    
    
    
    
    
    IF P_USE_UI_DEFAULT = 'N' THEN
        WWV_FLOW_HINT.G_USE_UI_DEFAULTS := FALSE;
    END IF;
 
    
    
    
   WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
       P_FLOW_ID           => P_FLOW_ID,
       P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
    
    
    
 
    IF LOWER(WWV_FLOW.G_BROWSER_LANGUAGE) = 'en' THEN
        NULL;
    ELSE
        L_CREATE_BUTTON_NAME := WWV_FLOW_LANG.SYSTEM_MESSAGE('LAYOUT.T_CREATE_BUTTON');
        L_SAVE_BUTTON_NAME   := WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_CUSTOMIZE.T_APPLY');
        L_DELETE_BUTTON_NAME := WWV_FLOW_LANG.SYSTEM_MESSAGE('F4350.DELETE');
        L_CANCEL_BUTTON_NAME := WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_SPELING.BUTTON_CANCEL');
    END IF;
 
    CREATE_FORM_ON_TABLE (
        P_FLOW_ID                 => P_FLOW_ID,
        P_PAGE_ID                 => P_FORM_PAGE_ID,
        P_PAGE_NAME               => P_FORM_PAGE_NAME,
        P_GROUP_NAME              => P_GROUP_NAME,
        P_PAGE_MODE               => P_FORM_PAGE_MODE,
        P_USER_INTERFACE_ID       => P_USER_INTERFACE_ID,
        P_TAB_SET                 => P_TAB_SET,
        P_TAB_NAME                => P_TAB_NAME,
        P_TAB_TEXT                => P_TAB_TEXT,
        P_REGION_TITLE            => P_FORM_REGION_NAME,
        P_REGION_TEMPLATE         => P_FORM_REGION_TEMPLATE,
        P_TABLE_OWNER             => P_TABLE_OWNER,
        P_TABLE_NAME              => P_TABLE_NAME,
        P_TABLE_PK_COLUMN_NAME    => P_TABLE_PK_COLUMN_NAME,
        P_TABLE_PK_SRC_TYPE       => P_TABLE_PK_SRC_TYPE,
        P_TABLE_PK_SRC            => P_TABLE_PK_SRC,
        P_TABLE_PK2_COLUMN_NAME   => P_TABLE_PK2_COLUMN_NAME,
        P_TABLE_PK2_SRC_TYPE      => P_TABLE_PK2_SRC_TYPE,
        P_TABLE_PK2_SRC           => P_TABLE_PK2_SRC,
        P_TABLE_RV_COLUMN_NAME    => P_TABLE_RV_COLUMN_NAME,
        P_DISPLAY_COLUMN_LIST     => P_DISPLAY_COLUMN_LIST,
        P_BRANCH                  => NVL(P_REPORT_PAGE_ID,P_FORM_PAGE_ID),
        P_CANCEL_BRANCH           => P_REPORT_PAGE_ID,
        P_CREATE_BUTTON_NAME      => L_CREATE_BUTTON_NAME,
        P_SAVE_BUTTON_NAME        => L_SAVE_BUTTON_NAME,
        P_DELETE_BUTTON_NAME      => L_DELETE_BUTTON_NAME,
        P_CANCEL_BUTTON_NAME      => L_CANCEL_BUTTON_NAME,
        P_INSERT                  => P_FORM_INSERT,
        P_UPDATE                  => P_FORM_UPDATE,
        P_DELETE                  => P_FORM_DELETE);
 
 
    
    
    
 
    IF NOT PAGE_EXISTS (P_FLOW_ID,P_REPORT_PAGE_ID) THEN
 
        
        
        
        IF P_GROUP_NAME IS NOT NULL THEN
            L_GROUP_ID := WWV_FLOW_UTILITIES.GET_PAGE_GROUP_ID(P_GROUP_NAME => P_GROUP_NAME, P_APPLICATION_ID => P_FLOW_ID);
            
            IF L_GROUP_ID IS NULL THEN
                L_GROUP_ID := WWV_FLOW_ID.NEXT_VAL;
                WWV_FLOW_API.CREATE_PAGE_GROUP(P_ID => L_GROUP_ID, P_FLOW_ID => P_FLOW_ID, P_GROUP_NAME => P_GROUP_NAME);
            END IF;
        END IF;
 
        WWV_FLOW_API.CREATE_PAGE(
              P_ID                  => P_REPORT_PAGE_ID,
              P_FLOW_ID             => P_FLOW_ID,
              P_TAB_SET             => REPLACE(P_TAB_SET,'%null%',NULL),
              P_NAME                => P_REPORT_PAGE_NAME,
              P_PAGE_MODE           => P_REPORT_PAGE_MODE,
              P_GROUP_ID            => L_GROUP_ID,
              P_USER_INTERFACE_ID   => P_USER_INTERFACE_ID,
              P_STEP_TITLE          => P_REPORT_PAGE_NAME,
              P_STEP_SUB_TITLE      => NULL,
              P_STEP_SUB_TITLE_TYPE => 'TEXT_WITH_SUBSTITUTIONS',
              P_WELCOME_TEXT        => '',
              P_BOX_WELCOME_TEXT    => '',
              P_BOX_FOOTER_TEXT     => '',
              P_FOOTER_TEXT         => '',
              P_STEP_TEMPLATE       => '',
              P_PAGE_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_PAGE_TEMPLATE, 'PAGE'),
              P_BOX_IMAGE           => '',
              P_REQUIRED_ROLE      => '',
              P_PAGE_COMMENT       => NULL);
 
 
        IF P_NAV_LIST_ID IS NOT NULL THEN
             G_NAV_LIST_ITEM_ID := NULL;
             
             CREATE_NAVIGATION_LIST_ITEM (
                 P_FLOW_ID                  => P_FLOW_ID,
                 P_PAGE_ID                  => P_REPORT_PAGE_ID,
                 P_PAGE_NAME                => P_REPORT_PAGE_NAME,
                 P_NAV_LIST_ID              => P_NAV_LIST_ID,
                 P_NAV_LIST_ITEM_ID         => P_NAV_LIST_ITEM_ID,
                 P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_ITEM_NAME,
                 P_NAV_LIST_PARENT_ITEM_ID  => P_NAV_LIST_PARENT_ITEM_ID,
                 P_NAV_LIST_CHILD_ITEM_NAME => P_NAV_LIST_CHILD_ITEM_NAME);
 
              
              CREATE_NAVIGATION_LIST_ITEM (
                 P_FLOW_ID                  => P_FLOW_ID,
                 P_PAGE_ID                  => P_FORM_PAGE_ID,
                 P_PAGE_NAME                => P_REPORT_PAGE_NAME,
                 P_NAV_LIST_ID              => P_NAV_LIST_ID,
                 P_NAV_LIST_ITEM_ID         => NVL(P_NAV_LIST_ITEM_ID,G_NAV_LIST_ITEM_ID),
                 P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_CHILD_ITEM_NAME,
                 P_NAV_LIST_PARENT_ITEM_ID  => CASE WHEN (P_NAV_LIST_PARENT_ITEM_ID IS NOT NULL AND P_NAV_LIST_CHILD_ITEM_NAME IS NULL) THEN P_NAV_LIST_PARENT_ITEM_ID ELSE NULL END,
                 P_NAV_LIST_CHILD_ITEM_NAME => NULL );
        ELSE
            IF REPLACE(P_TAB_SET,'%null%',NULL) IS NOT NULL THEN
                CREATE_TAB (
                    P_FLOW_ID  => P_FLOW_ID,
                    P_PAGE_ID  => P_REPORT_PAGE_ID,
                    P_TAB_SET  => P_TAB_SET,
                    P_TAB_NAME => P_TAB_NAME,
                    P_TAB_TEXT => P_TAB_TEXT);
 
                
                
                
                UPDATE WWV_FLOW_TABS
                   SET TAB_STEP = P_REPORT_PAGE_ID,
                       TAB_ALSO_CURRENT_FOR_PAGES = P_FORM_PAGE_ID
                 WHERE FLOW_ID = P_FLOW_ID
                   AND TAB_SET = P_TAB_SET
                   AND TAB_TEXT = P_TAB_TEXT;
            END IF;
        END IF;
    END IF;
 
 
    
    
    
 
    
    
    
    SELECT C.COLUMN_NAME
    BULK COLLECT INTO L_REPORT_COLS
    FROM WWV_FLOW_HNT_COLUMN_INFO C, WWV_FLOW_HNT_TABLE_INFO T
    WHERE C.TABLE_ID = T.TABLE_ID
    AND T.SCHEMA = P_TABLE_OWNER
    AND T.TABLE_NAME = P_TABLE_NAME
    AND INSTR(':'||P_REPORT_SELECT_LIST||':',':'||C.COLUMN_NAME||':',1) > 0
    ORDER BY DISPLAY_SEQ_REPORT;
 
    IF L_REPORT_COLS.COUNT = 0 THEN
       L_REPORT_COLS := WWV_FLOW_UTILITIES.STRING_TO_TABLE2(P_REPORT_SELECT_LIST);
    END IF;
 
    
    
    
    L_QUERY_HEADINGS := ':';
    L_ALIGNMENTS := 'CENTER';
    FOR I IN 1..L_REPORT_COLS.COUNT
    LOOP
        IF I > 1 THEN
           L_ALIGNMENTS := L_ALIGNMENTS||':';
        END IF;
        L_ALIGNMENTS := L_ALIGNMENTS||NVL(WWV_FLOW_HINT.GET_ALIGNMENT (
                                      P_SCHEMA      => P_TABLE_OWNER,
                                      P_TABLE_NAME  => P_TABLE_NAME,
                                      P_COLUMN_NAME => L_REPORT_COLS(I)
                                      ),' ');
        IF L_REPORT_COLS(I) != P_TABLE_PK_COLUMN_NAME THEN
             L_DATA_TYPE := GET_COLUMN_DATA_TYPE (P_TABLE_OWNER => P_TABLE_OWNER,
                                    P_TABLE_NAME  => P_TABLE_NAME,
                                    P_COLUMN_NAME => L_REPORT_COLS(I));
 
           IF L_CNT > 1 THEN
              L_NUMBER_FORMATS := L_NUMBER_FORMATS||':';
              L_QUERY_HEADINGS := L_QUERY_HEADINGS||':';
           END IF;
 
           IF L_DATA_TYPE = 'BLOB' THEN
              L_NUMBER_FORMATS := L_NUMBER_FORMATS||REPLACE('DOWNLOAD:'||P_TABLE_NAME||':'||L_REPORT_COLS(I)||':'
              ||P_TABLE_PK_COLUMN_NAME||':'||P_TABLE_PK2_COLUMN_NAME,
                                                            ':','\58');
           ELSE
              L_NUMBER_FORMATS := L_NUMBER_FORMATS||REPLACE(NVL(WWV_FLOW_HINT.GET_REPORT_MASK (
                                                   P_SCHEMA      => P_TABLE_OWNER,
                                                   P_TABLE_NAME  => P_TABLE_NAME,
                                                   P_COLUMN_NAME => L_REPORT_COLS(I)
                                                   ),' '),':','\58');
           END IF;
 
           L_QUERY_HEADINGS := L_QUERY_HEADINGS||NVL(WWV_FLOW_HINT.GET_LABEL(
                                                P_SCHEMA      => P_TABLE_OWNER,
                                                P_TABLE_NAME  => P_TABLE_NAME,
                                                P_COLUMN_NAME => L_REPORT_COLS(I)
                                                ),INITCAP(REPLACE(L_REPORT_COLS(I),'_',' ')));
           L_CNT := L_CNT + 1;
        END IF;
    END LOOP;
 
    
    
    
    IF P_TABLE_PK_COLUMN_NAME IS NOT NULL THEN
      IF REPLACE(P_TABLE_PK2_COLUMN_NAME,'%null%',NULL) IS NULL THEN
        L_EDIT_LINK := '<url>f?p=#APP_ID#\58'||P_FORM_PAGE_ID||
                       '\58#APP_SESSION#\58\58\58\58';
        L_EDIT_LINK := L_EDIT_LINK||GET_VALID_ITEM_NAME(P_TABLE_PK_COLUMN_NAME, P_FORM_PAGE_ID);
        L_EDIT_LINK := L_EDIT_LINK||'\58';
        L_EDIT_LINK := L_EDIT_LINK||'#'||GET_VALID_ITEM_NAME(P_TABLE_PK_COLUMN_NAME)||'#';
        L_EDIT_LINK := L_EDIT_LINK||'</url>'||
                       '<txt>'||P_EDIT_LINK||'</txt>';
      ELSE
        L_EDIT_LINK := '<url>f?p=#APP_ID#\58'||P_FORM_PAGE_ID||
                       '\58#APP_SESSION#\58\58\58\58';
        L_EDIT_LINK := L_EDIT_LINK||GET_VALID_ITEM_NAME(P_TABLE_PK_COLUMN_NAME, P_FORM_PAGE_ID);
        L_EDIT_LINK := L_EDIT_LINK||',';
        L_EDIT_LINK := L_EDIT_LINK||GET_VALID_ITEM_NAME(P_TABLE_PK2_COLUMN_NAME, P_FORM_PAGE_ID);
        L_EDIT_LINK := L_EDIT_LINK||'\58';
        L_EDIT_LINK := L_EDIT_LINK||'#'||GET_VALID_ITEM_NAME(P_TABLE_PK_COLUMN_NAME)||'#';
        L_EDIT_LINK := L_EDIT_LINK||',';
        L_EDIT_LINK := L_EDIT_LINK||'#'||GET_VALID_ITEM_NAME(P_TABLE_PK2_COLUMN_NAME)||'#';
        L_EDIT_LINK := L_EDIT_LINK||'</url>'||
                       '<txt>'||P_EDIT_LINK||'</txt>';
      END IF;
    END IF;
    IF L_NUMBER_FORMATS IS NOT NULL THEN
        L_EDIT_LINK := L_EDIT_LINK||':'||L_NUMBER_FORMATS;
    END IF;
 
 
    IF P_WHERE_CLAUSE IS NOT NULL THEN
       L_WHERE_CLAUSE := ' where '||P_WHERE_CLAUSE||' '||WWV_FLOW.LF;
    END IF;
 
    IF GET_VALID_ITEM_NAME(P_TABLE_PK_COLUMN_NAME) = P_TABLE_PK_COLUMN_NAME THEN
        L_SQL := 'select "'||P_TABLE_PK_COLUMN_NAME||'", '||WWV_FLOW.LF;
    ELSE
        L_SQL := 'select "'||P_TABLE_PK_COLUMN_NAME||'" "'||GET_VALID_ITEM_NAME(P_TABLE_PK_COLUMN_NAME)||'", '||WWV_FLOW.LF;
    END IF;
 
    FOR I IN 1..L_REPORT_COLS.COUNT
    LOOP
       IF L_REPORT_COLS(I) != P_TABLE_PK_COLUMN_NAME THEN
           L_VALID_COL_ALIAS := GET_VALID_ITEM_NAME(L_REPORT_COLS(I));
           L_DATA_TYPE := GET_COLUMN_DATA_TYPE (P_TABLE_OWNER => P_TABLE_OWNER,
                                    P_TABLE_NAME  => P_TABLE_NAME,
                                    P_COLUMN_NAME => L_REPORT_COLS(I));
 
           IF L_DATA_TYPE IN ('CLOB','NCLOB') THEN
              L_SQL := L_SQL||'dbms_lob.substr("'||L_REPORT_COLS(I)||'",4000,1) "'||L_VALID_COL_ALIAS||'",'||WWV_FLOW.LF;
           ELSIF L_DATA_TYPE = 'BLOB' THEN
             L_SQL := L_SQL||'dbms_lob.getlength("'||L_REPORT_COLS(I)||'") "'||L_VALID_COL_ALIAS||'",'||WWV_FLOW.LF;
           ELSE
              IF L_REPORT_COLS(I) = L_VALID_COL_ALIAS THEN
                  L_SQL := L_SQL||'"'||L_REPORT_COLS(I)||'",'||WWV_FLOW.LF;
              ELSE
                  L_SQL := L_SQL||'"'||L_REPORT_COLS(I)||'" "'||L_VALID_COL_ALIAS||'",'||WWV_FLOW.LF;
              END IF;
           END IF;
       END IF;
    END LOOP;
    L_SQL := RTRIM(L_SQL,','||WWV_FLOW.LF);
    L_SQL := L_SQL||WWV_FLOW.LF;
    L_SQL := L_SQL||'from "'||GET_OWNER(P_FLOW_ID,P_TABLE_OWNER)||'"."'||P_TABLE_NAME||'" ' || WWV_FLOW.LF ||
             L_WHERE_CLAUSE||
             '  '||WWV_FLOW.LF;
 
    
    
    
    L_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
 
    WWV_FLOW_API.CREATE_PAGE_PLUG (
        P_ID                            => L_REGION_ID,
        P_FLOW_ID                       => P_FLOW_ID,
        P_PAGE_ID                       => P_REPORT_PAGE_ID,
        P_PLUG_NAME                     => P_RPT_REGION_NAME,
        P_PLUG_TEMPLATE                 => P_RPT_REGION_TEMPLATE,
        P_REGION_TEMPLATE_OPTIONS       => GET_PRESET_TEMPLATE_OPTIONS (P_RPT_REGION_TEMPLATE,'REGION'),
        P_PLUG_DISPLAY_SEQUENCE         => '10',
        P_PLUG_DISPLAY_POINT            => 'BODY',
        P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
        P_PLUG_SOURCE                   => L_SQL,
        P_PLUG_SOURCE_TYPE              => WWV_FLOW_REGION_NATIVE.C_SQL_REPORT,
        P_LOCATION                      => 'LOCAL',
        P_QUERY_TYPE                    => 'SQL',
        P_PLUG_QUERY_NUM_ROWS_TYPE      => 'ROW_RANGES_IN_SELECT_LIST',
        P_PLUG_QUERY_ROW_COUNT_MAX      => WWV_FLOW_API.C_DEFAULT_QUERY_ROW_COUNT_MAX,
        P_PLUG_QUERY_NUM_ROWS           => P_PAGINATION_SIZE,
        P_PLUG_QUERY_HEADINGS           => L_QUERY_HEADINGS,
        P_PLUG_QUERY_FORMAT_OUT         => 'HTML',
        P_PLUG_QUERY_NUMBER_FORMATS     => L_EDIT_LINK,
        P_PLUG_QUERY_COL_ALLIGNMENTS    => L_ALIGNMENTS,
        P_PLUG_QUERY_ROW_TEMPLATE       => P_RPT_TEMPLATE,
        P_COMPONENT_TEMPLATE_OPTIONS    => GET_PRESET_TEMPLATE_OPTIONS (P_RPT_TEMPLATE,'REPORT'),
        P_PLUG_COMMENT                  => NULL,
        P_AJAX_ENABLED                  => CASE WHEN P_FORM_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN 'Y' ELSE 'N' END);  
 
 
    
    FOR I IN 1..L_REPORT_COLS.COUNT LOOP
        UPDATE WWV_FLOW_REGION_REPORT_COLUMN SET
                            REF_SCHEMA          = P_TABLE_OWNER,
                            REF_TABLE_NAME      = P_TABLE_NAME,
                            REF_COLUMN_NAME     = L_REPORT_COLS(I),
                            HEADING_ALIGNMENT   = COLUMN_ALIGNMENT
        WHERE
            REGION_ID    = L_REGION_ID AND
            COLUMN_ALIAS = L_REPORT_COLS(I);
    END LOOP;
 
    
    IF P_FORM_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN
            L_EDIT_REPORT_DA_ID := WWV_FLOW_ID.NEXT_VAL;
            WWV_FLOW_API.CREATE_PAGE_DA_EVENT(
                P_ID                      => L_EDIT_REPORT_DA_ID,
                P_FLOW_ID                 => P_FLOW_ID,
                P_PAGE_ID                 => P_REPORT_PAGE_ID,
                P_NAME                    => L_EDIT_REPORT_DA,
                P_EVENT_SEQUENCE          => 10,
                P_TRIGGERING_ELEMENT_TYPE => 'REGION',
                P_TRIGGERING_REGION_ID    => L_REGION_ID,
                P_BIND_TYPE               => 'bind',
                P_BIND_EVENT_TYPE         => 'apexafterclosedialog');
 
           WWV_FLOW_API.CREATE_PAGE_DA_ACTION(
               P_ID                      => NULL,
               P_FLOW_ID                 => P_FLOW_ID,
               P_PAGE_ID                 => P_REPORT_PAGE_ID,
               P_EVENT_ID                => L_EDIT_REPORT_DA_ID,
               P_EVENT_RESULT            => 'TRUE',
               P_ACTION_SEQUENCE         => 10,
               P_EXECUTE_ON_PAGE_INIT    => 'N',
               P_ACTION                  => 'NATIVE_REFRESH',
               P_AFFECTED_ELEMENTS_TYPE  => 'REGION',
               P_AFFECTED_REGION_ID      => L_REGION_ID,
               P_STOP_EXECUTION_ON_ERROR => 'Y');
     END IF;
 
    
    
    
    IF P_FORM_INSERT = 'Y' THEN
        IF WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE IS NOT NULL THEN
            L_BUTTON_IMAGE := 'template:'||WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE;
            L_BUTTON_TEMPLATE_OPTIONS :=  GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE,'BUTTON');
        END IF;
        L_CREATE_BUTTON_ID := WWV_FLOW_ID.NEXT_VAL;
        WWV_FLOW_API.CREATE_PAGE_BUTTON(
              P_ID                    => L_CREATE_BUTTON_ID,
              P_FLOW_ID               => P_FLOW_ID,
              P_FLOW_STEP_ID          => P_REPORT_PAGE_ID,
              P_BUTTON_PLUG_ID        => L_REGION_ID,
              P_BUTTON_SEQUENCE       => 30,
              P_BUTTON_NAME           => 'CREATE',
              P_BUTTON_IMAGE          => L_BUTTON_IMAGE,
              P_BUTTON_IS_HOT         => 'Y',
              P_BUTTON_IMAGE_ALT      => L_CREATE_BUTTON_NAME,
              P_BUTTON_TEMPLATE_OPTIONS=> L_BUTTON_TEMPLATE_OPTIONS,
              P_BUTTON_POSITION       => WWV_FLOW_THEME_MANAGER.GET_BUTTON_POSTION(
                                         P_TEMPLATE_ID => P_RPT_REGION_TEMPLATE,
                                         P_POSITION    => '#CREATE#'),
              P_BUTTON_REDIRECT_URL   => 'f?p=&APP_ID.:'||P_FORM_PAGE_ID||':&SESSION.::&DEBUG.:'||P_FORM_PAGE_ID,
              P_BUTTON_ACTION         => WWV_FLOW_BUTTON.C_ACTION_REDIRECT_PAGE
              );
 
        
        IF P_FORM_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN
            L_CREATE_BUTTON_DA_ID := WWV_FLOW_ID.NEXT_VAL;
            WWV_FLOW_API.CREATE_PAGE_DA_EVENT(
                P_ID                      => L_CREATE_BUTTON_DA_ID,
                P_FLOW_ID                 => P_FLOW_ID,
                P_PAGE_ID                 => P_REPORT_PAGE_ID,
                P_NAME                    => L_CREATE_BUTTON_DA,
                P_EVENT_SEQUENCE          => 20,
                P_TRIGGERING_ELEMENT_TYPE => 'BUTTON',
                P_TRIGGERING_BUTTON_ID    => L_CREATE_BUTTON_ID,
                P_BIND_TYPE               => 'bind',
                P_BIND_EVENT_TYPE         => 'apexafterclosedialog');
 
            WWV_FLOW_API.CREATE_PAGE_DA_ACTION(
                P_ID                      => NULL,
                P_FLOW_ID                 => P_FLOW_ID,
                P_PAGE_ID                 => P_REPORT_PAGE_ID,
                P_EVENT_ID                => L_CREATE_BUTTON_DA_ID,
                P_EVENT_RESULT            => 'TRUE',
                P_ACTION_SEQUENCE         => 10,
                P_EXECUTE_ON_PAGE_INIT    => 'N',
                P_ACTION                  => 'NATIVE_REFRESH',
                P_AFFECTED_ELEMENTS_TYPE  => 'REGION',
                P_AFFECTED_REGION_ID      => L_REGION_ID,
                P_STOP_EXECUTION_ON_ERROR => 'Y');
        END IF;
    END IF;
 
 EXCEPTION WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20001,WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.CREATE_QUERY_AND_UPDATE_PAGE',SQLERRM));
 END CREATE_FORM_AND_CR_PAGE;
 
 
 PROCEDURE CREATE_FORM_AND_LIST_VIEW_PAGE (
    P_FLOW_ID                  IN NUMBER   DEFAULT NULL,
    P_FORM_PAGE_ID             IN NUMBER   DEFAULT NULL,
    P_REPORT_PAGE_ID           IN VARCHAR2 DEFAULT NULL,
    P_FORM_PAGE_NAME           IN VARCHAR2 DEFAULT 'form',
    P_REPORT_PAGE_NAME         IN VARCHAR2 DEFAULT 'report',
    P_GROUP_NAME               IN VARCHAR2 DEFAULT NULL,
    P_FORM_PAGE_MODE           IN VARCHAR2 DEFAULT NULL,
    P_REPORT_PAGE_MODE         IN VARCHAR2 DEFAULT NULL,
    P_USER_INTERFACE_ID        IN NUMBER,
    P_USE_UI_DEFAULT           IN VARCHAR2 DEFAULT 'Y',
    
    P_TABLE_OWNER              IN VARCHAR2 DEFAULT NULL,
    P_TABLE_NAME               IN VARCHAR2 DEFAULT NULL,
    P_TABLE_PK_COLUMN_NAME     IN VARCHAR2 DEFAULT NULL,
    P_TABLE_PK_SRC_TYPE        IN VARCHAR2 DEFAULT NULL,
    P_TABLE_PK_SRC             IN VARCHAR2 DEFAULT NULL,
    P_TABLE_PK2_COLUMN_NAME    IN VARCHAR2 DEFAULT NULL,
    P_TABLE_PK2_SRC_TYPE       IN VARCHAR2 DEFAULT NULL,
    P_TABLE_PK2_SRC            IN VARCHAR2 DEFAULT NULL,
    P_TABLE_RV_COLUMN_NAME     IN VARCHAR2 DEFAULT NULL,
    P_DISPLAY_COLUMN_LIST      IN VARCHAR2 DEFAULT NULL,
    P_REPORT_SELECT_LIST       IN VARCHAR2 DEFAULT NULL,
    P_WHERE_CLAUSE             IN VARCHAR2 DEFAULT NULL,
    P_PAGINATION_SIZE          IN VARCHAR2 DEFAULT '10',
    
    P_FORM_REGION_TEMPLATE     IN NUMBER   DEFAULT NULL,
    P_FORM_REGION_NAME         IN VARCHAR2 DEFAULT NULL,
    P_FORM_INSERT              IN VARCHAR2 DEFAULT 'Y',
    P_FORM_UPDATE              IN VARCHAR2 DEFAULT 'Y',
    P_FORM_DELETE              IN VARCHAR2 DEFAULT 'Y',
    
    P_RPT_REGION_TEMPLATE      IN NUMBER   DEFAULT NULL,
    P_RPT_REGION_NAME          IN VARCHAR2 DEFAULT NULL,
    P_RPT_TEXT_COLUMN          IN VARCHAR2,
    P_RPT_ENABLE_SEARCH        IN BOOLEAN  DEFAULT FALSE,
    P_RPT_IS_INSET             IN BOOLEAN  DEFAULT FALSE,
    P_RPT_PAGE_ITEMS_TO_SUBMIT IN VARCHAR2 DEFAULT NULL,
    P_RPT_INFO_COLUMN          IN VARCHAR2 DEFAULT NULL,
    P_RPT_COUNTER_COLUMN       IN VARCHAR2 DEFAULT NULL,
    P_RPT_LIST_DIVIDER         IN VARCHAR2 DEFAULT NULL,
    
    P_NAV_LIST_ID              IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_ITEM_ID         IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_ITEM_NAME       IN VARCHAR2 DEFAULT NULL,
    P_NAV_LIST_PARENT_ITEM_ID  IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_CHILD_ITEM_NAME IN VARCHAR2 DEFAULT NULL
    )
 IS
     C_CREATE_BUTTON_NAME CONSTANT VARCHAR2(255) := WWV_FLOW_LANG.SYSTEM_MESSAGE('LAYOUT.T_CREATE_BUTTON');
     C_SAVE_BUTTON_NAME   CONSTANT VARCHAR2(255) := WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_CUSTOMIZE.T_APPLY');
     C_DELETE_BUTTON_NAME CONSTANT VARCHAR2(255) := WWV_FLOW_LANG.SYSTEM_MESSAGE('F4350.DELETE');
     C_CANCEL_BUTTON_NAME CONSTANT VARCHAR2(255) := WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_SPELING.BUTTON_CANCEL');
 
     L_GROUP_ID             NUMBER := NULL;
 
     L_TABLE_PK_COLUMN_NAME    VARCHAR2(255) := CASE WHEN P_TABLE_PK_COLUMN_NAME = 'ROWID' THEN 'PK_ROWID'
                                                ELSE P_TABLE_PK_COLUMN_NAME
                                                END;
     L_REGION_TEMPLATE_OPTIONS VARCHAR2(255);
     L_BUTTON_TEMPLATE_OPTIONS VARCHAR2(255);
 
     L_BUTTON_IMAGE         VARCHAR2(4000);
     L_SQL                  VARCHAR2(32767);
     L_EDIT_LINK            VARCHAR2(32767);
 
     FUNCTION GET_COLUMN_SUBSTITUTION (
         P_COLUMN_NAME IN VARCHAR2 )
         RETURN VARCHAR2
     IS
         L_COLUMN_SUBST VARCHAR2(32767);
     BEGIN
         IF P_COLUMN_NAME IS NOT NULL THEN
             L_COLUMN_SUBST := GET_VALID_ITEM_NAME(P_COLUMN_NAME);
             IF L_COLUMN_SUBST = SYS.UTL_URL.ESCAPE( L_COLUMN_SUBST ) THEN
                 RETURN '&' || GET_VALID_ITEM_NAME(P_COLUMN_NAME) || '.';
             ELSE
                 RETURN '&"' || GET_VALID_ITEM_NAME(P_COLUMN_NAME) || '".';
             END IF;
         ELSE
             RETURN NULL;
         END IF;
     END GET_COLUMN_SUBSTITUTION;
 BEGIN
     
     
     
     
     
     
     IF P_USE_UI_DEFAULT = 'N' THEN
         WWV_FLOW_HINT.G_USE_UI_DEFAULTS := FALSE;
     END IF;
 
     
     WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
         P_FLOW_ID           => P_FLOW_ID,
         P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
     
     CREATE_FORM_ON_TABLE (
         P_FLOW_ID                 => P_FLOW_ID,
         P_PAGE_ID                 => P_FORM_PAGE_ID,
         P_PAGE_NAME               => P_FORM_PAGE_NAME,
         P_GROUP_NAME              => P_GROUP_NAME,
         P_PAGE_MODE               => P_FORM_PAGE_MODE,
         P_USER_INTERFACE_ID       => P_USER_INTERFACE_ID,
         P_TAB_SET                 => NULL,
         P_TAB_NAME                => NULL,
         P_TAB_TEXT                => NULL,
         P_REGION_TITLE            => P_FORM_REGION_NAME,
         P_REGION_TEMPLATE         => P_FORM_REGION_TEMPLATE,
         P_TABLE_OWNER             => P_TABLE_OWNER,
         P_TABLE_NAME              => P_TABLE_NAME,
         P_TABLE_PK_COLUMN_NAME    => P_TABLE_PK_COLUMN_NAME,
         P_TABLE_PK_SRC_TYPE       => P_TABLE_PK_SRC_TYPE,
         P_TABLE_PK_SRC            => P_TABLE_PK_SRC,
         P_TABLE_PK2_COLUMN_NAME   => P_TABLE_PK2_COLUMN_NAME,
         P_TABLE_PK2_SRC_TYPE      => P_TABLE_PK2_SRC_TYPE,
         P_TABLE_PK2_SRC           => P_TABLE_PK2_SRC,
         P_TABLE_RV_COLUMN_NAME    => P_TABLE_RV_COLUMN_NAME,
         P_DISPLAY_COLUMN_LIST     => P_DISPLAY_COLUMN_LIST,
         P_BRANCH                  => NVL(P_REPORT_PAGE_ID, P_FORM_PAGE_ID),
         P_CANCEL_BRANCH           => P_REPORT_PAGE_ID,
         P_CREATE_BUTTON_NAME      => C_CREATE_BUTTON_NAME,
         P_SAVE_BUTTON_NAME        => C_SAVE_BUTTON_NAME,
         P_DELETE_BUTTON_NAME      => C_DELETE_BUTTON_NAME,
         P_CANCEL_BUTTON_NAME      => C_CANCEL_BUTTON_NAME,
         P_INSERT                  => P_FORM_INSERT,
         P_UPDATE                  => P_FORM_UPDATE,
         P_DELETE                  => P_FORM_DELETE );
 
     
     IF NOT PAGE_EXISTS (P_FLOW_ID,P_REPORT_PAGE_ID) THEN
 
         
         
         
         IF P_GROUP_NAME IS NOT NULL THEN
             L_GROUP_ID := WWV_FLOW_UTILITIES.GET_PAGE_GROUP_ID(P_GROUP_NAME => P_GROUP_NAME, P_APPLICATION_ID => P_FLOW_ID);
             
             IF L_GROUP_ID IS NULL THEN
                 L_GROUP_ID := WWV_FLOW_ID.NEXT_VAL;
                 WWV_FLOW_API.CREATE_PAGE_GROUP(P_ID => L_GROUP_ID, P_FLOW_ID => P_FLOW_ID, P_GROUP_NAME => P_GROUP_NAME);
             END IF;
         END IF;
 
         WWV_FLOW_API.CREATE_PAGE(
             P_ID                  => P_REPORT_PAGE_ID,
             P_FLOW_ID             => P_FLOW_ID,
             P_TAB_SET             => NULL,
             P_NAME                => P_REPORT_PAGE_NAME,
             P_PAGE_MODE           => P_REPORT_PAGE_MODE,
             P_GROUP_ID            => L_GROUP_ID,
             P_USER_INTERFACE_ID   => P_USER_INTERFACE_ID,
             P_PAGE_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_PAGE_TEMPLATE, 'PAGE'),
             P_STEP_TITLE          => P_REPORT_PAGE_NAME,
             P_STEP_SUB_TITLE_TYPE => 'TEXT_WITH_SUBSTITUTIONS');
 
         IF P_NAV_LIST_ID IS NOT NULL THEN
             G_NAV_LIST_ITEM_ID := NULL;
             
             CREATE_NAVIGATION_LIST_ITEM (
                 P_FLOW_ID                  => P_FLOW_ID,
                 P_PAGE_ID                  => P_REPORT_PAGE_ID,
                 P_PAGE_NAME                => P_REPORT_PAGE_NAME,
                 P_NAV_LIST_ID              => P_NAV_LIST_ID,
                 P_NAV_LIST_ITEM_ID         => P_NAV_LIST_ITEM_ID,
                 P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_ITEM_NAME,
                 P_NAV_LIST_PARENT_ITEM_ID  => P_NAV_LIST_PARENT_ITEM_ID,
                 P_NAV_LIST_CHILD_ITEM_NAME => P_NAV_LIST_CHILD_ITEM_NAME);
 
             
             CREATE_NAVIGATION_LIST_ITEM (
                 P_FLOW_ID                  => P_FLOW_ID,
                 P_PAGE_ID                  => P_FORM_PAGE_ID,
                 P_PAGE_NAME                => P_REPORT_PAGE_NAME,
                 P_NAV_LIST_ID              => P_NAV_LIST_ID,
                 P_NAV_LIST_ITEM_ID         => NVL(P_NAV_LIST_ITEM_ID,G_NAV_LIST_ITEM_ID),
                 P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_CHILD_ITEM_NAME,
                 P_NAV_LIST_PARENT_ITEM_ID  => CASE WHEN (P_NAV_LIST_PARENT_ITEM_ID IS NOT NULL AND P_NAV_LIST_CHILD_ITEM_NAME IS NULL) THEN P_NAV_LIST_PARENT_ITEM_ID ELSE NULL END,
                 P_NAV_LIST_CHILD_ITEM_NAME => NULL );
        END IF;
 
     END IF;
 
     
     L_SQL := 'select ' ||
              CASE WHEN L_TABLE_PK_COLUMN_NAME = 'PK_ROWID' THEN
                  'a.ROWID as "PK_ROWID",' || WWV_FLOW.LF ||
                  '       a.*'
              ELSE
                  '*'
              END || WWV_FLOW.LF ||
              '  from "' || GET_OWNER(P_FLOW_ID, P_TABLE_OWNER) || '"."' || P_TABLE_NAME || '" ' ||
              CASE WHEN L_TABLE_PK_COLUMN_NAME = 'PK_ROWID' THEN 'a' END ||
              CASE WHEN P_WHERE_CLAUSE IS NOT NULL THEN WWV_FLOW.LF || ' where ' || P_WHERE_CLAUSE END;
 
     
     L_EDIT_LINK := 'f?p=&APP_ID.:' ||
                    P_FORM_PAGE_ID ||
                    ':&APP_SESSION.::&DEBUG.:RP,' || P_FORM_PAGE_ID || ':' ||
                    
                    GET_VALID_ITEM_NAME(P_TABLE_PK_COLUMN_NAME, P_FORM_PAGE_ID) ||
                    CASE WHEN P_TABLE_PK2_COLUMN_NAME IS NOT NULL THEN ',' || GET_VALID_ITEM_NAME(P_TABLE_PK2_COLUMN_NAME, P_FORM_PAGE_ID) END ||
                    ':' ||
                    
                    GET_COLUMN_SUBSTITUTION(L_TABLE_PK_COLUMN_NAME) ||
                    CASE WHEN P_TABLE_PK2_COLUMN_NAME IS NOT NULL THEN ',' || GET_COLUMN_SUBSTITUTION(P_TABLE_PK2_COLUMN_NAME) END;
 
     
     L_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
 
      L_REGION_TEMPLATE_OPTIONS :=  GET_PRESET_TEMPLATE_OPTIONS (
           P_TEMPLATE_ID    => P_FORM_REGION_TEMPLATE,
           P_TEMPLATE_TYPE  => 'REGION'
     );
 
     WWV_FLOW_WIZARD_API.CREATE_JQM_LIST_VIEW_REGION (
         P_ID                      => L_REGION_ID,
         P_FLOW_ID                 => P_FLOW_ID,
         P_PAGE_ID                 => P_REPORT_PAGE_ID,
         P_NAME                    => P_RPT_REGION_NAME,
         P_SEQ                     => 10,
         P_TEMPLATE_ID             => P_RPT_REGION_TEMPLATE,
         
         P_DISPLAY_POINT           => 'BODY',
         P_SQL_STATEMENT           => L_SQL,
         P_PAGE_ITEMS_TO_SUBMIT    => P_RPT_PAGE_ITEMS_TO_SUBMIT,
         P_TEXT_COLUMN             => P_TABLE_PK_COLUMN_NAME,
         P_SUPPLEMENT_INFO_COLUMN  => P_RPT_INFO_COLUMN,
         P_COUNTER_COLUMN          => P_RPT_COUNTER_COLUMN,
         P_LIST_DIVIDER            => P_RPT_LIST_DIVIDER,
         P_LINK_TARGET             => L_EDIT_LINK,
         P_ENABLE_SEARCH           => P_RPT_ENABLE_SEARCH,
         P_IS_INSET                => P_RPT_IS_INSET );
 
     
     IF P_FORM_INSERT = 'Y' THEN
         IF WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE IS NOT NULL THEN
             L_BUTTON_IMAGE := 'template:' || WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE;
             L_BUTTON_TEMPLATE_OPTIONS :=  GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE,'BUTTON');
         END IF;
 
         WWV_FLOW_API.CREATE_PAGE_BUTTON(
             P_FLOW_ID             => P_FLOW_ID,
             P_FLOW_STEP_ID        => P_REPORT_PAGE_ID,
             P_BUTTON_PLUG_ID      => L_REGION_ID,
             P_BUTTON_SEQUENCE     => 20,
             P_BUTTON_NAME         => 'CREATE',
             P_BUTTON_IMAGE        => L_BUTTON_IMAGE,
             P_BUTTON_IMAGE_ALT    => C_CREATE_BUTTON_NAME,
             P_BUTTON_TEMPLATE_OPTIONS=> L_BUTTON_TEMPLATE_OPTIONS,
             P_BUTTON_POSITION     => WWV_FLOW_THEME_MANAGER.GET_BUTTON_POSTION (
                                          P_TEMPLATE_ID => P_RPT_REGION_TEMPLATE,
                                          P_POSITION    => '#CREATE#'),
             P_BUTTON_REDIRECT_URL => 'f?p=&APP_ID.:' || P_FORM_PAGE_ID || ':&APP_SESSION.::&DEBUG.:RP,' || P_FORM_PAGE_ID,
             P_BUTTON_ACTION       => WWV_FLOW_BUTTON.C_ACTION_REDIRECT_PAGE );
     END IF;
 END CREATE_FORM_AND_LIST_VIEW_PAGE;
 
 PROCEDURE CREATE_IG_REGION (
     P_ID                   IN NUMBER DEFAULT NULL,
     P_APPLICATION_ID       IN NUMBER,
     P_PAGE_ID              IN NUMBER,
     P_TITLE                IN VARCHAR2,
     P_DISPLAY_SEQUENCE     IN NUMBER DEFAULT 10,
     P_SQL                  IN VARCHAR2 DEFAULT NULL,
     P_IS_EDITABLE          IN BOOLEAN DEFAULT FALSE,
     P_SAVE_WHEN_BUTTON_ID  IN NUMBER   DEFAULT NULL,
     P_TOOLBAR_BUTTONS      IN VARCHAR2 DEFAULT 'RESET:SAVE',
     P_PK_COLUMN            IN VARCHAR2 DEFAULT NULL,
     P_PK2_COLUMN           IN VARCHAR2 DEFAULT NULL,
     P_FK_COLUMNS           IN VARCHAR2 DEFAULT NULL,
     P_LINK                 IN VARCHAR2 DEFAULT NULL,
     P_AJAX_ITEMS_TO_SUBMIT IN VARCHAR2 DEFAULT NULL )
 IS
     L_PAGE_MODE             VARCHAR2(255) := WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL;
     L_REGION_ID             NUMBER := P_ID;
     L_SQL                   VARCHAR2(32767) := P_SQL;
 
     L_COLUMNS               SYS.DBMS_SQL.DESC_TAB3;
     L_DATA_TYPE             WWV_FLOW_REGION_COLUMNS.DATA_TYPE%TYPE;
     L_ITEM_TYPE             WWV_FLOW_REGION_COLUMNS.ITEM_TYPE%TYPE;
     L_FILTER_DATE_RANGES    WWV_FLOW_REGION_COLUMNS.FILTER_DATE_RANGES%TYPE;
     L_DISPLAY_SEQUENCE      WWV_FLOW_REGION_COLUMNS.DISPLAY_SEQUENCE%TYPE := 0;
     L_HEADING               WWV_FLOW_REGION_COLUMNS.HEADING%TYPE;
     L_HEADING_ALIGNMENT     WWV_FLOW_REGION_COLUMNS.HEADING_ALIGNMENT%TYPE;
     L_VALUE_ALIGNMENT       WWV_FLOW_REGION_COLUMNS.VALUE_ALIGNMENT%TYPE;
     L_IS_REQUIRED           BOOLEAN;
     L_MAX_LENGTH            WWV_FLOW_REGION_COLUMNS.MAX_LENGTH%TYPE;
     L_ENABLE_SORT_GROUP     BOOLEAN;
     L_FILTER_LOV_TYPE       WWV_FLOW_REGION_COLUMNS.FILTER_LOV_TYPE%TYPE;
     L_IS_PRIMARY_KEY        BOOLEAN;
     L_IS_VISIBLE            BOOLEAN;
 
     L_ATTRIBUTE_01          WWV_FLOW_STEP_PROCESSING.ATTRIBUTE_01%TYPE;
     L_ATTRIBUTE_02          WWV_FLOW_STEP_PROCESSING.ATTRIBUTE_02%TYPE;
     L_ATTRIBUTE_03          WWV_FLOW_STEP_PROCESSING.ATTRIBUTE_03%TYPE;
     L_ATTRIBUTE_04          WWV_FLOW_STEP_PROCESSING.ATTRIBUTE_04%TYPE;
     L_ATTRIBUTE_05          WWV_FLOW_STEP_PROCESSING.ATTRIBUTE_05%TYPE;
     L_ATTRIBUTE_06          WWV_FLOW_STEP_PROCESSING.ATTRIBUTE_06%TYPE;
     L_ATTRIBUTE_07          WWV_FLOW_STEP_PROCESSING.ATTRIBUTE_07%TYPE;
     L_ATTRIBUTE_08          WWV_FLOW_STEP_PROCESSING.ATTRIBUTE_08%TYPE;
     L_ATTRIBUTE_09          WWV_FLOW_STEP_PROCESSING.ATTRIBUTE_09%TYPE;
     L_ATTRIBUTE_10          WWV_FLOW_STEP_PROCESSING.ATTRIBUTE_10%TYPE;
     L_ATTRIBUTE_11          WWV_FLOW_STEP_PROCESSING.ATTRIBUTE_11%TYPE;
     L_ATTRIBUTE_12          WWV_FLOW_STEP_PROCESSING.ATTRIBUTE_12%TYPE;
     L_ATTRIBUTE_13          WWV_FLOW_STEP_PROCESSING.ATTRIBUTE_13%TYPE;
     L_ATTRIBUTE_14          WWV_FLOW_STEP_PROCESSING.ATTRIBUTE_14%TYPE;
     L_ATTRIBUTE_15          WWV_FLOW_STEP_PROCESSING.ATTRIBUTE_15%TYPE;
 
     FUNCTION HAS_PLUGIN_STD_ATTRIBUTE (
         P_FEATURE   IN VARCHAR2,
         P_ITEM_TYPE IN VARCHAR2)
         RETURN BOOLEAN
     IS
     BEGIN
         RETURN WWV_FLOW_PLUGIN_DEV.HAS_STANDARD_ATTRIBUTE (
                    P_APPLICATION_ID => P_APPLICATION_ID,
                    P_PLUGIN_TYPE    => WWV_FLOW_PLUGIN.C_PLUGIN_TYPE_ITEM_TYPE,
                    P_PLUGIN_NAME    => P_ITEM_TYPE,
                    P_FEATURE        => P_FEATURE );
     END HAS_PLUGIN_STD_ATTRIBUTE;
 
     PROCEDURE CREATE_COLUMN (
         P_REGION_ID          IN NUMBER,
         P_DISPLAY_SEQUENCE   IN NUMBER,
         P_NAME               IN VARCHAR2,
         P_SOURCE_TYPE        IN VARCHAR2 DEFAULT NULL,   
         P_SOURCE_EXPRESSION  IN VARCHAR2 DEFAULT NULL,
         P_DATA_TYPE          IN VARCHAR2 DEFAULT NULL,
         P_IS_QUERY_ONLY      IN BOOLEAN  DEFAULT NULL,
         P_ITEM_TYPE          IN VARCHAR2 DEFAULT NULL,
         P_HEADING            IN VARCHAR2 DEFAULT NULL,
         P_LABEL              IN VARCHAR2 DEFAULT NULL,
         P_HEADING_ALIGNMENT  IN VARCHAR2 DEFAULT NULL,
         P_VALUE_ALIGNMENT    IN VARCHAR2 DEFAULT NULL,
         P_IS_REQUIRED        IN BOOLEAN  DEFAULT NULL,
         P_MAX_LENGTH         IN NUMBER   DEFAULT NULL,
         P_LINK_TARGET        IN VARCHAR2 DEFAULT NULL,
         P_LINK_TEXT          IN VARCHAR2 DEFAULT NULL,
         P_ENABLE_FILTER      IN BOOLEAN  DEFAULT NULL,
         P_FILTER_OPERATORS   IN VARCHAR2 DEFAULT NULL,
         P_FILTER_IS_REQUIRED IN BOOLEAN  DEFAULT NULL,
         P_FILTER_TEXT_CASE   IN VARCHAR2 DEFAULT NULL,  
         P_FILTER_EXACT_MATCH IN BOOLEAN  DEFAULT NULL,
         P_FILTER_DATE_RANGES IN VARCHAR2 DEFAULT NULL,
         P_FILTER_LOV_TYPE    IN VARCHAR2 DEFAULT NULL,
         P_USE_AS_ROW_HEADER  IN BOOLEAN  DEFAULT NULL,
         P_ENABLE_SORT_GROUP  IN BOOLEAN  DEFAULT NULL,
         P_ENABLE_PIVOT       IN BOOLEAN  DEFAULT NULL,
         P_IS_PRIMARY_KEY     IN BOOLEAN  DEFAULT FALSE,
         P_DUPLICATE_VALUE    IN BOOLEAN  DEFAULT NULL,
         P_INCLUDE_IN_EXPORT  IN BOOLEAN  DEFAULT NULL )
     IS
         L_COLUMN_ATTRIBUTE_01   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_01%TYPE;
         L_COLUMN_ATTRIBUTE_02   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_02%TYPE;
         L_COLUMN_ATTRIBUTE_03   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_03%TYPE;
         L_COLUMN_ATTRIBUTE_04   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_04%TYPE;
         L_COLUMN_ATTRIBUTE_05   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_05%TYPE;
         L_COLUMN_ATTRIBUTE_06   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_06%TYPE;
         L_COLUMN_ATTRIBUTE_07   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_07%TYPE;
         L_COLUMN_ATTRIBUTE_08   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_08%TYPE;
         L_COLUMN_ATTRIBUTE_09   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_09%TYPE;
         L_COLUMN_ATTRIBUTE_10   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_10%TYPE;
         L_COLUMN_ATTRIBUTE_11   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_11%TYPE;
         L_COLUMN_ATTRIBUTE_12   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_12%TYPE;
         L_COLUMN_ATTRIBUTE_13   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_13%TYPE;
         L_COLUMN_ATTRIBUTE_14   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_14%TYPE;
         L_COLUMN_ATTRIBUTE_15   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_15%TYPE;
         L_COLUMN_ATTRIBUTE_16   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_16%TYPE;
         L_COLUMN_ATTRIBUTE_17   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_17%TYPE;
         L_COLUMN_ATTRIBUTE_18   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_18%TYPE;
         L_COLUMN_ATTRIBUTE_19   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_19%TYPE;
         L_COLUMN_ATTRIBUTE_20   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_20%TYPE;
         L_COLUMN_ATTRIBUTE_21   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_21%TYPE;
         L_COLUMN_ATTRIBUTE_22   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_22%TYPE;
         L_COLUMN_ATTRIBUTE_23   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_23%TYPE;
         L_COLUMN_ATTRIBUTE_24   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_24%TYPE;
         L_COLUMN_ATTRIBUTE_25   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_25%TYPE;
     BEGIN
         
         WWV_FLOW_PLUGIN_DEV.SET_DEFAULTS (
             P_APPLICATION_ID  => P_APPLICATION_ID,
             P_PLUGIN_TYPE     => WWV_FLOW_PLUGIN.C_PLUGIN_TYPE_ITEM_TYPE,
             P_PLUGIN_NAME     => P_ITEM_TYPE,
             P_ATTRIBUTE_01    => L_COLUMN_ATTRIBUTE_01,
             P_ATTRIBUTE_02    => L_COLUMN_ATTRIBUTE_02,
             P_ATTRIBUTE_03    => L_COLUMN_ATTRIBUTE_03,
             P_ATTRIBUTE_04    => L_COLUMN_ATTRIBUTE_04,
             P_ATTRIBUTE_05    => L_COLUMN_ATTRIBUTE_05,
             P_ATTRIBUTE_06    => L_COLUMN_ATTRIBUTE_06,
             P_ATTRIBUTE_07    => L_COLUMN_ATTRIBUTE_07,
             P_ATTRIBUTE_08    => L_COLUMN_ATTRIBUTE_08,
             P_ATTRIBUTE_09    => L_COLUMN_ATTRIBUTE_09,
             P_ATTRIBUTE_10    => L_COLUMN_ATTRIBUTE_10,
             P_ATTRIBUTE_11    => L_COLUMN_ATTRIBUTE_11,
             P_ATTRIBUTE_12    => L_COLUMN_ATTRIBUTE_12,
             P_ATTRIBUTE_13    => L_COLUMN_ATTRIBUTE_13,
             P_ATTRIBUTE_14    => L_COLUMN_ATTRIBUTE_14,
             P_ATTRIBUTE_15    => L_COLUMN_ATTRIBUTE_15,
             P_ATTRIBUTE_16    => L_COLUMN_ATTRIBUTE_16,
             P_ATTRIBUTE_17    => L_COLUMN_ATTRIBUTE_17,
             P_ATTRIBUTE_18    => L_COLUMN_ATTRIBUTE_18,
             P_ATTRIBUTE_19    => L_COLUMN_ATTRIBUTE_19,
             P_ATTRIBUTE_20    => L_COLUMN_ATTRIBUTE_20,
             P_ATTRIBUTE_21    => L_COLUMN_ATTRIBUTE_21,
             P_ATTRIBUTE_22    => L_COLUMN_ATTRIBUTE_22,
             P_ATTRIBUTE_23    => L_COLUMN_ATTRIBUTE_23,
             P_ATTRIBUTE_24    => L_COLUMN_ATTRIBUTE_24,
             P_ATTRIBUTE_25    => L_COLUMN_ATTRIBUTE_25 );
 
         WWV_FLOW_API.CREATE_REGION_COLUMN(
             P_FLOW_ID               => P_APPLICATION_ID,
             P_PAGE_ID               => P_PAGE_ID,
             P_REGION_ID             => P_REGION_ID,
             P_NAME                  => P_NAME,
             P_SOURCE_TYPE           => P_SOURCE_TYPE,
             P_SOURCE_EXPRESSION     => P_SOURCE_EXPRESSION,
             P_DATA_TYPE             => P_DATA_TYPE,
             P_IS_QUERY_ONLY         => P_IS_QUERY_ONLY,
             P_ITEM_TYPE             => P_ITEM_TYPE,
             P_HEADING               => P_HEADING,
             P_LABEL                 => P_LABEL,
             P_HEADING_ALIGNMENT     => P_HEADING_ALIGNMENT,
             P_DISPLAY_SEQUENCE      => P_DISPLAY_SEQUENCE,
             P_VALUE_ALIGNMENT       => P_VALUE_ALIGNMENT,
             
             P_ATTRIBUTE_01          => L_COLUMN_ATTRIBUTE_01,
             P_ATTRIBUTE_02          => L_COLUMN_ATTRIBUTE_02,
             P_ATTRIBUTE_03          => L_COLUMN_ATTRIBUTE_03,
             P_ATTRIBUTE_04          => L_COLUMN_ATTRIBUTE_04,
             P_ATTRIBUTE_05          => L_COLUMN_ATTRIBUTE_05,
             P_ATTRIBUTE_06          => L_COLUMN_ATTRIBUTE_06,
             P_ATTRIBUTE_07          => L_COLUMN_ATTRIBUTE_07,
             P_ATTRIBUTE_08          => L_COLUMN_ATTRIBUTE_08,
             P_ATTRIBUTE_09          => L_COLUMN_ATTRIBUTE_09,
             P_ATTRIBUTE_10          => L_COLUMN_ATTRIBUTE_10,
             P_ATTRIBUTE_11          => L_COLUMN_ATTRIBUTE_11,
             P_ATTRIBUTE_12          => L_COLUMN_ATTRIBUTE_12,
             P_ATTRIBUTE_13          => L_COLUMN_ATTRIBUTE_13,
             P_ATTRIBUTE_14          => L_COLUMN_ATTRIBUTE_14,
             P_ATTRIBUTE_15          => L_COLUMN_ATTRIBUTE_15,
             P_ATTRIBUTE_16          => L_COLUMN_ATTRIBUTE_16,
             P_ATTRIBUTE_17          => L_COLUMN_ATTRIBUTE_17,
             P_ATTRIBUTE_18          => L_COLUMN_ATTRIBUTE_18,
             P_ATTRIBUTE_19          => L_COLUMN_ATTRIBUTE_19,
             P_ATTRIBUTE_20          => L_COLUMN_ATTRIBUTE_20,
             P_ATTRIBUTE_21          => L_COLUMN_ATTRIBUTE_21,
             P_ATTRIBUTE_22          => L_COLUMN_ATTRIBUTE_22,
             P_ATTRIBUTE_23          => L_COLUMN_ATTRIBUTE_23,
             P_ATTRIBUTE_24          => L_COLUMN_ATTRIBUTE_24,
             P_ATTRIBUTE_25          => L_COLUMN_ATTRIBUTE_25,
             
             P_IS_REQUIRED           => P_IS_REQUIRED, 
             P_MAX_LENGTH            => P_MAX_LENGTH,
             P_LINK_TARGET           => P_LINK_TARGET,
             P_LINK_TEXT             => P_LINK_TEXT,
             P_ENABLE_FILTER         => P_ENABLE_FILTER,
             P_FILTER_OPERATORS      => P_FILTER_OPERATORS,
             P_FILTER_IS_REQUIRED    => P_FILTER_IS_REQUIRED,
             P_FILTER_TEXT_CASE      => P_FILTER_TEXT_CASE,  
             P_FILTER_EXACT_MATCH    => P_FILTER_EXACT_MATCH,
             P_FILTER_DATE_RANGES    => P_FILTER_DATE_RANGES,
             P_FILTER_LOV_TYPE       => P_FILTER_LOV_TYPE,
             P_USE_AS_ROW_HEADER     => P_USE_AS_ROW_HEADER,
             P_ENABLE_SORT_GROUP     => P_ENABLE_SORT_GROUP,
             P_ENABLE_PIVOT          => P_ENABLE_PIVOT,
             P_IS_PRIMARY_KEY        => P_IS_PRIMARY_KEY,
             P_DUPLICATE_VALUE       => P_DUPLICATE_VALUE,
             P_INCLUDE_IN_EXPORT     => P_INCLUDE_IN_EXPORT );
     END CREATE_COLUMN;
 BEGIN
     
     WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
         P_FLOW_ID           => P_APPLICATION_ID,
         P_USER_INTERFACE_ID => WWV_FLOW_PAGE_DEV.GET_USER_INTERFACE_ID (
                                    P_APPLICATION_ID => P_APPLICATION_ID,
                                    P_PAGE_ID        => P_PAGE_ID ) );
 
     L_PAGE_MODE := WWV_FLOW_PAGE_DEV.GET_PAGE_MODE (
                        P_APPLICATION_ID => P_APPLICATION_ID,
                        P_PAGE_ID        => P_PAGE_ID );
 
     IF L_REGION_ID IS NULL THEN
         L_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
     END IF;
 
     L_SQL := LTRIM( L_SQL );
     L_SQL := WWV_FLOW_UTILITIES.REMOVE_TRAILING_WHITESPACE( L_SQL );
 
     
     WWV_FLOW_API.CREATE_PAGE_PLUG (
         P_ID                         => L_REGION_ID,
         P_FLOW_ID                    => P_APPLICATION_ID,
         P_PAGE_ID                    => P_PAGE_ID,
         P_PLUG_NAME                  => P_TITLE,
         P_PLUG_TEMPLATE              => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_REPORTR_TEMPLATE,
         P_PLUG_DISPLAY_SEQUENCE      => P_DISPLAY_SEQUENCE,
         P_REGION_TEMPLATE_OPTIONS    => '#DEFAULT#',
         P_COMPONENT_TEMPLATE_OPTIONS => '#DEFAULT#',
         P_ESCAPE_ON_HTTP_OUTPUT      => NULL,
         P_PLUG_NEW_GRID              => NULL,
         P_PLUG_NEW_GRID_COLUMN       => NULL,
         P_PLUG_DISPLAY_POINT         => 'BODY',
         P_PLUG_QUERY_HEADINGS_TYPE   => NULL,
         P_PLUG_SOURCE_TYPE           => WWV_FLOW_REGION_NATIVE.C_IG,
         P_PLUG_SOURCE                => L_SQL,
         P_REST_ENABLED               => NULL,
         P_PLUG_QUERY_OPTIONS         => 'DERIVED_REPORT_COLUMNS',
         P_AJAX_ITEMS_TO_SUBMIT       => P_AJAX_ITEMS_TO_SUBMIT );
 
     WWV_FLOW_API.CREATE_INTERACTIVE_GRID(
         P_FLOW_ID                 => P_APPLICATION_ID,
         P_PAGE_ID                 => P_PAGE_ID,
         P_REGION_ID               => L_REGION_ID,
         P_IS_EDITABLE             => P_IS_EDITABLE,
         P_EDIT_OPERATIONS         => ( CASE WHEN P_IS_EDITABLE THEN 'i:u:d' END ),
         P_LOST_UPDATE_CHECK_TYPE  => ( CASE WHEN P_IS_EDITABLE THEN 'VALUES' END ),
         P_ADD_ROW_IF_EMPTY        => ( CASE WHEN P_IS_EDITABLE THEN TRUE END ),
         P_SUBMIT_CHECKED_ROWS     => ( CASE WHEN P_IS_EDITABLE THEN FALSE END ),
         P_MAX_ROW_COUNT           => NULL,
         P_SHOW_NULLS_AS           => '-',
         P_TOOLBAR_BUTTONS         => P_TOOLBAR_BUTTONS,
         P_FIXED_HEADER            => ( CASE WHEN L_PAGE_MODE != WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN 'REGION' ELSE 'PAGE' END ),
         P_FIXED_HEADER_MAX_HEIGHT => ( CASE WHEN L_PAGE_MODE != WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN 300 END ) );
 
     IF P_IS_EDITABLE THEN
         L_DISPLAY_SEQUENCE := L_DISPLAY_SEQUENCE + 10;
         CREATE_COLUMN (
             P_REGION_ID          => L_REGION_ID,
             P_DISPLAY_SEQUENCE   => L_DISPLAY_SEQUENCE,
             P_NAME               => 'APEX$ROW_SELECTOR',
             P_ITEM_TYPE          => WWV_FLOW_NATIVE_ITEM.C_ROW_SELECTOR );
 
         L_DISPLAY_SEQUENCE := L_DISPLAY_SEQUENCE + 10;
         CREATE_COLUMN (
             P_REGION_ID          => L_REGION_ID,
             P_DISPLAY_SEQUENCE   => L_DISPLAY_SEQUENCE,
             P_NAME               => 'APEX$ROW_ACTION',
             P_ITEM_TYPE          => WWV_FLOW_NATIVE_ITEM.C_ROW_ACTION,
             P_LABEL              => WWV_FLOW_LANG.SYSTEM_MESSAGE('APEX.IG.ACTIONS'),
             P_HEADING_ALIGNMENT  => 'CENTER',
             P_VALUE_ALIGNMENT    => 'CENTER' );
     END IF;
 
     IF P_LINK IS NOT NULL THEN
         L_DISPLAY_SEQUENCE := L_DISPLAY_SEQUENCE + 10;
         CREATE_COLUMN (
             P_REGION_ID          => L_REGION_ID,
             P_DISPLAY_SEQUENCE   => L_DISPLAY_SEQUENCE,
             P_NAME               => 'APEX$LINK',
             P_SOURCE_TYPE        => 'NONE',
             P_ITEM_TYPE          => WWV_FLOW_NATIVE_ITEM.C_LINK,
             P_LINK_TARGET        => P_LINK,
             P_LINK_TEXT          => C_EDIT_IMAGE,
             P_HEADING_ALIGNMENT  => 'CENTER',
             P_VALUE_ALIGNMENT    => 'CENTER' );
     END IF;
 
     IF P_PK_COLUMN = 'ROWID' THEN
         L_DISPLAY_SEQUENCE := L_DISPLAY_SEQUENCE + 10;
         CREATE_COLUMN (
             P_REGION_ID          => L_REGION_ID,
             P_DISPLAY_SEQUENCE   => L_DISPLAY_SEQUENCE,
             P_NAME               => 'ROWID',
             P_SOURCE_TYPE        => 'DB_COLUMN',
             P_SOURCE_EXPRESSION  => 'ROWID',
             P_DATA_TYPE          => 'ROWID',
             P_ITEM_TYPE          => WWV_FLOW_NATIVE_ITEM.C_HIDDEN,
             P_USE_AS_ROW_HEADER  => FALSE,
             P_ENABLE_SORT_GROUP  => FALSE,
             P_ENABLE_PIVOT       => FALSE,
             P_IS_PRIMARY_KEY     => TRUE,
             P_INCLUDE_IN_EXPORT  => FALSE );
     END IF;
 
     
     L_COLUMNS := WWV_FLOW_PLUGIN_DEV.GET_COLUMNS_OF_SQL (
                      P_APPLICATION_ID => P_APPLICATION_ID,
                      P_SQL            => L_SQL );
 
     FOR I IN 1 .. L_COLUMNS.COUNT LOOP
         L_FILTER_DATE_RANGES := NULL;
         L_HEADING            := NULL;
         L_HEADING_ALIGNMENT  := NULL;
         L_VALUE_ALIGNMENT    := NULL;
         L_IS_REQUIRED        := NULL;
         L_MAX_LENGTH         := NULL;
         L_ENABLE_SORT_GROUP  := NULL;
         L_FILTER_LOV_TYPE    := NULL;
         L_IS_PRIMARY_KEY     := NULL;
         L_IS_VISIBLE         := TRUE;
         L_DATA_TYPE          := WWV_FLOW_PLUGIN_UTIL.GET_DATA_TYPE(
                                     P_COL_TYPE      => L_COLUMNS( I ).COL_TYPE,
                                     P_COL_TYPE_NAME => L_COLUMNS( I ).COL_TYPE_NAME );
 
         
         
         
         IF NOT ( L_DATA_TYPE = 'ROWID' ) THEN 
             IF ( L_COLUMNS( I ).COL_NAME = P_PK_COLUMN ) OR ( L_COLUMNS( I ).COL_NAME = P_PK2_COLUMN ) THEN
                 L_IS_PRIMARY_KEY := TRUE;
             ELSE
                 L_IS_PRIMARY_KEY := FALSE;
             END IF;
 
             
             
             
     
             
             IF ( L_COLUMNS( I ).COL_NAME = P_PK_COLUMN ) OR ( INSTR(':'||P_FK_COLUMNS||':', ':'||L_COLUMNS( I ).COL_NAME||':', 1) > 0 ) THEN
                 
                 L_ITEM_TYPE  := WWV_FLOW_NATIVE_ITEM.C_HIDDEN;
                 L_IS_VISIBLE := FALSE;
             ELSE
                 L_IS_VISIBLE        := TRUE;
                 L_VALUE_ALIGNMENT   := 'LEFT';
                 L_ENABLE_SORT_GROUP := TRUE;
                 L_FILTER_LOV_TYPE   := 'DISTINCT';
 
                 IF L_DATA_TYPE IN ( 'VARCHAR2', 'CLOB' ) THEN
 
                     IF L_DATA_TYPE = 'VARCHAR2' AND L_COLUMNS( I ).COL_MAX_LEN < 100 THEN
                         L_ITEM_TYPE := WWV_FLOW_NATIVE_ITEM.C_TEXT_FIELD;
                     ELSE
                         L_ITEM_TYPE         := WWV_FLOW_NATIVE_ITEM.C_TEXTAREA;
                         L_ENABLE_SORT_GROUP := FALSE;
                         L_FILTER_LOV_TYPE   := 'NONE';
                     END IF;
                     
                     IF L_COLUMNS( I ).COL_MAX_LEN IS NOT NULL THEN
                         L_MAX_LENGTH := L_COLUMNS( I ).COL_MAX_LEN;
                     END IF;
                     
                 ELSIF L_DATA_TYPE = 'NUMBER' THEN
 
                     L_ITEM_TYPE       := WWV_FLOW_NATIVE_ITEM.C_NUMBER_FIELD;
                     L_VALUE_ALIGNMENT := 'RIGHT';
                     L_FILTER_LOV_TYPE := 'NONE';
 
                 ELSIF L_DATA_TYPE IN ( 'TIMESTAMP_TZ' ) THEN
                     
                     L_ITEM_TYPE          := WWV_FLOW_NATIVE_ITEM.C_TEXT_FIELD;
             
                 ELSIF L_DATA_TYPE IN ( 'DATE', 'TIMESTAMP', 'TIMESTAMP_LTZ' )  THEN
                     
 
                     L_ITEM_TYPE          := WWV_FLOW_NATIVE_ITEM.C_DATE_PICKER;
                     L_VALUE_ALIGNMENT    := 'CENTER';
                     L_FILTER_DATE_RANGES := 'ALL';
 
                 ELSE
                     L_ITEM_TYPE := WWV_FLOW_NATIVE_ITEM.C_TEXT_FIELD;
                 END IF;
             END IF;
 
             IF L_IS_VISIBLE THEN
                 IF HAS_PLUGIN_STD_ATTRIBUTE (
                        P_FEATURE   => 'SESSION_STATE',
                        P_ITEM_TYPE => L_ITEM_TYPE )
                 THEN
                     L_IS_REQUIRED := ( NOT L_COLUMNS( I ).COL_NULL_OK );
                 END IF;
 
                 L_HEADING_ALIGNMENT := L_VALUE_ALIGNMENT;
                 L_HEADING           := INITCAP( REPLACE( L_COLUMNS( I ).COL_NAME, '_', ' ' ));
             END IF;
         
             L_DISPLAY_SEQUENCE := L_DISPLAY_SEQUENCE + 10;
             
             CREATE_COLUMN (
                 P_REGION_ID          => L_REGION_ID,
                 P_DISPLAY_SEQUENCE   => L_DISPLAY_SEQUENCE,
                 P_NAME               => L_COLUMNS( I ).COL_NAME,
                 P_SOURCE_TYPE        => 'DB_COLUMN',
                 P_SOURCE_EXPRESSION  => L_COLUMNS( I ).COL_NAME,
                 P_DATA_TYPE          => L_DATA_TYPE,
                 P_IS_QUERY_ONLY      => FALSE,
                 P_ITEM_TYPE          => L_ITEM_TYPE,
                 P_HEADING            => L_HEADING,
                 P_HEADING_ALIGNMENT  => L_HEADING_ALIGNMENT,
                 P_VALUE_ALIGNMENT    => L_VALUE_ALIGNMENT,
                 P_IS_REQUIRED        => L_IS_REQUIRED,
                 P_MAX_LENGTH         => L_MAX_LENGTH,
                 P_ENABLE_FILTER      => L_IS_VISIBLE,
                 P_FILTER_OPERATORS   => CASE WHEN L_IS_VISIBLE AND L_DATA_TYPE IN ('VARCHAR2', 'CLOB') THEN 'C:S:CASE_INSENSITIVE:REGEXP' END,
                 P_FILTER_IS_REQUIRED => CASE WHEN L_IS_VISIBLE THEN FALSE END,
                 P_FILTER_TEXT_CASE   => CASE WHEN L_IS_VISIBLE AND L_DATA_TYPE = 'VARCHAR2' THEN 'MIXED' END,
                 P_FILTER_EXACT_MATCH => CASE WHEN L_IS_VISIBLE AND L_DATA_TYPE = 'VARCHAR2' THEN TRUE END,
                 P_FILTER_DATE_RANGES => CASE WHEN L_IS_VISIBLE THEN L_FILTER_DATE_RANGES END,
                 P_FILTER_LOV_TYPE    => CASE WHEN L_IS_VISIBLE THEN L_FILTER_LOV_TYPE END,
                 P_USE_AS_ROW_HEADER  => CASE WHEN L_IS_VISIBLE THEN FALSE END,
                 P_ENABLE_SORT_GROUP  => CASE WHEN L_IS_VISIBLE THEN L_ENABLE_SORT_GROUP END,
                 P_ENABLE_PIVOT       => CASE WHEN L_IS_VISIBLE THEN FALSE END,
                 P_IS_PRIMARY_KEY     => L_IS_PRIMARY_KEY,
                 P_DUPLICATE_VALUE    => TRUE,
                 P_INCLUDE_IN_EXPORT  => L_IS_VISIBLE );
         END IF;
     END LOOP;
 
     IF P_IS_EDITABLE THEN
         
         WWV_FLOW_PLUGIN_DEV.SET_DEFAULTS (
             P_APPLICATION_ID  => P_APPLICATION_ID,
             P_PLUGIN_TYPE     => WWV_FLOW_PLUGIN.C_PLUGIN_TYPE_PROCESS_TYPE,
             P_PLUGIN_NAME     => WWV_FLOW_PROCESS_NATIVE.C_IG_DML,
             P_ATTRIBUTE_01    => L_ATTRIBUTE_01,
             P_ATTRIBUTE_02    => L_ATTRIBUTE_02,
             P_ATTRIBUTE_03    => L_ATTRIBUTE_03,
             P_ATTRIBUTE_04    => L_ATTRIBUTE_04,
             P_ATTRIBUTE_05    => L_ATTRIBUTE_05,
             P_ATTRIBUTE_06    => L_ATTRIBUTE_06,
             P_ATTRIBUTE_07    => L_ATTRIBUTE_07,
             P_ATTRIBUTE_08    => L_ATTRIBUTE_08,
             P_ATTRIBUTE_09    => L_ATTRIBUTE_09,
             P_ATTRIBUTE_10    => L_ATTRIBUTE_10,
             P_ATTRIBUTE_11    => L_ATTRIBUTE_11,
             P_ATTRIBUTE_12    => L_ATTRIBUTE_12,
             P_ATTRIBUTE_13    => L_ATTRIBUTE_13,
             P_ATTRIBUTE_14    => L_ATTRIBUTE_14,
             P_ATTRIBUTE_15    => L_ATTRIBUTE_15 );
 
         WWV_FLOW_API.CREATE_PAGE_PROCESS (
             P_FLOW_ID                => P_APPLICATION_ID,
             P_FLOW_STEP_ID           => P_PAGE_ID,
             P_PROCESS_SEQUENCE       => 10,
             P_PROCESS_POINT          => 'AFTER_SUBMIT',
             P_REGION_ID              => L_REGION_ID,
             P_PROCESS_TYPE           => WWV_FLOW_PROCESS_NATIVE.C_IG_DML,
             P_PROCESS_NAME           => WWV_FLOW_LANG.SYSTEM_MESSAGE('WIZARD.IG.DML_PROCESS_NAME'),
             P_ATTRIBUTE_01           => L_ATTRIBUTE_01,
             P_ATTRIBUTE_02           => L_ATTRIBUTE_02,
             P_ATTRIBUTE_03           => L_ATTRIBUTE_03,
             P_ATTRIBUTE_04           => L_ATTRIBUTE_04,
             P_ATTRIBUTE_05           => L_ATTRIBUTE_05,
             P_ATTRIBUTE_06           => L_ATTRIBUTE_06,
             P_ATTRIBUTE_07           => L_ATTRIBUTE_07,
             P_ATTRIBUTE_08           => L_ATTRIBUTE_08,
             P_ATTRIBUTE_09           => L_ATTRIBUTE_09,
             P_ATTRIBUTE_10           => L_ATTRIBUTE_10,
             P_ATTRIBUTE_11           => L_ATTRIBUTE_11,
             P_ATTRIBUTE_12           => L_ATTRIBUTE_12,
             P_ATTRIBUTE_13           => L_ATTRIBUTE_13,
             P_ATTRIBUTE_14           => L_ATTRIBUTE_14,
             P_ATTRIBUTE_15           => L_ATTRIBUTE_15,
             P_ERROR_DISPLAY_LOCATION => WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION,
             P_PROCESS_WHEN_BUTTON_ID => P_SAVE_WHEN_BUTTON_ID );
     END IF;
 END CREATE_IG_REGION;
 
 PROCEDURE CREATE_IG_PAGE (
     P_APPLICATION_ID            IN NUMBER,
     P_PAGE_ID                   IN NUMBER,
     P_PAGE_NAME                 IN VARCHAR2 DEFAULT NULL,
     P_PAGE_MODE                 IN VARCHAR2,
     P_USER_INTERFACE_ID         IN NUMBER,
     P_TAB_SET                   IN VARCHAR2 DEFAULT NULL,
     P_TAB_NAME                  IN VARCHAR2 DEFAULT NULL,
     P_TAB_TEXT                  IN VARCHAR2 DEFAULT NULL,
     
     P_NAV_LIST_ID               IN NUMBER   DEFAULT NULL,
     P_NAV_LIST_ITEM_ID          IN NUMBER   DEFAULT NULL,
     P_NAV_LIST_ITEM_NAME        IN VARCHAR2 DEFAULT NULL,
     P_NAV_LIST_PARENT_ITEM_ID   IN NUMBER   DEFAULT NULL,
     P_NAV_LIST_CHILD_ITEM_NAME  IN VARCHAR2 DEFAULT NULL,
     
     P_BREADCRUMB_ID             IN NUMBER   DEFAULT NULL,
     P_BREADCRUMB_NAME           IN VARCHAR2 DEFAULT NULL,
     P_PARENT_BC_ID              IN  NUMBER  DEFAULT NULL,
     
     P_SQL                       IN VARCHAR2,
     P_IS_EDITABLE               IN BOOLEAN  DEFAULT FALSE,
     P_PK_COLUMN                 IN VARCHAR2 DEFAULT NULL,
     P_PK2_COLUMN                IN VARCHAR2 DEFAULT NULL,
     P_LINK                      IN VARCHAR2 DEFAULT NULL )
 IS
 BEGIN
     
     
     
     WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
         P_FLOW_ID           => P_APPLICATION_ID,
         P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
     
     
     
     IF NOT PAGE_EXISTS (P_APPLICATION_ID,P_PAGE_ID) THEN
         WWV_FLOW_API.CREATE_PAGE(
             P_ID                  => P_PAGE_ID,
             P_FLOW_ID             => P_APPLICATION_ID,
             P_TAB_SET             => REPLACE(P_TAB_SET,'%null%',NULL),
             P_NAME                => P_PAGE_NAME,
             P_PAGE_MODE           => P_PAGE_MODE,
             P_USER_INTERFACE_ID   => P_USER_INTERFACE_ID,
             P_STEP_TITLE          => P_PAGE_NAME,
             P_STEP_SUB_TITLE      => P_PAGE_NAME,
             P_STEP_SUB_TITLE_TYPE => 'TEXT_WITH_SUBSTITUTIONS',
             P_WELCOME_TEXT        => '',
             P_BOX_WELCOME_TEXT    => '',
             P_BOX_FOOTER_TEXT     => '',
             P_FOOTER_TEXT         => '',
             P_STEP_TEMPLATE       => '',
             P_PAGE_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_PAGE_TEMPLATE, 'PAGE'),
             P_BOX_IMAGE           => '',
             P_REQUIRED_ROLE       => '',
             P_PAGE_COMMENT       => NULL );
 
         IF P_NAV_LIST_ID IS NOT NULL THEN
             
             CREATE_NAVIGATION_LIST_ITEM (
                 P_FLOW_ID                  => P_APPLICATION_ID,
                 P_PAGE_ID                  => P_PAGE_ID,
                 P_PAGE_NAME                => P_PAGE_NAME,
                 P_NAV_LIST_ID              => P_NAV_LIST_ID,
                 P_NAV_LIST_ITEM_ID         => P_NAV_LIST_ITEM_ID,
                 P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_ITEM_NAME,
                 P_NAV_LIST_PARENT_ITEM_ID  => P_NAV_LIST_PARENT_ITEM_ID,
                 P_NAV_LIST_CHILD_ITEM_NAME => P_NAV_LIST_CHILD_ITEM_NAME );
         ELSE
             
             IF REPLACE(P_TAB_SET,'%null%',NULL) IS NOT NULL THEN
                 CREATE_TAB (
                     P_FLOW_ID  => P_APPLICATION_ID,
                     P_PAGE_ID  => P_PAGE_ID,
                     P_TAB_SET  => P_TAB_SET,
                     P_TAB_NAME => P_TAB_NAME,
                     P_TAB_TEXT => P_TAB_TEXT );
             END IF;
         END IF;
     END IF;
 
     
     WWV_FLOW_WIZARD_API.CREATE_BREADCRUMB_REGION (
         P_APPLICATION_ID             => P_APPLICATION_ID,
         P_PAGE_ID                    => P_PAGE_ID,
         P_SEQ                        => 10,
         P_BREADCRUMB_ID              => P_BREADCRUMB_ID,
         P_BREADCRUMB_ENTRY_NAME      => P_BREADCRUMB_NAME,
         P_PARENT_BREADCRUMB_ENTRY_ID => P_PARENT_BC_ID );
 
     
     CREATE_IG_REGION (
         P_APPLICATION_ID    => P_APPLICATION_ID,
         P_PAGE_ID           => P_PAGE_ID,
         P_TITLE             => P_PAGE_NAME,
         P_DISPLAY_SEQUENCE  => 20,
         P_SQL               => P_SQL,
         P_IS_EDITABLE       => P_IS_EDITABLE,
         P_PK_COLUMN         => P_PK_COLUMN,
         P_PK2_COLUMN        => P_PK2_COLUMN,
         P_LINK              => P_LINK );
 END CREATE_IG_PAGE;
 
 PROCEDURE CREATE_FORM_AND_IG_PAGE (
     P_APPLICATION_ID            IN NUMBER,
     P_USER_INTERFACE_ID         IN NUMBER,
     P_GROUP_NAME               IN VARCHAR2 DEFAULT NULL,
     
     P_TAB_SET                   IN VARCHAR2 DEFAULT NULL,
     P_TAB_NAME                  IN VARCHAR2 DEFAULT NULL,
     P_TAB_TEXT                  IN VARCHAR2 DEFAULT NULL,
     
     P_NAV_LIST_ID               IN NUMBER   DEFAULT NULL,
     P_NAV_LIST_ITEM_ID          IN NUMBER   DEFAULT NULL,
     P_NAV_LIST_ITEM_NAME        IN VARCHAR2 DEFAULT NULL,
     P_NAV_LIST_PARENT_ITEM_ID   IN NUMBER   DEFAULT NULL,
     P_NAV_LIST_CHILD_ITEM_NAME  IN VARCHAR2 DEFAULT NULL,
     
     P_BREADCRUMB_ID             IN NUMBER   DEFAULT NULL,
     P_PARENT_BC_ID              IN NUMBER   DEFAULT NULL,
     
     P_OWNER                     IN VARCHAR2 DEFAULT NULL,
     P_TABLE_NAME                IN VARCHAR2 DEFAULT NULL,
     P_PK_COL                    IN VARCHAR2 DEFAULT NULL,
     P_TABLE_PK_SRC_TYPE         IN VARCHAR2 DEFAULT NULL,
     P_TABLE_PK_SRC              IN VARCHAR2 DEFAULT NULL,
     P_PK_COL2                   IN VARCHAR2 DEFAULT NULL,
     P_TABLE_PK2_SRC_TYPE        IN VARCHAR2 DEFAULT NULL,
     P_TABLE_PK2_SRC             IN VARCHAR2 DEFAULT NULL,
     P_TABLE_RV_COLUMN_NAME      IN VARCHAR2 DEFAULT NULL,
     
     P_REPORT_PAGE_ID            IN NUMBER   DEFAULT NULL,
     P_REPORT_PAGE_NAME          IN VARCHAR2 DEFAULT NULL,
     P_REPORT_BREADCRUMB_NAME    IN VARCHAR2 DEFAULT NULL,
     P_REPORT_COLUMNS            IN VARCHAR2 DEFAULT NULL,
     
     P_FORM_PAGE_ID              IN NUMBER   DEFAULT NULL,
     P_FORM_PAGE_NAME            IN VARCHAR2 DEFAULT NULL,
     P_FORM_PAGE_MODE            IN VARCHAR2 DEFAULT NULL,
     P_FORM_BREADCRUMB_NAME      IN VARCHAR2 DEFAULT NULL,
     P_FORM_COLUMNS              IN VARCHAR2 DEFAULT NULL )
 IS
     L_TAB_NAME                  VARCHAR2(255) := P_TAB_NAME;
     L_TAB_TEXT                  VARCHAR2(255) := P_TAB_TEXT;
     L_EDIT_LINK                 VARCHAR2(4000);
 
     L_REPORT_BC_ENTRY_ID        NUMBER;
     L_IG_REGION_ID              NUMBER;
     C_DIALOG_CLOSED_EVENT_TYPE  CONSTANT VARCHAR2(20) := 'apexafterclosedialog';
     L_BUTTON_IMAGE              VARCHAR2(4000);
     L_BUTTON_TEMPLATE_OPTIONS   VARCHAR2(255);
     L_EDIT_REPORT_DA_ID         NUMBER;
 BEGIN
     
     
 
     
     L_EDIT_LINK := 'f?p=&APP_ID.:' ||
                    P_FORM_PAGE_ID ||
                    ':&APP_SESSION.::&DEBUG.:RP,' || P_FORM_PAGE_ID || ':' ||
                    
                    GET_VALID_ITEM_NAME( P_COLUMN_NAME => P_PK_COL, P_PAGE_ID => P_FORM_PAGE_ID ) ||
                    CASE WHEN P_PK_COL2 IS NOT NULL THEN ',' || GET_VALID_ITEM_NAME( P_COLUMN_NAME => P_PK_COL2, P_PAGE_ID => P_FORM_PAGE_ID ) END ||
                    ':' ||
                    
                    GET_ITEM_SUBSTITUTION_VALUE( P_PK_COL ) ||
                    CASE WHEN P_PK_COL2 IS NOT NULL THEN ',' || GET_ITEM_SUBSTITUTION_VALUE( P_PK_COL2 ) END;
 
     CREATE_IG_PAGE (
         P_APPLICATION_ID            => P_APPLICATION_ID,
         P_PAGE_ID                   => P_REPORT_PAGE_ID,
         P_PAGE_NAME                 => P_REPORT_PAGE_NAME,
         P_PAGE_MODE                 => 'NORMAL',
         P_USER_INTERFACE_ID         => P_USER_INTERFACE_ID,
         P_TAB_SET                   => P_TAB_SET,
         P_TAB_NAME                  => L_TAB_NAME,
         P_TAB_TEXT                  => L_TAB_TEXT,
         
         P_NAV_LIST_ID               => P_NAV_LIST_ID,
         P_NAV_LIST_ITEM_ID          => P_NAV_LIST_ITEM_ID,
         P_NAV_LIST_ITEM_NAME        => P_NAV_LIST_ITEM_NAME,
         P_NAV_LIST_PARENT_ITEM_ID   => P_NAV_LIST_PARENT_ITEM_ID,
         P_NAV_LIST_CHILD_ITEM_NAME  => P_NAV_LIST_CHILD_ITEM_NAME,
         
         P_SQL                       => WWV_FLOW_PLUGIN_DEV.BUILD_SQL_STATEMENT (
                                        P_APPLICATION_ID => P_APPLICATION_ID,
                                        P_TABLE_OWNER    => P_OWNER,
                                        P_TABLE_NAME     => P_TABLE_NAME,
                                        P_COLUMNS        => P_REPORT_COLUMNS ),
         P_IS_EDITABLE               => FALSE,
         P_PK_COLUMN                 => P_PK_COL,
         P_PK2_COLUMN                => (CASE WHEN P_PK_COL != 'ROWID' THEN P_PK_COL2 END),
         P_LINK                      => L_EDIT_LINK );
 
     L_REPORT_BC_ENTRY_ID := WWV_FLOW_ID.NEXT_VAL;
     WWV_FLOW_WIZARD_API.CREATE_BREADCRUMB_REGION (
         P_APPLICATION_ID             => P_APPLICATION_ID,
         P_PAGE_ID                    => P_REPORT_PAGE_ID,
         P_SEQ                        => 10,
         P_BREADCRUMB_ID              => P_BREADCRUMB_ID,
         P_BREADCRUMB_ENTRY_ID        => L_REPORT_BC_ENTRY_ID,
         P_BREADCRUMB_ENTRY_NAME      => P_REPORT_BREADCRUMB_NAME,
         P_PARENT_BREADCRUMB_ENTRY_ID => P_PARENT_BC_ID );
 
     FOR L_IG IN (SELECT ID
                         FROM WWV_FLOW_PAGE_PLUGS
                         WHERE FLOW_ID = P_APPLICATION_ID
                         AND PAGE_ID = P_REPORT_PAGE_ID
                         AND PLUG_SOURCE_TYPE = WWV_FLOW_REGION_NATIVE.C_IG )
     LOOP
         L_IG_REGION_ID := L_IG.ID;
     END LOOP;
 
     IF L_IG_REGION_ID IS NOT NULL THEN
         IF WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE IS NOT NULL THEN
             L_BUTTON_IMAGE := 'template:'||WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE;
             L_BUTTON_TEMPLATE_OPTIONS :=  GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE,'BUTTON');
         END IF;
     
         WWV_FLOW_API.CREATE_PAGE_BUTTON(
             P_FLOW_ID               => P_APPLICATION_ID,
             P_FLOW_STEP_ID          => P_REPORT_PAGE_ID,
             P_BUTTON_PLUG_ID        => L_IG_REGION_ID,
             P_BUTTON_SEQUENCE       => 10,
             P_BUTTON_NAME           => 'CREATE',
             P_BUTTON_IMAGE          => L_BUTTON_IMAGE,
             P_BUTTON_IMAGE_ALT      => WWV_FLOW_LANG.SYSTEM_MESSAGE('LAYOUT.T_CREATE_BUTTON'),
             P_BUTTON_TEMPLATE_OPTIONS=> L_BUTTON_TEMPLATE_OPTIONS,
             P_BUTTON_POSITION       => WWV_FLOW_THEME_MANAGER.GET_BUTTON_POSTION(
                                        P_TEMPLATE_ID =>  WWV_FLOW_THEME_GLOBALS.G_DEFAULT_REGION_TEMPLATE,
                                        P_POSITION    => '#EDIT#'),
             P_BUTTON_IS_HOT         => 'Y',
             P_BUTTON_REDIRECT_URL   => 'f?p=&APP_ID.:'||P_FORM_PAGE_ID||':&SESSION.::&DEBUG.:'||P_FORM_PAGE_ID,
             P_BUTTON_ACTION         => WWV_FLOW_BUTTON.C_ACTION_REDIRECT_PAGE );
 
         
         IF ( L_EDIT_LINK IS NOT NULL ) AND ( P_FORM_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL ) THEN
             L_EDIT_REPORT_DA_ID := WWV_FLOW_ID.NEXT_VAL;
             WWV_FLOW_API.CREATE_PAGE_DA_EVENT(
                 P_ID                      => L_EDIT_REPORT_DA_ID,
                 P_FLOW_ID                 => P_APPLICATION_ID,
                 P_PAGE_ID                 => P_REPORT_PAGE_ID,
                 P_NAME                    => WWV_FLOW_LANG.SYSTEM_MESSAGE('EVENT.FRAMEWORK.APEXAFTERCLOSEDIALOG'),
                 P_EVENT_SEQUENCE          => 10,
                 P_TRIGGERING_ELEMENT_TYPE => 'REGION',
                 P_TRIGGERING_REGION_ID    => L_IG_REGION_ID,
                 P_BIND_TYPE               => 'bind',
                 P_BIND_EVENT_TYPE         => C_DIALOG_CLOSED_EVENT_TYPE);
     
             WWV_FLOW_API.CREATE_PAGE_DA_ACTION(
                 P_ID                      => NULL,
                 P_FLOW_ID                 => P_APPLICATION_ID,
                 P_PAGE_ID                 => P_REPORT_PAGE_ID,
                 P_EVENT_ID                => L_EDIT_REPORT_DA_ID,
                 P_EVENT_RESULT            => 'TRUE',
                 P_ACTION_SEQUENCE         => 10,
                 P_EXECUTE_ON_PAGE_INIT    => 'N',
                 P_ACTION                  => 'NATIVE_REFRESH',
                 P_AFFECTED_ELEMENTS_TYPE  => 'REGION',
                 P_AFFECTED_REGION_ID      => L_IG_REGION_ID,
                 P_STOP_EXECUTION_ON_ERROR => 'Y');
         END IF;
     END IF;
     
     
     
     
     
     IF P_TAB_TEXT IS NOT NULL THEN
       L_TAB_NAME := P_TAB_TEXT;
       L_TAB_TEXT := NULL;
     END IF;
 
     
     
     
     CREATE_FORM_ON_TABLE (
         P_FLOW_ID                  => P_APPLICATION_ID,
         P_PAGE_ID                  => P_FORM_PAGE_ID,
         P_PAGE_NAME                => P_FORM_PAGE_NAME,
         P_PAGE_MODE                => P_FORM_PAGE_MODE,
         P_USER_INTERFACE_ID        => P_USER_INTERFACE_ID,
         
         P_TAB_SET                  => P_TAB_SET,
         P_TAB_NAME                 => L_TAB_NAME,
         P_TAB_TEXT                 => L_TAB_TEXT,
         
         P_NAV_LIST_ID              => P_NAV_LIST_ID,
         P_NAV_LIST_ITEM_ID         => P_NAV_LIST_ITEM_ID,
         P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_CHILD_ITEM_NAME,
         P_NAV_LIST_PARENT_ITEM_ID  => CASE WHEN (P_NAV_LIST_PARENT_ITEM_ID IS NOT NULL AND P_NAV_LIST_CHILD_ITEM_NAME IS NULL) THEN P_NAV_LIST_PARENT_ITEM_ID ELSE NULL END,
         P_NAV_LIST_CHILD_ITEM_NAME => NULL,
         
         P_REGION_TITLE             => P_FORM_PAGE_NAME,
         P_REGION_TEMPLATE          => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_FORM_TEMPLATE,
         P_TABLE_OWNER              => P_OWNER,
         P_TABLE_NAME               => P_TABLE_NAME,
         P_TABLE_PK_COLUMN_NAME     => P_PK_COL,
         P_TABLE_PK_SRC_TYPE        => P_TABLE_PK_SRC_TYPE,
         P_TABLE_PK_SRC             => P_TABLE_PK_SRC,
         P_TABLE_PK2_COLUMN_NAME    => P_PK_COL2,
         P_TABLE_PK2_SRC_TYPE       => P_TABLE_PK2_SRC_TYPE,
         P_TABLE_PK2_SRC            => P_TABLE_PK2_SRC,
         P_TABLE_RV_COLUMN_NAME     => P_TABLE_RV_COLUMN_NAME,
         P_DISPLAY_COLUMN_LIST      => P_FORM_COLUMNS,
         P_CANCEL_BRANCH            => P_REPORT_PAGE_ID,
         P_CREATE_BUTTON_NAME       => WWV_FLOW_LANG.SYSTEM_MESSAGE('LAYOUT.T_CREATE_BUTTON'),
         P_SAVE_BUTTON_NAME         => WWV_FLOW_LANG.SYSTEM_MESSAGE('SAVE'),
         P_DELETE_BUTTON_NAME       => WWV_FLOW_LANG.SYSTEM_MESSAGE('F4350.DELETE'),
         P_CANCEL_BUTTON_NAME       => WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_SPELING.BUTTON_CANCEL') );
     
     IF P_FORM_PAGE_MODE = WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN
         
         WWV_FLOW_WIZARD_API.CREATE_BREADCRUMB_REGION (
             P_APPLICATION_ID             => P_APPLICATION_ID,
             P_PAGE_ID                    => P_FORM_PAGE_ID,
             P_SEQ                        => 10,
             P_BREADCRUMB_ID              => P_BREADCRUMB_ID,
             P_BREADCRUMB_ENTRY_NAME      => P_FORM_BREADCRUMB_NAME,
             P_PARENT_BREADCRUMB_ENTRY_ID => L_REPORT_BC_ENTRY_ID );
     END IF;
 
     
     FOR C1 IN (SELECT ID
                FROM WWV_FLOW_STEP_BUTTONS
                WHERE FLOW_ID = P_APPLICATION_ID
                AND FLOW_STEP_ID = P_FORM_PAGE_ID
                AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                AND BUTTON_NAME = 'SAVE')
     LOOP
         WWV_FLOW_API.CREATE_PAGE_BRANCH (
                P_FLOW_ID               => P_APPLICATION_ID,
                P_FLOW_STEP_ID          => P_FORM_PAGE_ID,
                P_BRANCH_ACTION         => 'f?p=&APP_ID.:'||P_REPORT_PAGE_ID||':&SESSION.&success_msg=#SUCCESS_MSG#',
                P_BRANCH_POINT          => 'AFTER_PROCESSING',
                P_BRANCH_TYPE           => 'REDIRECT_URL',
                P_BRANCH_SEQUENCE       => '1',
                P_BRANCH_WHEN_BUTTON_ID => NULL,
                P_BRANCH_CONDITION_TYPE => 'REQUEST_IN_CONDITION',
                P_BRANCH_CONDITION      => 'SAVE,DELETE,CREATE',
                P_BRANCH_CONDITION_TEXT => NULL,
                P_REQUIRED_PATCH        => NULL,
                P_BRANCH_COMMENT        => NULL);
     END LOOP;
 END CREATE_FORM_AND_IG_PAGE;
 
 
 
 
 PROCEDURE CREATE_QUERY_AND_UPDATE_PAGE (
    P_FLOW_ID                  IN NUMBER   DEFAULT NULL,
    P_FORM_PAGE_ID             IN NUMBER   DEFAULT NULL,
    P_REPORT_PAGE_ID           IN VARCHAR2 DEFAULT NULL,
    P_FORM_PAGE_NAME           IN VARCHAR2 DEFAULT 'form',
    P_REPORT_PAGE_NAME         IN VARCHAR2 DEFAULT 'report',
    P_GROUP_NAME               IN VARCHAR2 DEFAULT NULL,
    P_FORM_PAGE_MODE           IN VARCHAR2 DEFAULT NULL,
    P_REPORT_PAGE_MODE         IN VARCHAR2 DEFAULT NULL,
    P_USER_INTERFACE_ID        IN NUMBER,
    P_USE_UI_DEFAULT           IN VARCHAR2 DEFAULT 'Y',
    
    P_TAB_SET                  IN VARCHAR2 DEFAULT NULL,
    P_TAB_NAME                 IN VARCHAR2 DEFAULT NULL, 
    P_TAB_TEXT                 IN VARCHAR2 DEFAULT NULL,
    
    P_NAV_LIST_ID              IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_ITEM_ID         IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_ITEM_NAME       IN VARCHAR2 DEFAULT NULL,
    P_NAV_LIST_PARENT_ITEM_ID  IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_CHILD_ITEM_NAME IN VARCHAR2 DEFAULT NULL,
    
    P_REPORT_TYPE              IN VARCHAR2 DEFAULT NULL,
    
    P_TABLE_OWNER              IN VARCHAR2 DEFAULT NULL,
    P_TABLE_NAME               IN VARCHAR2 DEFAULT NULL,
    P_TABLE_PK_COLUMN_NAME     IN VARCHAR2 DEFAULT NULL,
    P_TABLE_PK_SRC_TYPE        IN VARCHAR2 DEFAULT NULL,
    P_TABLE_PK_SRC             IN VARCHAR2 DEFAULT NULL,
    P_TABLE_PK2_COLUMN_NAME    IN VARCHAR2 DEFAULT NULL,
    P_TABLE_PK2_SRC_TYPE       IN VARCHAR2 DEFAULT NULL,
    P_TABLE_PK2_SRC            IN VARCHAR2 DEFAULT NULL,
    P_TABLE_RV_COLUMN_NAME     IN VARCHAR2 DEFAULT NULL,
    
    P_DISPLAY_COLUMN_LIST      IN VARCHAR2 DEFAULT NULL,
    P_REPORT_SELECT_LIST       IN VARCHAR2 DEFAULT NULL,
    
    P_RPT_REGION_TEMPLATE      IN NUMBER DEFAULT NULL,
    P_RPT_TEMPLATE             IN NUMBER DEFAULT NULL,
    P_RPT_REGION_NAME          IN VARCHAR2 DEFAULT NULL,
    P_FORM_REGION_TEMPLATE     IN NUMBER DEFAULT NULL,
    P_FORM_REGION_NAME         IN VARCHAR2 DEFAULT NULL,
    
    P_WHERE_CLAUSE             IN VARCHAR2 DEFAULT NULL,
    P_PAGINATION_SIZE          IN VARCHAR2 DEFAULT '10',
    P_EDIT_LINK                IN VARCHAR2 DEFAULT 'Edit',
    
    P_FORM_INSERT              IN VARCHAR2 DEFAULT 'Y',
    P_FORM_UPDATE              IN VARCHAR2 DEFAULT 'Y',
    P_FORM_DELETE              IN VARCHAR2 DEFAULT 'Y'
    )
 IS
 BEGIN
     IF P_REPORT_TYPE = 'IG' THEN
         CREATE_FORM_AND_IG_PAGE (
             P_APPLICATION_ID            => P_FLOW_ID,
             P_USER_INTERFACE_ID         => P_USER_INTERFACE_ID,
             
             P_TAB_SET                   => P_TAB_SET,
             P_TAB_NAME                  => P_TAB_NAME,
             P_TAB_TEXT                  => P_TAB_TEXT,
             
             P_NAV_LIST_ID               => P_NAV_LIST_ID,
             P_NAV_LIST_ITEM_ID          => P_NAV_LIST_ITEM_ID,
             P_NAV_LIST_ITEM_NAME        => P_NAV_LIST_ITEM_NAME,
             P_NAV_LIST_PARENT_ITEM_ID   => P_NAV_LIST_PARENT_ITEM_ID,
             P_NAV_LIST_CHILD_ITEM_NAME  => P_NAV_LIST_CHILD_ITEM_NAME,
             
             P_OWNER                     => P_TABLE_OWNER,
             P_TABLE_NAME                => P_TABLE_NAME,
             P_PK_COL                    => P_TABLE_PK_COLUMN_NAME,
             P_TABLE_PK_SRC_TYPE         => P_TABLE_PK_SRC_TYPE,
             P_TABLE_PK_SRC              => P_TABLE_PK_SRC,
             P_PK_COL2                   => P_TABLE_PK2_COLUMN_NAME,
             P_TABLE_PK2_SRC_TYPE        => P_TABLE_PK2_SRC_TYPE,
             P_TABLE_PK2_SRC             => P_TABLE_PK2_SRC,
             P_TABLE_RV_COLUMN_NAME      => P_TABLE_RV_COLUMN_NAME,
             
             P_REPORT_PAGE_ID            => P_REPORT_PAGE_ID,
             P_REPORT_PAGE_NAME          => P_REPORT_PAGE_NAME,
             P_REPORT_COLUMNS            => P_REPORT_SELECT_LIST,
             
             P_FORM_PAGE_ID              => P_FORM_PAGE_ID,
             P_FORM_PAGE_NAME            => P_FORM_PAGE_NAME,
             P_FORM_PAGE_MODE            => P_FORM_PAGE_MODE,
             P_FORM_COLUMNS              => P_DISPLAY_COLUMN_LIST );
     ELSIF P_REPORT_TYPE = 'INTERACTIVE' THEN
         CREATE_FORM_AND_IR_PAGE (
             P_FLOW_ID                  => P_FLOW_ID,
             P_FORM_PAGE_ID             => P_FORM_PAGE_ID,
             P_REPORT_PAGE_ID           => P_REPORT_PAGE_ID,
             P_FORM_PAGE_NAME           => P_FORM_PAGE_NAME,
             P_REPORT_PAGE_NAME         => P_REPORT_PAGE_NAME,
             P_GROUP_NAME               => P_GROUP_NAME,
             P_FORM_PAGE_MODE           => P_FORM_PAGE_MODE,
             P_REPORT_PAGE_MODE         => P_REPORT_PAGE_MODE,
             P_USER_INTERFACE_ID        => P_USER_INTERFACE_ID,
             P_USE_UI_DEFAULT           => P_USE_UI_DEFAULT,
             
             P_TAB_SET                  => P_TAB_SET,
             P_TAB_NAME                 => P_TAB_NAME, 
             P_TAB_TEXT                 => P_TAB_TEXT,
             
             P_NAV_LIST_ID              => P_NAV_LIST_ID,
             P_NAV_LIST_ITEM_ID         => P_NAV_LIST_ITEM_ID,
             P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_ITEM_NAME,
             P_NAV_LIST_PARENT_ITEM_ID  => P_NAV_LIST_PARENT_ITEM_ID,
             P_NAV_LIST_CHILD_ITEM_NAME => P_NAV_LIST_CHILD_ITEM_NAME,
             
             P_TABLE_OWNER              => P_TABLE_OWNER,
             P_TABLE_NAME               => P_TABLE_NAME,
             P_TABLE_PK_COLUMN_NAME     => P_TABLE_PK_COLUMN_NAME,
             P_TABLE_PK_SRC_TYPE        => P_TABLE_PK_SRC_TYPE,
             P_TABLE_PK_SRC             => P_TABLE_PK_SRC,
             P_TABLE_PK2_COLUMN_NAME    => P_TABLE_PK2_COLUMN_NAME,
             P_TABLE_PK2_SRC_TYPE       => P_TABLE_PK2_SRC_TYPE,
             P_TABLE_PK2_SRC            => P_TABLE_PK2_SRC,
             P_TABLE_RV_COLUMN_NAME     => P_TABLE_RV_COLUMN_NAME,
             
             P_DISPLAY_COLUMN_LIST      => P_DISPLAY_COLUMN_LIST,
             P_REPORT_SELECT_LIST       => P_REPORT_SELECT_LIST,
             
             P_RPT_REGION_NAME          => P_RPT_REGION_NAME,
             P_FORM_REGION_TEMPLATE     => P_FORM_REGION_TEMPLATE,
             P_FORM_REGION_NAME         => P_FORM_REGION_NAME,
             
             P_WHERE_CLAUSE             => P_WHERE_CLAUSE,
             P_EDIT_LINK                => P_EDIT_LINK,
             
             P_FORM_INSERT              => P_FORM_INSERT,
             P_FORM_UPDATE              => P_FORM_UPDATE,
             P_FORM_DELETE              => P_FORM_DELETE
             );
     ELSE
         CREATE_FORM_AND_CR_PAGE (
             P_FLOW_ID                  => P_FLOW_ID,
             P_FORM_PAGE_ID             => P_FORM_PAGE_ID,
             P_REPORT_PAGE_ID           => P_REPORT_PAGE_ID,
             P_FORM_PAGE_NAME           => P_FORM_PAGE_NAME,
             P_REPORT_PAGE_NAME         => P_REPORT_PAGE_NAME,
             P_GROUP_NAME               => P_GROUP_NAME,
             P_FORM_PAGE_MODE           => P_FORM_PAGE_MODE,
             P_REPORT_PAGE_MODE         => P_REPORT_PAGE_MODE,
             P_USER_INTERFACE_ID        => P_USER_INTERFACE_ID,
             P_USE_UI_DEFAULT           => P_USE_UI_DEFAULT,
             
             P_TAB_SET                  => P_TAB_SET,
             P_TAB_NAME                 => P_TAB_NAME, 
             P_TAB_TEXT                 => P_TAB_TEXT,
             
             P_NAV_LIST_ID              => P_NAV_LIST_ID,
             P_NAV_LIST_ITEM_ID         => P_NAV_LIST_ITEM_ID,
             P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_ITEM_NAME,
             P_NAV_LIST_PARENT_ITEM_ID  => P_NAV_LIST_PARENT_ITEM_ID,
             P_NAV_LIST_CHILD_ITEM_NAME => P_NAV_LIST_CHILD_ITEM_NAME,
             
             P_TABLE_OWNER              => P_TABLE_OWNER,
             P_TABLE_NAME               => P_TABLE_NAME,
             P_TABLE_PK_COLUMN_NAME     => P_TABLE_PK_COLUMN_NAME,
             P_TABLE_PK_SRC_TYPE        => P_TABLE_PK_SRC_TYPE,
             P_TABLE_PK_SRC             => P_TABLE_PK_SRC,
             P_TABLE_PK2_COLUMN_NAME    => P_TABLE_PK2_COLUMN_NAME,
             P_TABLE_PK2_SRC_TYPE       => P_TABLE_PK2_SRC_TYPE,
             P_TABLE_PK2_SRC            => P_TABLE_PK2_SRC,
             P_TABLE_RV_COLUMN_NAME     => P_TABLE_RV_COLUMN_NAME,
             
             P_DISPLAY_COLUMN_LIST      => P_DISPLAY_COLUMN_LIST,
             P_REPORT_SELECT_LIST       => P_REPORT_SELECT_LIST,
             
             P_RPT_REGION_TEMPLATE      => P_RPT_REGION_TEMPLATE,
             P_RPT_TEMPLATE             => P_RPT_TEMPLATE,
             P_RPT_REGION_NAME          => P_RPT_REGION_NAME,
             P_FORM_REGION_TEMPLATE     => P_FORM_REGION_TEMPLATE,
             P_FORM_REGION_NAME         => P_FORM_REGION_NAME,
             
             P_WHERE_CLAUSE             => P_WHERE_CLAUSE,
             P_PAGINATION_SIZE          => P_PAGINATION_SIZE,
             P_EDIT_LINK                => P_EDIT_LINK,
             
             P_FORM_INSERT              => P_FORM_INSERT,
             P_FORM_UPDATE              => P_FORM_UPDATE,
             P_FORM_DELETE              => P_FORM_DELETE
             );
     END IF;
 EXCEPTION WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20001,WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.CREATE_QUERY_AND_UPDATE_PAGE',SQLERRM));
 END CREATE_QUERY_AND_UPDATE_PAGE;
 
 
 
 
 
 PROCEDURE CREATE_CHART_PAGE (
    P_FLOW_ID                  IN NUMBER   DEFAULT NULL,
    P_FLOW_STEP_ID             IN NUMBER   DEFAULT NULL,
    P_PAGE_NAME                IN VARCHAR2 DEFAULT NULL,
    P_USER_INTERFACE_ID        IN NUMBER,
    P_CHART_SQL                IN VARCHAR2 DEFAULT NULL,
    P_TAB_SET                  IN VARCHAR2 DEFAULT NULL,
    P_TAB_NAME                 IN VARCHAR2 DEFAULT NULL, 
    P_TAB_TEXT                 IN VARCHAR2 DEFAULT NULL,
    P_SCALE                    IN VARCHAR2 DEFAULT '400',
    P_AXIS                     IN VARCHAR2 DEFAULT 'ZERO',
    P_NUM_MASK                 IN VARCHAR2 DEFAULT '999,999,999,990',
    P_PLUG_CHART_SHOW_SUMMARY  IN VARCHAR2 DEFAULT NULL,
    P_REGION_TEMPLATE          IN NUMBER   DEFAULT NULL,
    P_REGION_NAME              IN VARCHAR2 DEFAULT NULL,
    P_REGION_DISPLAY_COLUMN    IN VARCHAR2 DEFAULT NULL
 )
 IS
 
 BEGIN
 
    
    
    
    IF NOT PAGE_EXISTS (P_FLOW_ID,P_FLOW_STEP_ID) THEN
        WWV_FLOW_API.CREATE_PAGE(
          P_ID                  => P_FLOW_STEP_ID,
          P_FLOW_ID             => P_FLOW_ID,
          P_TAB_SET             => REPLACE(P_TAB_SET,'%null%',NULL),
          P_NAME                => P_PAGE_NAME,
          P_USER_INTERFACE_ID   => P_USER_INTERFACE_ID,
          P_STEP_TITLE          => P_PAGE_NAME,
          P_STEP_SUB_TITLE      => P_PAGE_NAME,
          P_STEP_SUB_TITLE_TYPE => 'TEXT_WITH_SUBSTITUTIONS',
          P_WELCOME_TEXT        => '',
          P_BOX_WELCOME_TEXT    => '',
          P_BOX_FOOTER_TEXT     => '',
          P_FOOTER_TEXT         => '',
          P_STEP_TEMPLATE       => '',
          P_PAGE_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_PAGE_TEMPLATE, 'PAGE'),
          P_BOX_IMAGE           => '',
          P_REQUIRED_ROLE      => '',
          P_PAGE_COMMENT       => NULL);
 
       
       IF REPLACE(P_TAB_SET,'%null%',NULL) IS NOT NULL THEN
           CREATE_TAB (
              P_FLOW_ID  => P_FLOW_ID,
              P_PAGE_ID  => P_FLOW_STEP_ID,
              P_TAB_SET  => P_TAB_SET,
              P_TAB_NAME => P_TAB_NAME,
              P_TAB_TEXT => P_TAB_TEXT);
       END IF;
    END IF;
 
     
     
     
 
     L_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
 
     WWV_FLOW_API.CREATE_PAGE_PLUG (
         P_ID                            => L_REGION_ID,
         P_FLOW_ID                       => P_FLOW_ID,
         P_PAGE_ID                       => P_FLOW_STEP_ID,
         P_PLUG_TEMPLATE                 => P_REGION_TEMPLATE,
         P_REGION_TEMPLATE_OPTIONS       => GET_PRESET_TEMPLATE_OPTIONS (P_REGION_TEMPLATE,'REGION'),
         P_PLUG_NAME                     => P_REGION_NAME,
         P_PLUG_DISPLAY_SEQUENCE         => '10',
         P_PLUG_DISPLAY_COLUMN           => P_REGION_DISPLAY_COLUMN,
         P_PLUG_DISPLAY_POINT            => 'BODY',
         P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
         P_PLUG_SOURCE                   => P_CHART_SQL,
         P_PLUG_SOURCE_TYPE              => WWV_FLOW_REGION_NATIVE.C_LEGACY_SIMPLE_CHART,
         P_PLUG_CREATE_LINK_TEXT         => NULL,
         P_PLUG_CREATE_LINK_TARGET       => NULL,
         P_PLUG_CREATE_IMAGE             => NULL,
         P_PLUG_CREATE_IMAGE_ATTRIBUTES  => NULL,
         P_PLUG_EDIT_LINK_TEXT           => NULL,
         P_PLUG_EDIT_LINK_TARGET         => NULL,
         P_PLUG_EDIT_IMAGE               => NULL,
         P_PLUG_EDIT_IMAGE_ATTRIBUTES    => NULL,
         P_PLUG_EXPAND_LINK_TEXT         => NULL,
         P_PLUG_EXPAND_LINK_TARGET       => NULL,
         P_PLUG_EXPAND_IMAGE             => NULL,
         P_PLUG_EXPAND_IMAGE_ATTRIBUTES  => NULL,
         P_PLUG_CLOSE_LINK_TEXT          => NULL,
         P_PLUG_CLOSE_LINK_TARGET        => NULL,
         P_PLUG_CLOSE_IMAGE              => NULL,
         P_PLUG_CLOSE_IMAGE_ATTRIBUTES   => NULL,
         P_PLUG_REQUIRED_ROLE            => NULL,
         P_PLUG_DISPLAY_WHEN_CONDITION   => NULL,
         P_PLUG_DISPLAY_WHEN_COND2       => NULL,
         P_PLUG_DISPLAY_CONDITION_TYPE   => NULL,
         
         P_PLUG_CHART_FONT_SIZE          => '-1',
         P_PLUG_CHART_MAX_ROWS           => '20',
         P_PLUG_CHART_NUM_MASK           => P_NUM_MASK,
         P_PLUG_CHART_SCALE              => P_SCALE,
         P_PLUG_CHART_AXIS               => P_AXIS,
         P_PLUG_CHART_SHOW_SUMMARY       => P_PLUG_CHART_SHOW_SUMMARY,
         
         P_REQUIRED_PATCH                => NULL,
         P_PLUG_COMMENT                  => NULL);
 
 
 
 EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(-20001,
                           WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.CREATE_CHART_PAGE',SQLERRM)
                           );
 END CREATE_CHART_PAGE;
 
 
 PROCEDURE CREATE_REPORT_MAX_ROW_LOV (
    P_LOV_ID       IN NUMBER,
    P_LOV_NAME     IN VARCHAR2,
    P_FLOW_ID      IN NUMBER
    )
 IS
 BEGIN
    WWV_FLOW_API.CREATE_LIST_OF_VALUES (
        P_ID       => P_LOV_ID,
        P_FLOW_ID  => P_FLOW_ID,
        P_LOV_NAME => P_LOV_NAME,
        P_LOV_QUERY=> '.'||TO_CHAR(P_LOV_ID)||'.');
 
   WWV_FLOW_API.CREATE_STATIC_LOV_DATA (
        P_LOV_ID            => P_LOV_ID,
        P_LOV_DISP_SEQUENCE => 10,
        P_LOV_DISP_VALUE    => '10',
        P_LOV_RETURN_VALUE  => '10');
   WWV_FLOW_API.CREATE_STATIC_LOV_DATA (
        P_LOV_ID            => P_LOV_ID,
        P_LOV_DISP_SEQUENCE => 20,
        P_LOV_DISP_VALUE    => '15',
        P_LOV_RETURN_VALUE  => '15');
   WWV_FLOW_API.CREATE_STATIC_LOV_DATA (
        P_LOV_ID            => P_LOV_ID,
        P_LOV_DISP_SEQUENCE => 30,
        P_LOV_DISP_VALUE    => '20',
        P_LOV_RETURN_VALUE  => '20');
   WWV_FLOW_API.CREATE_STATIC_LOV_DATA (
        P_LOV_ID            => P_LOV_ID,
        P_LOV_DISP_SEQUENCE => 40,
        P_LOV_DISP_VALUE    => '30',
        P_LOV_RETURN_VALUE  => '30');
   WWV_FLOW_API.CREATE_STATIC_LOV_DATA (
        P_LOV_ID            => P_LOV_ID,
        P_LOV_DISP_SEQUENCE => 50,
        P_LOV_DISP_VALUE    => '50',
        P_LOV_RETURN_VALUE  => '50');
   WWV_FLOW_API.CREATE_STATIC_LOV_DATA (
        P_LOV_ID            => P_LOV_ID,
        P_LOV_DISP_SEQUENCE => 60,
        P_LOV_DISP_VALUE    => '100',
        P_LOV_RETURN_VALUE  => '100');
   WWV_FLOW_API.CREATE_STATIC_LOV_DATA (
        P_LOV_ID            => P_LOV_ID,
        P_LOV_DISP_SEQUENCE => 70,
        P_LOV_DISP_VALUE    => '200',
        P_LOV_RETURN_VALUE  => '200');
   WWV_FLOW_API.CREATE_STATIC_LOV_DATA (
        P_LOV_ID            => P_LOV_ID,
        P_LOV_DISP_SEQUENCE => 80,
        P_LOV_DISP_VALUE    => '500',
        P_LOV_RETURN_VALUE  => '500');
   WWV_FLOW_API.CREATE_STATIC_LOV_DATA (
        P_LOV_ID            => P_LOV_ID,
        P_LOV_DISP_SEQUENCE => 90,
        P_LOV_DISP_VALUE    => '1000',
        P_LOV_RETURN_VALUE  => '1000');
   WWV_FLOW_API.CREATE_STATIC_LOV_DATA (
        P_LOV_ID            => P_LOV_ID,
        P_LOV_DISP_SEQUENCE => 100,
        P_LOV_DISP_VALUE    => '5000',
        P_LOV_RETURN_VALUE  => '5000');
 END CREATE_REPORT_MAX_ROW_LOV;
 
 
 
 
 FUNCTION IS_OLD_PPR_TEMPLATE (
    P_FLOW_ID            IN NUMBER,
    P_REPORT_TEMPLATE_ID IN NUMBER
 ) RETURN BOOLEAN IS
 
 BEGIN
 
    FOR C1 IN (
        SELECT ROW_TEMPLATE_AFTER_ROWS
        FROM   WWV_FLOW_ROW_TEMPLATES
        WHERE  FLOW_ID = P_FLOW_ID
        AND    ID      = P_REPORT_TEMPLATE_ID
    ) LOOP
        IF INSTR(C1.ROW_TEMPLATE_AFTER_ROWS,'init_htmlPPRReport') <> 0 THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;
    END LOOP;
    RETURN FALSE;
 END IS_OLD_PPR_TEMPLATE;
 
 
 
 
 FUNCTION IS_IDENTITY_ALWAYS (
     P_OWNER             IN VARCHAR2,
     P_TABLE_NAME        IN VARCHAR2,
     P_COLUMN_NAME       IN VARCHAR2
 ) RETURN BOOLEAN IS
     L_IDENTITY_ALWAYS   BOOLEAN := FALSE;
 BEGIN
 
     $IF WWV_FLOW_GLOBAL.G_12C $THEN
     FOR C1 IN (SELECT GENERATION_TYPE
                  FROM SYS.DBA_TAB_IDENTITY_COLS
                 WHERE COLUMN_NAME = P_COLUMN_NAME
                   AND OWNER = P_OWNER
                   AND TABLE_NAME = P_TABLE_NAME ) LOOP
 
         IF C1.GENERATION_TYPE = 'ALWAYS' THEN
             L_IDENTITY_ALWAYS := TRUE;
         END IF;
     END LOOP;
     $END
 
     RETURN L_IDENTITY_ALWAYS;
 END IS_IDENTITY_ALWAYS;
 
 PROCEDURE INITCAP_REPORT_COLUMN_HEADINGS (
     P_REGION_ID IN NUMBER )
 IS
 BEGIN
     UPDATE WWV_FLOW_REGION_REPORT_COLUMN
        SET COLUMN_HEADING = ESCAPE_REPORT_LABEL(INITCAP( REPLACE( COLUMN_ALIAS, '_', ' ' )))
      WHERE REGION_ID         = P_REGION_ID
        AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
 END INITCAP_REPORT_COLUMN_HEADINGS;
 
 
 
 
 
 
 
 
 PROCEDURE ADD_REGION_WEB_SOURCE_PARAMS(
     P_FLOW_ID           IN NUMBER,
     P_PAGE_ID           IN NUMBER,
     P_REGION_ID         IN NUMBER,
     P_COLLECTION_NAME   IN VARCHAR2,
     P_CREATE_ITEM       IN BOOLEAN ) 
 IS
     L_ITEM_EXISTS BOOLEAN := FALSE;    
 BEGIN
     IF WWV_FLOW.G_DEBUG THEN
         WWV_FLOW_DEBUG.ENTER(
             'add_region_web_source_params',
             'p_region_id',                   P_REGION_ID,
             'p_collection_name',             P_COLLECTION_NAME );
     END IF;
 
     FOR P IN (
         SELECT C001 AS PARAM_ID,
                C002 AS VALUE_TYPE,
                C003 AS VALUE
           FROM WWV_FLOW_COLLECTIONS
          WHERE COLLECTION_NAME = P_COLLECTION_NAME 
     ) LOOP
         
         IF P.VALUE_TYPE = 'ITEM' AND P_CREATE_ITEM THEN
             WWV_FLOW_API.CREATE_PAGE_ITEM(
                 P_FLOW_ID                  => P_FLOW_ID,
                 P_FLOW_STEP_ID             => P_PAGE_ID,
                 P_NAME                     => 'P'||P_PAGE_ID||'_'||P.VALUE,
                 P_ITEM_PLUG_ID             => P_REGION_ID,
                 P_ITEM_SEQUENCE            => 10,
                 P_DISPLAY_AS               => 'HIDDEN' );
         END IF;
 
         WWV_FLOW_API.CREATE_WEB_SOURCE_COMP_PARAM(
             P_FLOW_ID          => P_FLOW_ID,
             P_PAGE_ID          => P_PAGE_ID,
             P_WEB_SRC_PARAM_ID => P.PARAM_ID,
             P_PAGE_PLUG_ID     => P_REGION_ID,
             P_VALUE_TYPE       => P.VALUE_TYPE,
             P_VALUE            => CASE 
                                       WHEN P.VALUE_TYPE = 'ITEM' AND P_CREATE_ITEM THEN 'P'||P_PAGE_ID||'_'||P.VALUE
                                       ELSE P.VALUE END );
 
     END LOOP;
 END ADD_REGION_WEB_SOURCE_PARAMS;
 
 
 
 
 PROCEDURE CREATE_REPORT_PAGE (
    P_FLOW_ID                   IN NUMBER   DEFAULT NULL,
    P_PAGE_ID                   IN NUMBER   DEFAULT NULL,
    P_PAGE_NAME                 IN VARCHAR2 DEFAULT NULL,
    P_GROUP_NAME                IN VARCHAR2 DEFAULT NULL,
    P_PAGE_MODE                 IN VARCHAR2,
    P_USER_INTERFACE_ID         IN NUMBER,
    P_REPORT_SQL                IN VARCHAR2 DEFAULT NULL,
    
    P_COLUMNS_COLON_SEP         IN VARCHAR2 DEFAULT NULL,
    
    P_LOCATION                  IN VARCHAR2 DEFAULT NULL,
    P_WEB_SRC_MODULE_ID         IN NUMBER   DEFAULT NULL,
    P_REMOTE_SERVER_ID          IN NUMBER   DEFAULT NULL,
    P_TABLE_OWNER               IN VARCHAR2 DEFAULT NULL,
    P_TABLE_NAME                IN VARCHAR2 DEFAULT NULL,
    P_INCLUDE_ROWID_COLUMN      IN BOOLEAN  DEFAULT FALSE,
    
    P_LOOKUPS                   IN T_LOOKUPS DEFAULT C_EMPTY_LOOKUP,
    
    P_REPORT_TEMPLATE           IN VARCHAR2 DEFAULT NULL,
    P_TAB_SET                   IN VARCHAR2 DEFAULT NULL,
    P_TAB_NAME                  IN VARCHAR2 DEFAULT NULL, 
    P_TAB_TEXT                  IN VARCHAR2 DEFAULT NULL,
    P_NAV_LIST_ID               IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_ITEM_ID          IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_ITEM_NAME        IN VARCHAR2 DEFAULT NULL,
    P_NAV_LIST_PARENT_ITEM_ID   IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_CHILD_ITEM_NAME  IN VARCHAR2 DEFAULT NULL,
    P_PLUG_TEMPLATE             IN VARCHAR2 DEFAULT NULL,
    P_PLUG_NAME                 IN VARCHAR2 DEFAULT NULL,
    P_PLUG_DISPLAY_COLUMN       IN VARCHAR2 DEFAULT NULL,
    P_MAX_ROWS                  IN VARCHAR2 DEFAULT '15',
    P_REPORT_TYPE               IN VARCHAR2 DEFAULT NULL,
    P_PLUG_QUERY_OPTIONS        IN VARCHAR2 DEFAULT NULL,
    P_PLUG_QUERY_MAX_COLUMNS    IN VARCHAR2 DEFAULT NULL,
    P_PLUG_QUERY_BREAK_COLS     IN VARCHAR2 DEFAULT NULL,
    P_CSV_OUTPUT                IN VARCHAR2 DEFAULT NULL,
    P_CSV_LINK_TEXT             IN VARCHAR2 DEFAULT NULL,
    P_PRN_OUTPUT                IN VARCHAR2 DEFAULT NULL,
    P_PRN_FORMAT                IN VARCHAR2 DEFAULT NULL,
    P_PRN_LABEL                 IN VARCHAR2 DEFAULT NULL,
    P_COLUMN_HEADING_SORT       IN VARCHAR2 DEFAULT NULL,
    P_ENABLE_SEARCH             IN VARCHAR2 DEFAULT NULL,
    P_SEARCH_LIST               IN VARCHAR2 DEFAULT NULL,
    P_USE_UI_DEFAULTS           IN VARCHAR2 DEFAULT NULL,
    P_WEB_SRC_PARAM_COLLECTION  IN VARCHAR2 DEFAULT NULL  )
 IS
    C_ENABLE_SEARCH CONSTANT BOOLEAN := ( P_ENABLE_SEARCH = 'Y' AND NVL(P_REPORT_TYPE, 'SQL') = 'SQL' );
 
    L_LOOKUPS                    T_LOOKUPS;
    L_QUERY_TYPE                 WWV_FLOW_PAGE_PLUGS.QUERY_TYPE%TYPE  := P_REPORT_TYPE;
    L_REPORT_SQL                 WWV_FLOW_PAGE_PLUGS.PLUG_SOURCE%TYPE := P_REPORT_SQL;
    L_COLUMNS_COLON_SEP          VARCHAR2(32767) := P_COLUMNS_COLON_SEP;
 
    L_SQL                        VARCHAR2(32767);
    L_REGION_TEMPLATE_OPTIONS    VARCHAR2(255);
    L_REPORT_TEMPLATE_OPTIONS    VARCHAR2(255);
    L_REPORT_HEADINGS            WWV_FLOW_PAGE_PLUGS.PLUG_QUERY_HEADINGS%TYPE;
    L_COLUMN_LIST                WWV_FLOW_GLOBAL.VC_ARR2;
    L_SEARCH                     VARCHAR2(32767);
    L_RPT_MAX_ROW_LOV_ID         NUMBER;
    L_RPT_MAX_ROW_LOV_NAME       VARCHAR2(32767);
    L_RPT_MAX_ROW_LOV_CREATED    BOOLEAN := FALSE;
    L_QUERY_NUM_ROWS_ITEM        VARCHAR2(4000);
    L_SEARCH_PLUG_ID             NUMBER;
    L_SEARCH_REGION_TEMPLATE_ID  NUMBER;
    L_REFRESH_BUTTON_ID          NUMBER;
    L_NEW_SQL                    VARCHAR2(32767);
    L_PLUG_DISPLAY_SEQUENCE      VARCHAR2(100)   := '10';
    L_PROCESS_WHEN               VARCHAR2(32767);
    L_PROCESS_CLOB               VARCHAR2(32767);
    L_AJAX_ENABLED               VARCHAR2(1)     := 'Y';
    L_IS_JQM                     BOOLEAN := FALSE;
    L_JQM_COL_WIDTH              NUMBER;
    L_GROUP_ID                   NUMBER;
 
    L_HIDDEN_COLUMN              VARCHAR2(1) := 'N';
    L_COLUMN_HEADING             VARCHAR2(4000);
 BEGIN
    
    
    
   WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
       P_FLOW_ID           => P_FLOW_ID,
       P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
    IF P_USE_UI_DEFAULTS = 'N' THEN
        WWV_FLOW_HINT.G_USE_UI_DEFAULTS := FALSE;
    END IF;
 
    IF WWV_FLOW_USER_INTERFACE_DEV.IS_JQM_UI(
        P_APPLICATION_ID    => P_FLOW_ID,
        P_USER_INTERFACE_ID => P_USER_INTERFACE_ID
    ) THEN
        L_IS_JQM := TRUE;
    END IF;
 
    
    
    
    IF NOT PAGE_EXISTS (P_FLOW_ID, P_PAGE_ID) THEN
 
        
        
        
        IF P_GROUP_NAME IS NOT NULL THEN
            L_GROUP_ID := WWV_FLOW_UTILITIES.GET_PAGE_GROUP_ID(P_GROUP_NAME => P_GROUP_NAME, P_APPLICATION_ID => P_FLOW_ID);
            
            IF L_GROUP_ID IS NULL THEN
                L_GROUP_ID := WWV_FLOW_ID.NEXT_VAL;
                WWV_FLOW_API.CREATE_PAGE_GROUP(P_ID => L_GROUP_ID, P_FLOW_ID => P_FLOW_ID, P_GROUP_NAME => P_GROUP_NAME);
            END IF;
        END IF;
 
        WWV_FLOW_API.CREATE_PAGE(
          P_ID                      => P_PAGE_ID,
          P_FLOW_ID                 => P_FLOW_ID,
          P_TAB_SET                 => REPLACE(P_TAB_SET,'%null%',NULL),
          P_USER_INTERFACE_ID       => P_USER_INTERFACE_ID,
          P_PAGE_TEMPLATE_OPTIONS   => GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_PAGE_TEMPLATE, 'PAGE'),
          P_NAME                    => P_PAGE_NAME,
          P_PAGE_MODE               => P_PAGE_MODE,
          P_GROUP_ID                => L_GROUP_ID,
          P_STEP_TITLE              => P_PAGE_NAME,
          P_STEP_SUB_TITLE          => P_PAGE_NAME,
          P_STEP_SUB_TITLE_TYPE     => 'TEXT_WITH_SUBSTITUTIONS',
          P_WELCOME_TEXT            => '',
          P_BOX_WELCOME_TEXT        => '',
          P_BOX_FOOTER_TEXT         => '',
          P_FOOTER_TEXT             => '');
 
       IF P_NAV_LIST_ID IS NOT NULL THEN
         
         CREATE_NAVIGATION_LIST_ITEM (
             P_FLOW_ID                  => P_FLOW_ID,
             P_PAGE_ID                  => P_PAGE_ID,
             P_PAGE_NAME                => P_PAGE_NAME,
             P_NAV_LIST_ID              => P_NAV_LIST_ID,
             P_NAV_LIST_ITEM_ID         => P_NAV_LIST_ITEM_ID,
             P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_ITEM_NAME,
             P_NAV_LIST_PARENT_ITEM_ID  => P_NAV_LIST_PARENT_ITEM_ID,
             P_NAV_LIST_CHILD_ITEM_NAME => P_NAV_LIST_CHILD_ITEM_NAME
         );
       ELSE
 
         
         IF REPLACE(P_TAB_SET,'%null%',NULL) IS NOT NULL THEN
             CREATE_TAB (
                P_FLOW_ID    => P_FLOW_ID,
                P_PAGE_ID    => P_PAGE_ID,
                P_TAB_SET    => P_TAB_SET,
                P_TAB_NAME   => P_TAB_NAME,
                P_TAB_TEXT   => P_TAB_TEXT);
         END IF;
 
       END IF;
 
    END IF;
 
    
    
    
 
    
    L_SQL := RTRIM(WWV_FLOW.TRIM_NL_SP_TAB(P_REPORT_SQL), ';');
 
    IF P_REPORT_TYPE IN ( 'SQL', 'FUNC_BODY_RETURNING_SQL' ) THEN
        L_SQL := RTRIM(WWV_FLOW.TRIM_NL_SP_TAB(P_REPORT_SQL), ';');
    END IF; 
    IF P_REPORT_TYPE = 'FUNC_BODY_RETURNING_SQL' THEN
        
        L_SQL := L_SQL || ';';
    END IF;
 
    IF P_REPORT_TYPE NOT IN ( 'SQL', 'TABLE', 'FUNC_BODY_RETURNING_SQL' ) THEN
        RAISE_APPLICATION_ERROR(-20001,
                           WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.INVALID_REPORT_TYPE')
                           );
        RETURN;
    END IF;
 
    
    IF C_ENABLE_SEARCH THEN
      WWV_FLOW.DEBUG('p_search_list is ' || P_SEARCH_LIST);
       L_COLUMN_LIST := WWV_FLOW_UTILITIES.STRING_TO_TABLE2(P_SEARCH_LIST);
       FOR I IN 1..L_COLUMN_LIST.COUNT LOOP
          IF I > 1 THEN
            L_SEARCH := L_SEARCH||' or'||WWV_FLOW.LF;
          END IF;
          L_SEARCH := L_SEARCH||' instr(upper("'||L_COLUMN_LIST(I)||'"),upper(nvl(:P'||P_PAGE_ID||'_REPORT_SEARCH,"'||L_COLUMN_LIST(I)||'"))) > 0 ';
       END LOOP;
       IF L_SEARCH IS NOT NULL THEN
         L_NEW_SQL := 'select * from ('||WWV_FLOW.LF;
         L_NEW_SQL := L_NEW_SQL||L_SQL||WWV_FLOW.LF;
         L_NEW_SQL := L_NEW_SQL||') where ('||WWV_FLOW.LF;
         L_NEW_SQL := L_NEW_SQL||L_SEARCH ||WWV_FLOW.LF;
         L_NEW_SQL := L_NEW_SQL||')'||WWV_FLOW.LF;
       ELSE
         L_NEW_SQL := L_SQL;
       END IF;
    ELSE
      L_NEW_SQL := L_SQL;
    END IF;
 
   
   IF C_ENABLE_SEARCH THEN
      L_RPT_MAX_ROW_LOV_NAME := 'P'||P_PAGE_ID||'_'|| WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_CREATE_MODEL_APP.RPT_MAX_ROW');
      FOR C1 IN (SELECT  ID, LOV_NAME FROM WWV_FLOW_LISTS_OF_VALUES$
                 WHERE  FLOW_ID = P_FLOW_ID AND LOV_NAME =   L_RPT_MAX_ROW_LOV_NAME) LOOP
          L_RPT_MAX_ROW_LOV_CREATED := TRUE;
          L_RPT_MAX_ROW_LOV_ID := C1.ID;
          L_QUERY_NUM_ROWS_ITEM := 'P'||P_PAGE_ID||'_ROWS';
     END LOOP;
     IF  NOT L_RPT_MAX_ROW_LOV_CREATED THEN
        L_RPT_MAX_ROW_LOV_ID := WWV_FLOW_ID.NEXT_VAL;
        CREATE_REPORT_MAX_ROW_LOV (
               P_LOV_ID       => L_RPT_MAX_ROW_LOV_ID,
               P_LOV_NAME => L_RPT_MAX_ROW_LOV_NAME,
               P_FLOW_ID     => P_FLOW_ID
               );
          L_RPT_MAX_ROW_LOV_CREATED := TRUE;
          L_QUERY_NUM_ROWS_ITEM := 'P'||P_PAGE_ID||'_ROWS';
      END IF;
   END IF;
 
   
   IF C_ENABLE_SEARCH THEN
 
      L_SEARCH_PLUG_ID := WWV_FLOW_ID.NEXT_VAL;
 
      
      FOR C1 IN (SELECT ID
                   FROM WWV_FLOW_PAGE_PLUG_TEMPLATES
                  WHERE FLOW_ID           = P_FLOW_ID
                    AND THEME_ID          = WWV_FLOW_THEME_GLOBALS.G_THEME_ID
                    AND THEME_CLASS_ID    = 31
                    AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID )
      LOOP
          L_SEARCH_REGION_TEMPLATE_ID := C1.ID;
      END LOOP;
 
      WWV_FLOW_API.CREATE_PAGE_PLUG (
            P_ID                         => L_SEARCH_PLUG_ID,
            P_FLOW_ID                    => P_FLOW_ID,
            P_PAGE_ID                    => P_PAGE_ID,
            P_PLUG_NAME                  => WWV_FLOW_LANG.SYSTEM_MESSAGE('APEXIR_SEARCH'),
            P_PLUG_TEMPLATE              => NVL(L_SEARCH_REGION_TEMPLATE_ID,P_PLUG_TEMPLATE),
            P_REGION_TEMPLATE_OPTIONS    => GET_PRESET_TEMPLATE_OPTIONS (NVL(L_SEARCH_REGION_TEMPLATE_ID,P_PLUG_TEMPLATE),'REGION'),
            P_PLUG_DISPLAY_SEQUENCE      => '10',
            P_PLUG_DISPLAY_COLUMN        => P_PLUG_DISPLAY_COLUMN,
            P_PLUG_DISPLAY_POINT         => 'BODY',
            P_PLUG_ITEM_DISPLAY_POINT    => 'ABOVE',
            P_PLUG_SOURCE                => NULL,
            P_PLUG_SOURCE_TYPE           => WWV_FLOW_REGION_NATIVE.C_STATIC );
 
       
       L_PLUG_DISPLAY_SEQUENCE := '20';
       
       WWV_FLOW_API.CREATE_PAGE_ITEM(
                  P_FLOW_ID                  => P_FLOW_ID,
                  P_FLOW_STEP_ID             => P_PAGE_ID,
                  P_NAME                     => 'P'||P_PAGE_ID||'_REPORT_SEARCH',
                  P_DATA_TYPE                => 'VARCHAR',
                  P_ITEM_PLUG_ID             => L_SEARCH_PLUG_ID,
                  P_ACCEPT_PROCESSING        => 'REPLACE_EXISTING',
                  P_ITEM_SEQUENCE            => 10,
                  P_USE_CACHE_BEFORE_DEFAULT => 'YES',
                  P_ITEM_DEFAULT             => '',
                  P_PROMPT                   => WWV_FLOW_LANG.SYSTEM_MESSAGE('APEXIR_SEARCH'),
                  P_SOURCE                   => NULL,
                  P_SOURCE_TYPE              => NULL,
                  P_DISPLAY_AS               => 'TEXT_WITH_ENTER_SUBMIT',
                  P_LOV                      => NULL,
                  P_LOV_DISPLAY_NULL         => 'YES',
                  P_CSIZE                    => 30,
                  P_CMAXLENGTH               => 2000,
                  P_CHEIGHT                  => NULL,
                  P_CATTRIBUTES              => '',
                  P_BEGIN_ON_NEW_LINE        => 'YES',
                  P_BEGIN_ON_NEW_FIELD       => 'YES',
                  P_COLSPAN                  => 3,
                  P_GRID_LABEL_COLUMN_SPAN   => 1,
                  P_LABEL_ALIGNMENT          => 'RIGHT',
                  P_FIELD_ALIGNMENT          => 'LEFT',
                  P_FIELD_TEMPLATE           => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,
                  P_ITEM_TEMPLATE_OPTIONS    => GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,'ITEM'),
                  P_DISPLAY_WHEN             => '',
                  P_WARN_ON_UNSAVED_CHANGES  => 'I',
                  P_IS_PERSISTENT            => 'Y',
                  P_SECURITY_SCHEME          => '',
                  P_ITEM_COMMENT             => NULL);
 
        
        WWV_FLOW_API.CREATE_PAGE_ITEM(
            P_FLOW_ID                  => P_FLOW_ID,
            P_FLOW_STEP_ID             => P_PAGE_ID,
            P_NAME                     => L_QUERY_NUM_ROWS_ITEM,
            P_DATA_TYPE                => 'VARCHAR',
            P_ITEM_PLUG_ID             => L_SEARCH_PLUG_ID,
            P_ACCEPT_PROCESSING        => 'REPLACE_EXISTING',
            P_ITEM_SEQUENCE            => 20,
            P_USE_CACHE_BEFORE_DEFAULT => 'YES',
            P_ITEM_DEFAULT             => '15',
            P_ITEM_DEFAULT_TYPE        => 'STATIC_TEXT_WITH_SUBSTITUTIONS',
            P_PROMPT                   => WWV_FLOW_LANG.SYSTEM_MESSAGE('LAYOUT.T_DISPLAY'),
            P_SOURCE                   =>'15',
            P_SOURCE_TYPE              => 'STATIC',
            P_DISPLAY_AS               => WWV_FLOW_NATIVE_ITEM.C_SELECT_LIST,
            P_NAMED_LOV                => L_RPT_MAX_ROW_LOV_NAME,
            P_LOV                      => '.'||L_RPT_MAX_ROW_LOV_ID||'.',
            P_LOV_DISPLAY_NULL         => 'NO',
            P_LOV_TRANSLATED           => 'N',
            P_CSIZE                    => 30,
            P_CMAXLENGTH               => 2000,
            P_CHEIGHT                  => NULL,
            P_CATTRIBUTES              => '',
            P_BEGIN_ON_NEW_LINE        => 'NO',
            P_BEGIN_ON_NEW_FIELD       => 'YES',
            P_COLSPAN                  => 2,
            P_GRID_LABEL_COLUMN_SPAN   => 1,
            P_LABEL_ALIGNMENT          => 'RIGHT',
            P_FIELD_ALIGNMENT          => 'LEFT',
            P_FIELD_TEMPLATE           => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,
            P_ITEM_TEMPLATE_OPTIONS    => GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,'ITEM'),
            P_DISPLAY_WHEN             => '',
            P_WARN_ON_UNSAVED_CHANGES  => 'I',
            P_IS_PERSISTENT            => 'Y',
            P_SECURITY_SCHEME          => '',
            P_ITEM_COMMENT             => NULL);
 
        WWV_FLOW_API.CREATE_PAGE_BUTTON (
            P_FLOW_ID                  => P_FLOW_ID,
            P_FLOW_STEP_ID             => P_PAGE_ID,
            P_BUTTON_NAME              => 'GO',
            P_BUTTON_SEQUENCE          => 30,
            P_BUTTON_PLUG_ID           => L_SEARCH_PLUG_ID,
            P_BUTTON_TEMPLATE_ID       => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE,
            P_BUTTON_TEMPLATE_OPTIONS  => GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE, 'BUTTON'),
            P_BUTTON_IMAGE_ALT         => WWV_FLOW_LANG.SYSTEM_MESSAGE('F4000.P119.GO'),
            P_BUTTON_POSITION          => 'BODY',
            P_BUTTON_ALIGNMENT         => 'LEFT',
            P_BUTTON_ACTION            => WWV_FLOW_BUTTON.C_ACTION_SUBMIT,
            P_GRID_NEW_ROW             => 'N',
            P_GRID_NEW_COLUMN          => 'Y' );
 
        WWV_FLOW_API.CREATE_PAGE_BUTTON (
            P_FLOW_ID                  => P_FLOW_ID,
            P_FLOW_STEP_ID             => P_PAGE_ID,
            P_BUTTON_NAME              => 'RESET',
            P_BUTTON_SEQUENCE          => 40,
            P_BUTTON_PLUG_ID           => L_SEARCH_PLUG_ID,
            P_BUTTON_TEMPLATE_ID       => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE,
            P_BUTTON_TEMPLATE_OPTIONS  => GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE, 'BUTTON'),
            P_BUTTON_IMAGE_ALT         => WWV_FLOW_LANG.SYSTEM_MESSAGE('F4050.RESET'),
            P_BUTTON_POSITION          => 'BODY',
            P_BUTTON_ALIGNMENT         => 'LEFT',
            P_BUTTON_ACTION            => WWV_FLOW_BUTTON.C_ACTION_SUBMIT,
            P_GRID_NEW_ROW             => 'N',
            P_GRID_NEW_COLUMN          => 'N' );
 
        L_PROCESS_WHEN := 'GO,P'||P_PAGE_ID||'_REPORT_SEARCH,RESET';
        WWV_FLOW_API.CREATE_PAGE_PROCESS(
           P_FLOW_ID                 => P_FLOW_ID,
           P_FLOW_STEP_ID            => P_PAGE_ID,
           P_PROCESS_SEQUENCE        => 10,
           P_PROCESS_POINT           => 'AFTER_SUBMIT',
           P_PROCESS_TYPE            => 'RESET_PAGINATION',
           P_PROCESS_NAME            => WWV_FLOW_LANG.SYSTEM_MESSAGE('F4000_P4734_RESET_PAG'),
           P_PROCESS_SQL_CLOB        => 'reset_pagination',
           P_ERROR_DISPLAY_LOCATION  => WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION,
           P_PROCESS_WHEN_BUTTON_ID  => NULL,
           P_PROCESS_WHEN            => L_PROCESS_WHEN,
           P_PROCESS_WHEN_TYPE       => 'REQUEST_IN_CONDITION',
           P_PROCESS_SUCCESS_MESSAGE => NULL,
           P_PROCESS_COMMENT         => NULL);
 
          L_PROCESS_CLOB := 'P'||P_PAGE_ID||'_REPORT_SEARCH';
          L_PROCESS_CLOB := L_PROCESS_CLOB||','|| L_QUERY_NUM_ROWS_ITEM;
 
          FOR C1 IN ( SELECT ID FROM WWV_FLOW_STEP_BUTTONS WHERE FLOW_ID = P_FLOW_ID AND
          FLOW_STEP_ID = P_PAGE_ID AND BUTTON_NAME = 'RESET')
          LOOP
             L_REFRESH_BUTTON_ID := C1.ID;
 
          END LOOP;
 
          WWV_FLOW_API.CREATE_PAGE_PROCESS(
           P_FLOW_ID                 => P_FLOW_ID,
           P_FLOW_STEP_ID            => P_PAGE_ID,
           P_PROCESS_SEQUENCE        => 20,
           P_PROCESS_POINT           => 'AFTER_SUBMIT',
           P_PROCESS_TYPE            => 'CLEAR_CACHE_FOR_ITEMS',
           P_PROCESS_NAME            => WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_CREATE_MODEL_APP.RESET_RPT_SEARCH'),
           P_PROCESS_SQL_CLOB        => L_PROCESS_CLOB,
           P_ERROR_DISPLAY_LOCATION  => WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION,
           P_PROCESS_WHEN_BUTTON_ID  => L_REFRESH_BUTTON_ID,
           P_PROCESS_WHEN            => '',
           P_PROCESS_WHEN_TYPE       => '',
           P_PROCESS_SUCCESS_MESSAGE => NULL,
           P_PROCESS_COMMENT         => NULL);
 
           WWV_FLOW_API.CREATE_PAGE_BRANCH (
            P_FLOW_ID               => P_FLOW_ID,
            P_FLOW_STEP_ID          => P_PAGE_ID,
            P_BRANCH_ACTION         => 'f?p=&APP_ID.:'||P_PAGE_ID||':&SESSION.',
            P_BRANCH_POINT          => 'AFTER_PROCESSING',
            P_BRANCH_TYPE           => 'REDIRECT_URL',
            P_BRANCH_WHEN_BUTTON_ID => NULL,
            P_BRANCH_SEQUENCE       => '10',
            P_BRANCH_CONDITION_TYPE => '',
            P_BRANCH_CONDITION      => NULL,
            P_BRANCH_CONDITION_TEXT => NULL,
            P_REQUIRED_PATCH        => NULL,
            P_BRANCH_COMMENT        => NULL);
 
   END IF;
 
    L_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
    L_REPORT_HEADINGS := NULL;
 
    
    
    
    
    IF IS_OLD_PPR_TEMPLATE(P_FLOW_ID => P_FLOW_ID, P_REPORT_TEMPLATE_ID => P_REPORT_TEMPLATE) OR L_IS_JQM THEN
        L_AJAX_ENABLED := 'N';
    END IF;
 
    L_REGION_TEMPLATE_OPTIONS :=  GET_PRESET_TEMPLATE_OPTIONS (
       P_TEMPLATE_ID    => P_PLUG_TEMPLATE,
       P_TEMPLATE_TYPE  => 'REGION'
    );
 
    L_REPORT_TEMPLATE_OPTIONS :=  GET_PRESET_TEMPLATE_OPTIONS (
       P_TEMPLATE_ID    => P_REPORT_TEMPLATE,
       P_TEMPLATE_TYPE  => 'REPORT'
    );
  
     
     IF P_LOCATION = 'LOCAL' AND L_QUERY_TYPE = 'TABLE' AND P_LOOKUPS.COUNT > 0 THEN
         L_QUERY_TYPE := 'SQL';
         L_LOOKUPS := P_LOOKUPS;
         L_REPORT_SQL := BUILD_LOOKUP_SQL(
                             P_FLOW_ID        => P_FLOW_ID,
                             P_OWNER          => P_TABLE_OWNER,
                             P_TABLE_NAME     => P_TABLE_NAME,
                             P_DISPLAY_COLUMN => L_COLUMNS_COLON_SEP,
                             P_LOOKUPS        => L_LOOKUPS );
     END IF;
 
     WWV_FLOW_API.CREATE_REPORT_REGION(
         P_ID                         => L_REGION_ID,
         P_FLOW_ID                    => P_FLOW_ID,
         P_PAGE_ID                    => P_PAGE_ID,
         P_NAME                       => P_PLUG_NAME,
         P_TEMPLATE                   => P_PLUG_TEMPLATE,
         P_REGION_TEMPLATE_OPTIONS    => L_REGION_TEMPLATE_OPTIONS,
         P_DISPLAY_SEQUENCE           => L_PLUG_DISPLAY_SEQUENCE,
         P_DISPLAY_COLUMN             => P_PLUG_DISPLAY_COLUMN,
         P_DISPLAY_POINT              => 'BODY',
         P_ITEM_DISPLAY_POINT         => 'ABOVE',
         
         P_LOCATION                   => P_LOCATION,
         P_QUERY_TYPE                 => L_QUERY_TYPE,
         P_REMOTE_SERVER_ID           => P_REMOTE_SERVER_ID,
         P_WEB_SRC_MODULE_ID          => P_WEB_SRC_MODULE_ID,
         P_QUERY_OWNER                => P_TABLE_OWNER,
         P_QUERY_TABLE                => P_TABLE_NAME,
         P_INCLUDE_ROWID_COLUMN       => P_INCLUDE_ROWID_COLUMN,
         P_SOURCE                     => L_REPORT_SQL,
         
         P_SOURCE_TYPE                => WWV_FLOW_REGION_NATIVE.C_SQL_REPORT,
         P_AJAX_ENABLED               => L_AJAX_ENABLED,
         P_QUERY_HEADINGS_TYPE        => 'COLON_DELMITED_LIST',
         P_QUERY_NUM_ROWS_TYPE        => 'NEXT_PREVIOUS_LINKS',
         P_QUERY_ROW_COUNT_MAX        => WWV_FLOW_API.C_DEFAULT_QUERY_ROW_COUNT_MAX,
         P_QUERY_HEADINGS             => L_REPORT_HEADINGS,
         P_QUERY_NUM_ROWS             => NVL(P_MAX_ROWS,'15'),
         P_QUERY_ROW_TEMPLATE         => P_REPORT_TEMPLATE,
         P_COMPONENT_TEMPLATE_OPTIONS => L_REPORT_TEMPLATE_OPTIONS,
         P_QUERY_NO_DATA_FOUND        => WWV_FLOW_LANG.SYSTEM_MESSAGE('NO_DATA_FOUND'),
         P_QUERY_OPTIONS              => P_PLUG_QUERY_OPTIONS,
         P_PLUG_QUERY_MAX_COLUMNS     => P_PLUG_QUERY_MAX_COLUMNS,
         P_QUERY_BREAK_COLS           => P_PLUG_QUERY_BREAK_COLS,
         P_CSV_OUTPUT                 => P_CSV_OUTPUT,
         P_CSV_OUTPUT_LINK_TEXT       => P_CSV_LINK_TEXT,
         P_PRN_OUTPUT                 => P_PRN_OUTPUT,
         P_PRN_FORMAT                 => P_PRN_FORMAT,
         P_PRN_OUTPUT_LINK_TEXT       => P_PRN_LABEL,
         P_QUERY_NUM_ROWS_ITEM        => L_QUERY_NUM_ROWS_ITEM );
 
     
     WWV_RENDER_REPORT3.COMPUTE_COLUMN_ATTRIBUTES (
         P_REGION_ID                   => L_REGION_ID,
         P_IS_API_CALL                 => TRUE,
         P_COLUMN_ALIAS_COLON_SEP      => L_COLUMNS_COLON_SEP );
     
     
     FOR I IN 1..WWV_RENDER_REPORT3.G_COLUMN_ALIAS.COUNT LOOP
         WWV_FLOW_API.CREATE_REPORT_COLUMNS(
             P_ID                             => NULL,
             P_REGION_ID                      => L_REGION_ID,
             P_FLOW_ID                        => P_FLOW_ID,
             P_QUERY_COLUMN_ID                => I,
             P_COLUMN_ALIAS                   => WWV_RENDER_REPORT3.G_COLUMN_ALIAS(I),
             P_COLUMN_DISPLAY_SEQUENCE        => I,
             P_COLUMN_HEADING                 => WWV_RENDER_REPORT3.G_COLUMN_HEADING(I),
             P_COLUMN_FORMAT                  => WWV_RENDER_REPORT3.G_COLUMN_FORMAT(I),
             P_COLUMN_HIT_HIGHLIGHT           => WWV_RENDER_REPORT3.G_COLUMN_HIT_HIGHLIGHT(I),
             P_COLUMN_LINK                    => WWV_RENDER_REPORT3.G_COLUMN_LINK(I),
             P_COLUMN_LINKTEXT                => WWV_RENDER_REPORT3.G_COLUMN_LINKTEXT(I),
             P_COLUMN_ALIGNMENT               => WWV_RENDER_REPORT3.G_COLUMN_ALIGNMENT(I),
             P_HEADING_ALIGNMENT              => WWV_RENDER_REPORT3.G_HEADING_ALIGNMENT(I),
             P_DEFAULT_SORT_COLUMN_SEQUENCE   => WWV_RENDER_REPORT3.G_DEFAULT_SORT_COLUMN_SEQUENCE(I),
             P_DEFAULT_SORT_DIR               => WWV_RENDER_REPORT3.G_DEFAULT_SORT_DIR(I),
             P_DISABLE_SORT_COLUMN            => WWV_RENDER_REPORT3.G_DISABLE_SORT_COLUMN(I),
             P_SUM_COLUMN                     => WWV_RENDER_REPORT3.G_SUM_COLUMN(I),
             P_HIDDEN_COLUMN                  => WWV_RENDER_REPORT3.G_HIDDEN_COLUMN(I),
             P_DISPLAY_AS                     => 'ESCAPE_SC',
             P_IS_REQUIRED                    => FALSE );
     END LOOP;
     
     
     
     IF P_COLUMN_HEADING_SORT = 'Y' THEN
         UPDATE WWV_FLOW_REGION_REPORT_COLUMN
            SET DISABLE_SORT_COLUMN = 'N'
          WHERE REGION_ID = L_REGION_ID;
         
         UPDATE WWV_FLOW_REGION_REPORT_COLUMN
            SET DEFAULT_SORT_COLUMN_SEQUENCE = 0
          WHERE REGION_ID = L_REGION_ID;
         
         UPDATE WWV_FLOW_REGION_REPORT_COLUMN
            SET DEFAULT_SORT_COLUMN_SEQUENCE = 1
          WHERE REGION_ID = L_REGION_ID
            AND QUERY_COLUMN_ID = 1;
     END IF;
  
     IF C_ENABLE_SEARCH THEN
        
        UPDATE WWV_FLOW_REGION_REPORT_COLUMN
        SET COLUMN_HIT_HIGHLIGHT = '&P'||P_PAGE_ID||'_REPORT_SEARCH.'
        WHERE REGION_ID = L_REGION_ID
        AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
        AND FLOW_ID = P_FLOW_ID
        AND INSTR(':'||P_SEARCH_LIST||':',':'||COLUMN_ALIAS||':') > 0;
     END IF;
  
     IF L_IS_JQM THEN
  
         
         SELECT (100/COUNT(1)) INTO L_JQM_COL_WIDTH
           FROM WWV_FLOW_REGION_REPORT_COLUMN
          WHERE REGION_ID = L_REGION_ID
            AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
            AND FLOW_ID = P_FLOW_ID;
  
         
         UPDATE WWV_FLOW_REGION_REPORT_COLUMN
            SET REPORT_COLUMN_WIDTH = L_JQM_COL_WIDTH
          WHERE REGION_ID = L_REGION_ID
            AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
            AND FLOW_ID = P_FLOW_ID;
  
     END IF;
  
     
     
     
     IF WWV_FLOW_HINT.G_USE_UI_DEFAULTS THEN
         FOR C1 IN (
             SELECT COLUMN_ALIAS
             FROM WWV_FLOW_REGION_REPORT_COLUMN
             WHERE REGION_ID = L_REGION_ID
             AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
             AND FLOW_ID = P_FLOW_ID )
         LOOP
             WWV_FLOW_HINT.GET_AD_UI_DEFAULTS (
                  P_SGID        => WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID,
                  P_COLUMN_NAME => C1.COLUMN_ALIAS);
  
             L_HIDDEN_COLUMN := 'N';
             L_COLUMN_HEADING := ESCAPE_REPORT_LABEL(NVL(WWV_FLOW_HINT.G_LABEL, INITCAP(REPLACE(C1.COLUMN_ALIAS, '_', ' '))));
             FOR J IN 1..L_LOOKUPS.COUNT
             LOOP
                 IF L_LOOKUPS(J).COLUMN_NAME = C1.COLUMN_ALIAS THEN
                     
                     L_HIDDEN_COLUMN := 'Y';
                     L_LOOKUPS(J).COLUMN_LABEL := L_COLUMN_HEADING;
                 ELSIF L_LOOKUPS(J).LOOKUP_COLUMN_ALIAS = C1.COLUMN_ALIAS THEN
                     L_COLUMN_HEADING := L_LOOKUPS(J).COLUMN_LABEL;
                 END IF;
             END LOOP;
 
             UPDATE WWV_FLOW_REGION_REPORT_COLUMN
                SET COLUMN_HEADING   = L_COLUMN_HEADING,
                    COLUMN_ALIGNMENT = NVL(WWV_FLOW_HINT.G_REPORT_COL_ALIGNMENT,'LEFT'),
                    HEADING_ALIGNMENT= NVL(WWV_FLOW_HINT.G_REPORT_COL_ALIGNMENT,'LEFT'),
                    COLUMN_FORMAT    = WWV_FLOW_HINT.G_REPORT_FORMAT_MASK,
                    COLUMN_WIDTH     = WWV_FLOW_HINT.G_FORM_DISPLAY_WIDTH,
                    COLUMN_HEIGHT    = WWV_FLOW_HINT.G_FORM_DISPLAY_HEIGHT,
                    COLUMN_DEFAULT   = WWV_FLOW_HINT.G_DEFAULT_VALUE,
                    HIDDEN_COLUMN    = L_HIDDEN_COLUMN
              WHERE COLUMN_ALIAS = C1.COLUMN_ALIAS
                AND REGION_ID = L_REGION_ID
                AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                AND FLOW_ID = P_FLOW_ID;
         END LOOP;
  
     ELSE
         INITCAP_REPORT_COLUMN_HEADINGS (
             P_REGION_ID => L_REGION_ID );
     END IF;
 
     
     IF P_LOCATION = 'WEB_SOURCE' AND P_WEB_SRC_PARAM_COLLECTION IS NOT NULL THEN
         ADD_REGION_WEB_SOURCE_PARAMS(
             P_FLOW_ID         => P_FLOW_ID,
             P_PAGE_ID         => P_PAGE_ID,
             P_REGION_ID       => L_REGION_ID,
             P_COLLECTION_NAME => P_WEB_SRC_PARAM_COLLECTION,
             P_CREATE_ITEM     => TRUE );
     END IF;
 
 EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(-20001,
                           WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.CREATE_REPORT_PAGE',SQLERRM)
                           );
 END CREATE_REPORT_PAGE;
 
 
 
 
 
 PROCEDURE CREATE_REPORT_QUERY (
    P_FLOW_ID             IN NUMBER,
    P_REPORT_QUERY_NAME   IN VARCHAR2,
    P_REPORT_LAYOUT_ID    IN NUMBER,
    P_SOURCE_QUERIES      IN WWV_FLOW_GLOBAL.VC_ARR2,
    P_OUTPUT_FORMAT       IN VARCHAR2,
    P_FORMAT_ITEM         IN VARCHAR2,
    P_FILE_NAME           IN VARCHAR2,
    P_XML_STRUCTURE       IN VARCHAR2,
    P_ITEMS               IN VARCHAR2,
    P_CONTENT_DISPOSITION IN VARCHAR2 DEFAULT NULL
 ) IS
 
    L_SHARED_QUERY_ID NUMBER;
 
 BEGIN
 
    FOR I IN 1..P_SOURCE_QUERIES.COUNT LOOP
 
        IF I = 1 THEN
 
            L_SHARED_QUERY_ID := WWV_FLOW_ID.NEXT_VAL;
 
            WWV_FLOW_API.CREATE_SHARED_QUERY (
                P_ID                  => L_SHARED_QUERY_ID,
                P_FLOW_ID             => P_FLOW_ID,
                P_NAME                => P_REPORT_QUERY_NAME,
                P_QUERY_TEXT          => P_SOURCE_QUERIES(I),
                P_XML_STRUCTURE       => P_XML_STRUCTURE,
                P_REPORT_LAYOUT_ID    => P_REPORT_LAYOUT_ID,
                P_FORMAT              => P_OUTPUT_FORMAT,
                P_FORMAT_ITEM         => P_FORMAT_ITEM,
                P_OUTPUT_FILE_NAME    => P_REPORT_QUERY_NAME,
                P_XML_ITEMS           => P_ITEMS, 
                P_CONTENT_DISPOSITION => P_CONTENT_DISPOSITION);
 
        END IF;
 
        IF P_SOURCE_QUERIES.COUNT > 1 THEN
 
            WWV_FLOW_API.CREATE_SHARED_QUERY_STMNT (
                P_FLOW_ID         => P_FLOW_ID,
                P_SHARED_QUERY_ID => L_SHARED_QUERY_ID,
                P_SQL_STATEMENT   => P_SOURCE_QUERIES(I));
 
        END IF;
 
    END LOOP;
 
 END CREATE_REPORT_QUERY;
 
 
 
 
 PROCEDURE UPDATE_REPORT_QUERY_SQL_STMTS (
    P_FLOW_ID             IN NUMBER,
    P_REPORT_QUERY_ID     IN NUMBER,
    P_SOURCE_QUERIES      IN WWV_FLOW_GLOBAL.VC_ARR2
 ) IS
 
 BEGIN
 
    DELETE FROM WWV_FLOW_SHARED_QRY_SQL_STMTS
    WHERE SHARED_QUERY_ID = P_REPORT_QUERY_ID
    AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
 
    FOR I IN 1..P_SOURCE_QUERIES.COUNT LOOP
 
        WWV_FLOW_API.CREATE_SHARED_QUERY_STMNT (
            P_FLOW_ID         => P_FLOW_ID,
            P_SHARED_QUERY_ID => P_REPORT_QUERY_ID,
            P_SQL_STATEMENT   => P_SOURCE_QUERIES(I));
 
    END LOOP;
 
 END;
 
 
 
 
 PROCEDURE CREATE_CALENDAR_PAGE (
   P_FLOW_ID                    IN NUMBER,
   P_PAGE_ID                    IN NUMBER,
   P_PAGE_NAME                  IN VARCHAR2,
   P_GROUP_NAME                 IN VARCHAR2 DEFAULT NULL,
   P_PAGE_MODE                  IN VARCHAR2,
   P_USER_INTERFACE_ID          IN NUMBER,
   P_REGION_TEMPLATE            IN NUMBER,
   P_REGION_NAME                IN VARCHAR2 DEFAULT NULL,
   
   P_TAB_SET                    IN VARCHAR2 DEFAULT NULL,
   P_TAB_NAME                   IN VARCHAR2 DEFAULT NULL, 
   P_TAB_TEXT                   IN VARCHAR2 DEFAULT NULL,
   
   P_NAV_LIST_ID                IN NUMBER   DEFAULT NULL,
   P_NAV_LIST_ITEM_ID           IN NUMBER   DEFAULT NULL,
   P_NAV_LIST_ITEM_NAME         IN VARCHAR2 DEFAULT NULL,
   P_NAV_LIST_PARENT_ITEM_ID    IN NUMBER   DEFAULT NULL,
   P_NAV_LIST_CHILD_ITEM_NAME   IN VARCHAR2 DEFAULT NULL,
   
   P_OWNER                      IN VARCHAR2 DEFAULT NULL,
   P_TABLE                      IN VARCHAR2 DEFAULT 'EMP',
   
   P_SQL                        IN VARCHAR2 DEFAULT NULL,
   P_CALENDAR_TYPE              IN VARCHAR2 DEFAULT WWV_FLOW_REGION_NATIVE.C_CALENDAR,
   
   P_DATE_COLUMN                IN VARCHAR2 DEFAULT 'HIREDATE',
   P_END_DATE_COLUMN            IN VARCHAR2 DEFAULT NULL,
   P_DISPLAY_COLUMN             IN VARCHAR2 DEFAULT NULL,
   P_DISPLAY_TYPE               IN VARCHAR2 DEFAULT NULL,
   P_INCLUDE_CUSTOM_CAL         IN VARCHAR2 DEFAULT NULL,
   P_PRIMARY_KEY_COLUMN         IN VARCHAR2 DEFAULT NULL,
   P_DRAG_DROP_REQUIRED_ROLE    IN VARCHAR2 DEFAULT NULL,
   P_DRAG_DROP_PROCESS_ID       IN NUMBER   DEFAULT NULL,
   P_ITEM_LINK_PRIMARY_KEY_ITEM IN VARCHAR2 DEFAULT NULL,
   P_ITEM_LINK_DATE_ITEM        IN VARCHAR2 DEFAULT NULL,
   P_ITEM_LINK_OPEN_IN          IN VARCHAR2 DEFAULT NULL,
   P_INCLUDE_TIME_WITH_DATE     IN VARCHAR2 DEFAULT 'N',
   P_DATA_BACKGROUND_COLOR      IN VARCHAR2 DEFAULT NULL,
   P_DATA_TEXT_COLOR            IN VARCHAR2 DEFAULT NULL,
   P_ITEM_LINK                  IN VARCHAR2 DEFAULT NULL,
   P_ENABLE_DRAG_AND_DROP       IN VARCHAR2 DEFAULT 'N',
   P_ENABLE_MONTHLY             IN VARCHAR2 DEFAULT 'Y',
   P_ENABLE_WEEKLY              IN VARCHAR2 DEFAULT 'Y',
   P_ENABLE_DAILY               IN VARCHAR2 DEFAULT 'Y',
   P_ENABLE_AGENDA              IN VARCHAR2 DEFAULT 'Y',
   P_ADD_CREATE_BUTTON          IN VARCHAR2 DEFAULT 'N',
   P_CREATE_URL                 IN VARCHAR2 DEFAULT NULL,
   P_IS_JQM_USER_INTERFACE      IN BOOLEAN  DEFAULT FALSE,
   P_BUTTON_REGION_ID           IN NUMBER   DEFAULT NULL)
 IS
   L_REGION                   NUMBER := WWV_FLOW_ID.NEXT_VAL;
   L_ON_DEMAND_PROCESS_ID     NUMBER;
   L_GROUP_ID                 NUMBER := NULL;
 BEGIN
    
    
    
   WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
       P_FLOW_ID           => P_FLOW_ID,
       P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
    
    
    
    IF NOT PAGE_EXISTS (P_FLOW_ID,P_PAGE_ID) THEN
 
        
        
        
        IF P_GROUP_NAME IS NOT NULL THEN
            L_GROUP_ID := WWV_FLOW_UTILITIES.GET_PAGE_GROUP_ID(P_GROUP_NAME => P_GROUP_NAME, P_APPLICATION_ID => P_FLOW_ID);
            
            IF L_GROUP_ID IS NULL THEN
                L_GROUP_ID := WWV_FLOW_ID.NEXT_VAL;
                WWV_FLOW_API.CREATE_PAGE_GROUP(P_ID => L_GROUP_ID, P_FLOW_ID => P_FLOW_ID, P_GROUP_NAME => P_GROUP_NAME);
            END IF;
        END IF;
 
        WWV_FLOW_API.CREATE_PAGE(
          P_ID                  => P_PAGE_ID,
          P_FLOW_ID             => P_FLOW_ID,
          P_TAB_SET             => REPLACE(P_TAB_SET,'%null%',NULL),
          P_NAME                => P_PAGE_NAME,
          P_PAGE_MODE           => P_PAGE_MODE,
          P_GROUP_ID            => L_GROUP_ID,
          P_USER_INTERFACE_ID   => P_USER_INTERFACE_ID,
          P_STEP_TITLE          => P_PAGE_NAME,
          P_STEP_SUB_TITLE      => P_PAGE_NAME,
          P_STEP_SUB_TITLE_TYPE => 'TEXT_WITH_SUBSTITUTIONS',
          P_WELCOME_TEXT        => '',
          P_BOX_WELCOME_TEXT    => '',
          P_BOX_FOOTER_TEXT     => '',
          P_FOOTER_TEXT         => '',
          P_STEP_TEMPLATE       => '',
          P_PAGE_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_PAGE_TEMPLATE, 'PAGE'),
          P_BOX_IMAGE           => '',
          P_REQUIRED_ROLE      => '',
          P_PAGE_COMMENT       => NULL);
 
        IF P_NAV_LIST_ID IS NOT NULL THEN
            
            CREATE_NAVIGATION_LIST_ITEM (
                P_FLOW_ID                  => P_FLOW_ID,
                P_PAGE_ID                  => P_PAGE_ID,
                P_PAGE_NAME                => P_PAGE_NAME,
                P_NAV_LIST_ID              => P_NAV_LIST_ID,
                P_NAV_LIST_ITEM_ID         => P_NAV_LIST_ITEM_ID,
                P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_ITEM_NAME,
                P_NAV_LIST_PARENT_ITEM_ID  => P_NAV_LIST_PARENT_ITEM_ID,
                P_NAV_LIST_CHILD_ITEM_NAME => P_NAV_LIST_CHILD_ITEM_NAME
             );
        ELSE
            
            IF REPLACE(P_TAB_SET,'%null%',NULL) IS NOT NULL THEN
               CREATE_TAB (
                   P_FLOW_ID  => P_FLOW_ID,
                   P_PAGE_ID  => P_PAGE_ID,
                   P_TAB_SET  => P_TAB_SET,
                   P_TAB_NAME => P_TAB_NAME,
                   P_TAB_TEXT => P_TAB_TEXT);
            END IF;
        END IF;
    END IF;
 
    IF P_ENABLE_DRAG_AND_DROP = 'Y' AND P_DRAG_DROP_PROCESS_ID IS NULL THEN
        L_ON_DEMAND_PROCESS_ID := WWV_FLOW_CALENDAR_DEV.CREATE_ON_DEMAND_PROCESS(
                                        P_FLOW_ID         => P_FLOW_ID,
                                        P_PLUG_ID         => P_PAGE_ID,
                                        P_SQL             => P_SQL,
                                        P_PRIMARY_KEY_COL => P_PRIMARY_KEY_COLUMN,
                                        P_DATE_COL        => P_DATE_COLUMN);
 
    END IF;
 
    WWV_FLOW_API.CREATE_CALENDAR (
        P_ID                            => L_REGION,
        P_FLOW_ID                       => P_FLOW_ID,
        P_PAGE_ID                       => P_PAGE_ID,
        P_PLUG_NAME                     => P_REGION_NAME,
        P_PLUG_TEMPLATE                 => P_REGION_TEMPLATE,
        P_PLUG_DISPLAY_SEQUENCE         => '10',
        P_PLUG_DISPLAY_POINT            => 'BODY',
        P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
        P_PLUG_SOURCE                   =>  P_SQL,
        P_PLUG_SOURCE_TYPE              =>  P_CALENDAR_TYPE,
        P_DATE_ITEM                     => 'P'||P_PAGE_ID||'_CALENDAR_DATE',
        P_END_DATE_ITEM                 => 'P'||P_PAGE_ID||'_CALENDAR_END_DATE',
        P_DISPLAY_ITEM                  => 'P'||P_PAGE_ID||'_CALENDAR_DISPLAY',
        P_DATE_TYPE_COLUMN              => 'P'||P_PAGE_ID||'_CALENDAR_TYPE',
        P_DISPLAY_AS                    => 'M',
        P_EASY_SQL_OWNER                => P_OWNER,
        P_EASY_SQL_TABLE                => P_TABLE,
        P_DATE_COLUMN                   => P_DATE_COLUMN,
        P_END_DATE_COLUMN               => P_END_DATE_COLUMN,
        P_DISPLAY_COLUMN                => P_DISPLAY_COLUMN,
        P_CALENDAR_TYPE                 => P_DISPLAY_TYPE,
        P_ITEM_LINK                     => P_ITEM_LINK,
        P_INCLUDE_CUSTOM_CAL            => P_INCLUDE_CUSTOM_CAL,
        P_PRIMARY_KEY_COLUMN            => P_PRIMARY_KEY_COLUMN,
        P_DRAG_DROP_REQUIRED_ROLE       => P_DRAG_DROP_REQUIRED_ROLE,
        P_DRAG_DROP_PROCESS_ID          => NVL(P_DRAG_DROP_PROCESS_ID,L_ON_DEMAND_PROCESS_ID),
        P_ITEM_LINK_PRIMARY_KEY_ITEM    => P_ITEM_LINK_PRIMARY_KEY_ITEM,
        P_ITEM_LINK_DATE_ITEM           => P_ITEM_LINK_DATE_ITEM,
        P_ITEM_LINK_OPEN_IN             => P_ITEM_LINK_OPEN_IN,
        P_INCLUDE_TIME_WITH_DATE        => P_INCLUDE_TIME_WITH_DATE,
        P_DATA_BACKGROUND_COLOR         => P_DATA_BACKGROUND_COLOR,
        P_DATA_TEXT_COLOR               => P_DATA_TEXT_COLOR,
        P_TEMPLATE_ID                   => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_CALENDAR_TEMPLATE);
 
    WWV_FLOW_CALENDAR_DEV.CREATE_WIZARD_ELEMENTS(
         P_FLOW_ID                    => P_FLOW_ID,
         P_PAGE_ID                    => P_PAGE_ID,
         P_REGION_ID                  => L_REGION,
         P_DATE_ITEM_NAME             => 'P'||P_PAGE_ID||'_CALENDAR_DATE',
         P_END_DATE_ITEM_NAME         => 'P'||P_PAGE_ID||'_CALENDAR_END_DATE',
         P_DISPLAY_ITEM_NAME          => 'P'||P_PAGE_ID||'_CALENDAR_DISPLAY',
         P_BUTTONS                    => NULL,
         P_BUTTON_TEMPLATE            => NULL,
         P_DATE_ITEM_TYPE_NAME        => 'P'||P_PAGE_ID||'_CALENDAR_TYPE',
         P_IS_AJAX_CALENDAR           => P_DISPLAY_TYPE,
         P_INCLUDE_CUSTOM_CAL         => P_INCLUDE_CUSTOM_CAL,
         P_ENABLE_MONTHLY             => P_ENABLE_MONTHLY,
         P_ENABLE_WEEKLY              => P_ENABLE_WEEKLY,
         P_ENABLE_DAILY               => P_ENABLE_DAILY,
         P_ENABLE_AGENDA              => P_ENABLE_AGENDA,
         P_ADD_CREATE_BUTTON          => P_ADD_CREATE_BUTTON,
         P_CREATE_URL                 => P_CREATE_URL,
         P_IS_JQM_USER_INTERFACE      => P_IS_JQM_USER_INTERFACE,
         P_BUTTON_REGION_ID           => P_BUTTON_REGION_ID,
         P_USER_INTERFACE_ID          => P_USER_INTERFACE_ID);
 EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(-20001,
                           WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.CREATE_CALENDAR_PAGE',SQLERRM)
                           );
 END CREATE_CALENDAR_PAGE;
 
 
 
 
 
 FUNCTION GENERATE_UPDATABLE_RPT_QUERY (
   
   
   
   
   
   
   
   P_SELECT_COLUMNS     IN VARCHAR2 DEFAULT NULL,
   P_UPDATABLE_COLUMNS  IN VARCHAR2 DEFAULT NULL,
   P_WHERE              IN VARCHAR2 DEFAULT NULL,
   P_TABLE_OWNER        IN VARCHAR2 DEFAULT NULL,
   P_TABLE_NAME         IN VARCHAR2 DEFAULT NULL,
   P_TABLE_PK1          IN VARCHAR2 DEFAULT NULL,
   P_TABLE_PK2          IN VARCHAR2 DEFAULT NULL,
   P_TABLE_PK3          IN VARCHAR2 DEFAULT NULL,
   P_TABLE_FK           IN VARCHAR2 DEFAULT NULL,
   P_TABLE_FK_SRC_TYPE  IN VARCHAR2 DEFAULT NULL,
   P_TABLE_FK_SRC       IN VARCHAR2 DEFAULT NULL,
   P_IMPLEMENT_TYPE     IN NUMBER   DEFAULT NULL )
   RETURN VARCHAR2
 IS
   Q VARCHAR2(32767);
   C WWV_FLOW_GLOBAL.VC_ARR2;
   J INT := 0;
 BEGIN
 
    C := WWV_FLOW_UTILITIES.STRING_TO_TABLE2(P_SELECT_COLUMNS);
    Q := 'select '||WWV_FLOW.LF;
    IF P_IMPLEMENT_TYPE = 1 THEN
      
      
      
 
      
      IF P_TABLE_PK1 IS NOT NULL THEN
        Q := Q||'"'||P_TABLE_PK1||'",'||WWV_FLOW.LF;
      END IF;
      IF P_TABLE_PK2 IS NOT NULL THEN
        Q := Q||'"'||P_TABLE_PK2||'",'||WWV_FLOW.LF;
      END IF;
      IF P_TABLE_PK3 IS NOT NULL THEN
        Q := Q||'"'||P_TABLE_PK3||'",'||WWV_FLOW.LF;
      END IF;
      IF P_TABLE_FK IS NOT NULL AND INSTR(Q,'"'||P_TABLE_FK||'"')=0 THEN
        Q := Q||'"'||P_TABLE_FK||'",'||WWV_FLOW.LF;
      END IF;
 
      FOR J IN 1..C.COUNT LOOP
         IF J > 1 THEN Q := Q||','||WWV_FLOW.LF; END IF;
         
         IF WWV_FLOW_UTILITIES.IS_VALID_ALIAS(C(J)) AND LENGTH(C(J))<24 THEN
             IF C(J) = P_TABLE_PK1 THEN
               Q := Q||'"'||C(J)||'" '||UPPER(C(J))||'_DISPLAY';
             ELSIF C(J) = P_TABLE_PK2 THEN
               Q := Q||'"'||C(J)||'" '||UPPER(C(J))||'_DISPLAY';
             ELSIF C(J) = P_TABLE_PK3 THEN
                   Q := Q||'"'||C(J)||'" '||UPPER(C(J))||'_DISPLAY';
             ELSIF C(J) = P_TABLE_FK THEN
               Q := Q||'"'||C(J)||'" '||UPPER(C(J))||'_DISPLAY';
             ELSE
               Q := Q||'"'||C(J)||'"';
             END IF;
         ELSE
             IF C(J) = P_TABLE_PK1 THEN
               Q := Q||'"'||C(J)||'" pk1_DISPLAY';
             ELSIF C(J) = P_TABLE_PK2 THEN
               Q := Q||'"'||C(J)||'" pk2_DISPLAY';
             ELSIF C(J) = P_TABLE_PK3 THEN
                   Q := Q||'"'||C(J)||'" pk3_DISPLAY';
             ELSIF C(J) = P_TABLE_FK THEN
               Q := Q||'"'||C(J)||'" fk_DISPLAY';
             ELSE
               Q := Q||'"'||C(J)||'"';
             END IF;
         END IF;
 
      END LOOP;
    ELSE
      
      
      
      FOR I IN 1..C.COUNT LOOP
        IF INSTR(':'||P_UPDATABLE_COLUMNS||':',':'||C(I)||':') > 0 AND J<20 THEN
           J := J + 1;
           IF J = 1 THEN
              Q := Q||'  wwv_flow_item.hidden('||J||',"'||P_TABLE_PK1||'")||'||WWV_FLOW.LF;
              J := J + 1;
              IF P_TABLE_PK2 IS NOT NULL THEN
                Q := Q||'  wwv_flow_item.hidden('||J||',"'||P_TABLE_PK2||'")||'||WWV_FLOW.LF;
                J := J + 1;
              END IF;
              IF P_TABLE_PK3 IS NOT NULL THEN
                 Q := Q||'  wwv_flow_item.hidden('||J||',"'||P_TABLE_PK3||'")||'||WWV_FLOW.LF;
                 J := J + 1;
              END IF;
              IF P_TABLE_FK IS NOT NULL THEN
                 Q := Q||'  wwv_flow_item.hidden('||J||',"'||P_TABLE_FK||'")||'||WWV_FLOW.LF;
                 J := J + 1;
              END IF;
           END IF;
           Q := Q||'  wwv_flow_item.text('||J||',"'||C(I)||'") "'||C(I)||'", '||WWV_FLOW.LF;
        ELSE
           Q := Q||'  "'||C(I)||'", '||WWV_FLOW.LF;
        END IF;
      END LOOP;
    END IF;
 
    Q := RTRIM(Q,', '||WWV_FLOW.LF)||WWV_FLOW.LF;
    IF P_TABLE_OWNER = GET_FLOW_OWNER THEN
       Q := Q||'from "#OWNER#"."'||P_TABLE_NAME||'"'||WWV_FLOW.LF;
    ELSE
       Q := Q||'from "'||P_TABLE_OWNER||'"."'||P_TABLE_NAME||'"'||WWV_FLOW.LF;
    END IF;
 
    IF P_WHERE IS NOT NULL THEN
        Q := Q||'where '||P_WHERE||WWV_FLOW.LF;
        IF P_TABLE_FK IS NOT NULL THEN
            IF P_TABLE_FK_SRC_TYPE = 'ITEM' THEN
                Q := Q||'and "'||P_TABLE_FK||'" = '||GET_ITEM_BIND_VARIABLE(P_TABLE_FK_SRC)||WWV_FLOW.LF;
            ELSIF P_TABLE_FK_SRC_TYPE = 'FUNCTION' THEN
                Q := Q||'and "'||P_TABLE_FK||'" = '||P_TABLE_FK_SRC||WWV_FLOW.LF;
            END IF;
        END IF;
    ELSE
        IF P_TABLE_FK IS NOT NULL THEN
            IF P_TABLE_FK_SRC_TYPE = 'ITEM' THEN
                Q := Q||'where "'||P_TABLE_FK||'" = '||GET_ITEM_BIND_VARIABLE(P_TABLE_FK_SRC)||WWV_FLOW.LF;
            ELSIF P_TABLE_FK_SRC_TYPE = 'FUNCTION' THEN
                Q := Q||'where "'||P_TABLE_FK||'" = '||P_TABLE_FK_SRC||WWV_FLOW.LF;
            END IF;
        END IF;
    END IF;
    RETURN Q;
 END GENERATE_UPDATABLE_RPT_QUERY;
 
 
 
 
 
 PROCEDURE CREATE_FORM_ON_EQUIJOIN (
   P_FLOW_ID                  IN NUMBER,
   P_PAGE_ID                  IN NUMBER,
   P_PAGE_NAME                IN VARCHAR2,
   P_GROUP_NAME               IN VARCHAR2 DEFAULT NULL,
   P_PAGE_MODE                IN VARCHAR2,
   P_USER_INTERFACE_ID        IN NUMBER,
   
   P_TAB_SET                  IN VARCHAR2 DEFAULT NULL,
   P_TAB_NAME                 IN VARCHAR2 DEFAULT NULL, 
   P_TAB_TEXT                 IN VARCHAR2 DEFAULT NULL,
   
   P_NAV_LIST_ID              IN NUMBER   DEFAULT NULL,
   P_NAV_LIST_ITEM_ID         IN NUMBER   DEFAULT NULL,
   P_NAV_LIST_ITEM_NAME       IN VARCHAR2 DEFAULT NULL,
   P_NAV_LIST_PARENT_ITEM_ID  IN NUMBER   DEFAULT NULL,
   P_NAV_LIST_CHILD_ITEM_NAME IN VARCHAR2 DEFAULT NULL,
   
   P_REGION_TITLE             IN VARCHAR2 DEFAULT NULL,
   P_REGION_TEMPLATE          IN NUMBER,
   P_STATEMENT                IN VARCHAR2,
   P_CANCEL_BRANCH            IN NUMBER,
   P_BRANCH                   IN NUMBER,
   P_CANCEL_BUTTON_NAME       IN VARCHAR2 DEFAULT 'Cancel',
   P_CREATE_BUTTON_NAME       IN VARCHAR2 DEFAULT 'Create',
   P_SAVE_BUTTON_NAME         IN VARCHAR2 DEFAULT 'Save',
   P_DELETE_BUTTON_NAME       IN VARCHAR2 DEFAULT 'Delete',
   P_USE_UI_DEFAULTS          IN VARCHAR2 DEFAULT NULL)
 AS
   L_BUTTON_REGION_ID          NUMBER;
   L_REGION_TEMPLATE           NUMBER;
   L_BUTTON_REGION_TEMPLATE    NUMBER;
   L_GROUP_ID                  NUMBER         := NULL;
   L_DISPLAY_AS                VARCHAR2(100)  := 'TEXT';
   L_REGION_TEMPLATE_OPTIONS   VARCHAR2(255);
   L_PROMPT                    VARCHAR2(1000);
   L_SHORTCUT_NAME             VARCHAR2(1000) := 'DELETE_CONFIRM_MSG';
   L_SHORTCUT                  VARCHAR2(1000);
   L_BUTTON_IMAGE              VARCHAR2(4000);
   L_BUTTON_TEMPLATE_OPTIONS   VARCHAR2(255);
 
 BEGIN
   
   
   
   WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
       P_FLOW_ID           => P_FLOW_ID,
       P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
   IF P_USE_UI_DEFAULTS = 'N' THEN
       WWV_FLOW_HINT.G_USE_UI_DEFAULTS := FALSE;
   END IF;
 
   
   
   
   IF NOT PAGE_EXISTS (P_FLOW_ID,P_PAGE_ID) THEN
 
        
        
        
        IF P_GROUP_NAME IS NOT NULL THEN
            L_GROUP_ID := WWV_FLOW_UTILITIES.GET_PAGE_GROUP_ID(P_GROUP_NAME => P_GROUP_NAME, P_APPLICATION_ID => P_FLOW_ID);
            
            IF L_GROUP_ID IS NULL THEN
                L_GROUP_ID := WWV_FLOW_ID.NEXT_VAL;
                WWV_FLOW_API.CREATE_PAGE_GROUP(P_ID => L_GROUP_ID, P_FLOW_ID => P_FLOW_ID, P_GROUP_NAME => P_GROUP_NAME);
            END IF;
        END IF;
 
        WWV_FLOW_API.CREATE_PAGE (
            P_ID                 => P_PAGE_ID,
            P_FLOW_ID            => P_FLOW_ID,
            P_TAB_SET            => REPLACE(P_TAB_SET,'%null%',NULL),
            P_NAME               => P_PAGE_NAME,
            P_PAGE_MODE          => P_PAGE_MODE,
            P_GROUP_ID           => L_GROUP_ID,
            P_USER_INTERFACE_ID  => P_USER_INTERFACE_ID,
            P_FIRST_ITEM         => 'NO_FIRST_ITEM',
            P_STEP_TITLE         => P_PAGE_NAME,
            P_STEP_SUB_TITLE     => NULL,
            P_STEP_TEMPLATE      => NULL,
            P_PAGE_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_PAGE_TEMPLATE, 'PAGE'),
            P_WELCOME_TEXT       => NULL,
            P_BOX_WELCOME_TEXT   => NULL,
            P_BOX_FOOTER_TEXT    => NULL,
            P_FOOTER_TEXT        => NULL,
            P_PAGE_COMMENT       => NULL);
 
         IF P_NAV_LIST_ID IS NOT NULL THEN
             
             CREATE_NAVIGATION_LIST_ITEM (
                 P_FLOW_ID                  => P_FLOW_ID,
                 P_PAGE_ID                  => P_PAGE_ID,
                 P_PAGE_NAME                => P_PAGE_NAME,
                 P_NAV_LIST_ID              => P_NAV_LIST_ID,
                 P_NAV_LIST_ITEM_ID         => P_NAV_LIST_ITEM_ID,
                 P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_ITEM_NAME,
                 P_NAV_LIST_PARENT_ITEM_ID  => P_NAV_LIST_PARENT_ITEM_ID,
                 P_NAV_LIST_CHILD_ITEM_NAME => P_NAV_LIST_CHILD_ITEM_NAME);
         ELSE
              
              IF REPLACE(P_TAB_SET,'%null%',NULL) IS NOT NULL THEN
                  CREATE_TAB (
                      P_FLOW_ID  => P_FLOW_ID,
                      P_PAGE_ID  => P_PAGE_ID,
                      P_TAB_SET  => P_TAB_SET,
                      P_TAB_NAME => P_TAB_NAME,
                      P_TAB_TEXT => P_TAB_TEXT);
              END IF;
        END IF;
   END IF;
 
 
   
   
   
   L_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
 
   
   L_REGION_TEMPLATE := CASE
                          WHEN P_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL
                          THEN NVL(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_DIALOGR_TEMPLATE,P_REGION_TEMPLATE)
                          ELSE P_REGION_TEMPLATE
                        END;
 
   L_REGION_TEMPLATE_OPTIONS :=  GET_PRESET_TEMPLATE_OPTIONS (
                                     P_TEMPLATE_ID    => L_REGION_TEMPLATE,
                                     P_TEMPLATE_TYPE  => 'REGION');
 
   WWV_FLOW_API.CREATE_PAGE_PLUG (
      P_ID                            => L_REGION_ID,
      P_FLOW_ID                       => P_FLOW_ID,
      P_PAGE_ID                       => P_PAGE_ID,
      P_PLUG_NAME                     => P_REGION_TITLE,
      P_PLUG_TEMPLATE                 => L_REGION_TEMPLATE,
      P_REGION_TEMPLATE_OPTIONS       => L_REGION_TEMPLATE_OPTIONS,
      P_PLUG_DISPLAY_SEQUENCE         => '10',
      P_PLUG_DISPLAY_POINT            => 'BODY',
      P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
      P_PLUG_COMMENT                  => NULL);
 
   
   
   
   L_CANCEL_BUTTON_ID := WWV_FLOW_ID.NEXT_VAL;
   L_CREATE_BUTTON_ID := WWV_FLOW_ID.NEXT_VAL;
   L_SAVE_BUTTON_ID   := WWV_FLOW_ID.NEXT_VAL;
   L_DELETE_BUTTON_ID := WWV_FLOW_ID.NEXT_VAL;
 
   IF P_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN
       
       L_CANCEL_BUTTON_REDIRECT_URL := NULL;
       L_CANCEL_BUTTON_ACTION := WWV_FLOW_BUTTON.C_ACTION_DEFINED_BY_DA;
 
       
       
       
       L_BUTTON_REGION_ID       := WWV_FLOW_ID.NEXT_VAL;
       
       L_BUTTON_REGION_TEMPLATE := NVL(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_DIALOGBTNR_TEMPLATE,WWV_FLOW_THEME_GLOBALS.G_DEFAULT_REGION_TEMPLATE);
 
       WWV_FLOW_API.CREATE_PAGE_PLUG (
           P_ID                            => L_BUTTON_REGION_ID,
           P_FLOW_ID                       => P_FLOW_ID,
           P_PAGE_ID                       => P_PAGE_ID,
           P_PLUG_NAME                     => WWV_FLOW_LANG.SYSTEM_MESSAGE('LAYOUT.T_BUTTON'),
           P_PLUG_TEMPLATE                 => L_BUTTON_REGION_TEMPLATE,
           P_REGION_TEMPLATE_OPTIONS       => WWV_FLOW_WIZARD_API.GET_PRESET_TEMPLATE_OPTIONS(L_BUTTON_REGION_TEMPLATE,'REGION'),
           P_PLUG_DISPLAY_SEQUENCE         => 20,
           P_PLUG_DISPLAY_POINT            => WWV_FLOW_THEME_GLOBALS.G_DIALOGBTNR_DISPLAY_POINT,
           P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
           P_PLUG_SOURCE                   => NULL,
           P_PLUG_SOURCE_TYPE              => WWV_FLOW_REGION_NATIVE.C_STATIC,
           P_PLUG_COMMENT                  => NULL);
   ELSE
       IF P_CANCEL_BRANCH IS NOT NULL THEN
           L_CANCEL_BUTTON_REDIRECT_URL := 'f?p=&APP_ID.:'||P_CANCEL_BRANCH||':&SESSION.::&DEBUG.:::';
           L_CANCEL_BUTTON_ACTION := WWV_FLOW_BUTTON.C_ACTION_REDIRECT_PAGE;
       ELSE
           L_CANCEL_BUTTON_REDIRECT_URL := NULL;
           L_CANCEL_BUTTON_ACTION := WWV_FLOW_BUTTON.C_ACTION_SUBMIT;
       END IF;
 
       L_BUTTON_REGION_ID       := L_REGION_ID;
       L_BUTTON_REGION_TEMPLATE := L_REGION_TEMPLATE;
   END IF;
 
   IF WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE IS NOT NULL THEN
       L_BUTTON_IMAGE := 'template:'||WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE;
       L_BUTTON_TEMPLATE_OPTIONS :=  GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE,'BUTTON');
   END IF;
 
 
   WWV_FLOW_API.CREATE_PAGE_BUTTON (
       P_ID                     => L_CANCEL_BUTTON_ID,
       P_FLOW_ID                => P_FLOW_ID,
       P_FLOW_STEP_ID           => P_PAGE_ID,
       P_BUTTON_SEQUENCE        => '10',
       P_BUTTON_PLUG_ID         => L_BUTTON_REGION_ID,
       P_BUTTON_NAME            => 'CANCEL',
       P_BUTTON_IMAGE           => L_BUTTON_IMAGE,
       P_BUTTON_IMAGE_ALT       => P_CANCEL_BUTTON_NAME,
       P_BUTTON_TEMPLATE_OPTIONS=> L_BUTTON_TEMPLATE_OPTIONS,
       P_BUTTON_POSITION        => WWV_FLOW_THEME_MANAGER.GET_BUTTON_POSTION(
                                   P_TEMPLATE_ID => L_BUTTON_REGION_TEMPLATE,
                                   P_POSITION    => '#CLOSE#'),
       P_BUTTON_ALIGNMENT       => 'RIGHT',
       P_BUTTON_REDIRECT_URL    => L_CANCEL_BUTTON_REDIRECT_URL,
       P_BUTTON_ACTION          => L_CANCEL_BUTTON_ACTION,
       P_BUTTON_CONDITION       => NULL,
       P_BUTTON_CONDITION_TYPE  => NULL,
       P_BUTTON_IMAGE_ATTRIBUTES=> NULL,
       P_SECURITY_SCHEME        => NULL,
       P_REQUIRED_PATCH         => NULL);
 
   IF P_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN
       L_CANCEL_BUTTON_DA_ID := WWV_FLOW_ID.NEXT_VAL;
       WWV_FLOW_API.CREATE_PAGE_DA_EVENT(
           P_ID                      => L_CANCEL_BUTTON_DA_ID,
           P_FLOW_ID                 => P_FLOW_ID,
           P_PAGE_ID                 => P_PAGE_ID,
           P_NAME                    => WWV_FLOW_LANG.SYSTEM_MESSAGE('DA_NAME.NATIVE_DIALOG_CANCEL'),
           P_EVENT_SEQUENCE          => 10,
           P_TRIGGERING_ELEMENT_TYPE => 'BUTTON',
           P_TRIGGERING_BUTTON_ID    => L_CANCEL_BUTTON_ID,
           P_BIND_TYPE               => 'bind',
           P_BIND_EVENT_TYPE         => 'click');
 
       WWV_FLOW_API.CREATE_PAGE_DA_ACTION(
           P_EVENT_ID                => L_CANCEL_BUTTON_DA_ID,
           P_FLOW_ID                 => P_FLOW_ID,
           P_PAGE_ID                 => P_PAGE_ID,
           P_EVENT_RESULT            => 'TRUE',
           P_ACTION_SEQUENCE         => 10,
           P_EXECUTE_ON_PAGE_INIT    => 'N',
           P_ACTION                  => 'NATIVE_DIALOG_CANCEL',
           P_STOP_EXECUTION_ON_ERROR => 'Y');
   END IF;
 
   
   
   
 
   
   
   
   L_SHORTCUT := L_SHORTCUT_NAME;
   IF NOT SHORTCUT_EXIST(P_FLOW_ID=>P_FLOW_ID,P_SHORTCUT_NAME=>L_SHORTCUT_NAME) THEN
       L_SHORTCUT := GET_SHORTCUT_NAME(P_FLOW_ID=>P_FLOW_ID,P_SHORTCUT_NAME=>L_SHORTCUT_NAME);
 
     WWV_FLOW_API.CREATE_SHORTCUT (
         P_ID=> NULL,
         P_FLOW_ID=> P_FLOW_ID,
         P_SHORTCUT_NAME=> L_SHORTCUT,
         P_SHORTCUT_TYPE=> 'TEXT_ESCAPE_JS',
         P_SHORTCUT=> WWV_FLOW_LANG.SYSTEM_MESSAGE('DELETE_MSG'));
   END IF;
 
   UPDATE_JS_CODE_W_SHORTCUT (
       P_FLOW_ID             => P_FLOW_ID,
       P_PAGE_ID             => P_PAGE_ID,
       P_SHORTCUT_NAME       => L_SHORTCUT,
       P_ADD_JAVASCRIPT_CODE => 'var htmldb_delete_message=''"'||L_SHORTCUT||'"'';' );
 
   WWV_FLOW_API.CREATE_PAGE_BUTTON (
       P_ID                     => L_DELETE_BUTTON_ID,
       P_FLOW_ID                => P_FLOW_ID,
       P_FLOW_STEP_ID           => P_PAGE_ID,
       P_BUTTON_SEQUENCE        => '20',
       P_BUTTON_PLUG_ID         => L_BUTTON_REGION_ID,
       P_BUTTON_NAME            => 'DELETE',
       P_BUTTON_IMAGE           => L_BUTTON_IMAGE,
       P_BUTTON_IMAGE_ALT       => P_DELETE_BUTTON_NAME,
       P_BUTTON_TEMPLATE_OPTIONS=> L_BUTTON_TEMPLATE_OPTIONS,
       P_BUTTON_POSITION        => WWV_FLOW_THEME_MANAGER.GET_BUTTON_POSTION(
                                   P_TEMPLATE_ID => L_BUTTON_REGION_TEMPLATE,
                                   P_POSITION    => '#DELETE#'),
       P_BUTTON_ALIGNMENT       => 'RIGHT',
       P_BUTTON_EXECUTE_VALIDATIONS => 'N',
       P_BUTTON_REDIRECT_URL    => 'javascript:apex.confirm(htmldb_delete_message,''DELETE'');',
       P_BUTTON_ACTION          => WWV_FLOW_BUTTON.C_ACTION_REDIRECT_URL,
       P_BUTTON_CONDITION       => NULL,
       P_BUTTON_CONDITION_TYPE  => NULL,
       P_BUTTON_IMAGE_ATTRIBUTES=> NULL,
       P_SECURITY_SCHEME        => NULL,
       P_REQUIRED_PATCH         => NULL,
       P_DATABASE_ACTION        => 'DELETE');
 
 
   WWV_FLOW_API.CREATE_PAGE_BUTTON (
       P_ID                     => L_SAVE_BUTTON_ID,
       P_FLOW_ID                => P_FLOW_ID,
       P_FLOW_STEP_ID           => P_PAGE_ID,
       P_BUTTON_SEQUENCE        => '20',
       P_BUTTON_PLUG_ID         => L_BUTTON_REGION_ID,
       P_BUTTON_NAME            => 'SAVE',
       P_BUTTON_IMAGE           => L_BUTTON_IMAGE,
       P_BUTTON_IMAGE_ALT       => P_SAVE_BUTTON_NAME,
       P_BUTTON_TEMPLATE_OPTIONS=> L_BUTTON_TEMPLATE_OPTIONS,
       P_BUTTON_POSITION        => WWV_FLOW_THEME_MANAGER.GET_BUTTON_POSTION(
                                   P_TEMPLATE_ID => L_BUTTON_REGION_TEMPLATE,
                                   P_POSITION    => '#CHANGE#'),
       P_BUTTON_ALIGNMENT       => 'RIGHT',
       P_BUTTON_EXECUTE_VALIDATIONS => 'Y',
       P_BUTTON_REDIRECT_URL    => NULL,
       P_BUTTON_ACTION          => WWV_FLOW_BUTTON.C_ACTION_SUBMIT,
       P_BUTTON_CONDITION       => NULL,
       P_BUTTON_CONDITION_TYPE  => NULL,
       P_BUTTON_IMAGE_ATTRIBUTES=> NULL,
       P_SECURITY_SCHEME        => NULL,
       P_REQUIRED_PATCH         => NULL,
       P_DATABASE_ACTION        => 'UPDATE');
 
 
   WWV_FLOW_API.CREATE_PAGE_BUTTON (
       P_ID                     => L_CREATE_BUTTON_ID,
       P_FLOW_ID                => P_FLOW_ID,
       P_FLOW_STEP_ID           => P_PAGE_ID,
       P_BUTTON_SEQUENCE        => '20',
       P_BUTTON_PLUG_ID         => L_BUTTON_REGION_ID,
       P_BUTTON_NAME            => 'CREATE',
       P_BUTTON_IMAGE           => L_BUTTON_IMAGE,
       P_BUTTON_IMAGE_ALT       => P_CREATE_BUTTON_NAME,
       P_BUTTON_TEMPLATE_OPTIONS=> L_BUTTON_TEMPLATE_OPTIONS,
       P_BUTTON_POSITION        => WWV_FLOW_THEME_MANAGER.GET_BUTTON_POSTION(
                                   P_TEMPLATE_ID => L_BUTTON_REGION_TEMPLATE,
                                   P_POSITION    => '#CREATE#'),
       P_BUTTON_ALIGNMENT       => 'RIGHT',
       P_BUTTON_EXECUTE_VALIDATIONS => 'Y',
       P_BUTTON_REDIRECT_URL    => NULL,
       P_BUTTON_ACTION          => WWV_FLOW_BUTTON.C_ACTION_SUBMIT,
       P_BUTTON_CONDITION       => NULL,
       P_BUTTON_CONDITION_TYPE  => NULL,
       P_BUTTON_IMAGE_ATTRIBUTES=> NULL,
       P_SECURITY_SCHEME        => NULL,
       P_REQUIRED_PATCH         => NULL,
       P_DATABASE_ACTION        => 'INSERT');
 
   
   
   
   DECLARE
     L_REPORT_CURSOR    INTEGER;
     L_COL_CNT          NUMBER;
     L_DESC_TBL         SYS.DBMS_SQL.DESC_TAB2;
   BEGIN
     L_REPORT_CURSOR := GET_DBMS_SQL_CURSOR(P_STATEMENT, GET_FLOW_OWNER(P_FLOW_ID));
     SYS.DBMS_SQL.DESCRIBE_COLUMNS2(L_REPORT_CURSOR, L_COL_CNT, L_DESC_TBL );
     FOR I IN 1..L_COL_CNT LOOP
 
        WWV_FLOW_HINT.GET_AD_UI_DEFAULTS (
                 P_SGID         => WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID,
                 P_COLUMN_NAME  => L_DESC_TBL(I).COL_NAME);
 
       L_ITEM_ID   := WWV_FLOW_ID.NEXT_VAL;
       L_PROMPT    := NVL(WWV_FLOW_HINT.G_LABEL,L_DESC_TBL(I).COL_NAME);
       L_ITEM_NAME := GET_VALID_ITEM_NAME (
                          P_COLUMN_NAME => L_PROMPT,
                          P_PAGE_ID     => P_PAGE_ID );
 
       
       
       
       IF ( WWV_FLOW_BUILDER.IS_ITEM_NAME_USED(P_FLOW_ID, L_ITEM_NAME) ) THEN
          FOR J IN 1..100 LOOP
            IF ( WWV_FLOW_BUILDER.IS_ITEM_NAME_USED(P_FLOW_ID, L_ITEM_NAME||'_'||J) = FALSE) THEN
               L_ITEM_NAME := L_ITEM_NAME||'_'||J;
               EXIT;
            END IF;
          END LOOP;
       ELSE
          L_ITEM_NAME := L_ITEM_NAME;
       END IF;
 
       WWV_FLOW_API.CREATE_PAGE_ITEM (
           P_ID                     => L_ITEM_ID,
           P_FLOW_ID                => P_FLOW_ID,
           P_FLOW_STEP_ID           => P_PAGE_ID,
           P_NAME                   => L_ITEM_NAME,
           P_DATA_TYPE              => NVL(WWV_FLOW_HINT.G_FORM_DATA_TYPE,NULL),
           P_ACCEPT_PROCESSING      => NULL,
           P_ITEM_SEQUENCE          => TO_CHAR(10 * I),
           P_ITEM_PLUG_ID           => L_REGION_ID,
           P_USE_CACHE_BEFORE_DEFAULT  => 'YES',
           P_ITEM_DEFAULT           => NVL(WWV_FLOW_HINT.G_DEFAULT_VALUE,NULL),
           P_PROMPT                 => L_PROMPT,
           P_SOURCE                 => NULL,
           P_SOURCE_TYPE            => NULL,
           P_DISPLAY_AS             => L_DISPLAY_AS,
           P_CSIZE                  => 30,
           P_CMAXLENGTH             => NULL,
           P_CHEIGHT                => NVL(WWV_FLOW_HINT.G_FORM_DISPLAY_HEIGHT,NULL),
           P_IS_PERSISTENT          => NULL,
           P_FIELD_TEMPLATE         => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,
           P_ITEM_TEMPLATE_OPTIONS  => GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,'ITEM'),
           P_ITEM_COMMENT           => NULL,
           P_HELP_TEXT              => WWV_FLOW_HINT.G_HELP_TEXT);
     END LOOP;
 
     SYS.DBMS_SQL.CLOSE_CURSOR(L_REPORT_CURSOR);
   EXCEPTION WHEN OTHERS THEN
    IF SYS.DBMS_SQL.IS_OPEN(L_REPORT_CURSOR) THEN
      SYS.DBMS_SQL.CLOSE_CURSOR(L_REPORT_CURSOR);
    END IF;
    RAISE;
   END;
 
   
   
   
   IF P_BRANCH IS NOT NULL THEN
       L_BRANCH           := WWV_FLOW_ID.NEXT_VAL;
       WWV_FLOW_API.CREATE_PAGE_BRANCH (
           P_ID                    => L_BRANCH,
           P_FLOW_ID               => P_FLOW_ID,
           P_FLOW_STEP_ID          => P_PAGE_ID,
           P_BRANCH_ACTION         => 'f?p=&APP_ID.:'||P_BRANCH||':&SESSION.&success_msg=#SUCCESS_MSG#',
           P_BRANCH_POINT          => 'AFTER_PROCESSING',
           P_BRANCH_TYPE           => 'REDIRECT_URL',
           P_BRANCH_WHEN_BUTTON_ID => NULL,
           P_BRANCH_SEQUENCE       => '1',
           P_BRANCH_CONDITION_TYPE => '',
           P_BRANCH_CONDITION      => NULL,
           P_BRANCH_CONDITION_TEXT => NULL,
           P_REQUIRED_PATCH        => NULL,
           P_BRANCH_COMMENT        => NULL);
    END IF;
 
    
    IF P_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN
        WWV_FLOW_API.CREATE_PAGE_PROCESS(
            P_ID                      => NULL,
            P_FLOW_ID                 => P_FLOW_ID,
            P_FLOW_STEP_ID            => P_PAGE_ID,
            P_PROCESS_SEQUENCE        => 10,
            P_PROCESS_POINT           => 'AFTER_SUBMIT',
            P_PROCESS_TYPE            => WWV_FLOW_PROCESS_NATIVE.C_CLOSE_WINDOW,
            P_PROCESS_NAME            => 'Close Dialog',
            P_ERROR_DISPLAY_LOCATION  => WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION,
            P_PROCESS_WHEN            => 'CREATE,SAVE,DELETE',
            P_PROCESS_WHEN_TYPE       => 'REQUEST_IN_CONDITION');
    END IF;
 
 EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(-20001,
                           WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.CREATE_FORM_ON_EQUIJOIN',SQLERRM)
                           );
 END CREATE_FORM_ON_EQUIJOIN;
 
 
 
 
 PROCEDURE CREATE_WIZARD (
   P_FLOW_ID                  IN NUMBER,
   P_STEPS                    IN NUMBER,
   P_USER_INTERFACE_ID        IN NUMBER,
   P_PAGE_MODE                IN VARCHAR2,
   P_GROUP_NAME               IN VARCHAR2 DEFAULT NULL,
   
   P_TAB_TYPE                 IN VARCHAR2 DEFAULT NULL,
   P_TAB_SET                  IN VARCHAR2 DEFAULT NULL,
   P_TAB_NAME                 IN VARCHAR2 DEFAULT NULL,
   P_TAB_TEXT                 IN VARCHAR2 DEFAULT NULL,
   
   P_NAV_LIST_ID              IN NUMBER   DEFAULT NULL,
   P_NAV_LIST_ITEM_ID         IN NUMBER   DEFAULT NULL,
   P_NAV_LIST_ITEM_NAME       IN VARCHAR2 DEFAULT NULL,
   P_NAV_LIST_PARENT_ITEM_ID  IN NUMBER   DEFAULT NULL,
   P_NAV_LIST_CHILD_ITEM_NAME IN VARCHAR2 DEFAULT NULL,
   
   P_REGION_TEMPLATE          IN NUMBER,
   P_INFO_REGION              IN VARCHAR2 DEFAULT NULL,
   P_INFO_REGION_TEMPLATE     IN NUMBER   DEFAULT NULL,
   P_INFO_DEFAULT_TEXT        IN VARCHAR2 DEFAULT NULL,
   
   P_CANCEL_BRANCH            IN NUMBER   DEFAULT NULL,
   P_FINISH_BRANCH            IN NUMBER   DEFAULT NULL,
   P_CANCEL_BUTTON_NAME       IN VARCHAR2 DEFAULT 'Cancel',
   P_FINISH_BUTTON_NAME       IN VARCHAR2 DEFAULT 'Finish',
   P_PREVIOUS_BUTTON_NAME     IN VARCHAR2 DEFAULT 'Previous',
   P_NEXT_BUTTON_NAME         IN VARCHAR2 DEFAULT 'Next')
 AS
   
   L_PAGE_TEMPLATE        NUMBER := WWV_FLOW_THEME_GLOBALS.G_DEFAULT_PAGE_TEMPLATE;
 
   L_WIZ_TRAIN_REGION_ID  NUMBER;  
   L_ITEM_REGION_ID       NUMBER;  
   L_BUTTON_REGION_ID     NUMBER;  
 
   L_FINISH_BUTTON_ID     NUMBER := 0;
   L_NEXT_BUTTON_ID       NUMBER := 0;
   L_PREVIOUS_BUTTON_ID   NUMBER := 0;
   L_BUTTON_EVENT_ID      NUMBER := 0;
   L_GROUP_ID             NUMBER := NULL;
 
   L_BUTTON_IMAGE         VARCHAR2(4000);
   L_ICON_CSS_CLASSES     VARCHAR2(255);
 
   L_CANCEL_BUTTON_POS    VARCHAR2(255);
   L_FINISH_BUTTON_POS    VARCHAR2(255);
   L_PREVIOUS_BUTTON_POS  VARCHAR2(255);
   L_NEXT_BUTTON_POS      VARCHAR2(255);
 
   L_TAB_SET              VARCHAR2(1000);
   L_COUNT                NUMBER := 0;
   L_PAGES                WWV_FLOW_GLOBAL.VC_ARR2;
 
   L_TAB_ALSO_CURRENT_FOR_PAGES VARCHAR2(5000);
   L_PAGE_ID                    NUMBER;
   L_BUTTON_TEMPLATE_OPTIONS    VARCHAR2(255);
   L_DIALOG_HEIGHT              NUMBER := NULL;
 
   L_IS_UT                BOOLEAN := FALSE;
   L_WIZ_PROGRESS_LIST_ID NUMBER;
 
 BEGIN
   
   
   
   WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
       P_FLOW_ID           => P_FLOW_ID,
       P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
   
   IF WWV_FLOW_THEME_GLOBALS.G_THEME_IDENTIFIER = 'UNIVERSAL_THEME' THEN
       
       L_IS_UT := TRUE;
 
       CREATE_STATIC_LIST (
           P_ID       => L_WIZ_PROGRESS_LIST_ID,
           P_FLOW_ID  => P_FLOW_ID,
           P_NAME     => 'Wizard Progress List'
       );
 
       IF P_PAGE_MODE = 'MODAL' THEN
           L_PAGE_TEMPLATE := WWV_FLOW_THEME_GLOBALS.G_WIZ_MODAL_DIALOG_TEMPLATE;
           L_DIALOG_HEIGHT := 400;
       END IF;    
 
   END IF;    
 
   
   DECLARE
       I NUMBER := 0;
   BEGIN
       FOR C1 IN (
           SELECT C002 PAGE_ID
             FROM WWV_FLOW_COLLECTIONS
            WHERE COLLECTION_NAME = 'CREATE_WIZARD'
        ) LOOP
           I := I + 1;
           L_PAGES(I) := C1.PAGE_ID;
       END LOOP;
   END;
 
   G_NAV_LIST_ITEM_ID := NULL;
 
   FOR C IN (
       SELECT C002 PAGE_ID,
              C003 PAGE_NAME,
              C004 ITEM,
              C005 TABSET,
              C006 TAB_TEXT
         FROM WWV_FLOW_COLLECTIONS
        WHERE COLLECTION_NAME = 'CREATE_WIZARD'
   ) LOOP
 
       L_COUNT := L_COUNT + 1;
 
       
       
       
       IF P_GROUP_NAME IS NOT NULL THEN
           L_GROUP_ID := WWV_FLOW_UTILITIES.GET_PAGE_GROUP_ID(P_GROUP_NAME => P_GROUP_NAME, P_APPLICATION_ID => P_FLOW_ID);
           
           IF L_GROUP_ID IS NULL THEN
               L_GROUP_ID := WWV_FLOW_ID.NEXT_VAL;
               WWV_FLOW_API.CREATE_PAGE_GROUP(P_ID => L_GROUP_ID, P_FLOW_ID => P_FLOW_ID, P_GROUP_NAME => P_GROUP_NAME);
           END IF;
       END IF;
 
       
       
       
       IF NOT PAGE_EXISTS (P_FLOW_ID,C.PAGE_ID) THEN
 
           IF P_TAB_TYPE = 'ALL' THEN
               L_TAB_SET := P_TAB_SET;
           ELSIF P_TAB_TYPE = 'ONE' THEN
               L_TAB_SET := C.TABSET;
           END IF;
 
           WWV_FLOW_API.CREATE_PAGE (
               P_ID                 => C.PAGE_ID,
               P_FLOW_ID            => P_FLOW_ID,
               P_TAB_SET            => REPLACE(L_TAB_SET,'%null%',NULL),
               P_NAME               => C.PAGE_NAME,
               P_PAGE_MODE          => P_PAGE_MODE,
               P_DIALOG_HEIGHT      => L_DIALOG_HEIGHT,
               P_GROUP_ID           => L_GROUP_ID,
               P_USER_INTERFACE_ID  => P_USER_INTERFACE_ID,
               P_STEP_TEMPLATE      => L_PAGE_TEMPLATE,
               P_PAGE_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS(L_PAGE_TEMPLATE, 'PAGE'),
               P_FIRST_ITEM         => 'NO_FIRST_ITEM',
               P_STEP_TITLE         => C.PAGE_NAME,
               P_STEP_SUB_TITLE     => NULL,
               P_WELCOME_TEXT       => NULL,
               P_BOX_WELCOME_TEXT   => NULL,
               P_BOX_FOOTER_TEXT    => NULL,
               P_FOOTER_TEXT        => NULL,
               P_PAGE_COMMENT       => NULL);
 
           IF P_NAV_LIST_ID IS NOT NULL THEN
               
               CREATE_NAVIGATION_LIST_ITEM (
                   P_FLOW_ID                  => P_FLOW_ID,
                   P_PAGE_ID                  => C.PAGE_ID,
                   P_PAGE_NAME                => C.PAGE_NAME,
                   P_NAV_LIST_ID              => P_NAV_LIST_ID,
                   P_NAV_LIST_ITEM_ID         => CASE WHEN L_COUNT=1 THEN P_NAV_LIST_ITEM_ID ELSE NVL(P_NAV_LIST_ITEM_ID,G_NAV_LIST_ITEM_ID) END,
                   P_NAV_LIST_ITEM_NAME       => CASE WHEN L_COUNT=1 THEN P_NAV_LIST_ITEM_NAME ELSE NULL END,
                   P_NAV_LIST_PARENT_ITEM_ID  => CASE WHEN L_COUNT=1 THEN P_NAV_LIST_PARENT_ITEM_ID ELSE NULL END,
                   P_NAV_LIST_CHILD_ITEM_NAME => CASE WHEN L_COUNT=1 THEN P_NAV_LIST_CHILD_ITEM_NAME ELSE NULL END);
           ELSE
               
               
               IF P_TAB_TYPE = 'ALL' THEN
                   
                   IF P_TAB_NAME IS NOT NULL THEN
                       IF REPLACE(P_TAB_SET,'%null%',NULL) IS NOT NULL THEN
                           CREATE_TAB (
                               P_FLOW_ID  => P_FLOW_ID,
                               P_PAGE_ID  => C.PAGE_ID,
                               P_TAB_SET  => P_TAB_SET,
                               P_TAB_NAME => P_TAB_NAME);
                       END IF;
                   ELSE
                       
                       IF L_COUNT = 1 THEN
                           L_PAGE_ID := C.PAGE_ID;
                       END IF;
                       IF L_COUNT > 1 THEN
                           L_TAB_ALSO_CURRENT_FOR_PAGES := L_TAB_ALSO_CURRENT_FOR_PAGES||','||C.PAGE_ID;
                       END IF;
                       L_TAB_ALSO_CURRENT_FOR_PAGES := LTRIM(L_TAB_ALSO_CURRENT_FOR_PAGES,',');
                       
                       IF L_COUNT = P_STEPS THEN
                           IF REPLACE(P_TAB_SET,'%null%',NULL) IS NOT NULL THEN
                               CREATE_TAB (
                                   P_FLOW_ID  => P_FLOW_ID,
                                   P_PAGE_ID  => L_PAGE_ID,
                                   P_TAB_ALSO_CURRENT_FOR_PAGES => L_TAB_ALSO_CURRENT_FOR_PAGES,
                                   P_TAB_SET  => P_TAB_SET,
                                   P_TAB_TEXT => P_TAB_TEXT);
                           END IF;
                       END IF;
                   END IF;
               
               ELSIF P_TAB_TYPE = 'ONE' THEN
                   IF NOT TAB_EXISTS (
                              P_FLOW_ID       => P_FLOW_ID,
                              P_TAB_SET       => C.TABSET,
                              P_TAB_TEXT      => C.TAB_TEXT) THEN
                       IF REPLACE(C.TABSET,'%null%',NULL) IS NOT NULL THEN
                           CREATE_TAB (
                               P_FLOW_ID  => P_FLOW_ID,
                               P_PAGE_ID  => C.PAGE_ID,
                               P_TAB_SET  => C.TABSET,
                               P_TAB_TEXT => C.TAB_TEXT);
                       END IF;
                   END IF;
               END IF;
           END IF;
       END IF;
 
       
       
       
 
       L_WIZ_TRAIN_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
       L_ITEM_REGION_ID      := WWV_FLOW_ID.NEXT_VAL;
       L_BUTTON_REGION_ID    := WWV_FLOW_ID.NEXT_VAL;
       L_REGION_ID           := WWV_FLOW_ID.NEXT_VAL;
 
       IF L_IS_UT THEN
          
 
           CREATE_LINK_LIST_ITEM (
               P_LIST_ID     => L_WIZ_PROGRESS_LIST_ID,
               P_SEQ         => (L_COUNT * 10),
               P_LINK_TEXT   => WWV_FLOW_LANG.SYSTEM_MESSAGE('F400_P107_STEP', L_COUNT),
               P_TARGET_PAGE => C.PAGE_ID
           );
 
           IF P_PAGE_MODE = 'MODAL' THEN
 
               WWV_FLOW_API.CREATE_PAGE_PLUG (
                   P_ID                            => L_WIZ_TRAIN_REGION_ID,
                   P_FLOW_ID                       => P_FLOW_ID,
                   P_PAGE_ID                       => C.PAGE_ID,
                   P_PLUG_NAME                     => WWV_FLOW_LANG.SYSTEM_MESSAGE('WIZARD_PROGRESS'),
                   P_PLUG_TEMPLATE                 => NVL(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BLANK_REG_TEMPLATE, P_REGION_TEMPLATE),
                   P_REGION_TEMPLATE_OPTIONS       => GET_PRESET_TEMPLATE_OPTIONS (NVL(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BLANK_REG_TEMPLATE, P_REGION_TEMPLATE),'REGION'),
                   P_PLUG_DISPLAY_SEQUENCE         => '10',
                   P_PLUG_DISPLAY_POINT            => 'REGION_POSITION_01',
                   P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
                   P_LIST_ID                       => L_WIZ_PROGRESS_LIST_ID,
                   P_PLUG_SOURCE_TYPE              => 'NATIVE_LIST',
                   P_LIST_TEMPLATE_ID              => WWV_FLOW_THEME_GLOBALS.G_WIZ_TRAIN_LIST_TEMPLATE,
                   P_PLUG_COMMENT                  => NULL
               );          
 
               WWV_FLOW_API.CREATE_PAGE_PLUG (
                   P_ID                            => L_ITEM_REGION_ID,
                   P_FLOW_ID                       => P_FLOW_ID,
                   P_PAGE_ID                       => C.PAGE_ID,
                   P_PLUG_NAME                     => C.PAGE_NAME,
                   P_PLUG_TEMPLATE                 => NVL(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BLANK_REG_TEMPLATE, P_REGION_TEMPLATE),
                   P_REGION_TEMPLATE_OPTIONS       => GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BLANK_REG_TEMPLATE,'REGION'),
                   P_PLUG_DISPLAY_SEQUENCE         => '10',
                   P_PLUG_DISPLAY_POINT            => 'BODY',
                   P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
                   P_PLUG_COMMENT                  => NULL
               );   
 
               WWV_FLOW_API.CREATE_PAGE_PLUG (
                   P_ID                            => L_BUTTON_REGION_ID,
                   P_FLOW_ID                       => P_FLOW_ID,
                   P_PAGE_ID                       => C.PAGE_ID,
                   P_PLUG_NAME                     => WWV_FLOW_LANG.SYSTEM_MESSAGE('BUTTONS'),
                   P_PLUG_TEMPLATE                 => NVL(WWV_FLOW_THEME_GLOBALS.G_BUTTON_CONTAINER_TEMPLATE, P_REGION_TEMPLATE),
                   P_REGION_TEMPLATE_OPTIONS       => GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_BUTTON_CONTAINER_TEMPLATE,'REGION'),
                   P_PLUG_DISPLAY_SEQUENCE         => '10',
                   P_PLUG_DISPLAY_POINT            => 'REGION_POSITION_03',
                   P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
                   P_PLUG_COMMENT                  => NULL
               );              
           
           ELSE
 
               L_BUTTON_REGION_ID    := L_WIZ_TRAIN_REGION_ID;
 
               WWV_FLOW_API.CREATE_PAGE_PLUG (
                   P_ID                            => L_WIZ_TRAIN_REGION_ID,
                   P_FLOW_ID                       => P_FLOW_ID,
                   P_PAGE_ID                       => C.PAGE_ID,
                   P_PLUG_NAME                     => C.PAGE_NAME,
                   P_PLUG_TEMPLATE                 => NVL(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_CONTAINER_TEMPLATE, P_REGION_TEMPLATE),
                   P_REGION_TEMPLATE_OPTIONS       => GET_PRESET_TEMPLATE_OPTIONS (NVL(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_CONTAINER_TEMPLATE, P_REGION_TEMPLATE),'REGION'),
                   P_PLUG_DISPLAY_SEQUENCE         => '10',
                   P_PLUG_DISPLAY_POINT            => 'BODY',
                   P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
                   P_LIST_ID                       => L_WIZ_PROGRESS_LIST_ID,
                   P_PLUG_SOURCE_TYPE              => 'NATIVE_LIST',
                   P_LIST_TEMPLATE_ID              => WWV_FLOW_THEME_GLOBALS.G_WIZ_TRAIN_LIST_TEMPLATE,
                   P_PLUG_COMMENT                  => NULL
               );          
 
               WWV_FLOW_API.CREATE_PAGE_PLUG (
                   P_ID                            => L_ITEM_REGION_ID,
                   P_PARENT_PLUG_ID                => L_WIZ_TRAIN_REGION_ID,
                   P_FLOW_ID                       => P_FLOW_ID,
                   P_PAGE_ID                       => C.PAGE_ID,
                   P_PLUG_NAME                     => C.PAGE_NAME,
                   P_PLUG_TEMPLATE                 => NVL(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BLANK_REG_TEMPLATE, P_REGION_TEMPLATE),
                   P_REGION_TEMPLATE_OPTIONS       => GET_PRESET_TEMPLATE_OPTIONS (P_REGION_TEMPLATE,'REGION'),
                   P_PLUG_DISPLAY_SEQUENCE         => '10',
                   P_PLUG_DISPLAY_POINT            => 'BODY',
                   P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
                   P_PLUG_COMMENT                  => NULL
               );
 
           END IF;    
 
       ELSE    
 
           L_WIZ_TRAIN_REGION_ID := L_REGION_ID;
           L_ITEM_REGION_ID      := L_REGION_ID;
           L_BUTTON_REGION_ID    := L_REGION_ID;
 
           WWV_FLOW_API.CREATE_PAGE_PLUG (
               P_ID                            => L_REGION_ID,
               P_FLOW_ID                       => P_FLOW_ID,
               P_PAGE_ID                       => C.PAGE_ID,
               P_PLUG_NAME                     => C.PAGE_NAME,
               P_PLUG_TEMPLATE                 => NVL(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_WIZARD_TEMPLATE, P_REGION_TEMPLATE),
               P_REGION_TEMPLATE_OPTIONS       => GET_PRESET_TEMPLATE_OPTIONS (NVL(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_WIZARD_TEMPLATE, P_REGION_TEMPLATE),'REGION'),
               P_PLUG_DISPLAY_SEQUENCE         => '10',
               P_PLUG_DISPLAY_POINT            => 'BODY',
               P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
               P_PLUG_COMMENT                  => NULL
           );
 
       END IF;    
 
       
       
       
       IF P_INFO_REGION = 'Y' THEN
           WWV_FLOW_API.CREATE_PAGE_PLUG (
               P_FLOW_ID                       => P_FLOW_ID,
               P_PAGE_ID                       => C.PAGE_ID,
               P_PLUG_NAME                     => WWV_FLOW_LANG.SYSTEM_MESSAGE('F4050.INFORMATION'),
               P_PLUG_TEMPLATE                 => P_INFO_REGION_TEMPLATE,
               P_REGION_TEMPLATE_OPTIONS       => GET_PRESET_TEMPLATE_OPTIONS (P_INFO_REGION_TEMPLATE,'REGION'),
               P_PLUG_DISPLAY_SEQUENCE         => '10',
               P_PLUG_NEW_GRID_ROW             => FALSE,
               P_PLUG_DISPLAY_POINT            => 'BODY',
               P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
               P_PLUG_SOURCE                   => P_INFO_DEFAULT_TEXT,
               P_PLUG_COMMENT                  => NULL);
       END IF;
 
       
       FOR I IN 1..C.ITEM LOOP
           WWV_FLOW_API.CREATE_PAGE_ITEM (
               P_FLOW_ID                => P_FLOW_ID,
               P_FLOW_STEP_ID           => C.PAGE_ID,
               P_NAME                   => 'P'||C.PAGE_ID||'_ITEM'||I,
               P_DATA_TYPE              => NULL,
               P_ACCEPT_PROCESSING      => NULL,
               P_ITEM_SEQUENCE          => TO_CHAR(10 * I),
               P_ITEM_PLUG_ID           => L_ITEM_REGION_ID,
               P_USE_CACHE_BEFORE_DEFAULT  => 'YES',
               P_ITEM_DEFAULT           => NULL,
               P_PROMPT                 => 'ITEM '||I,
               P_SOURCE                 => NULL,
               P_SOURCE_TYPE            => NULL,
               P_DISPLAY_AS             => 'TEXT',
               P_CSIZE                  => 30,
               P_CMAXLENGTH             => NULL,
               P_CHEIGHT                => NULL,
               P_LABEL_ALIGNMENT        => 'RIGHT',
               P_IS_PERSISTENT          => NULL,
               P_FIELD_TEMPLATE         => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,
               P_ITEM_TEMPLATE_OPTIONS  => GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,'ITEM'),
               P_ITEM_COMMENT           => NULL);
       END LOOP;
       
       
       
       L_CANCEL_BUTTON_ID     := WWV_FLOW_ID.NEXT_VAL;
       L_FINISH_BUTTON_ID     := WWV_FLOW_ID.NEXT_VAL;
       L_PREVIOUS_BUTTON_ID   := WWV_FLOW_ID.NEXT_VAL;
       L_NEXT_BUTTON_ID       := WWV_FLOW_ID.NEXT_VAL;
 
       L_CANCEL_BUTTON_POS   := WWV_FLOW_THEME_MANAGER.GET_BUTTON_POSTION (
                                   P_TEMPLATE_ID  => NVL(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_CONTAINER_TEMPLATE, P_REGION_TEMPLATE),
                                   P_POSITION     => '#CLOSE#'
                                );
 
       L_FINISH_BUTTON_POS   := WWV_FLOW_THEME_MANAGER.GET_BUTTON_POSTION (
                                    P_TEMPLATE_ID => NVL(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_CONTAINER_TEMPLATE, P_REGION_TEMPLATE),
                                    P_POSITION    => '#NEXT#'
                                );
       
       L_PREVIOUS_BUTTON_POS := WWV_FLOW_THEME_MANAGER.GET_BUTTON_POSTION (
                                    P_TEMPLATE_ID => NVL(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_CONTAINER_TEMPLATE, P_REGION_TEMPLATE),
                                    P_POSITION    => '#PREVIOUS#'
                                );
       
       L_NEXT_BUTTON_POS     := WWV_FLOW_THEME_MANAGER.GET_BUTTON_POSTION (
                                    P_TEMPLATE_ID => NVL(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_CONTAINER_TEMPLATE, P_REGION_TEMPLATE),
                                    P_POSITION    => '#NEXT#'
                                );
 
       IF P_CANCEL_BRANCH IS NOT NULL THEN
           L_CANCEL_BUTTON_REDIRECT_URL := 'f?p=&APP_ID.:'||P_CANCEL_BRANCH||':&SESSION.::&DEBUG.:::';
           L_CANCEL_BUTTON_ACTION := WWV_FLOW_BUTTON.C_ACTION_REDIRECT_PAGE;
       ELSE
           L_CANCEL_BUTTON_REDIRECT_URL := NULL;
           L_CANCEL_BUTTON_ACTION := WWV_FLOW_BUTTON.C_ACTION_SUBMIT;
       END IF;
 
       IF WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE IS NOT NULL THEN
           L_BUTTON_IMAGE := 'template:'||WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE;
           L_BUTTON_TEMPLATE_OPTIONS :=  GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE,'BUTTON');
       END IF;
 
       IF P_PAGE_MODE = 'MODAL' THEN
           
           L_BUTTON_EVENT_ID := WWV_FLOW_ID.NEXT_VAL;
           
           WWV_FLOW_API.CREATE_PAGE_BUTTON (
               P_ID                     => L_CANCEL_BUTTON_ID,
               P_FLOW_ID                => P_FLOW_ID,
               P_FLOW_STEP_ID           => C.PAGE_ID,
               P_BUTTON_SEQUENCE        => '10',
               P_BUTTON_PLUG_ID         => L_BUTTON_REGION_ID,
               P_BUTTON_NAME            => 'CANCEL',
               P_BUTTON_IMAGE           => L_BUTTON_IMAGE,
               P_BUTTON_IMAGE_ALT       => P_CANCEL_BUTTON_NAME,
               P_BUTTON_TEMPLATE_OPTIONS=> L_BUTTON_TEMPLATE_OPTIONS,
               P_BUTTON_POSITION        => L_CANCEL_BUTTON_POS,
               P_BUTTON_ALIGNMENT       => 'RIGHT',
               P_BUTTON_ACTION          => 'DEFINED_BY_DA',
               P_BUTTON_CONDITION       => NULL,
               P_BUTTON_CONDITION_TYPE  => NULL,
               P_BUTTON_IMAGE_ATTRIBUTES=> NULL,
               P_SECURITY_SCHEME        => NULL,
               P_REQUIRED_PATCH         => NULL
           );
           
           WWV_FLOW_API.CREATE_PAGE_DA_EVENT(
               P_ID                      => L_BUTTON_EVENT_ID,
               P_FLOW_ID                 => P_FLOW_ID,
               P_PAGE_ID                 => C.PAGE_ID,
               P_NAME                    => 'Cancel Dialog',
               P_EVENT_SEQUENCE          => 10,
               P_TRIGGERING_ELEMENT_TYPE => 'BUTTON',
               P_TRIGGERING_BUTTON_ID    => L_CANCEL_BUTTON_ID,
               P_BIND_TYPE               => 'bind',
               P_BIND_EVENT_TYPE         => 'click'
           );
           
           WWV_FLOW_API.CREATE_PAGE_DA_ACTION(
               P_FLOW_ID                  => P_FLOW_ID,
               P_PAGE_ID                  => C.PAGE_ID,
               P_EVENT_ID                 => L_BUTTON_EVENT_ID,
               P_EVENT_RESULT             => 'TRUE',
               P_ACTION_SEQUENCE          => 10,
               P_EXECUTE_ON_PAGE_INIT     => 'N',
               P_ACTION                   => 'NATIVE_DIALOG_CANCEL',
               P_STOP_EXECUTION_ON_ERROR  => 'Y'
           );     
 
       ELSE
           WWV_FLOW_API.CREATE_PAGE_BUTTON (
               P_ID                     => L_CANCEL_BUTTON_ID,
               P_FLOW_ID                => P_FLOW_ID,
               P_FLOW_STEP_ID           => C.PAGE_ID,
               P_BUTTON_SEQUENCE        => '10',
               P_BUTTON_PLUG_ID         => L_BUTTON_REGION_ID,
               P_BUTTON_NAME            => 'CANCEL',
               P_BUTTON_IMAGE           => L_BUTTON_IMAGE,
               P_BUTTON_IMAGE_ALT       => P_CANCEL_BUTTON_NAME,
               P_BUTTON_TEMPLATE_OPTIONS=> L_BUTTON_TEMPLATE_OPTIONS,
               P_BUTTON_POSITION        => L_CANCEL_BUTTON_POS,
               P_BUTTON_ALIGNMENT       => 'RIGHT',
               P_BUTTON_REDIRECT_URL    => L_CANCEL_BUTTON_REDIRECT_URL,
               P_BUTTON_ACTION          => L_CANCEL_BUTTON_ACTION,
               P_BUTTON_CONDITION       => NULL,
               P_BUTTON_CONDITION_TYPE  => NULL,
               P_BUTTON_IMAGE_ATTRIBUTES=> NULL,
               P_SECURITY_SCHEME        => NULL,
               P_REQUIRED_PATCH         => NULL
           );        
       END IF;  
 
       IF L_COUNT > 1 THEN
           
           IF L_IS_UT THEN
               L_BUTTON_IMAGE := 'template:'||WWV_FLOW_THEME_GLOBALS.G_ICON_BUTTON_TEMPLATE;
               L_BUTTON_TEMPLATE_OPTIONS :=  GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_ICON_BUTTON_TEMPLATE,'BUTTON');
               L_ICON_CSS_CLASSES := 'fa-chevron-left';
           END IF;
 
           WWV_FLOW_API.CREATE_PAGE_BUTTON (
               P_ID                     => L_PREVIOUS_BUTTON_ID,
               P_FLOW_ID                => P_FLOW_ID,
               P_FLOW_STEP_ID           => C.PAGE_ID,
               P_BUTTON_SEQUENCE        => '20',
               P_BUTTON_PLUG_ID         => L_BUTTON_REGION_ID,
               P_BUTTON_NAME            => 'PREVIOUS',
               P_BUTTON_IMAGE           => L_BUTTON_IMAGE,
               P_BUTTON_IMAGE_ALT       => P_PREVIOUS_BUTTON_NAME,
               P_BUTTON_TEMPLATE_OPTIONS=> L_BUTTON_TEMPLATE_OPTIONS,
               P_ICON_CSS_CLASSES       => L_ICON_CSS_CLASSES,       
               P_BUTTON_POSITION        => L_PREVIOUS_BUTTON_POS,
               P_BUTTON_ALIGNMENT       => 'RIGHT',
               P_BUTTON_EXECUTE_VALIDATIONS => 'N',
               P_BUTTON_REDIRECT_URL    => NULL,
               P_BUTTON_ACTION           => WWV_FLOW_BUTTON.C_ACTION_SUBMIT,
               P_BUTTON_CONDITION       => NULL,
               P_BUTTON_CONDITION_TYPE  => NULL,
               P_BUTTON_IMAGE_ATTRIBUTES=> NULL,
               P_SECURITY_SCHEME        => NULL,
               P_REQUIRED_PATCH         => NULL);
           
          WWV_FLOW_API.CREATE_PAGE_BRANCH (
              P_FLOW_ID               => P_FLOW_ID,
              P_FLOW_STEP_ID          => C.PAGE_ID,
              P_BRANCH_ACTION         => 'f?p=&APP_ID.:'||L_PAGES(L_COUNT-1)||':&SESSION.&success_msg=#SUCCESS_MSG#',
              P_BRANCH_POINT          => 'BEFORE_VALIDATION',
              P_BRANCH_TYPE           => 'REDIRECT_URL',
              P_BRANCH_WHEN_BUTTON_ID => L_PREVIOUS_BUTTON_ID,
              P_BRANCH_SEQUENCE       => '10',
              P_BRANCH_CONDITION_TYPE => '',
              P_BRANCH_CONDITION      => NULL,
              P_BRANCH_CONDITION_TEXT => NULL,
              P_REQUIRED_PATCH        => NULL,
              P_BRANCH_COMMENT        => NULL);
       END IF;
 
       IF L_COUNT < P_STEPS THEN
           
           
           IF L_IS_UT THEN
               L_BUTTON_IMAGE := 'template:'||WWV_FLOW_THEME_GLOBALS.G_ICON_TEXT_BUTTON_TEMPLATE;
               L_BUTTON_TEMPLATE_OPTIONS :=  GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_ICON_TEXT_BUTTON_TEMPLATE,'BUTTON');
               L_ICON_CSS_CLASSES := 'fa-chevron-right';
           END IF;
 
           WWV_FLOW_API.CREATE_PAGE_BUTTON (
               P_ID                     => L_NEXT_BUTTON_ID,
               P_FLOW_ID                => P_FLOW_ID,
               P_FLOW_STEP_ID           => C.PAGE_ID,
               P_BUTTON_SEQUENCE        => '30',
               P_BUTTON_PLUG_ID         => L_BUTTON_REGION_ID,
               P_BUTTON_NAME            => 'NEXT',
               P_BUTTON_IS_HOT          => 'Y',              
               P_BUTTON_IMAGE           => L_BUTTON_IMAGE,
               P_BUTTON_IMAGE_ALT       => P_NEXT_BUTTON_NAME,
               P_BUTTON_TEMPLATE_OPTIONS=> L_BUTTON_TEMPLATE_OPTIONS,
               P_ICON_CSS_CLASSES       => L_ICON_CSS_CLASSES,       
               P_BUTTON_POSITION        => L_NEXT_BUTTON_POS,
               P_BUTTON_ALIGNMENT       => 'RIGHT',
               P_BUTTON_EXECUTE_VALIDATIONS => 'Y',
               P_BUTTON_REDIRECT_URL    => NULL,
               P_BUTTON_ACTION          => WWV_FLOW_BUTTON.C_ACTION_SUBMIT,
               P_BUTTON_CONDITION       => NULL,
               P_BUTTON_CONDITION_TYPE  => NULL,
               P_BUTTON_IMAGE_ATTRIBUTES=> NULL,
               P_SECURITY_SCHEME        => NULL,
               P_REQUIRED_PATCH         => NULL);
 
           
           WWV_FLOW_API.CREATE_PAGE_BRANCH (
               P_FLOW_ID               => P_FLOW_ID,
               P_FLOW_STEP_ID          => C.PAGE_ID,
               P_BRANCH_ACTION         => 'f?p=&APP_ID.:'||L_PAGES(L_COUNT+1)||':&SESSION.&success_msg=#SUCCESS_MSG#',
               P_BRANCH_POINT          => 'AFTER_PROCESSING',
               P_BRANCH_TYPE           => 'REDIRECT_URL',
               P_BRANCH_WHEN_BUTTON_ID => L_NEXT_BUTTON_ID,
               P_BRANCH_SEQUENCE       => '20',
               P_BRANCH_CONDITION_TYPE => '',
               P_BRANCH_CONDITION      => NULL,
               P_BRANCH_CONDITION_TEXT => NULL,
               P_REQUIRED_PATCH        => NULL,
               P_BRANCH_COMMENT        => NULL);
       END IF;
 
       IF L_COUNT = P_STEPS THEN
           
 
           IF L_IS_UT THEN
               L_BUTTON_IMAGE := 'template:'||WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE;
               L_BUTTON_TEMPLATE_OPTIONS :=  GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE,'BUTTON');
           END IF;
 
           WWV_FLOW_API.CREATE_PAGE_BUTTON (
               P_ID                     => L_FINISH_BUTTON_ID,
               P_FLOW_ID                => P_FLOW_ID,
               P_FLOW_STEP_ID           => C.PAGE_ID,
               P_BUTTON_SEQUENCE        => '40',
               P_BUTTON_IS_HOT          => 'Y',                
               P_BUTTON_PLUG_ID         => L_BUTTON_REGION_ID,
               P_BUTTON_NAME            => 'FINISH',
               P_BUTTON_IMAGE           => L_BUTTON_IMAGE,
               P_BUTTON_IMAGE_ALT       => P_FINISH_BUTTON_NAME,
               P_BUTTON_TEMPLATE_OPTIONS=> L_BUTTON_TEMPLATE_OPTIONS,               
               P_BUTTON_POSITION        => L_FINISH_BUTTON_POS,
               P_BUTTON_ALIGNMENT       => 'RIGHT',
               P_BUTTON_EXECUTE_VALIDATIONS => 'Y',
               P_BUTTON_REDIRECT_URL    => NULL,
               P_BUTTON_ACTION           => WWV_FLOW_BUTTON.C_ACTION_SUBMIT,
               P_BUTTON_CONDITION       => NULL,
               P_BUTTON_CONDITION_TYPE  => NULL,
               P_BUTTON_IMAGE_ATTRIBUTES=> NULL,
               P_SECURITY_SCHEME        => NULL,
               P_REQUIRED_PATCH         => NULL);
 
           
           IF P_FINISH_BRANCH IS NOT NULL THEN
               WWV_FLOW_API.CREATE_PAGE_BRANCH (
                   P_FLOW_ID               => P_FLOW_ID,
                   P_FLOW_STEP_ID          => C.PAGE_ID,
                   P_BRANCH_ACTION         => 'f?p=&APP_ID.:'||P_FINISH_BRANCH||':&SESSION.&success_msg=#SUCCESS_MSG#',
                   P_BRANCH_POINT          => 'AFTER_PROCESSING',
                   P_BRANCH_TYPE           => 'REDIRECT_URL',
                   P_BRANCH_WHEN_BUTTON_ID => L_FINISH_BUTTON_ID,
                   P_BRANCH_SEQUENCE       => '1',
                   P_BRANCH_CONDITION_TYPE => '',
                   P_BRANCH_CONDITION      => NULL,
                   P_BRANCH_CONDITION_TEXT => NULL,
                   P_REQUIRED_PATCH        => NULL,
                   P_BRANCH_COMMENT        => NULL);
           END IF;
 
            IF P_PAGE_MODE = 'MODAL' THEN
               WWV_FLOW_API.CREATE_PAGE_PROCESS(
                   P_FLOW_ID                => P_FLOW_ID,
                   P_FLOW_STEP_ID           => C.PAGE_ID,                
                   P_PROCESS_SEQUENCE       => 10,
                   P_PROCESS_POINT          => 'AFTER_SUBMIT',
                   P_PROCESS_TYPE           => 'NATIVE_CLOSE_WINDOW',
                   P_PROCESS_NAME           => 'Close Dialog',
                   P_ERROR_DISPLAY_LOCATION => 'INLINE_IN_NOTIFICATION'
               );
 
           END IF;
               
       END IF;
       
   END LOOP;
 EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(-20001,
                           WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.CREATE_WIZARD',SQLERRM)
                           );
 END CREATE_WIZARD;
 
 
 
 
 PROCEDURE CREATE_TREE (
   P_FLOW_ID                 IN NUMBER,
   P_PAGE_ID                 IN NUMBER,
   P_PAGE_NAME               IN VARCHAR2,
   P_USER_INTERFACE_ID       IN NUMBER,
   
   P_TABSET                  IN VARCHAR2 DEFAULT NULL,
   P_TAB_NAME                IN VARCHAR2 DEFAULT NULL, 
   P_TAB_TEXT                IN VARCHAR2 DEFAULT NULL,
   
   P_START_OPTION            IN VARCHAR2,
   P_TREE_NAME               IN VARCHAR2,
   P_TREE_TYPE               IN VARCHAR2,
   P_TREE_TEMPLATE           IN VARCHAR2,
   P_TREE_QUERY              IN VARCHAR2,
   P_MAX_LEVELS              IN NUMBER,
   P_NAMED_LOV               IN NUMBER DEFAULT NULL,
   P_LOV                     IN VARCHAR2 DEFAULT NULL,
   P_SQL                     IN VARCHAR2 DEFAULT NULL,
   P_STATIC                  IN VARCHAR2 DEFAULT NULL,
   
   P_REGION_TITLE            IN VARCHAR2,
   P_REGION_TEMPLATE         IN NUMBER,
   P_GO_BRANCH               IN NUMBER,
   P_GO_BUTTON_NAME          IN VARCHAR2 DEFAULT 'GO',
   
   P_TREE_BUTTON_OPTION      IN VARCHAR2 DEFAULT NULL
   )
 IS
   L_TREE_ID        NUMBER := 0;
   L_TREE_ROOT_ITEM VARCHAR2(1000) := 'P'||P_PAGE_ID||'_TREE_ROOT';
   L_SHOW_REGION_ID NUMBER := 0;
   L_TREE_REGION_ID NUMBER := 0;
   L_GO_BUTTON_ID   NUMBER := 0;
 
   L_UNEXPANDED_PARENT          VARCHAR2(5000);
   L_UNEXPANDED_PARENT_LAST     VARCHAR2(5000);
   L_EXPANDED_PARENT            VARCHAR2(5000);
   L_EXPANDED_PARENT_LAST       VARCHAR2(5000);
   L_NAME_LINK_ANCHOR_TAG       VARCHAR2(5000);
   L_NAME_LINK_NOT_ANCHOR_TAG   VARCHAR2(5000);
   L_LEVEL_1_TEMPLATE           VARCHAR2(5000);
   L_LEVEL_2_TEMPLATE           VARCHAR2(5000);
 
   L_IMAGE                      VARCHAR2(1000);
 
   L_TREE_BUTTON_OPTIONS        WWV_FLOW_GLOBAL.VC_ARR2;
   L_BUTTON_DISPLAY             VARCHAR2(4000);
   L_BUTTON_NAME                VARCHAR2(4000);
   L_BUTTON_IMAGE               VARCHAR2(4000);
 
   L_LOV                        VARCHAR2(1000);
   L_NAMED_LOV                  VARCHAR2(1000);
 BEGIN
   
   
   
   WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
       P_FLOW_ID           => P_FLOW_ID,
       P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
   
   
   
   L_TREE_ID := WWV_FLOW_ID.NEXT_VAL;
   IF P_TREE_TEMPLATE = 'STANDARD_TREE' THEN
      L_UNEXPANDED_PARENT:='<td><a href="#DRILL_DOWN#"><img src="#IMAGE_PREFIX#Fndtre02.gif" width="16" height="22" border="0"></a></td>';
      L_UNEXPANDED_PARENT_LAST:='<td><a href="#DRILL_DOWN#"><img src="#IMAGE_PREFIX#Fndtre03.gif" width="16" height="22" border="0"></a></td>';
      L_EXPANDED_PARENT:='<td><a href="#DRILL_DOWN#"><img src="#IMAGE_PREFIX#Fndtre05.gif" width="16" height="22" border="0"></td>';
      L_EXPANDED_PARENT_LAST:='<td><a href="#DRILL_DOWN#"><img src="#IMAGE_PREFIX#Fndtre06.gif" width="16" height="22" border="0"></a></td>';
      L_NAME_LINK_ANCHOR_TAG:='<a href="#LINK#">#NAME#</a>';
      L_NAME_LINK_NOT_ANCHOR_TAG:='#NAME#';
      L_LEVEL_1_TEMPLATE:='<tr>#INDENT#<td colspan="#COLSPAN#" valign="CENTER" class="tiny">#NAME##A1##A2# #DRILL_UP#</td></tr>';
      L_LEVEL_2_TEMPLATE:='<tr>#INDENT#<td colspan="#COLSPAN#" valign="CENTER" class="tiny">#NAME##A1##A2#</td></tr>';
   ELSIF P_TREE_TEMPLATE IN ('INFO_TREE','FOLDER_TREE') THEN
      IF P_TREE_TEMPLATE = 'INFO_TREE' THEN
        L_IMAGE := 'Fndtre_info.gif';
      ELSIF P_TREE_TEMPLATE = 'FOLDER_TREE' THEN
        L_IMAGE := 'Fndtre_tfold.gif';
      END IF;
 
      L_UNEXPANDED_PARENT:='<td><a href="#DRILL_DOWN#"><img src="#IMAGE_PREFIX#Fndtre02.gif" width="16" height="22" border="0"></a></td><td><img src="#IMAGE_PREFIX#'||L_IMAGE||'" width="16" height="16" border="0"></td>';
      L_UNEXPANDED_PARENT_LAST:='<td><a href="#DRILL_DOWN#"><img src="#IMAGE_PREFIX#Fndtre03.gif" width="16" height="22" border="0"></a></td><td><img src="#IMAGE_PREFIX#'||L_IMAGE||'" width="16" height="16" border="0"></td>';
      L_EXPANDED_PARENT:='<td><a href="#DRILL_DOWN#"><img src="#IMAGE_PREFIX#Fndtre05.gif" width="16" height="22" border="0"></a></td><td><img src="#IMAGE_PREFIX#'||L_IMAGE||'" width="16" height="16" border="0"></td>';
      L_EXPANDED_PARENT_LAST:='<td><a href="#DRILL_DOWN#"><img src="#IMAGE_PREFIX#Fndtre06.gif" width="16" height="22" border="0"></a></td><td><img src="#IMAGE_PREFIX#'||L_IMAGE||'" width="16" height="16" border="0"></td>';
      L_NAME_LINK_ANCHOR_TAG:='<a href="#LINK#">#NAME#</a>';
      L_NAME_LINK_NOT_ANCHOR_TAG:='#NAME#';
      L_LEVEL_1_TEMPLATE:='<tr>#INDENT#<td colspan="#COLSPAN#" valign="CENTER" class="tiny">#NAME##A1##A2# #DRILL_UP#</td></tr>';
      L_LEVEL_2_TEMPLATE:='<tr>#INDENT#<td colspan="#COLSPAN#" valign="CENTER" class="tiny">#NAME##A1##A2#</td></tr>';
   END IF;
 
   BEGIN
      INSERT INTO WWV_FLOW_TREES
      (ID,
       FLOW_ID,
       TREE_NAME,
       TREE_TYPE,
       TREE_QUERY,
       SECURITY_GROUP_ID,
       MAX_LEVELS,
       UNEXPANDED_PARENT,
       UNEXPANDED_PARENT_LAST,
       EXPANDED_PARENT,
       EXPANDED_PARENT_LAST,
       LEAF_NODE,
       LEAF_NODE_LAST,
       DRILL_UP,
       NAME_LINK_ANCHOR_TAG,
       NAME_LINK_NOT_ANCHOR_TAG,
       INDENT_VERTICAL_LINE,
       INDENT_VERTICAL_LINE_LAST,
       BEFORE_TREE,
       AFTER_TREE,
       FLOW_ITEM,
       LEVEL_1_TEMPLATE,
       LEVEL_2_TEMPLATE)
       VALUES
       (L_TREE_ID,
        P_FLOW_ID,
        P_TREE_NAME,
        P_TREE_TYPE,
        P_TREE_QUERY,
        WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID,
        P_MAX_LEVELS,
        L_UNEXPANDED_PARENT,
        L_UNEXPANDED_PARENT_LAST,
        L_EXPANDED_PARENT,
        L_EXPANDED_PARENT_LAST,
        '<td align="left"><img src="#IMAGE_PREFIX#Fndtre07.gif" width="16" height="22" border="0"></td>',
        '<td align="left"><img src="#IMAGE_PREFIX#Fndtre08.gif" width="16" height="22" border="0"></td>',
        '&nbsp;(up)',
        L_NAME_LINK_ANCHOR_TAG,
        L_NAME_LINK_NOT_ANCHOR_TAG,
        '<td><img src="#IMAGE_PREFIX#Fndtre09.gif" width="16" height="22" border="0"></td>',
        '<td><img src="#IMAGE_PREFIX#Fndtre10.gif" width="16" height="22" border="0"></td>',
        '<table border="0" cellspacing="0" cellpadding="0">',
        '</table>',
        L_TREE_ROOT_ITEM,
        L_LEVEL_1_TEMPLATE,
        L_LEVEL_2_TEMPLATE);
    EXCEPTION WHEN OTHERS THEN
       ROLLBACK;
       RAISE_APPLICATION_ERROR(-20001,
                           WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.CREATE_TREE',SQLERRM)
                           );
    END;
 
   
   
   
   IF NOT PAGE_EXISTS (P_FLOW_ID,P_PAGE_ID) THEN
        WWV_FLOW_API.CREATE_PAGE (
            P_ID                 => P_PAGE_ID,
            P_FLOW_ID            => P_FLOW_ID,
            P_TAB_SET            => REPLACE(P_TABSET,'%null%',NULL),
            P_NAME               => P_PAGE_NAME,
            P_USER_INTERFACE_ID  => P_USER_INTERFACE_ID,
            P_PAGE_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_PAGE_TEMPLATE, 'PAGE'),
            P_FIRST_ITEM         => 'NO_FIRST_ITEM',
            P_STEP_TITLE         => P_PAGE_NAME,
            P_STEP_SUB_TITLE     => NULL,
            P_STEP_TEMPLATE      => NULL,
            P_WELCOME_TEXT       => NULL,
            P_BOX_WELCOME_TEXT   => NULL,
            P_BOX_FOOTER_TEXT    => NULL,
            P_FOOTER_TEXT        => NULL,
            P_PAGE_COMMENT       => NULL);
 
        
        IF REPLACE(P_TABSET,'%null%',NULL) IS NOT NULL THEN
           CREATE_TAB (
              P_FLOW_ID  => P_FLOW_ID,
              P_PAGE_ID  => P_PAGE_ID,
              P_TAB_SET  => P_TABSET,
              P_TAB_NAME => P_TAB_NAME,
              P_TAB_TEXT => P_TAB_TEXT);
        END IF;
   END IF;
 
 
   
   
   
   IF P_START_OPTION = 'LOV' THEN
      L_SHOW_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
      WWV_FLOW_API.CREATE_PAGE_PLUG (
         P_ID                            => L_SHOW_REGION_ID,
         P_FLOW_ID                       => P_FLOW_ID,
         P_PAGE_ID                       => P_PAGE_ID,
         P_PLUG_NAME                     => WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.SHOW_TREE'),
         P_PLUG_TEMPLATE                 => P_REGION_TEMPLATE,
         P_REGION_TEMPLATE_OPTIONS       => GET_PRESET_TEMPLATE_OPTIONS (P_REGION_TEMPLATE,'REGION'),
         P_PLUG_DISPLAY_SEQUENCE         => '10',
         P_PLUG_DISPLAY_POINT            => 'BODY',
         P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
         P_PLUG_SOURCE_TYPE              => NULL,
         P_PLUG_COMMENT                  => NULL);
   END IF;
 
 
   
   
   
   L_TREE_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
   WWV_FLOW_API.CREATE_PAGE_PLUG (
      P_ID                            => L_TREE_REGION_ID,
      P_FLOW_ID                       => P_FLOW_ID,
      P_PAGE_ID                       => P_PAGE_ID,
      P_PLUG_NAME                     => P_REGION_TITLE,
      P_PLUG_TEMPLATE                 => P_REGION_TEMPLATE,
      P_REGION_TEMPLATE_OPTIONS       => GET_PRESET_TEMPLATE_OPTIONS (P_REGION_TEMPLATE,'REGION'),
      P_PLUG_DISPLAY_SEQUENCE         => '20',
      P_PLUG_DISPLAY_POINT            => 'BODY',
      P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
      P_PLUG_SOURCE_TYPE              => WWV_FLOW_REGION_NATIVE.C_LEGACY_TREE,
      P_ATTRIBUTE_01                  => L_TREE_ID,
      P_PLUG_COMMENT                  => NULL);
 
 
   
   
   
 
   
   
   
   
   L_TREE_BUTTON_OPTIONS := WWV_FLOW_UTILITIES.STRING_TO_TABLE2(P_TREE_BUTTON_OPTION);
 
   IF WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE IS NOT NULL THEN
       L_BUTTON_IMAGE := 'template:'||WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE;
   END IF;
 
   FOR I IN 1..L_TREE_BUTTON_OPTIONS.COUNT
   LOOP
      IF L_TREE_BUTTON_OPTIONS(I) = 'CONTRACT_ALL' THEN
         L_BUTTON_NAME := 'COLLAPSE_ALL';
         L_BUTTON_DISPLAY := WWV_FLOW_ITEM.TEXT_FROM_LOV(L_TREE_BUTTON_OPTIONS(I),'TREE_BUTTON_OPTIONS');
      ELSE
         L_BUTTON_NAME := L_TREE_BUTTON_OPTIONS(I);
         L_BUTTON_DISPLAY := WWV_FLOW_ITEM.TEXT_FROM_LOV(L_TREE_BUTTON_OPTIONS(I),'TREE_BUTTON_OPTIONS');
      END IF;
 
      WWV_FLOW_API.CREATE_PAGE_BUTTON (
          P_ID                     => WWV_FLOW_ID.NEXT_VAL,
          P_FLOW_ID                => P_FLOW_ID,
          P_FLOW_STEP_ID           => P_PAGE_ID,
          P_BUTTON_SEQUENCE        => '10',
          P_BUTTON_PLUG_ID         => L_TREE_REGION_ID,
          P_BUTTON_NAME            => L_BUTTON_NAME,
          P_BUTTON_IMAGE           => L_BUTTON_IMAGE,
          P_BUTTON_IMAGE_ALT       => L_BUTTON_DISPLAY,
          P_BUTTON_POSITION        => WWV_FLOW_THEME_MANAGER.GET_BUTTON_POSTION(
                                      P_TEMPLATE_ID => P_REGION_TEMPLATE,
                                      P_POSITION    => '#CREATE#'),
          P_BUTTON_ALIGNMENT       => 'LEFT',
          P_BUTTON_REDIRECT_URL    => 'f?p=&APP_ID.:'||P_PAGE_ID||':&SESSION.:'||L_TREE_BUTTON_OPTIONS(I),
          P_BUTTON_ACTION          => WWV_FLOW_BUTTON.C_ACTION_REDIRECT_PAGE,
          P_BUTTON_CONDITION       => NULL,
          P_BUTTON_CONDITION_TYPE  => NULL,
          P_BUTTON_IMAGE_ATTRIBUTES=> NULL,
          P_SECURITY_SCHEME        => NULL,
          P_REQUIRED_PATCH         => NULL);
   END LOOP;
 
   IF P_START_OPTION = 'LOV' THEN
      L_GO_BUTTON_ID := WWV_FLOW_ID.NEXT_VAL;
 
      WWV_FLOW_API.CREATE_PAGE_BUTTON (
          P_ID                     => L_GO_BUTTON_ID,
          P_FLOW_ID                => P_FLOW_ID,
          P_FLOW_STEP_ID           => P_PAGE_ID,
          P_BUTTON_SEQUENCE        => '10',
          P_BUTTON_PLUG_ID         => L_SHOW_REGION_ID,
          P_BUTTON_NAME            => 'CANCEL',
          P_BUTTON_IMAGE           => L_BUTTON_IMAGE,
          P_BUTTON_IMAGE_ALT       => P_GO_BUTTON_NAME,
          P_BUTTON_POSITION        => WWV_FLOW_THEME_MANAGER.GET_BUTTON_POSTION(
                                      P_TEMPLATE_ID => P_REGION_TEMPLATE,
                                      P_POSITION    => '#CLOSE#'),
          P_BUTTON_ALIGNMENT       => 'RIGHT',
          P_BUTTON_REDIRECT_URL    => NULL,
          P_BUTTON_ACTION           => WWV_FLOW_BUTTON.C_ACTION_SUBMIT,
          P_BUTTON_CONDITION       => NULL,
          P_BUTTON_CONDITION_TYPE  => NULL,
          P_BUTTON_IMAGE_ATTRIBUTES=> NULL,
          P_SECURITY_SCHEME        => NULL,
          P_REQUIRED_PATCH         => NULL);
   END IF;
 
 
   
   
   
   IF P_START_OPTION = 'LOV' THEN
      
      IF P_NAMED_LOV IS NOT NULL THEN
          L_LOV := '.'||P_NAMED_LOV||'.';
          FOR C1 IN (SELECT LOV_NAME
                     FROM WWV_FLOW_LISTS_OF_VALUES$
                     WHERE ID = P_NAMED_LOV
                     AND FLOW_ID = P_FLOW_ID
                     AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID)
          LOOP
              L_NAMED_LOV := C1.LOV_NAME;
          END LOOP;
      ELSE
          L_LOV := P_LOV;
      END IF;
      WWV_FLOW_API.CREATE_PAGE_ITEM (
            P_FLOW_ID                => P_FLOW_ID,
            P_FLOW_STEP_ID           => P_PAGE_ID,
            P_NAME                   => L_TREE_ROOT_ITEM,
            P_DATA_TYPE              => NULL,
            P_ACCEPT_PROCESSING      => NULL,
            P_ITEM_SEQUENCE          => 10,
            P_ITEM_PLUG_ID           => L_SHOW_REGION_ID,
            P_USE_CACHE_BEFORE_DEFAULT  => 'YES',
            P_ITEM_DEFAULT           => NULL,
            P_PROMPT                 => WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.TREE_ROOT'),
            P_SOURCE                 => NULL,
            P_SOURCE_TYPE            => NULL,
            P_DISPLAY_AS             => WWV_FLOW_NATIVE_ITEM.C_POPUP_LOV,
            P_ATTRIBUTE_01           => 'ENTERABLE',    
            P_ATTRIBUTE_02           => 'FIRST_ROWSET', 
            P_NAMED_LOV              => L_NAMED_LOV,
            P_LOV                    => L_LOV,
            P_LOV_DISPLAY_NULL       => 'YES',
            P_CSIZE                  => 30,
            P_CMAXLENGTH             => NULL,
            P_CHEIGHT                => NULL,
            P_IS_PERSISTENT          => NULL,
            P_FIELD_TEMPLATE         => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,
            P_ITEM_TEMPLATE_OPTIONS  => GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,'ITEM'),
            P_ITEM_COMMENT           => NULL);
   ELSIF P_START_OPTION = 'SQL' THEN
      WWV_FLOW_API.CREATE_PAGE_ITEM (
            P_FLOW_ID                => P_FLOW_ID,
            P_FLOW_STEP_ID           => P_PAGE_ID,
            P_NAME                   => L_TREE_ROOT_ITEM,
            P_DATA_TYPE              => NULL,
            P_ACCEPT_PROCESSING      => NULL,
            P_ITEM_SEQUENCE          => 10,
            P_ITEM_PLUG_ID           => L_TREE_REGION_ID,
            P_USE_CACHE_BEFORE_DEFAULT  => 'YES',
            P_ITEM_DEFAULT           => NULL,
            P_PROMPT                 => WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.TREE_ROOT'),
            P_SOURCE                 => P_SQL,
            P_SOURCE_TYPE            => 'QUERY',
            P_DISPLAY_AS             => 'HIDDEN',
            P_NAMED_LOV              => NULL,
            P_LOV                    => NULL,
            P_LOV_DISPLAY_NULL       => NULL,
            P_CSIZE                  => 30,
            P_CMAXLENGTH             => NULL,
            P_CHEIGHT                => NULL,
            P_IS_PERSISTENT          => 'Y',
            P_ITEM_COMMENT           => NULL);
   ELSIF P_START_OPTION = 'STATIC' THEN
      WWV_FLOW_API.CREATE_PAGE_ITEM (
            P_FLOW_ID                => P_FLOW_ID,
            P_FLOW_STEP_ID           => P_PAGE_ID,
            P_NAME                   => L_TREE_ROOT_ITEM,
            P_DATA_TYPE              => NULL,
            P_ACCEPT_PROCESSING      => NULL,
            P_ITEM_SEQUENCE          => 10,
            P_ITEM_PLUG_ID           => L_TREE_REGION_ID,
            P_USE_CACHE_BEFORE_DEFAULT  => 'YES',
            P_ITEM_DEFAULT           => NULL,
            P_PROMPT                 => WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.TREE_ROOT'),
            P_SOURCE                 => P_STATIC,
            P_SOURCE_TYPE            => 'STATIC',
            P_DISPLAY_AS             => 'HIDDEN',
            P_NAMED_LOV              => NULL,
            P_LOV                    => NULL,
            P_LOV_DISPLAY_NULL       => NULL,
            P_CSIZE                  => 30,
            P_CMAXLENGTH             => NULL,
            P_CHEIGHT                => NULL,
            P_IS_PERSISTENT          => 'Y',
            P_ITEM_COMMENT           => NULL);
   END IF;
   
   
   
 
   
   
   
   
   IF L_TREE_BUTTON_OPTIONS.COUNT > 0 THEN
      WWV_FLOW_API.CREATE_PAGE_BRANCH (
          P_ID                    => WWV_FLOW_ID.NEXT_VAL,
          P_FLOW_ID               => P_FLOW_ID,
          P_FLOW_STEP_ID          => P_PAGE_ID,
          P_BRANCH_ACTION         => 'f?p=&APP_ID.:'||P_PAGE_ID||':&SESSION.&success_msg=#SUCCESS_MSG#',
          P_BRANCH_POINT          => 'AFTER_PROCESSING',
          P_BRANCH_TYPE           => 'REDIRECT_URL',
          P_BRANCH_WHEN_BUTTON_ID => NULL,
          P_BRANCH_SEQUENCE       => '1',
          P_BRANCH_CONDITION_TYPE => '',
          P_BRANCH_CONDITION      => NULL,
          P_BRANCH_CONDITION_TEXT => NULL,
          P_REQUIRED_PATCH        => NULL,
          P_BRANCH_COMMENT        => NULL);
   END IF;
 
   IF P_START_OPTION = 'LOV' THEN
      IF P_GO_BRANCH IS NOT NULL THEN
          WWV_FLOW_API.CREATE_PAGE_BRANCH (
              P_ID                    => WWV_FLOW_ID.NEXT_VAL,
              P_FLOW_ID               => P_FLOW_ID,
              P_FLOW_STEP_ID          => P_PAGE_ID,
              P_BRANCH_ACTION         => 'f?p=&APP_ID.:'||P_GO_BRANCH||':&SESSION.&success_msg=#SUCCESS_MSG#',
              P_BRANCH_POINT          => 'AFTER_PROCESSING',
              P_BRANCH_TYPE           => 'REDIRECT_URL',
              P_BRANCH_WHEN_BUTTON_ID => L_GO_BUTTON_ID,
              P_BRANCH_SEQUENCE       => '1',
              P_BRANCH_CONDITION_TYPE => '',
              P_BRANCH_CONDITION      => NULL,
              P_BRANCH_CONDITION_TEXT => NULL,
              P_REQUIRED_PATCH        => NULL,
              P_BRANCH_COMMENT        => NULL);
       END IF;
   END IF;
 
 EXCEPTION WHEN OTHERS THEN
  ROLLBACK;
  RAISE_APPLICATION_ERROR(-20001,
                           WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.CREATE_TREE',SQLERRM)
                           );
 END CREATE_TREE;
 
 
 
 PROCEDURE CREATE_JSTREE (
     P_FLOW_ID                  IN NUMBER   DEFAULT NULL,
     P_PAGE_ID                  IN NUMBER   DEFAULT NULL,
     P_PAGE_NAME                IN VARCHAR2 DEFAULT NULL,
     P_GROUP_NAME               IN VARCHAR2 DEFAULT NULL,
     P_PAGE_MODE                IN VARCHAR2,
     P_USER_INTERFACE_ID        IN NUMBER,
     
     P_TAB_SET                  IN VARCHAR2 DEFAULT NULL,
     P_TAB_NAME                 IN VARCHAR2 DEFAULT NULL,
     P_TAB_TEXT                 IN VARCHAR2 DEFAULT NULL,
     
     P_NAV_LIST_ID              IN NUMBER   DEFAULT NULL,
     P_NAV_LIST_ITEM_ID         IN NUMBER   DEFAULT NULL,
     P_NAV_LIST_ITEM_NAME       IN VARCHAR2 DEFAULT NULL,
     P_NAV_LIST_PARENT_ITEM_ID  IN NUMBER   DEFAULT NULL,
     P_NAV_LIST_CHILD_ITEM_NAME IN VARCHAR2 DEFAULT NULL,
     
     P_REGION_TEMPLATE          IN NUMBER   DEFAULT NULL,
     P_REGION_NAME              IN VARCHAR2 DEFAULT NULL,
     P_BREADCRUMB_ID            IN NUMBER   DEFAULT NULL,
     P_BREADCRUMB_NAME          IN VARCHAR2 DEFAULT NULL,
     P_PARENT_BC_ID             IN NUMBER   DEFAULT NULL,
     
     P_TREE_QUERY               IN VARCHAR2,
     P_TREE_BUTTON_OPTION       IN VARCHAR2 DEFAULT NULL,
     P_SHOW_HINTS               IN VARCHAR2 DEFAULT NULL,
     P_TREE_HINT_TEXT           IN VARCHAR2 DEFAULT NULL,
     P_TREE_CLICK_ACTION        IN VARCHAR2 DEFAULT NULL,
     P_SELECTED_NODE            IN VARCHAR2 DEFAULT NULL )
 IS
     L_GROUP_ID                   NUMBER := NULL;
     
 BEGIN
     
     
     
     WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
         P_FLOW_ID           => P_FLOW_ID,
         P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
     
     
     
     IF P_GROUP_NAME IS NOT NULL THEN
         L_GROUP_ID := WWV_FLOW_UTILITIES.GET_PAGE_GROUP_ID(P_GROUP_NAME => P_GROUP_NAME, P_APPLICATION_ID => P_FLOW_ID);
         
         IF L_GROUP_ID IS NULL THEN
             L_GROUP_ID := WWV_FLOW_ID.NEXT_VAL;
             WWV_FLOW_API.CREATE_PAGE_GROUP(P_ID => L_GROUP_ID, P_FLOW_ID => P_FLOW_ID, P_GROUP_NAME => P_GROUP_NAME);
         END IF;
     END IF;
 
     
     
     
     IF NOT PAGE_EXISTS (P_FLOW_ID,P_PAGE_ID) THEN
         WWV_FLOW_API.CREATE_PAGE(
             P_ID                  => P_PAGE_ID,
             P_FLOW_ID             => P_FLOW_ID,
             P_TAB_SET             => REPLACE(P_TAB_SET,'%null%',NULL),
             P_NAME                => P_PAGE_NAME,
             P_PAGE_MODE           => P_PAGE_MODE,
             P_GROUP_ID            => L_GROUP_ID,
             P_USER_INTERFACE_ID   => P_USER_INTERFACE_ID,
             P_PAGE_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_PAGE_TEMPLATE, 'PAGE'),
             P_STEP_TITLE          => P_PAGE_NAME,
             P_STEP_SUB_TITLE      => P_PAGE_NAME,
             P_STEP_SUB_TITLE_TYPE => 'TEXT_WITH_SUBSTITUTIONS');
 
         IF P_NAV_LIST_ID IS NOT NULL THEN
             
             CREATE_NAVIGATION_LIST_ITEM (
                 P_FLOW_ID                  => P_FLOW_ID,
                 P_PAGE_ID                  => P_PAGE_ID,
                 P_PAGE_NAME                => P_PAGE_NAME,
                 P_NAV_LIST_ID              => P_NAV_LIST_ID,
                 P_NAV_LIST_ITEM_ID         => P_NAV_LIST_ITEM_ID,
                 P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_ITEM_NAME,
                 P_NAV_LIST_PARENT_ITEM_ID  => P_NAV_LIST_PARENT_ITEM_ID,
                 P_NAV_LIST_CHILD_ITEM_NAME => P_NAV_LIST_CHILD_ITEM_NAME );
         ELSE
             
             IF REPLACE(P_TAB_SET,'%null%',NULL) IS NOT NULL THEN
                 CREATE_TAB (
                     P_FLOW_ID  => P_FLOW_ID,
                     P_PAGE_ID  => P_PAGE_ID,
                     P_TAB_SET  => P_TAB_SET,
                     P_TAB_NAME => P_TAB_NAME,
                     P_TAB_TEXT => P_TAB_TEXT );
             END IF;
         END IF;
     END IF;
 
     
     
     
     WWV_FLOW_WIZARD_API.CREATE_BREADCRUMB_REGION (
         P_APPLICATION_ID             => P_FLOW_ID,
         P_PAGE_ID                    => P_PAGE_ID,
         P_SEQ                        => 10,
         P_BREADCRUMB_ID              => P_BREADCRUMB_ID,
         P_BREADCRUMB_ENTRY_NAME      => P_BREADCRUMB_NAME,
         P_PARENT_BREADCRUMB_ENTRY_ID => P_PARENT_BC_ID );
 
     
     
     
     CREATE_JSTREE_REGION (
         P_FLOW_ID            => P_FLOW_ID,
         P_PAGE_ID            => P_PAGE_ID,
         P_REGION_TEMPLATE    => P_REGION_TEMPLATE,
         P_REGION_NAME        => P_REGION_NAME,
         
         P_TREE_QUERY         => P_TREE_QUERY,
         P_TREE_BUTTON_OPTION => P_TREE_BUTTON_OPTION,
         P_SHOW_HINTS         => P_SHOW_HINTS,
         P_TREE_HINT_TEXT     => P_TREE_HINT_TEXT,
         P_TREE_CLICK_ACTION  => P_TREE_CLICK_ACTION,
         P_SELECTED_NODE      => P_SELECTED_NODE );
 
 EXCEPTION WHEN OTHERS THEN
     ROLLBACK;
     RAISE_APPLICATION_ERROR(-20001,
                             WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.CREATE_TREE',SQLERRM)
                             );
 END CREATE_JSTREE;
 
 
 
 PROCEDURE CREATE_JSTREE_REGION (
    P_FLOW_ID                 IN NUMBER   DEFAULT NULL,
    P_PAGE_ID                 IN NUMBER   DEFAULT NULL,
    P_REGION_TEMPLATE         IN NUMBER   DEFAULT NULL,
    P_REGION_NAME             IN VARCHAR2 DEFAULT NULL,
    P_PARENT_PLUG_ID          IN NUMBER   DEFAULT NULL,
    P_DISPLAY_SEQ             IN NUMBER   DEFAULT NULL,
    P_DISPLAY_COL             IN NUMBER   DEFAULT NULL,
    P_DISPLAY_POINT           IN VARCHAR2 DEFAULT NULL,
    P_DISPLAY_COND            IN VARCHAR2 DEFAULT NULL,
    P_DISPLAY_COND2           IN VARCHAR2 DEFAULT NULL,
    P_DISPLAY_COND_TYPE       IN VARCHAR2 DEFAULT NULL,
    P_AUTH_SCHEME             IN VARCHAR2 DEFAULT NULL,
    
    P_TREE_QUERY              IN VARCHAR2,
    P_TREE_BUTTON_OPTION      IN VARCHAR2 DEFAULT NULL,
    P_SHOW_HINTS              IN VARCHAR2 DEFAULT NULL,
    P_TREE_HINT_TEXT          IN VARCHAR2 DEFAULT NULL,
    P_TREE_CLICK_ACTION       IN VARCHAR2 DEFAULT NULL,
    P_SELECTED_NODE           IN VARCHAR2 DEFAULT NULL )
 IS
     C_TREE_TYPE                  CONSTANT VARCHAR2(10) := 'APEX_TREE';
     L_BUTTON_ID                  NUMBER;
     L_EVENT_ID                   NUMBER;
     L_REGION_ID                  NUMBER;
     L_BUTTON_NAME                VARCHAR2(4000);
     L_TREE_BUTTON_OPTIONS        WWV_FLOW_GLOBAL.VC_ARR2;
 BEGIN
     L_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
 
     WWV_FLOW_API.CREATE_PAGE_PLUG (
         P_ID                       => L_REGION_ID,
         P_FLOW_ID                  => P_FLOW_ID,
         P_PAGE_ID                  => P_PAGE_ID,
         P_PLUG_TEMPLATE            => P_REGION_TEMPLATE,
         P_REGION_TEMPLATE_OPTIONS  => GET_PRESET_TEMPLATE_OPTIONS (P_REGION_TEMPLATE,'REGION'),
         P_PLUG_NAME                => P_REGION_NAME,
         P_PLUG_DISPLAY_SEQUENCE    => '10',
         P_PLUG_DISPLAY_POINT       => 'BODY',
         P_PLUG_ITEM_DISPLAY_POINT  => 'ABOVE',
         P_AJAX_ENABLED             => 'Y',
         P_PLUG_QUERY_NO_DATA_FOUND => WWV_FLOW_LANG.SYSTEM_MESSAGE('F4000.NO_DATA_FOUND'),
         P_LOCATION                 => 'LOCAL',
         P_QUERY_TYPE               => 'SQL',
         P_PLUG_SOURCE_TYPE         => WWV_FLOW_REGION_NATIVE.C_JSTREE,
         P_PLUG_SOURCE              => RTRIM(WWV_FLOW.TRIM_NL_SP_TAB(P_TREE_QUERY), ';'),
         P_ATTRIBUTE_02             => P_TREE_CLICK_ACTION,
         P_ATTRIBUTE_03             => P_SELECTED_NODE,
         P_ATTRIBUTE_04             => P_SHOW_HINTS,
         P_ATTRIBUTE_05             => P_TREE_HINT_TEXT,
         P_ATTRIBUTE_07             => C_TREE_TYPE,
         P_ATTRIBUTE_08             => 'a-Icon',
         P_ATTRIBUTE_09             => 'icon-tree-folder',
         
         P_ATTRIBUTE_15             => 'STATUS',
         P_ATTRIBUTE_11             => 'LEVEL',
         P_ATTRIBUTE_10             => 'TITLE',
         P_ATTRIBUTE_12             => 'ICON',
         P_ATTRIBUTE_20             => 'VALUE',
         P_ATTRIBUTE_22             => 'TOOLTIP',
         P_ATTRIBUTE_24             => 'LINK',
         P_ATTRIBUTE_23             => 'LEVEL' );
     
     
     
     
     L_TREE_BUTTON_OPTIONS := WWV_FLOW_UTILITIES.STRING_TO_TABLE2(P_TREE_BUTTON_OPTION);
 
     FOR I IN 1..L_TREE_BUTTON_OPTIONS.COUNT LOOP
         L_BUTTON_ID      := WWV_FLOW_ID.NEXT_VAL;
         L_BUTTON_NAME    := L_TREE_BUTTON_OPTIONS(I);
 
         WWV_FLOW_API.CREATE_PAGE_BUTTON (
             P_ID                     => L_BUTTON_ID,
             P_FLOW_ID                => P_FLOW_ID,
             P_FLOW_STEP_ID           => P_PAGE_ID,
             P_BUTTON_SEQUENCE        => '10',
             P_BUTTON_PLUG_ID         => L_REGION_ID,
             P_BUTTON_NAME            => L_BUTTON_NAME,
             P_BUTTON_TEMPLATE_ID     => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE,
             P_BUTTON_IMAGE_ALT       => WWV_FLOW_ITEM.TEXT_FROM_LOV(L_TREE_BUTTON_OPTIONS(I),'TREE_BUTTON_OPTIONS'),
             P_BUTTON_POSITION        => WWV_FLOW_THEME_MANAGER.GET_BUTTON_POSTION(
                                         P_TEMPLATE_ID => P_REGION_TEMPLATE,
                                         P_POSITION    => '#CREATE#'),
             P_BUTTON_ALIGNMENT       => 'RIGHT',
             P_BUTTON_ACTION          => WWV_FLOW_BUTTON.C_ACTION_DEFINED_BY_DA );
         
         
         
         L_EVENT_ID := WWV_FLOW_ID.NEXT_VAL;
 
         WWV_FLOW_API.CREATE_PAGE_DA_EVENT (
             P_ID                      => L_EVENT_ID,
             P_FLOW_ID                 => P_FLOW_ID,
             P_PAGE_ID                 => P_PAGE_ID,
             P_NAME                    => L_BUTTON_NAME,
             P_EVENT_SEQUENCE          => 10,
             P_TRIGGERING_ELEMENT_TYPE => 'BUTTON',
             P_TRIGGERING_BUTTON_ID    => L_BUTTON_ID,
             P_BIND_TYPE               => 'bind',
             P_BIND_EVENT_TYPE         => 'click' );
 
         WWV_FLOW_API.CREATE_PAGE_DA_ACTION (
             P_EVENT_ID                => L_EVENT_ID,
             P_FLOW_ID                 => P_FLOW_ID,
             P_PAGE_ID                 => P_PAGE_ID,
             P_EVENT_RESULT            => 'TRUE',
             P_ACTION_SEQUENCE         => 10,
             P_EXECUTE_ON_PAGE_INIT    => 'N',
             P_ACTION                  => 'NATIVE_TREE_'||
                                          CASE L_BUTTON_NAME
                                            WHEN 'EXPAND_ALL' THEN 'EXPAND'
                                            ELSE 'COLLAPSE'
                                          END,
             P_AFFECTED_ELEMENTS_TYPE  => 'REGION',
             P_AFFECTED_REGION_ID      => L_REGION_ID,
             P_STOP_EXECUTION_ON_ERROR => 'Y' );
     END LOOP;
 EXCEPTION WHEN OTHERS THEN
     WWV_FLOW_DEBUG.LOG_EXCEPTION;
     RAISE_APPLICATION_ERROR (
         -20001,
         WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.CREATE_TREE',SQLERRM) );
 END CREATE_JSTREE_REGION;
 
 
 
 
 
 FUNCTION GENERATE_TREE_QUERY (
         P_FLOW_ID     IN NUMBER,
         P_OWNER       IN VARCHAR2,
         P_TABLE_NAME  IN VARCHAR2,
         P_ID          IN VARCHAR2,
         P_PID         IN VARCHAR2,
         P_NAME        IN VARCHAR2,
         P_LINK_OPTION IN VARCHAR2,
         P_LINK_PAGE_ID IN VARCHAR2 DEFAULT NULL,
         P_LINK_ITEM   IN VARCHAR2 DEFAULT NULL,
         P_WHERE       IN VARCHAR2 DEFAULT NULL,
         P_ORDER_BY    IN VARCHAR2 DEFAULT NULL)
 RETURN VARCHAR2
 IS
  Q VARCHAR2(32767);
 BEGIN
  Q := 'select "'||P_ID||'" id, ';
  Q := Q||WWV_FLOW.LF||'       "'||P_PID||'" pid, ';
  Q := Q||WWV_FLOW.LF||'       "'||P_NAME||'" name, ';
  IF (P_LINK_PAGE_ID IS NOT NULL) AND (P_LINK_ITEM IS NOT NULL) THEN
    Q := Q||WWV_FLOW.LF||'       ''f?p=&APP_ID.:'||P_LINK_PAGE_ID||':''||:APP_SESSION||''::::'||P_LINK_ITEM||':''||"'||P_ID||'" link, ';
  ELSE
    Q := Q||WWV_FLOW.LF||'       null link, ';
  END IF;
  Q := Q||WWV_FLOW.LF||'       null a1, ';
  Q := Q||WWV_FLOW.LF||'       null a2 ';
  Q := Q||WWV_FLOW.LF||'from "'||P_OWNER||'"."'||P_TABLE_NAME||'"';
  IF P_WHERE IS NOT NULL THEN
    Q := Q||WWV_FLOW.LF||'where '||P_WHERE;
  END IF;
  IF P_ORDER_BY IS NOT NULL THEN
    Q := Q||WWV_FLOW.LF||'order by '||P_ORDER_BY;
  END IF;
 
  RETURN Q;
 END GENERATE_TREE_QUERY;
 
 FUNCTION GENERATE_TREE_REGION_QUERY (
         P_FLOW_ID      IN NUMBER,
         P_OWNER        IN VARCHAR2,
         P_TABLE_NAME   IN VARCHAR2,
         P_ID           IN VARCHAR2,
         P_PID          IN VARCHAR2,
         P_NAME         IN VARCHAR2,
         P_START_ITEM   IN VARCHAR2,
         P_START_VALUE  IN VARCHAR2,
         P_LINK_OPTION  IN VARCHAR2,
         P_LINK_PAGE_ID IN VARCHAR2 DEFAULT NULL,
         P_LINK_ITEM    IN VARCHAR2 DEFAULT NULL,
         P_WHERE        IN VARCHAR2 DEFAULT NULL,
         P_ORDER_BY     IN VARCHAR2 DEFAULT NULL,
         P_TOOLTIP      IN VARCHAR2 DEFAULT NULL,
         P_ICON         IN VARCHAR2 DEFAULT NULL)
 RETURN VARCHAR2
 IS
  Q VARCHAR2(32767);
 BEGIN
 
  Q := 'select case when connect_by_isleaf = 1 then 0';
  Q := Q||WWV_FLOW.LF||'            when level = 1             then 1';
  Q := Q||WWV_FLOW.LF||'            else                           -1';
  Q := Q||WWV_FLOW.LF||'       end as status, ';
  Q := Q||WWV_FLOW.LF||'       level, ';
 
  
  Q := Q||WWV_FLOW.LF||'       "'||P_NAME||'" as title, ';
  
  IF (P_ICON IS NOT NULL) THEN
      Q := Q||WWV_FLOW.LF||'       "'||P_ICON||'" as icon, ';
  ELSE
      Q := Q||WWV_FLOW.LF||'       null as icon, ';
  END IF;
  
  Q := Q||WWV_FLOW.LF||'       "'||P_ID||'" as value, ';
  
  IF P_TOOLTIP IS NOT NULL THEN
      Q := Q||WWV_FLOW.LF||'       '||P_TOOLTIP||' as tooltip, ';
  ELSE
      Q := Q||WWV_FLOW.LF||'       null as tooltip, ';
  END IF;
  
  IF (P_LINK_PAGE_ID IS NOT NULL) AND (P_LINK_ITEM IS NOT NULL) THEN
    Q := Q||WWV_FLOW.LF||'       ''f?p=&APP_ID.:'||P_LINK_PAGE_ID||':''||:APP_SESSION||''::::'||P_LINK_ITEM||':''||"'||P_ID||'" as link ';
  ELSE
    Q := Q||WWV_FLOW.LF||'       null as link ';
  END IF;
 
  Q := Q||WWV_FLOW.LF||'from "'||P_OWNER||'"."'||P_TABLE_NAME||'"';
  IF P_WHERE IS NOT NULL THEN
    Q := Q||WWV_FLOW.LF||'where '||P_WHERE;
  END IF;
  
  IF P_START_VALUE IS NOT NULL THEN
      Q := Q||WWV_FLOW.LF||'start with "'||P_START_ITEM||'" = '||P_START_VALUE;
  ELSE
      Q := Q||WWV_FLOW.LF||'start with "'||P_START_ITEM||'" is null';
  END IF;
  Q := Q||WWV_FLOW.LF||'connect by prior "'||P_ID||'" = "'||P_PID||'"';
  IF P_ORDER_BY IS NOT NULL THEN
    Q := Q||WWV_FLOW.LF||'order siblings by "'||P_ORDER_BY||'"';
  END IF;
 
  RETURN Q;
 END GENERATE_TREE_REGION_QUERY;
 
 
 
 
 FUNCTION REGION_EXISTS (
    P_FLOW_ID   IN NUMBER,
    P_PAGE_ID   IN NUMBER,
    P_REGION_ID IN NUMBER
 ) RETURN BOOLEAN IS
  R BOOLEAN := FALSE;
 BEGIN
    FOR C1 IN (SELECT 1
               FROM   WWV_FLOW_PAGE_PLUGS
               WHERE  SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID AND
                      PAGE_ID = P_PAGE_ID AND FLOW_ID = P_FLOW_ID AND ID = P_REGION_ID
    ) LOOP
        R := TRUE;
    END LOOP;
    RETURN R;
 END REGION_EXISTS;
 
 
 
 
 
 PROCEDURE CREATE_SUMMARY_PAGE (
    P_FLOW_ID                  IN NUMBER   DEFAULT NULL,
    P_PAGE_ID                  IN NUMBER   DEFAULT NULL,
    P_PAGE_NAME                IN VARCHAR2 DEFAULT 'Summary',
    P_GROUP_NAME               IN VARCHAR2 DEFAULT NULL,
    P_PAGE_MODE                IN VARCHAR2,
    P_USER_INTERFACE_ID        IN NUMBER,
    
    P_TAB_SET                  IN VARCHAR2 DEFAULT NULL,
    P_TAB_NAME                 IN VARCHAR2 DEFAULT NULL, 
    P_TAB_TEXT                 IN VARCHAR2 DEFAULT NULL,
    
    P_NAV_LIST_ID              IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_ITEM_ID         IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_ITEM_NAME       IN VARCHAR2 DEFAULT NULL,
    P_NAV_LIST_PARENT_ITEM_ID  IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_CHILD_ITEM_NAME IN VARCHAR2 DEFAULT NULL,
    
    P_REGION_ID                IN NUMBER   DEFAULT NULL,
    P_REGION_TITLE             IN VARCHAR2 DEFAULT NULL,
    P_REGION_TEMPLATE          IN NUMBER   DEFAULT NULL,
    
    P_FIELD_TEMPLATE           IN NUMBER DEFAULT NULL,
    P_LABEL_ALIGN              IN VARCHAR2 DEFAULT NULL,
    P_TAG_ATTR                 IN VARCHAR2 DEFAULT NULL,
    P_FIELD_ALIGN              IN VARCHAR2 DEFAULT NULL
 ) IS
     L_NAME_SUFFIX     NUMBER;
     L_REGION_ID       NUMBER;
     L_ITEM_SEQ_OFFSET NUMBER := 0;
     L_GROUP_ID        NUMBER := NULL;
     L_BASED_ON        VARCHAR2(30);
     L_ITEM_NAME       VARCHAR2(255);
 BEGIN
   
   
   
   WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
       P_FLOW_ID           => P_FLOW_ID,
       P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
    
    
    
    IF NOT PAGE_EXISTS (P_FLOW_ID, P_PAGE_ID) THEN
 
        
        
        
        IF P_GROUP_NAME IS NOT NULL THEN
            L_GROUP_ID := WWV_FLOW_UTILITIES.GET_PAGE_GROUP_ID(P_GROUP_NAME => P_GROUP_NAME, P_APPLICATION_ID => P_FLOW_ID);
            
            IF L_GROUP_ID IS NULL THEN
                L_GROUP_ID := WWV_FLOW_ID.NEXT_VAL;
                WWV_FLOW_API.CREATE_PAGE_GROUP(P_ID => L_GROUP_ID, P_FLOW_ID => P_FLOW_ID, P_GROUP_NAME => P_GROUP_NAME);
            END IF;
        END IF;
 
        WWV_FLOW_API.CREATE_PAGE(
            P_ID                  => P_PAGE_ID,
            P_FLOW_ID             => P_FLOW_ID,
            P_TAB_SET             => REPLACE(P_TAB_SET,'%null%',NULL),
            P_NAME                => P_PAGE_NAME,
            P_PAGE_MODE           => P_PAGE_MODE,
            P_GROUP_ID            => L_GROUP_ID,
            P_USER_INTERFACE_ID   => P_USER_INTERFACE_ID,
            P_STEP_TITLE          => P_PAGE_NAME,
            P_STEP_SUB_TITLE      => NULL,
            P_STEP_SUB_TITLE_TYPE => 'TEXT_WITH_SUBSTITUTIONS',
            P_WELCOME_TEXT        => '',
            P_BOX_WELCOME_TEXT    => '',
            P_BOX_FOOTER_TEXT     => '',
            P_FOOTER_TEXT         => '',
            P_STEP_TEMPLATE       => '',
            P_PAGE_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_PAGE_TEMPLATE, 'PAGE'),
            P_BOX_IMAGE           => '',
            P_REQUIRED_ROLE       => '',
            P_PAGE_COMMENT       => NULL);
 
        IF P_NAV_LIST_ID IS NOT NULL THEN
             
             CREATE_NAVIGATION_LIST_ITEM (
                 P_FLOW_ID                  => P_FLOW_ID,
                 P_PAGE_ID                  => P_PAGE_ID,
                 P_PAGE_NAME                => P_PAGE_NAME,
                 P_NAV_LIST_ID              => P_NAV_LIST_ID,
                 P_NAV_LIST_ITEM_ID         => P_NAV_LIST_ITEM_ID,
                 P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_ITEM_NAME,
                 P_NAV_LIST_PARENT_ITEM_ID  => P_NAV_LIST_PARENT_ITEM_ID,
                 P_NAV_LIST_CHILD_ITEM_NAME => P_NAV_LIST_CHILD_ITEM_NAME);
         ELSE
             
             
             IF REPLACE(P_TAB_SET,'%null%',NULL) IS NOT NULL THEN
                 CREATE_TAB (
                     P_FLOW_ID  => P_FLOW_ID,
                     P_PAGE_ID  => P_PAGE_ID,
                     P_TAB_SET  => P_TAB_SET,
                     P_TAB_NAME => P_TAB_NAME,
                     P_TAB_TEXT => P_TAB_TEXT);
             END IF;
 
        END IF;
    END IF;
 
    
    
    
 
    IF (REGION_EXISTS(P_FLOW_ID, P_PAGE_ID, P_REGION_ID)) THEN
 
        L_REGION_ID := P_REGION_ID;
 
        FOR C1 IN (
            SELECT MAX(ITEM_SEQUENCE) MAX_SEQ
              FROM WWV_FLOW_STEP_ITEMS
             WHERE FLOW_ID = P_FLOW_ID
               AND FLOW_STEP_ID = P_PAGE_ID
        ) LOOP
            L_ITEM_SEQ_OFFSET := C1.MAX_SEQ;
        END LOOP;
 
    ELSE
 
        L_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
 
        WWV_FLOW_API.CREATE_PAGE_PLUG (
            P_ID                            => L_REGION_ID,
            P_FLOW_ID                       => P_FLOW_ID,
            P_PAGE_ID                       => P_PAGE_ID,
            P_PLUG_NAME                     => P_REGION_TITLE,
            P_PLUG_TEMPLATE                 => P_REGION_TEMPLATE,
            P_REGION_TEMPLATE_OPTIONS       => GET_PRESET_TEMPLATE_OPTIONS (P_REGION_TEMPLATE,'REGION'),
            P_PLUG_DISPLAY_SEQUENCE         => '10',
            P_PLUG_DISPLAY_POINT            => 'BODY',
            P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
            P_PLUG_SOURCE                   => NULL,
            P_PLUG_SOURCE_TYPE              => WWV_FLOW_REGION_NATIVE.C_STATIC,
            P_PLUG_COMMENT                  => NULL);
 
    END IF;
 
    
    
    
    FOR C1 IN (SELECT C001 ID
                 FROM WWV_FLOW_COLLECTIONS
                WHERE COLLECTION_NAME = 'SUMMARY_ITEM')
    LOOP
        FOR C2 IN ( SELECT *
                      FROM WWV_FLOW_STEP_ITEMS
                     WHERE ID = C1.ID
                       AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
        ) LOOP
 
        
        
        
        
        L_ITEM_NAME := C2.NAME;
        IF L_ITEM_NAME LIKE '%F'||C2.FLOW_ID||'_P'||C2.FLOW_STEP_ID||'%' THEN
            L_ITEM_NAME := REPLACE(L_ITEM_NAME,'F'||C2.FLOW_ID||'_',NULL);
        ELSIF L_ITEM_NAME LIKE '%f'||C2.FLOW_ID||'_p'||C2.FLOW_STEP_ID||'%' THEN
            L_ITEM_NAME := REPLACE(L_ITEM_NAME,'f'||C2.FLOW_ID||'_',NULL);
        END IF;
        L_ITEM_NAME := REPLACE(L_ITEM_NAME,'P'||C2.FLOW_STEP_ID,'P'||P_PAGE_ID);
        L_ITEM_NAME := REPLACE(L_ITEM_NAME,'p'||C2.FLOW_STEP_ID,'p'||P_PAGE_ID);
 
        IF (C2.LOV IS NOT NULL) THEN
            L_BASED_ON := 'LOV';
        ELSE
            L_BASED_ON := 'VALUE';
        END IF;
 
        L_NAME_SUFFIX := 0;
 
        FOR C3 IN ( SELECT COUNT(*) ITM_CNT
                      FROM WWV_FLOW_STEP_ITEMS
                     WHERE INSTR(NAME,L_ITEM_NAME)>0
                       AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
        ) LOOP
            L_NAME_SUFFIX := C3.ITM_CNT;
        END LOOP;
 
        IF (L_NAME_SUFFIX > 0) THEN
            L_ITEM_NAME := SUBSTR(L_ITEM_NAME,1,252)||'_'||(L_NAME_SUFFIX+1);
        END IF;
 
        WWV_FLOW_API.CREATE_PAGE_ITEM(
            P_ID                       => NULL,
            P_FLOW_ID                  => P_FLOW_ID,
            P_FLOW_STEP_ID             => P_PAGE_ID,
            P_NAME                     => L_ITEM_NAME,
            P_NAME_LENGTH              => C2.NAME_LENGTH,
            P_DATA_TYPE                => C2.DATA_TYPE,
            P_ACCEPT_PROCESSING        => C2.ACCEPT_PROCESSING,
            P_ITEM_SEQUENCE            => (C2.ITEM_SEQUENCE + L_ITEM_SEQ_OFFSET),
            P_ITEM_PLUG_ID             => L_REGION_ID,
            P_USE_CACHE_BEFORE_DEFAULT => 'NO',
            P_ITEM_DEFAULT             => C2.ITEM_DEFAULT,
            P_ITEM_DEFAULT_TYPE        => C2.ITEM_DEFAULT_TYPE,
            P_PROMPT                   => C2.PROMPT,
            P_PRE_ELEMENT_TEXT         => C2.PRE_ELEMENT_TEXT,
            P_POST_ELEMENT_TEXT        => C2.POST_ELEMENT_TEXT,
            P_FORMAT_MASK              => C2.FORMAT_MASK,
            P_SOURCE                   => C2.NAME,
            P_SOURCE_TYPE              => 'ITEM',
            P_SOURCE_POST_COMPUTATION  => C2.SOURCE_POST_COMPUTATION,
            P_DISPLAY_AS               => WWV_FLOW_NATIVE_ITEM.C_DISPLAY_ONLY,
            P_ATTRIBUTE_01             => 'N',
            P_ATTRIBUTE_02             => L_BASED_ON,
            P_ESCAPE_ON_HTTP_OUTPUT    => 'Y',
            P_NAMED_LOV                => C2.NAMED_LOV,
            P_LOV                      => C2.LOV,
            P_LOV_DISPLAY_NULL         => C2.LOV_DISPLAY_NULL,
            P_LOV_NULL_TEXT            => C2.LOV_NULL_TEXT,
            P_LOV_NULL_VALUE           => C2.LOV_NULL_VALUE,
            P_LOV_TRANSLATED           => C2.LOV_TRANSLATED,
            P_CSIZE                    => C2.CSIZE,
            P_CMAXLENGTH               => C2.CMAXLENGTH,
            P_CHEIGHT                  => C2.CHEIGHT,
            P_CATTRIBUTES              => C2.CATTRIBUTES,
            P_TAG_ATTRIBUTES           => NVL(P_TAG_ATTR,C2.TAG_ATTRIBUTES),
            P_TAG_ATTRIBUTES2          => C2.TAG_ATTRIBUTES2,
            P_BEGIN_ON_NEW_LINE        => C2.BEGIN_ON_NEW_LINE,
            P_BEGIN_ON_NEW_FIELD       => C2.BEGIN_ON_NEW_FIELD,
            P_COLSPAN                  => C2.COLSPAN,
            P_ROWSPAN                  => C2.ROWSPAN,
            P_LABEL_ALIGNMENT          => NVL(P_LABEL_ALIGN,C2.LABEL_ALIGNMENT),
            P_FIELD_ALIGNMENT          => NVL(P_FIELD_ALIGN,C2.FIELD_ALIGNMENT),
            P_DISPLAY_WHEN             => C2.DISPLAY_WHEN,
            P_DISPLAY_WHEN_TYPE        => C2.DISPLAY_WHEN_TYPE,
            P_IS_PERSISTENT            => 'N',
            P_SECURITY_SCHEME          => C2.SECURITY_SCHEME,
            P_REQUIRED_PATCH           => C2.REQUIRED_PATCH,
            P_ITEM_COMMENT             => C2.ITEM_COMMENT,
            P_BUTTON_IMAGE             => C2.BUTTON_IMAGE,
            P_BUTTON_IMAGE_ATTR        => C2.BUTTON_IMAGE_ATTR,
            P_FIELD_TEMPLATE           => NVL(P_FIELD_TEMPLATE,C2.ITEM_FIELD_TEMPLATE),
            P_ITEM_TEMPLATE_OPTIONS    => GET_PRESET_TEMPLATE_OPTIONS (NVL(P_FIELD_TEMPLATE,C2.ITEM_FIELD_TEMPLATE),'ITEM'),
            P_PROTECTION_LEVEL         => 'N');
 
      END LOOP;
 
    END LOOP;
 
 EXCEPTION WHEN OTHERS THEN
  ROLLBACK;
  RAISE_APPLICATION_ERROR(-20001,
                           WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.CREATE_SUMMARY_PAGE',SQLERRM)
                           );
 END CREATE_SUMMARY_PAGE;
 
 
 PROCEDURE CREATE_HOME_PAGE (
     P_FLOW_ID                 IN VARCHAR2,
     P_PAGE_ID                 IN VARCHAR2 DEFAULT 1,
     P_NAME                    IN VARCHAR2 DEFAULT NULL,
     P_USER_INTERFACE_ID       IN NUMBER,
     P_TEMPLATE                IN NUMBER   DEFAULT NULL)
 IS
     L_NAME                  VARCHAR2(4000);
     L_ALIAS                 VARCHAR2(4000);
 BEGIN
     
     
     
     WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
         P_FLOW_ID           => P_FLOW_ID,
         P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
     
     
     
     FOR L_NEW_UI IN ( SELECT UI.ROWID,
                              UI.HOME_URL,
                              UIT.NAME UI_NAME
                         FROM WWV_FLOW_UI_TYPES UIT,
                              WWV_FLOW_USER_INTERFACES UI
                        WHERE UI.ID                = P_USER_INTERFACE_ID
                          AND UI.SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                          AND UI.UI_TYPE_ID        = UIT.ID )
     LOOP
         L_ALIAS := 'HOME_'||L_NEW_UI.UI_NAME;
         UPDATE WWV_FLOW_USER_INTERFACES
            SET HOME_URL = 'f?p=&APP_ID.:'||L_ALIAS||':&SESSION.'
          WHERE ROWID = L_NEW_UI.ROWID;
     END LOOP;
 
     L_NAME := COALESCE(P_NAME,WWV_FLOW_LANG.SYSTEM_MESSAGE('HOME'));
     
     WWV_FLOW_API.CREATE_PAGE(
         P_ID                    => P_PAGE_ID,
         P_FLOW_ID               => P_FLOW_ID,
         P_NAME                  => L_NAME,
         P_USER_INTERFACE_ID     => P_USER_INTERFACE_ID,
         P_PAGE_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_PAGE_TEMPLATE, 'PAGE'),
         P_STEP_TITLE            => L_NAME,
         P_ALIAS                 => L_ALIAS,
         P_STEP_TEMPLATE         => NVL(P_TEMPLATE, WWV_FLOW_THEME_GLOBALS.G_DEFAULT_PAGE_TEMPLATE),
         P_PAGE_IS_PUBLIC_Y_N    => 'N',
         P_AUTOCOMPLETE_ON_OFF   => 'OFF',
         P_PAGE_COMMENT          => NULL,
         P_FIRST_ITEM            => 'AUTO_FIRST_ITEM');
 
     
     WWV_FLOW_API.CREATE_PAGE_PLUG(
         P_FLOW_ID                 => P_FLOW_ID,
         P_PAGE_ID                 => P_PAGE_ID,
         P_PLUG_NAME               => L_NAME,
         P_PLUG_DISPLAY_SEQUENCE   => '10',
         P_PLUG_TEMPLATE           => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_FORM_TEMPLATE,
         P_REGION_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_FORM_TEMPLATE,'REGION'),
         P_PLUG_SOURCE_TYPE        => WWV_FLOW_REGION_NATIVE.C_STATIC,
         P_PLUG_DISPLAY_POINT      => 'BODY',
         P_PLUG_ITEM_DISPLAY_POINT => 'ABOVE' );
 
 
 END CREATE_HOME_PAGE;
 
 
 PROCEDURE CREATE_LOGIN_PAGE (
     P_FLOW_ID                 IN VARCHAR2,
     P_PAGE_ID                 IN VARCHAR2 DEFAULT 101,
     P_NAME                    IN VARCHAR2 DEFAULT NULL,
     P_USER_INTERFACE_ID       IN NUMBER,
     P_TEMPLATE                IN NUMBER   DEFAULT NULL,
     P_USERNAME                IN VARCHAR2 DEFAULT NULL,
     P_PASSWORD                IN VARCHAR2 DEFAULT NULL,
     P_SAVE_USERNAME_COOKIE    IN BOOLEAN  DEFAULT TRUE )
 IS
     L_APP_NAME              VARCHAR2(4000);
     L_NAME                  VARCHAR2(4000);
     L_ALIAS                 VARCHAR2(4000);
     L_PLUG_ID               NUMBER;
     L_LABEL_TEMPLATE        NUMBER;
     L_PAGE_TEMPLATE         NUMBER;
     L_ITEM_COL_SPAN         NUMBER := NULL;
     L_ITEM_GRID_COL         NUMBER := NULL;
     L_GRID_NEW_ROW          VARCHAR2(1) := NULL;
     L_GRID_NEW_COLUMN       VARCHAR2(1) := NULL;
     L_GRID_TYPE             VARCHAR2(255);
     L_SQL_CLOB1             VARCHAR2(32767);
     L_USERNAME              VARCHAR2(255) := 'P'||P_PAGE_ID||'_USERNAME';
     L_PASSWORD              VARCHAR2(255) := 'P'||P_PAGE_ID||'_PASSWORD';
     L_USERNAME_PROMPT       VARCHAR2(255);
     L_PASSWORD_PROMPT       VARCHAR2(255);
     L_USERNAME_PLACEHOLDER  VARCHAR2(255);
     L_PASSWORD_PLACEHOLDER  VARCHAR2(255);     
     L_USERNAME_ICON_CSS     VARCHAR2(255);     
     L_PASSWORD_ICON_CSS     VARCHAR2(255);  
     L_REMEMBER              VARCHAR2(255) := 'P'||P_PAGE_ID||'_REMEMBER';
     L_REMEMBER_LOV_ID       NUMBER;
     L_REMEMBER_PROMPT       VARCHAR2(255);
     L_LOGIN_BT_POS          VARCHAR2(255) := 'REGION_TEMPLATE_CREATE';       
     L_REGION_ICON_CSS       VARCHAR2(255);   
     L_BTN_BEGIN_ON_NEW_LINE WWV_FLOW_STEP_ITEMS.BEGIN_ON_NEW_LINE%TYPE := 'NO';
 BEGIN
     
     
     
     WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
         P_FLOW_ID           => P_FLOW_ID,
         P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
     L_USERNAME_PROMPT := COALESCE(P_USERNAME,WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_FND_USER_API.T_USERNAME'));
     L_PASSWORD_PROMPT := COALESCE(P_PASSWORD,WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_FND_USER_API.T_PASSWORD'));
 
     
     IF WWV_FLOW_THEME_GLOBALS.G_THEME_IDENTIFIER = 'UNIVERSAL_THEME' THEN
         L_USERNAME_PLACEHOLDER := L_USERNAME_PROMPT;
         L_PASSWORD_PLACEHOLDER := L_PASSWORD_PROMPT;
         L_USERNAME_ICON_CSS    := 'fa-user';
         L_PASSWORD_ICON_CSS    := 'fa-key';
         L_LOGIN_BT_POS         := 'REGION_TEMPLATE_NEXT';       
         L_REGION_ICON_CSS      := 'fa-sign-in';
     END IF;
 
     
     FOR C1 IN (SELECT ID, GRID_TYPE
                       FROM WWV_FLOW_TEMPLATES
                      WHERE FLOW_ID = P_FLOW_ID
                        AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                        AND ID = NVL(P_TEMPLATE, WWV_FLOW_THEME_GLOBALS.G_LOGIN_TEMPLATE))
     LOOP
         L_PAGE_TEMPLATE   := C1.ID;
         L_GRID_TYPE       := C1.GRID_TYPE;
         L_GRID_NEW_ROW    := 'N';
         L_GRID_NEW_COLUMN := 'Y';
     END LOOP;
 
     
     
     
     FOR L_NEW_UI IN ( SELECT UI.ROWID,
                              UI.LOGIN_URL,
                              UIT.NAME UI_NAME
                         FROM WWV_FLOW_UI_TYPES UIT,
                              WWV_FLOW_USER_INTERFACES UI
                        WHERE UI.ID                = P_USER_INTERFACE_ID
                          AND UI.SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                          AND UI.UI_TYPE_ID        = UIT.ID )
     LOOP
         L_ALIAS := 'LOGIN_'||L_NEW_UI.UI_NAME;
         UPDATE WWV_FLOW_USER_INTERFACES
            SET LOGIN_URL = 'f?p=&APP_ID.:'||L_ALIAS||':&SESSION.'
          WHERE ROWID = L_NEW_UI.ROWID;
     END LOOP;
 
     
 
     IF P_NAME IS NULL THEN
         FOR C1 IN ( SELECT NAME
                       FROM WWV_FLOWS
                      WHERE SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                        AND ID = P_FLOW_ID )
         LOOP
             L_APP_NAME := C1.NAME;
             L_NAME     := C1.NAME || ' - ' || WWV_FLOW_LANG.SYSTEM_MESSAGE('LOG_IN');
         END LOOP;
     ELSE
         L_APP_NAME := P_NAME;
         L_NAME := P_NAME;
     END IF;
 
     FOR C1 IN ( SELECT NAME
                   FROM WWV_FLOWS
                  WHERE SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                    AND ID = P_FLOW_ID )
     LOOP
         L_NAME := COALESCE(P_NAME, C1.NAME || ' - ' || WWV_FLOW_LANG.SYSTEM_MESSAGE('LOG_IN'));
     END LOOP;
 
     
     WWV_FLOW_API.CREATE_PAGE(
         P_ID                      => P_PAGE_ID,
         P_FLOW_ID                 => P_FLOW_ID,
         P_NAME                    => WWV_FLOW_LANG.SYSTEM_MESSAGE('AUTH.LOGIN_PAGE'),
         P_USER_INTERFACE_ID       => P_USER_INTERFACE_ID,
         P_PAGE_TEMPLATE_OPTIONS   => GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LOGIN_PAGE_TEMPLATE, 'PAGE'),
         P_STEP_TITLE              => L_NAME,
         P_ALIAS                   => L_ALIAS,
         P_STEP_TEMPLATE           => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LOGIN_PAGE_TEMPLATE,
         P_PAGE_IS_PUBLIC_Y_N      => 'Y',
         P_AUTOCOMPLETE_ON_OFF     => 'OFF',
         P_PAGE_COMMENT            => NULL,
         P_FIRST_ITEM              => 'AUTO_FIRST_ITEM',
         P_WARN_ON_UNSAVED_CHANGES => 'N' );
 
     
     WWV_FLOW_API.CREATE_PAGE_PLUG(
         P_FLOW_ID                 => P_FLOW_ID,
         P_PAGE_ID                 => P_PAGE_ID,
         P_PLUG_NAME               => L_APP_NAME,
         P_PLUG_DISPLAY_SEQUENCE   => '10',
         P_PLUG_TEMPLATE           => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LOGIN_REG_TEMPLATE,
         P_REGION_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LOGIN_REG_TEMPLATE,'REGION'),
         P_ICON_CSS_CLASSES        => L_REGION_ICON_CSS,
         P_PLUG_SOURCE_TYPE        => WWV_FLOW_REGION_NATIVE.C_STATIC,
         P_PLUG_DISPLAY_POINT      => 'BODY',
         P_PLUG_ITEM_DISPLAY_POINT => 'ABOVE' );
 
     
     FOR C1 IN (SELECT   ID
                  FROM WWV_FLOW_PAGE_PLUGS
                 WHERE FLOW_ID = P_FLOW_ID
                   AND PAGE_ID = P_PAGE_ID)
     LOOP
         L_PLUG_ID := C1.ID;
         EXIT;
     END LOOP; 
 
     
     WWV_FLOW_API.CREATE_PAGE_ITEM(
         P_FLOW_ID               => P_FLOW_ID,
         P_FLOW_STEP_ID          => P_PAGE_ID,
         P_ITEM_PLUG_ID          => L_PLUG_ID,
         P_ITEM_SEQUENCE         => 10,
         P_NAME                  => L_USERNAME,
         P_PROMPT                => L_USERNAME_PROMPT,
         P_PLACEHOLDER           => L_USERNAME_PLACEHOLDER,
         P_DISPLAY_AS            => 'TEXT',
         P_BEGIN_ON_NEW_LINE     => 'YES',
         P_BEGIN_ON_NEW_FIELD    => 'YES',
         P_COLSPAN               => L_ITEM_COL_SPAN,
         P_GRID_COLUMN           => L_ITEM_GRID_COL,
         P_FIELD_TEMPLATE        => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LOGIN_LABEL_TEMPLATE,
         P_ITEM_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS (NVL(L_LABEL_TEMPLATE,WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LOGIN_LABEL_TEMPLATE),'ITEM'),
         P_ITEM_ICON_CSS_CLASSES => L_USERNAME_ICON_CSS,
         P_CSIZE                 => '40',
         P_CMAXLENGTH            => '100',
         P_LABEL_ALIGNMENT       => 'RIGHT',
         P_FIELD_ALIGNMENT       => 'LEFT');
 
 
    
    WWV_FLOW_API.CREATE_PAGE_ITEM(
         P_FLOW_ID               => P_FLOW_ID,
         P_FLOW_STEP_ID          => P_PAGE_ID,
         P_ITEM_PLUG_ID          => L_PLUG_ID,
         P_ITEM_SEQUENCE         => 20,
         P_NAME                  => L_PASSWORD,
         P_PROMPT                => L_PASSWORD_PROMPT,
         P_PLACEHOLDER           => L_PASSWORD_PLACEHOLDER,     
         P_DISPLAY_AS            => WWV_FLOW_NATIVE_ITEM.C_PASSWORD,
         P_ATTRIBUTE_01          => 'Y', 
         P_ATTRIBUTE_02          => 'Y', 
         P_BEGIN_ON_NEW_LINE     => 'YES',
         P_BEGIN_ON_NEW_FIELD    => 'YES',
         P_COLSPAN               => L_ITEM_COL_SPAN,
         P_GRID_COLUMN           => L_ITEM_GRID_COL,
         P_FIELD_TEMPLATE        => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LOGIN_LABEL_TEMPLATE,
         P_ITEM_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS (NVL(L_LABEL_TEMPLATE,WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LOGIN_LABEL_TEMPLATE),'ITEM'),
         P_ITEM_ICON_CSS_CLASSES => L_PASSWORD_ICON_CSS,
         P_CSIZE                 => '40',
         P_CMAXLENGTH            => '100',
         P_LABEL_ALIGNMENT       => 'RIGHT',
         P_FIELD_ALIGNMENT       => 'LEFT');
 
     
     L_REMEMBER_PROMPT := WWV_FLOW_LANG.SYSTEM_MESSAGE('LOGIN.REMEMBER_USERNAME');
     L_REMEMBER_LOV_ID := CREATE_STATIC_LOV (
                              P_FLOW_ID        => P_FLOW_ID,
                              P_NAME           => 'LOGIN_REMEMBER_USERNAME',
                              P_DISPLAY_VALUE1 => L_REMEMBER_PROMPT,
                              P_RETURN_VALUE1  => 'Y' );
     WWV_FLOW_API.CREATE_PAGE_ITEM(
         P_FLOW_ID               => P_FLOW_ID,
         P_FLOW_STEP_ID          => P_PAGE_ID,
         P_ITEM_PLUG_ID          => L_PLUG_ID,
         P_ITEM_SEQUENCE         => 30,
         P_NAME                  => L_REMEMBER,
         P_PROMPT                => L_REMEMBER_PROMPT,
         P_DISPLAY_AS            => WWV_FLOW_NATIVE_ITEM.C_CHECKBOX,
         P_ATTRIBUTE_01          => '1',
         P_LABEL_ALIGNMENT       => 'RIGHT',
         P_FIELD_ALIGNMENT       => 'LEFT',
         P_FIELD_TEMPLATE        => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LOGIN_LABEL_TEMPLATE,
         P_ITEM_TEMPLATE_OPTIONS => '#DEFAULT#',
         P_NAMED_LOV             => 'LOGIN_REMEMBER_USERNAME',
         P_LOV                   => '.'||L_REMEMBER_LOV_ID||'.',
         P_LOV_DISPLAY_EXTRA     => 'NO',
         P_HELP_TEXT             => WWV_FLOW_LANG.SYSTEM_MESSAGE('LOGIN.REMEMBER_USERNAME.HELP') );
 
     
     
     IF P_USER_INTERFACE_ID IS NOT NULL THEN
         
         
         
         
             L_BTN_BEGIN_ON_NEW_LINE := 'YES';
         
     END IF;
 
 
     
     WWV_FLOW_API.CREATE_PAGE_BUTTON(
         P_FLOW_ID            => P_FLOW_ID,
         P_FLOW_STEP_ID       => P_PAGE_ID,
         P_BUTTON_SEQUENCE    => 40,
         P_BUTTON_PLUG_ID     => L_PLUG_ID,
         P_BUTTON_NAME        => 'LOGIN',
         P_BUTTON_ACTION      => WWV_FLOW_BUTTON.C_ACTION_SUBMIT,
         P_BUTTON_TEMPLATE_ID => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE,
         P_BUTTON_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE, 'BUTTON'),
         P_BUTTON_IS_HOT      => 'Y',
         P_BUTTON_IMAGE_ALT   => WWV_FLOW_LANG.SYSTEM_MESSAGE('LOG_IN'),
         P_BUTTON_POSITION    => CASE WHEN L_GRID_TYPE = 'TABLE' THEN 'BODY' ELSE L_LOGIN_BT_POS END,
         P_BUTTON_ALIGNMENT   => 'LEFT',
         P_GRID_NEW_ROW       => 'Y',
         P_GRID_NEW_COLUMN    => 'Y' );
 
     
     L_SQL_CLOB1 := 'apex_authentication.login('||WWV_FLOW.LF||
                    '    p_username => :'||L_USERNAME||','||WWV_FLOW.LF||
                    '    p_password => :'||L_PASSWORD||' );';
 
     WWV_FLOW_API.CREATE_PAGE_PROCESS(
         P_FLOW_ID               => P_FLOW_ID,
         P_FLOW_STEP_ID          => P_PAGE_ID,
         P_PROCESS_SEQUENCE      => '20',
         P_PROCESS_POINT         => 'AFTER_SUBMIT',
         P_PROCESS_TYPE          => 'PLSQL',
         P_PROCESS_NAME          => 'Login',
         P_PROCESS_SQL_CLOB      => L_SQL_CLOB1,
         P_ERROR_DISPLAY_LOCATION=> WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION );
 
     IF P_SAVE_USERNAME_COOKIE THEN
         
         L_SQL_CLOB1 := 'apex_authentication.send_login_username_cookie ('||WWV_FLOW.LF||
                        '    p_username => lower(:'||L_USERNAME||'),'||WWV_FLOW.LF||
                        '    p_consent  => :'||L_REMEMBER||' = ''Y'' );';
 
         WWV_FLOW_API.CREATE_PAGE_PROCESS(
             P_FLOW_ID               => P_FLOW_ID,
             P_FLOW_STEP_ID          => P_PAGE_ID,
             P_PROCESS_SEQUENCE      => '10',
             P_PROCESS_POINT         => 'AFTER_SUBMIT',
             P_PROCESS_TYPE          => 'PLSQL',
             P_PROCESS_NAME          => WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_CREATE_MODEL_APP.SET_USERNAME_COOKIE'),
             P_PROCESS_SQL_CLOB      => L_SQL_CLOB1,
             P_ERROR_DISPLAY_LOCATION=> WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION );
 
         
         L_SQL_CLOB1 := ':'||L_USERNAME||' := apex_authentication.get_login_username_cookie;'||WWV_FLOW.LF||
                        ':'||L_REMEMBER||' := case when :'||L_USERNAME||' is not null then ''Y'' end;';
 
         WWV_FLOW_API.CREATE_PAGE_PROCESS(
             P_FLOW_ID               => P_FLOW_ID,
             P_FLOW_STEP_ID          => P_PAGE_ID,
             P_PROCESS_SEQUENCE      => '10',
             P_PROCESS_POINT         => 'BEFORE_HEADER',
             P_PROCESS_TYPE          => 'PLSQL',
             P_PROCESS_NAME          => WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_CREATE_MODEL_APP.GET_USERNAME_COOKIE'),
             P_PROCESS_SQL_CLOB      => L_SQL_CLOB1,
             P_ERROR_DISPLAY_LOCATION=> WWV_FLOW_ERROR_API.C_ON_ERROR_PAGE );
 
         WWV_FLOW_API.CREATE_PAGE_PROCESS(
             P_FLOW_ID               => P_FLOW_ID,
             P_FLOW_STEP_ID          => P_PAGE_ID,
             P_PROCESS_SEQUENCE      => '30',
             P_PROCESS_POINT         => 'AFTER_SUBMIT',
             P_PROCESS_TYPE          => 'CLEAR_CACHE_FOR_PAGES',
             P_PROCESS_NAME          => WWV_FLOW_LANG.SYSTEM_MESSAGE('F4000_P4734_CLEAR_PAGE'),
             P_PROCESS_SQL_CLOB      => P_PAGE_ID,
             P_ERROR_DISPLAY_LOCATION=> WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION );
     END IF;
 END CREATE_LOGIN_PAGE;
 
 
 
 
 PROCEDURE CREATE_SVG_CHART (
    P_FLOW_ID           IN NUMBER   DEFAULT NULL,
    P_FLOW_STEP_ID      IN NUMBER   DEFAULT NULL,
    P_PAGE_NAME         IN VARCHAR2 DEFAULT NULL,
    P_USER_INTERFACE_ID IN NUMBER,
    P_TAB_SET           IN VARCHAR2 DEFAULT NULL,
    P_TAB_NAME          IN VARCHAR2 DEFAULT NULL, 
    P_TAB_TEXT          IN VARCHAR2 DEFAULT NULL,
    P_REGION_TEMPLATE   IN NUMBER   DEFAULT NULL,
    P_REGION_NAME       IN VARCHAR2 DEFAULT NULL,
    
    P_CHART_TYPE        IN VARCHAR2 DEFAULT NULL,
    P_CHART_SQL         IN VARCHAR2 DEFAULT NULL,
    P_MAX_ROWS          IN NUMBER   DEFAULT NULL,
    P_NO_DATA_FOUND     IN VARCHAR2 DEFAULT NULL,
    P_CHART_COLOR_THEME IN VARCHAR2 DEFAULT NULL
    )
 IS
    L_REGION_SOURCE  VARCHAR2(32767);
 BEGIN
   
   
   
   WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
       P_FLOW_ID           => P_FLOW_ID,
       P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
    
    
    
    IF NOT PAGE_EXISTS (P_FLOW_ID,P_FLOW_STEP_ID) THEN
        WWV_FLOW_API.CREATE_PAGE(
          P_ID                  => P_FLOW_STEP_ID,
          P_FLOW_ID             => P_FLOW_ID,
          P_TAB_SET             => REPLACE(P_TAB_SET,'%null%',NULL),
          P_NAME                => P_PAGE_NAME,
          P_USER_INTERFACE_ID   => P_USER_INTERFACE_ID,
          P_STEP_TITLE          => P_PAGE_NAME,
          P_STEP_SUB_TITLE      => P_PAGE_NAME,
          P_STEP_SUB_TITLE_TYPE => 'TEXT_WITH_SUBSTITUTIONS',
          P_WELCOME_TEXT        => '',
          P_BOX_WELCOME_TEXT    => '',
          P_BOX_FOOTER_TEXT     => '',
          P_FOOTER_TEXT         => '',
          P_STEP_TEMPLATE       => '',
          P_PAGE_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_PAGE_TEMPLATE, 'PAGE'),
          P_BOX_IMAGE           => '',
          P_REQUIRED_ROLE       => '',
          P_PAGE_COMMENT       => NULL);
 
       
       IF REPLACE(P_TAB_SET,'%null%',NULL) IS NOT NULL THEN
           CREATE_TAB (
              P_FLOW_ID  => P_FLOW_ID,
              P_PAGE_ID  => P_FLOW_STEP_ID,
              P_TAB_SET  => P_TAB_SET,
              P_TAB_NAME => P_TAB_NAME,
              P_TAB_TEXT => P_TAB_TEXT);
       END IF;
    END IF;
 
     
     
     
     L_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
     L_REGION_SOURCE := '<div class="svgRegion">'||
                        '<embed src="f?p=&APP_ID.:'||P_FLOW_STEP_ID||
                        ':#SESSION#:FLOW_SVG_CHART_R#REGION_ID#" width="#WIDTH#" height="#HEIGHT#" type="image/svg+xml" />'||
                        '</div><script src="#IMAGE_PREFIX#javascript/plugins.js" language="JavaScript" type="text/javascript"></script>';
 
     WWV_FLOW_API.CREATE_PAGE_PLUG (
         P_ID                            => L_REGION_ID,
         P_FLOW_ID                       => P_FLOW_ID,
         P_PAGE_ID                       => P_FLOW_STEP_ID,
         P_PLUG_TEMPLATE                 => P_REGION_TEMPLATE,
         P_REGION_TEMPLATE_OPTIONS       => GET_PRESET_TEMPLATE_OPTIONS (P_REGION_TEMPLATE,'REGION'),
         P_PLUG_NAME                     => P_REGION_NAME,
         P_PLUG_DISPLAY_SEQUENCE         => '10',
         P_PLUG_DISPLAY_POINT            => 'BODY',
         P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
         P_PLUG_SOURCE                   => L_REGION_SOURCE,
         P_PLUG_SOURCE_TYPE              => WWV_FLOW_REGION_NATIVE.C_LEGACY_SVG_CHART,
         P_PLUG_COMMENT                  => NULL);
 
     
     
     
 
     DECLARE
        L_DATA_LABELS  VARCHAR2(4000);
        I              PLS_INTEGER := 0;
        L_MARKER_STYLE VARCHAR2(4000);
        L_LINE_STYLE   VARCHAR2(4000);
     BEGIN
        WWV_FLOW_SVG.G_THEME := P_CHART_COLOR_THEME;
        WWV_FLOW_SVG.INIT_COLORS;
 
        IF P_CHART_TYPE IN ('HBAR','VBAR')
        THEN
           L_DATA_LABELS := 'BUBBLE';
        END IF;
        IF P_CHART_TYPE IN ('HBAR','VBAR','PIE') THEN
           WWV_FLOW_GENERIC_ATTR.SET_ATTRIBUTES (
             P_REGION_ID => L_REGION_ID,
             P_VALUE_02  => P_CHART_TYPE,
             P_VALUE_09  => 'Y', 
             P_VALUE_10  => P_CHART_COLOR_THEME,
             P_VALUE_14  => 'Y', 
             P_VALUE_30  => 400,
             P_VALUE_31  => 600,
             P_VALUE_COUNT => 35);
           WWV_FLOW_SERIES_ATTR.SET_ATTRIBUTES (
             P_REGION_ID  => L_REGION_ID,
             P_A001       => P_CHART_SQL,
             P_A002       => P_MAX_ROWS,
             P_A003       => P_NO_DATA_FOUND,
             P_A004       => WWV_FLOW_LANG.SYSTEM_MESSAGE('SERIES','1'),
             P_A005       => WWV_FLOW_SVG.G_COLORS(I),
             P_A006       => L_DATA_LABELS,
             P_VALUE_COUNT=> 12);
        ELSIF P_CHART_TYPE IN ('DIALSWEEP','DIAL') THEN
           WWV_FLOW_GENERIC_ATTR.SET_ATTRIBUTES (
             P_REGION_ID => L_REGION_ID,
             P_VALUE_02  => P_CHART_TYPE,
             P_VALUE_09  => 'Y', 
             P_VALUE_10  => P_CHART_COLOR_THEME,
             P_VALUE_14  => 'Y', 
             P_VALUE_30  => 400,
             P_VALUE_31  => 600,
             P_VALUE_COUNT => 35);
           WWV_FLOW_SERIES_ATTR.SET_ATTRIBUTES (
             P_REGION_ID  => L_REGION_ID,
             P_A001       => P_CHART_SQL,
             P_A002       => P_MAX_ROWS,
             P_A003       => P_NO_DATA_FOUND,
             P_A004       => WWV_FLOW_LANG.SYSTEM_MESSAGE('SERIES','1'),
             P_A005       => WWV_FLOW_SVG.G_COLORS(I),
             P_A006       => L_DATA_LABELS,
             P_VALUE_COUNT=> 12);
 
        ELSIF P_CHART_TYPE IN ('LINE','SCATTER','STACKED','STACKED_PCT','CLUSTER','HSTACKED','HSTACKED_PCT','HCLUSTER') THEN
           WWV_FLOW_GENERIC_ATTR.SET_ATTRIBUTES (
             P_REGION_ID => L_REGION_ID,
             P_VALUE_02  => P_CHART_TYPE,
             P_VALUE_09  => 'Y', 
             P_VALUE_10  => P_CHART_COLOR_THEME,
             P_VALUE_14  => 'Y', 
             P_VALUE_30  => 400,
             P_VALUE_31  => 600,
             P_VALUE_COUNT => 35);
           
           
           
           
           FOR C1 IN (SELECT SEQ_ID,
                             C001 NAME,    
                             C002 COLOR,   
                             C003 QUERY,   
                             C004 MAX_ROW, 
                             C005 NO_DATA  
                      FROM WWV_FLOW_COLLECTIONS
                      WHERE COLLECTION_NAME = 'SVG_CHART_SERIES'
                      ORDER BY SEQ_ID)
           LOOP
              I := I + 1;
              IF P_CHART_TYPE IN ('LINE','SCATTER') THEN
              IF I = 1 THEN
                 L_MARKER_STYLE := 'CIRCLE';
              ELSIF I= 2 THEN
                 L_MARKER_STYLE := 'SQUARE';
              ELSIF I = 3 THEN
                 L_MARKER_STYLE := 'DIAMOND';
              ELSIF I = 4 THEN
                 L_MARKER_STYLE := 'TRIANGLE';
              ELSE
                 L_MARKER_STYLE := 'CIRCLE';
              END IF;
              IF P_CHART_TYPE = 'LINE' THEN
                 L_LINE_STYLE := 'STRAIGHT';
              END IF;
              END IF;
 
              WWV_FLOW_SERIES_ATTR.SET_ATTRIBUTES (
                 P_REGION_ID  => L_REGION_ID,
                 P_A001       => C1.QUERY,
                 P_A002       => C1.MAX_ROW,
                 P_A003       => C1.NO_DATA,
                 P_A004       => C1.NAME,
                 P_A005       => WWV_FLOW_SVG.G_COLORS(I),
                 P_A009       => L_MARKER_STYLE,
                 P_A010       => '3',
                 P_A011       => L_LINE_STYLE,
                 P_VALUE_COUNT=> 15);
           END LOOP;
        END IF;
     EXCEPTION WHEN OTHERS THEN NULL;
     END;
 EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(-20001,
                           WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.CREATE_SVG_CHART',SQLERRM)
                           );
 END CREATE_SVG_CHART;
 
 
 
 
 
 PROCEDURE CREATE_FLASH_CHART5 (
    P_FLOW_ID                 IN NUMBER   DEFAULT NULL,
    P_PAGE_ID                 IN NUMBER   DEFAULT NULL,
    P_PAGE_NAME               IN VARCHAR2 DEFAULT NULL,
    P_GROUP_NAME              IN VARCHAR2 DEFAULT NULL,
    P_PAGE_MODE               IN VARCHAR2,
    P_USER_INTERFACE_ID       IN NUMBER,
    
    P_TAB_SET                 IN VARCHAR2 DEFAULT NULL,
    P_TAB_NAME                IN VARCHAR2 DEFAULT NULL,
    P_TAB_TEXT                IN VARCHAR2 DEFAULT NULL,
    
    P_NAV_LIST_ID              IN NUMBER DEFAULT NULL,
    P_NAV_LIST_ITEM_ID         IN NUMBER DEFAULT NULL,
    P_NAV_LIST_ITEM_NAME       IN VARCHAR2 DEFAULT NULL,
    P_NAV_LIST_PARENT_ITEM_ID  IN NUMBER DEFAULT NULL,
    P_NAV_LIST_CHILD_ITEM_NAME IN VARCHAR2 DEFAULT NULL,
    
    P_REGION_TEMPLATE         IN NUMBER   DEFAULT NULL,
    P_REGION_NAME             IN VARCHAR2 DEFAULT NULL,
    
    P_BREADCRUMB_ID           IN NUMBER   DEFAULT NULL,
    P_BREADCRUMB_NAME         IN VARCHAR2 DEFAULT NULL,
    P_PARENT_BC_ID            IN NUMBER   DEFAULT NULL,
    
    P_CHART_QUERY             IN VARCHAR2 DEFAULT NULL,
    P_AJAX_ITEMS_TO_SUBMIT    IN VARCHAR2 DEFAULT NULL,
    P_MAX_ROWS                IN NUMBER   DEFAULT NULL,
    P_NO_DATA_FOUND           IN VARCHAR2 DEFAULT NULL,
    
    P_CHART_RENDERING         IN VARCHAR2 DEFAULT NULL,
    P_DEFAULT_CHART_TYPE      IN VARCHAR2 DEFAULT NULL,
    P_CHART_TITLE             IN VARCHAR2 DEFAULT NULL,
    P_CHART_ANIMATION         IN VARCHAR2 DEFAULT NULL,
    P_ENABLE_3D_MODE          IN VARCHAR2 DEFAULT NULL,
    
    P_BGTYPE                  IN VARCHAR2 DEFAULT NULL,
    P_BGCOLOR1                IN VARCHAR2 DEFAULT NULL,
    P_BGCOLOR2                IN VARCHAR2 DEFAULT NULL,
    P_GRADIENT_ROTATION       IN VARCHAR2 DEFAULT NULL,
    P_GRID_BGTYPE             IN VARCHAR2 DEFAULT NULL,
    P_GRID_BGCOLOR1           IN VARCHAR2 DEFAULT NULL,
    P_GRID_BGCOLOR2           IN VARCHAR2 DEFAULT NULL,
    P_GRID_GRADIENT_ROTATION  IN VARCHAR2 DEFAULT NULL,
    P_COLOR_SCHEME            IN VARCHAR2 DEFAULT NULL,
    P_CUSTOM_COLORS           IN VARCHAR2 DEFAULT NULL,
    P_MAP_UNDEF_COLOR_SCHEME  IN VARCHAR2 DEFAULT NULL,
    P_MAP_UNDEF_CUSTOM_COLORS IN VARCHAR2 DEFAULT NULL,
    
    P_X_AXIS_TITLE            IN VARCHAR2 DEFAULT NULL,
    P_Y_AXIS_TITLE            IN VARCHAR2 DEFAULT NULL,
    
    P_MAP_SOURCE              IN VARCHAR2 DEFAULT NULL,
    P_MAP_PROJECTION          IN VARCHAR2 DEFAULT NULL,
    P_SHOW_HINTS              IN VARCHAR2 DEFAULT NULL,
    P_SHOW_NAMES              IN VARCHAR2 DEFAULT NULL,
    P_SHOW_VALUES             IN VARCHAR2 DEFAULT NULL,
    P_SHOW_SCROLLBAR          IN VARCHAR2 DEFAULT NULL,
    P_SHOW_LEGEND             IN VARCHAR2 DEFAULT NULL,
    P_SHOW_GRID               IN VARCHAR2 DEFAULT NULL
    )
 IS
    L_REGION_ID           NUMBER;
    L_FLASH_CHART_ID      NUMBER;
    L_CHART_WIDTH         NUMBER;
    L_CHART_HEIGHT        NUMBER;
    L_VALUE_ROTATION      NUMBER;
    L_GROUP_ID            NUMBER := NULL;
    L_PLUG_SOURCE_TYPE    VARCHAR2(30);
    L_SERIES_TYPE         VARCHAR2(30);
    L_MARKER              VARCHAR2(30);
    L_CHART_NAME          VARCHAR2(255);
    L_CHART_QUERY_TYPE    VARCHAR2(255);
    L_DISPLAY_ATTR        VARCHAR2(4000);
    L_DIAL_TICK_ATTR      VARCHAR2(4000);
    L_GANTT_ATTR          VARCHAR2(32767);
    L_MAP_ATTR            VARCHAR2(32767);
    L_PIE_ATTR            VARCHAR2(32767);
 BEGIN
   
   
   
   WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
       P_FLOW_ID           => P_FLOW_ID,
       P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
   
   
   
   IF P_GROUP_NAME IS NOT NULL THEN
       L_GROUP_ID := WWV_FLOW_UTILITIES.GET_PAGE_GROUP_ID(P_GROUP_NAME => P_GROUP_NAME, P_APPLICATION_ID => P_FLOW_ID);
       
       IF L_GROUP_ID IS NULL THEN
           L_GROUP_ID := WWV_FLOW_ID.NEXT_VAL;
           WWV_FLOW_API.CREATE_PAGE_GROUP(P_ID => L_GROUP_ID, P_FLOW_ID => P_FLOW_ID, P_GROUP_NAME => P_GROUP_NAME);
       END IF;
   END IF;
 
    
    
    
    IF NOT PAGE_EXISTS (P_FLOW_ID,P_PAGE_ID) THEN
        WWV_FLOW_API.CREATE_PAGE(
          P_ID                  => P_PAGE_ID,
          P_FLOW_ID             => P_FLOW_ID,
          P_PAGE_MODE           => P_PAGE_MODE,
          P_GROUP_ID            => L_GROUP_ID,
          P_TAB_SET             => REPLACE(P_TAB_SET,'%null%',NULL),
          P_NAME                => P_PAGE_NAME,
          P_USER_INTERFACE_ID   => P_USER_INTERFACE_ID,
          P_STEP_TITLE          => P_PAGE_NAME,
          P_STEP_SUB_TITLE      => P_PAGE_NAME,
          P_STEP_SUB_TITLE_TYPE => 'TEXT_WITH_SUBSTITUTIONS',
          P_WELCOME_TEXT        => '',
          P_BOX_WELCOME_TEXT    => '',
          P_BOX_FOOTER_TEXT     => '',
          P_FOOTER_TEXT         => '',
          P_STEP_TEMPLATE       => '',
          P_PAGE_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_PAGE_TEMPLATE, 'PAGE'),
          P_BOX_IMAGE           => '',
          P_REQUIRED_ROLE       => '',
          P_PAGE_COMMENT       => NULL);
 
       IF P_NAV_LIST_ID IS NOT NULL THEN
           
           CREATE_NAVIGATION_LIST_ITEM (
             P_FLOW_ID                  => P_FLOW_ID,
             P_PAGE_ID                  => P_PAGE_ID,
             P_PAGE_NAME                => P_PAGE_NAME,
             P_NAV_LIST_ID              => P_NAV_LIST_ID,
             P_NAV_LIST_ITEM_ID         => P_NAV_LIST_ITEM_ID,
             P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_ITEM_NAME,
             P_NAV_LIST_PARENT_ITEM_ID  => P_NAV_LIST_PARENT_ITEM_ID,
             P_NAV_LIST_CHILD_ITEM_NAME => P_NAV_LIST_CHILD_ITEM_NAME );
       ELSE
           
           IF REPLACE(P_TAB_SET,'%null%',NULL) IS NOT NULL THEN
             CREATE_TAB (
              P_FLOW_ID  => P_FLOW_ID,
              P_PAGE_ID  => P_PAGE_ID,
              P_TAB_SET  => P_TAB_SET,
              P_TAB_NAME => P_TAB_NAME,
              P_TAB_TEXT => P_TAB_TEXT);
           END IF;
 
       END IF;
    END IF;
 
    
    
    
     WWV_FLOW_WIZARD_API.CREATE_BREADCRUMB_REGION (
         P_APPLICATION_ID             => P_FLOW_ID,
         P_PAGE_ID                    => P_PAGE_ID,
         P_SEQ                        => 10,
         P_BREADCRUMB_ID              => P_BREADCRUMB_ID,
         P_BREADCRUMB_ENTRY_NAME      => P_BREADCRUMB_NAME,
         P_PARENT_BREADCRUMB_ENTRY_ID => P_PARENT_BC_ID );
 
     
     
     
     L_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
 
     IF P_DEFAULT_CHART_TYPE = 'Map' THEN
         L_PLUG_SOURCE_TYPE := WWV_FLOW_REGION_NATIVE.C_FLASH_MAP;
     ELSE
         L_PLUG_SOURCE_TYPE := WWV_FLOW_REGION_NATIVE.C_FLASH_CHART5;
     END IF;
 
     WWV_FLOW_API.CREATE_PAGE_PLUG (
         P_ID                            => L_REGION_ID,
         P_FLOW_ID                       => P_FLOW_ID,
         P_PAGE_ID                       => P_PAGE_ID,
         P_PLUG_TEMPLATE                 => P_REGION_TEMPLATE,
         P_REGION_TEMPLATE_OPTIONS       => GET_PRESET_TEMPLATE_OPTIONS (P_REGION_TEMPLATE,'REGION'),
         P_PLUG_NAME                     => P_REGION_NAME,
         P_PLUG_DISPLAY_SEQUENCE         => '10',
         P_PLUG_DISPLAY_POINT            => 'BODY',
         P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
         P_PLUG_SOURCE                   => NULL,
         P_PLUG_SOURCE_TYPE              => L_PLUG_SOURCE_TYPE,
         P_PLUG_COMMENT                  => NULL);
 
     
     
     
     L_FLASH_CHART_ID := WWV_FLOW_ID.NEXT_VAL;
     L_CHART_NAME     := 'chart_'||L_FLASH_CHART_ID;
 
     IF P_DEFAULT_CHART_TYPE IN ('2DLine','ScatterMarker') THEN
         L_MARKER := 'Circle';
     ELSE
         L_MARKER := 'None';
     END IF;
 
     
     
     L_DISPLAY_ATTR := P_ENABLE_3D_MODE||':'||P_SHOW_HINTS||':'||P_SHOW_NAMES||':'||P_SHOW_VALUES||':'||P_SHOW_GRID||':'
                       ||P_SHOW_SCROLLBAR||':'||P_SHOW_LEGEND||':::Y:'||L_MARKER||':::N:::Default:::S';
 
     
     
     IF NOT WWV_FLOW_PAGE.IS_JQM_UI ( P_APPLICATION_ID    => P_FLOW_ID,
                                  P_PAGE_ID           => P_PAGE_ID,
                                  P_SECURITY_GROUP_ID => WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID) THEN
         IF P_DEFAULT_CHART_TYPE IN ('GaugeChart','DIAL_PCT') THEN
             L_DIAL_TICK_ATTR := 'T:T:'||P_SHOW_NAMES||':Auto:needle:2:1:90:180::Inside';
             L_CHART_WIDTH  := 600;
             L_CHART_HEIGHT := 400;
         ELSIF P_DEFAULT_CHART_TYPE IN ('ProjectGantt','ResourceGantt') THEN
             L_CHART_WIDTH  := 800;
             L_CHART_HEIGHT := 400;
         ELSE
             L_CHART_WIDTH  := 700;
             L_CHART_HEIGHT := 500;
         END IF;
     END IF;
 
     
     
     L_GANTT_ATTR := 'Y:Rhomb:Rhomb:Full:Rhomb:Rhomb:Full:Rhomb:Rhomb:Full:30:15:5:Y:I:N:S:E';
 
     
     L_MAP_ATTR   := NVL(P_MAP_PROJECTION,'Orthographic')||':RegionBounds:REGION_NAME:Y:Y:::::Y:N';
 
     
     L_PIE_ATTR   := 'Outside:::';
 
     
     IF P_DEFAULT_CHART_TYPE IN ('Stacked2DColumn', '2DSTACKED_PCT', 'Stacked3DColumn', '3DSTACKED_PCT') AND P_SHOW_VALUES IS NOT NULL THEN
         L_VALUE_ROTATION := 90;
     END IF;
 
     WWV_FLOW_API.CREATE_FLASH_CHART5 (
         P_ID                         => L_FLASH_CHART_ID,
         P_FLOW_ID                    => P_FLOW_ID,
         P_PAGE_ID                    => P_PAGE_ID,
         P_REGION_ID                  => L_REGION_ID,
         P_DEFAULT_CHART_TYPE         => P_DEFAULT_CHART_TYPE,
         P_CHART_TITLE                => P_CHART_TITLE,
         P_CHART_RENDERING            => P_CHART_RENDERING,
         P_CHART_NAME                 => L_CHART_NAME,
         P_CHART_WIDTH                => L_CHART_WIDTH,
         P_CHART_HEIGHT               => L_CHART_HEIGHT,
         P_CHART_ANIMATION            => P_CHART_ANIMATION,
         P_DISPLAY_ATTR               => L_DISPLAY_ATTR,
         P_DIAL_TICK_ATTR             => L_DIAL_TICK_ATTR,
         P_GANTT_ATTR                 => L_GANTT_ATTR,
         P_PIE_ATTR                   => L_PIE_ATTR,
         P_MAP_ATTR                   => L_MAP_ATTR,
         P_MAP_SOURCE                 => P_MAP_SOURCE,
         P_BGTYPE                     => P_BGTYPE,
         P_BGCOLOR1                   => P_BGCOLOR1,
         P_BGCOLOR2                   => P_BGCOLOR2,
         P_GRADIENT_ROTATION          => P_GRADIENT_ROTATION,
         P_GRID_BGTYPE                => P_GRID_BGTYPE,
         P_GRID_BGCOLOR1              => P_GRID_BGCOLOR1,
         P_GRID_BGCOLOR2              => P_GRID_BGCOLOR2,
         P_GRID_GRADIENT_ROTATION     => P_GRID_GRADIENT_ROTATION,
         P_COLOR_SCHEME               => P_COLOR_SCHEME,
         P_CUSTOM_COLORS              => P_CUSTOM_COLORS,
         P_MAP_UNDEF_COLOR_SCHEME     => P_MAP_UNDEF_COLOR_SCHEME,
         P_MAP_UNDEF_CUSTOM_COLORS    => P_MAP_UNDEF_CUSTOM_COLORS,
         P_X_AXIS_TITLE               => P_X_AXIS_TITLE,
         P_Y_AXIS_TITLE               => P_Y_AXIS_TITLE,
         P_NAMES_FONT                 => 'Tahoma:10:#000000',
         P_VALUES_FONT                => 'Tahoma:10:#000000',
         P_VALUES_ROTATION            => L_VALUE_ROTATION,
         P_HINTS_FONT                 => 'Tahoma:10:#000000',
         P_LEGEND_FONT                => 'Tahoma:10:#000000',
         P_GRID_LABELS_FONT           => 'Tahoma:10:#000000',
         P_GAUGE_LABELS_FONT          => 'Tahoma:10:#000000',
         P_CHART_TITLE_FONT           => 'Tahoma:14:#000000',
         P_X_AXIS_TITLE_FONT          => 'Tahoma:14:#000000',
         P_Y_AXIS_TITLE_FONT          => 'Tahoma:14:#000000',
         P_X_AXIS_LABEL_FONT          => 'Tahoma:10:#000000',
         P_Y_AXIS_LABEL_FONT          => 'Tahoma:10:#000000'
         );
 
     IF  (INSTR(REPLACE(REPLACE(REPLACE(UPPER(P_CHART_QUERY),' ',''),WWV_FLOW.LF,''),CHR(13),''), 'DECLARE', 1)=1) OR
         (INSTR(REPLACE(REPLACE(REPLACE(UPPER(P_CHART_QUERY),' ',''),WWV_FLOW.LF,''),CHR(13),''), 'BEGIN'  , 1)=1) THEN
         L_CHART_QUERY_TYPE := 'FUNCTION_RETURNING_SQL_QUERY';
     ELSE
           L_CHART_QUERY_TYPE := 'SQL_QUERY';
     END IF;
 
    IF P_DEFAULT_CHART_TYPE IN ('2DLine') THEN
        L_SERIES_TYPE := 'Line';
    ELSIF P_DEFAULT_CHART_TYPE IN ('2DColumn','3DColumn','2DSTACKED_PCT','3DSTACKED_PCT','Stacked2DColumn','Stacked3DColumn','StackedHorizontal2DColumn','StackedHorizontal3DColumn','Horizontal2DColumn','Horizontal3DColumn') THEN
        L_SERIES_TYPE := 'Bar';
    END IF;
 
    WWV_FLOW_API.CREATE_FLASH_CHART5_SERIES (
         P_CHART_ID                     => L_FLASH_CHART_ID,
         P_FLOW_ID                      => P_FLOW_ID,
         P_SERIES_SEQ                   => 10,
         P_SERIES_NAME                  => WWV_FLOW_LANG.SYSTEM_MESSAGE('SERIES','1'),
         P_SERIES_TYPE                  => L_SERIES_TYPE,
         P_SERIES_QUERY                 => P_CHART_QUERY,
         P_SERIES_QUERY_TYPE            => L_CHART_QUERY_TYPE,
         P_SERIES_AJAX_ITEMS_TO_SUBMIT  => WWV_FLOW_PLUGIN_UTIL.CLEANUP_PAGE_ITEM_NAMES(P_AJAX_ITEMS_TO_SUBMIT),
         P_SERIES_QUERY_NO_DATA_FOUND   => P_NO_DATA_FOUND,
         P_SERIES_QUERY_ROW_COUNT_MAX   => P_MAX_ROWS);
 EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(-20001,
                            WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.CREATE_FLASH_CHART',SQLERRM)
                           );
 END CREATE_FLASH_CHART5;
 
 PROCEDURE CREATE_FLASH_CHART5_REGION (
    P_FLOW_ID            IN NUMBER   DEFAULT NULL,
    P_PAGE_ID            IN NUMBER   DEFAULT NULL,
    P_REGION_TEMPLATE    IN NUMBER   DEFAULT NULL,
    P_REGION_NAME        IN VARCHAR2 DEFAULT NULL,
    P_PARENT_PLUG_ID     IN NUMBER   DEFAULT NULL,
    P_DISPLAY_SEQ        IN NUMBER   DEFAULT NULL,
    P_DISPLAY_COL        IN NUMBER   DEFAULT NULL,
    P_DISPLAY_POINT      IN VARCHAR2 DEFAULT NULL,
    P_REGION_SOURCE_TYPE IN VARCHAR2 DEFAULT NULL,
    P_DISPLAY_COND       IN VARCHAR2 DEFAULT NULL,
    P_DISPLAY_COND2      IN VARCHAR2 DEFAULT NULL,
    P_DISPLAY_COND_TYPE  IN VARCHAR2 DEFAULT NULL,
    P_AUTH_SCHEME        IN VARCHAR2 DEFAULT NULL,
    
    P_CHART_RENDERING      IN VARCHAR2 DEFAULT NULL,
    P_DEFAULT_CHART_TYPE   IN VARCHAR2 DEFAULT NULL,
    P_CHART_TITLE          IN VARCHAR2 DEFAULT NULL,
    P_CHART_QUERY          IN VARCHAR2 DEFAULT NULL,
    P_AJAX_ITEMS_TO_SUBMIT IN VARCHAR2 DEFAULT NULL,
    P_CHART_ANIMATION      IN VARCHAR2 DEFAULT NULL,
    
    P_BGTYPE             IN VARCHAR2 DEFAULT NULL,
    P_BGCOLOR1           IN VARCHAR2 DEFAULT NULL,
    P_BGCOLOR2           IN VARCHAR2 DEFAULT NULL,
    P_GRADIENT_ROTATION  IN VARCHAR2 DEFAULT NULL,
    P_GRID_BGTYPE        IN VARCHAR2 DEFAULT NULL,
    P_GRID_BGCOLOR1      IN VARCHAR2 DEFAULT NULL,
    P_GRID_BGCOLOR2      IN VARCHAR2 DEFAULT NULL,
    P_GRID_GRADIENT_ROTATION  IN VARCHAR2 DEFAULT NULL,
    P_COLOR_SCHEME       IN VARCHAR2 DEFAULT NULL,
    P_CUSTOM_COLORS      IN VARCHAR2 DEFAULT NULL,
    P_MAP_UNDEF_COLOR_SCHEME IN VARCHAR2 DEFAULT NULL,
    P_MAP_UNDEF_CUSTOM_COLORS IN VARCHAR2 DEFAULT NULL,
    
    P_X_AXIS_TITLE       IN VARCHAR2 DEFAULT NULL,
    P_Y_AXIS_TITLE       IN VARCHAR2 DEFAULT NULL,
    P_MAX_ROWS           IN NUMBER   DEFAULT NULL,
    P_NO_DATA_FOUND      IN VARCHAR2 DEFAULT NULL,
    
    P_MAP_SOURCE         IN VARCHAR2 DEFAULT NULL,
    P_MAP_PROJECTION     IN VARCHAR2 DEFAULT NULL,
    P_SHOW_HINTS         IN VARCHAR2 DEFAULT NULL,
    P_SHOW_NAMES         IN VARCHAR2 DEFAULT NULL,
    P_SHOW_VALUES        IN VARCHAR2 DEFAULT NULL,
    P_SHOW_LEGEND        IN VARCHAR2 DEFAULT NULL,
    P_SHOW_GRID          IN VARCHAR2 DEFAULT NULL,
    P_SHOW_SCROLLBAR     IN VARCHAR2 DEFAULT NULL
    )
 IS
    L_REGION_ID           NUMBER;
    L_FLASH_CHART_ID      NUMBER;
    L_CHART_WIDTH         NUMBER;
    L_CHART_HEIGHT        NUMBER;
    L_VALUE_ROTATION      NUMBER;
    L_MARKER              VARCHAR2(30);
    L_CHART_NAME          VARCHAR2(255);
    L_CHART_QUERY_TYPE    VARCHAR2(255);
    L_DISPLAY_ATTR        VARCHAR2(4000);
    L_DIAL_TICK_ATTR      VARCHAR2(4000);
    L_GANTT_ATTR          VARCHAR2(32767);
    L_MAP_ATTR            VARCHAR2(32767);
    L_PIE_ATTR            VARCHAR2(32767);
 BEGIN
    L_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
 
    WWV_FLOW_API.CREATE_PAGE_PLUG (
    P_ID => L_REGION_ID,
    P_FLOW_ID => P_FLOW_ID,
    P_PAGE_ID => P_PAGE_ID,
    P_PLUG_NAME => P_REGION_NAME,
    P_PLUG_TEMPLATE => REPLACE(P_REGION_TEMPLATE,'%null'||'%',NULL),
    P_REGION_TEMPLATE_OPTIONS  => GET_PRESET_TEMPLATE_OPTIONS (P_REGION_TEMPLATE,'REGION'),
    P_PARENT_PLUG_ID => P_PARENT_PLUG_ID,
    P_PLUG_DISPLAY_SEQUENCE => P_DISPLAY_SEQ,
    P_PLUG_DISPLAY_COLUMN => P_DISPLAY_COL,
    P_PLUG_DISPLAY_POINT => P_DISPLAY_POINT,
    P_PLUG_SOURCE => NULL,
    P_PLUG_SOURCE_TYPE => P_REGION_SOURCE_TYPE,
    P_PLUG_DISPLAY_WHEN_CONDITION => P_DISPLAY_COND,
    P_PLUG_DISPLAY_WHEN_COND2 => P_DISPLAY_COND2,
    P_PLUG_DISPLAY_CONDITION_TYPE => REPLACE(P_DISPLAY_COND_TYPE,'%null'||'%',NULL),
    P_PLUG_REQUIRED_ROLE=> REPLACE(P_AUTH_SCHEME,'%null'||'%',NULL)
    );
 
    
    L_FLASH_CHART_ID := WWV_FLOW_ID.NEXT_VAL;
    L_CHART_NAME     := 'chart_'||L_FLASH_CHART_ID;
 
    IF P_DEFAULT_CHART_TYPE IN ('2DLine','ScatterMarker') THEN
        L_MARKER := 'Circle';
    ELSE
        L_MARKER := 'None';
    END IF;
 
    
    L_DISPLAY_ATTR := ':'||P_SHOW_HINTS||':'||P_SHOW_NAMES||':'||P_SHOW_VALUES||':'||P_SHOW_GRID||':'||P_SHOW_SCROLLBAR||':'||P_SHOW_LEGEND||':::Y:'||L_MARKER||':::N::';
 
    
    
    L_GANTT_ATTR := 'Y:Rhomb:Rhomb:Full:Rhomb:Rhomb:Full:Rhomb:Rhomb:Full:30:15:5:Y:I:N:S:E';
 
    
    L_MAP_ATTR   := NVL(P_MAP_PROJECTION,'Orthographic')||':RegionBounds:REGION_NAME:Y:Y:::::Y:N';
 
    
    L_PIE_ATTR   := 'Outside:::';
 
 
    IF NOT WWV_FLOW_PAGE.IS_JQM_UI ( P_APPLICATION_ID    => P_FLOW_ID,
                                     P_PAGE_ID           => P_PAGE_ID,
                                     P_SECURITY_GROUP_ID => WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID) THEN
        IF P_DEFAULT_CHART_TYPE IN ('GaugeChart','DIAL_PCT') THEN
            L_DIAL_TICK_ATTR := 'T:T:'||P_SHOW_NAMES||':Auto:needle:2:1:90:180::Inside';
            L_CHART_WIDTH  := 600;
            L_CHART_HEIGHT := 400;
        ELSIF P_DEFAULT_CHART_TYPE IN ('ProjectGantt','ResourceGantt') THEN
            L_CHART_WIDTH  := 800;
            L_CHART_HEIGHT := 400;
        ELSE
            L_CHART_WIDTH  := 700;
            L_CHART_HEIGHT := 500;
        END IF;
    END IF;
 
    
    IF P_DEFAULT_CHART_TYPE IN ('Stacked2DColumn', '2DSTACKED_PCT', 'Stacked3DColumn', '3DSTACKED_PCT') AND P_SHOW_VALUES IS NOT NULL THEN
        L_VALUE_ROTATION := 90;
    END IF;
 
    WWV_FLOW_API.CREATE_FLASH_CHART5 (
         P_ID                         => L_FLASH_CHART_ID,
         P_FLOW_ID                    => P_FLOW_ID,
         P_PAGE_ID                    => P_PAGE_ID,
         P_REGION_ID                  => L_REGION_ID,
         P_DEFAULT_CHART_TYPE         => P_DEFAULT_CHART_TYPE,
         P_CHART_TITLE                => P_CHART_TITLE,
         P_CHART_RENDERING            => P_CHART_RENDERING,
         P_CHART_NAME                 => L_CHART_NAME,
         P_CHART_WIDTH                => L_CHART_WIDTH,
         P_CHART_HEIGHT               => L_CHART_HEIGHT,
         P_CHART_ANIMATION            => P_CHART_ANIMATION,
         P_DISPLAY_ATTR               => L_DISPLAY_ATTR,
         P_DIAL_TICK_ATTR             => L_DIAL_TICK_ATTR,
         P_GANTT_ATTR                 => L_GANTT_ATTR,
         P_PIE_ATTR                   => L_PIE_ATTR,
         P_MAP_ATTR                   => L_MAP_ATTR,
         P_MAP_SOURCE                 => P_MAP_SOURCE,
         P_BGTYPE                     => P_BGTYPE,
         P_BGCOLOR1                   => P_BGCOLOR1,
         P_BGCOLOR2                   => P_BGCOLOR2,
         P_GRADIENT_ROTATION          => P_GRADIENT_ROTATION,
         P_GRID_BGTYPE                => P_GRID_BGTYPE,
         P_GRID_BGCOLOR1              => P_GRID_BGCOLOR1,
         P_GRID_BGCOLOR2              => P_GRID_BGCOLOR2,
         P_GRID_GRADIENT_ROTATION     => P_GRID_GRADIENT_ROTATION,
         P_COLOR_SCHEME               => P_COLOR_SCHEME,
         P_CUSTOM_COLORS              => P_CUSTOM_COLORS,
         P_MAP_UNDEF_COLOR_SCHEME     => P_MAP_UNDEF_COLOR_SCHEME,
         P_MAP_UNDEF_CUSTOM_COLORS    => P_MAP_UNDEF_CUSTOM_COLORS,
         P_X_AXIS_TITLE               => P_X_AXIS_TITLE,
         P_Y_AXIS_TITLE               => P_Y_AXIS_TITLE,
         P_NAMES_FONT                 => 'Tahoma:10:#000000',
         P_VALUES_FONT                => 'Tahoma:10:#000000',
         P_VALUES_ROTATION            => L_VALUE_ROTATION,
         P_HINTS_FONT                 => 'Tahoma:10:#000000',
         P_LEGEND_FONT                => 'Tahoma:10:#000000',
         P_GRID_LABELS_FONT           => 'Tahoma:10:#000000',
         P_GAUGE_LABELS_FONT          => 'Tahoma:10:#000000',
         P_CHART_TITLE_FONT           => 'Tahoma:14:#000000',
         P_X_AXIS_TITLE_FONT          => 'Tahoma:14:#000000',
         P_Y_AXIS_TITLE_FONT          => 'Tahoma:14:#000000',
         P_X_AXIS_LABEL_FONT          => 'Tahoma:10:#000000',
         P_Y_AXIS_LABEL_FONT          => 'Tahoma:10:#000000'
         );
 
    IF  (INSTR(REPLACE(REPLACE(REPLACE(UPPER(P_CHART_QUERY),' ',''),WWV_FLOW.LF,''),CHR(13),''), 'DECLARE', 1)=1) OR
        (INSTR(REPLACE(REPLACE(REPLACE(UPPER(P_CHART_QUERY),' ',''),WWV_FLOW.LF,''),CHR(13),''), 'BEGIN'  , 1)=1) THEN
        L_CHART_QUERY_TYPE := 'FUNCTION_RETURNING_SQL_QUERY';
    ELSE
          L_CHART_QUERY_TYPE := 'SQL_QUERY';
    END IF;
 
    WWV_FLOW_API.CREATE_FLASH_CHART5_SERIES (
        P_CHART_ID                     => L_FLASH_CHART_ID,
        P_FLOW_ID                      => P_FLOW_ID,
        P_SERIES_SEQ                   => 10,
        P_SERIES_NAME                  => WWV_FLOW_LANG.SYSTEM_MESSAGE('SERIES','1'),
        P_SERIES_QUERY                 => P_CHART_QUERY,
        P_SERIES_QUERY_TYPE            => L_CHART_QUERY_TYPE,
        P_SERIES_AJAX_ITEMS_TO_SUBMIT  => WWV_FLOW_PLUGIN_UTIL.CLEANUP_PAGE_ITEM_NAMES(P_AJAX_ITEMS_TO_SUBMIT),
        P_SERIES_QUERY_NO_DATA_FOUND   => P_NO_DATA_FOUND,
        P_SERIES_QUERY_ROW_COUNT_MAX   => P_MAX_ROWS);
 EXCEPTION WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(-20001,
                            WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.CREATE_FLASH_CHART',SQLERRM)
                            );
 END CREATE_FLASH_CHART5_REGION;
 
 
 
 
 
 PROCEDURE CREATE_JET_CHART (
    P_FLOW_ID                  IN NUMBER   DEFAULT NULL,
    P_PAGE_ID                  IN NUMBER   DEFAULT NULL,
    P_PAGE_NAME                IN VARCHAR2 DEFAULT NULL,
    P_PAGE_MODE                IN VARCHAR2,
    P_USER_INTERFACE_ID        IN NUMBER,
    P_REGION_TEMPLATE          IN NUMBER   DEFAULT NULL,
    P_REGION_NAME              IN VARCHAR2 DEFAULT NULL,
    
    P_TAB_SET                  IN VARCHAR2 DEFAULT NULL,
    P_TAB_NAME                 IN VARCHAR2 DEFAULT NULL,
    P_TAB_TEXT                 IN VARCHAR2 DEFAULT NULL,
    
    P_NAV_LIST_ID              IN NUMBER DEFAULT NULL,
    P_NAV_LIST_ITEM_ID         IN NUMBER DEFAULT NULL,
    P_NAV_LIST_ITEM_NAME       IN VARCHAR2 DEFAULT NULL,
    P_NAV_LIST_PARENT_ITEM_ID  IN NUMBER DEFAULT NULL,
    P_NAV_LIST_CHILD_ITEM_NAME IN VARCHAR2 DEFAULT NULL,
    
    P_BREADCRUMB_ID            IN NUMBER   DEFAULT NULL,
    P_BREADCRUMB_NAME          IN VARCHAR2 DEFAULT NULL,
    P_PARENT_BC_ID             IN NUMBER   DEFAULT NULL,
    
    P_SQL                      IN VARCHAR2 DEFAULT NULL,
    P_CHART_TYPE               IN VARCHAR2 DEFAULT NULL,
    P_SERIES_TYPE              IN VARCHAR2 DEFAULT NULL,
    P_MAX_ROW_COUNT            IN NUMBER   DEFAULT NULL,
    P_NO_DATA_FOUND            IN VARCHAR2 DEFAULT NULL,
    
    P_LOCATION                 IN VARCHAR2 DEFAULT NULL,
    P_QUERY_TYPE               IN VARCHAR2 DEFAULT 'SQL_QUERY',
    P_WEB_SRC_MODULE_ID        IN NUMBER   DEFAULT NULL,
    P_REMOTE_SERVER_ID         IN NUMBER   DEFAULT NULL,
    P_TABLE_OWNER              IN VARCHAR2 DEFAULT NULL,
    P_TABLE_NAME               IN VARCHAR2 DEFAULT NULL,
    P_WHERE_CLAUSE             IN VARCHAR2 DEFAULT NULL,
    P_ORDER_BY_CLAUSE          IN VARCHAR2 DEFAULT NULL,
    P_OPTIMIZER_HINT           IN VARCHAR2 DEFAULT NULL,
    
    P_COLUMNS                  IN VARCHAR2 DEFAULT NULL,   
    
    P_SERIES_NAME_COLUMN_NAME  IN VARCHAR2 DEFAULT NULL,
    P_ITEMS_VALUE_COLUMN_NAME  IN VARCHAR2 DEFAULT NULL,
    P_ITEMS_LOW_COLUMN_NAME    IN VARCHAR2 DEFAULT NULL,
    P_ITEMS_HIGH_COLUMN_NAME   IN VARCHAR2 DEFAULT NULL,
    P_ITEMS_OPEN_COLUMN_NAME   IN VARCHAR2 DEFAULT NULL,
    P_ITEMS_CLOSE_COLUMN_NAME  IN VARCHAR2 DEFAULT NULL,
    P_ITEMS_VOLUME_COLUMN_NAME IN VARCHAR2 DEFAULT NULL,
    P_ITEMS_X_COLUMN_NAME      IN VARCHAR2 DEFAULT NULL,
    P_ITEMS_Y_COLUMN_NAME      IN VARCHAR2 DEFAULT NULL,
    P_ITEMS_Z_COLUMN_NAME      IN VARCHAR2 DEFAULT NULL,
    P_ITEMS_TARGET_VALUE       IN VARCHAR2 DEFAULT NULL,
    P_ITEMS_MAX_VALUE          IN VARCHAR2 DEFAULT NULL,
    P_GROUP_NAME_COLUMN_NAME   IN VARCHAR2 DEFAULT NULL,
    P_GROUP_SHORT_DESC_COLUMN_NAME IN VARCHAR2 DEFAULT NULL,
    P_ITEMS_LABEL_COLUMN_NAME  IN VARCHAR2 DEFAULT NULL,
    P_AGGREGATE_FUNCTION       IN VARCHAR2 DEFAULT NULL,
    P_AJAX_ITEMS_TO_SUBMIT     IN VARCHAR2 DEFAULT NULL,
    P_LINK_TARGET              IN VARCHAR2 DEFAULT NULL,
    P_LINK_TARGET_TYPE         IN VARCHAR2 DEFAULT NULL,
    
    P_GANTT_START_DATE_COLUMN  IN VARCHAR2 DEFAULT NULL,
    P_GANTT_END_DATE_COLUMN    IN VARCHAR2 DEFAULT NULL,
    P_GANTT_ROW_ID             IN VARCHAR2 DEFAULT NULL,
    P_GANTT_ROW_NAME           IN VARCHAR2 DEFAULT NULL,
    P_GANTT_TASK_ID            IN VARCHAR2 DEFAULT NULL,
    P_GANTT_TASK_NAME          IN VARCHAR2 DEFAULT NULL,
    P_GANTT_TASK_START_DATE    IN VARCHAR2 DEFAULT NULL,
    P_GANTT_TASK_END_DATE      IN VARCHAR2 DEFAULT NULL,
    
    P_TITLE                    IN VARCHAR2 DEFAULT NULL,
    P_ORIENTATION              IN VARCHAR2 DEFAULT NULL,
    P_STACK                    IN VARCHAR2 DEFAULT NULL,
    P_SPARK_CHART              IN VARCHAR2 DEFAULT NULL,
    P_COLOR_SCHEME             IN VARCHAR2 DEFAULT NULL,
    P_X_AXIS_TITLE             IN VARCHAR2 DEFAULT NULL,
    P_Y_AXIS_TITLE             IN VARCHAR2 DEFAULT NULL,
    P_SHOW_TOOLTIP             IN VARCHAR2 DEFAULT NULL,
    P_SHOW_LEGEND              IN VARCHAR2 DEFAULT NULL
    )
 IS
     L_CHART_ID    NUMBER;
     L_REGION_ID   NUMBER;
     L_SERIES_ID   NUMBER;
     L_X_AXIS_ID   NUMBER;
     L_Y_AXIS_ID   NUMBER;
     L_HEIGHT      VARCHAR2(10);
     L_TABLE_OWNER WWV_FLOW_GLOBAL.T_DBMS_ID := P_TABLE_OWNER;
 BEGIN
   
   
   
   WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
       P_FLOW_ID           => P_FLOW_ID,
       P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
       
    
    
    
    IF NOT PAGE_EXISTS (P_FLOW_ID,P_PAGE_ID) THEN
        WWV_FLOW_API.CREATE_PAGE(
          P_ID                  => P_PAGE_ID,
          P_FLOW_ID             => P_FLOW_ID,
          P_PAGE_MODE           => P_PAGE_MODE,
          P_GROUP_ID            => NULL,
          P_TAB_SET             => REPLACE(P_TAB_SET,'%null%',NULL),
          P_NAME                => P_PAGE_NAME,
          P_USER_INTERFACE_ID   => P_USER_INTERFACE_ID,
          P_STEP_TITLE          => P_PAGE_NAME,
          P_STEP_SUB_TITLE      => P_PAGE_NAME,
          P_STEP_SUB_TITLE_TYPE => 'TEXT_WITH_SUBSTITUTIONS',
          P_WELCOME_TEXT        => '',
          P_BOX_WELCOME_TEXT    => '',
          P_BOX_FOOTER_TEXT     => '',
          P_FOOTER_TEXT         => '',
          P_STEP_TEMPLATE       => '',
          P_PAGE_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_PAGE_TEMPLATE, 'PAGE'),
          P_BOX_IMAGE           => '',
          P_REQUIRED_ROLE       => '',
          P_PAGE_COMMENT       => NULL);
 
       IF P_NAV_LIST_ID IS NOT NULL THEN
           
           CREATE_NAVIGATION_LIST_ITEM (
             P_FLOW_ID                  => P_FLOW_ID,
             P_PAGE_ID                  => P_PAGE_ID,
             P_PAGE_NAME                => P_PAGE_NAME,
             P_NAV_LIST_ID              => P_NAV_LIST_ID,
             P_NAV_LIST_ITEM_ID         => P_NAV_LIST_ITEM_ID,
             P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_ITEM_NAME,
             P_NAV_LIST_PARENT_ITEM_ID  => P_NAV_LIST_PARENT_ITEM_ID,
             P_NAV_LIST_CHILD_ITEM_NAME => P_NAV_LIST_CHILD_ITEM_NAME );
       ELSE
           
           IF REPLACE(P_TAB_SET,'%null%',NULL) IS NOT NULL THEN
             CREATE_TAB (
              P_FLOW_ID  => P_FLOW_ID,
              P_PAGE_ID  => P_PAGE_ID,
              P_TAB_SET  => P_TAB_SET,
              P_TAB_NAME => P_TAB_NAME,
              P_TAB_TEXT => P_TAB_TEXT);
           END IF;
 
       END IF;
    END IF;
    
    
    
    
     WWV_FLOW_WIZARD_API.CREATE_BREADCRUMB_REGION (
         P_APPLICATION_ID             => P_FLOW_ID,
         P_PAGE_ID                    => P_PAGE_ID,
         P_SEQ                        => 10,
         P_BREADCRUMB_ID              => P_BREADCRUMB_ID,
         P_BREADCRUMB_ENTRY_NAME      => P_BREADCRUMB_NAME,
         P_PARENT_BREADCRUMB_ENTRY_ID => P_PARENT_BC_ID );
  
     
     
     
     L_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
     WWV_FLOW_API.CREATE_PAGE_PLUG (
         P_ID                            => L_REGION_ID,
         P_FLOW_ID                       => P_FLOW_ID,
         P_LOCATION                      => NULL,
         P_PAGE_ID                       => P_PAGE_ID,
         P_PLUG_TEMPLATE                 => P_REGION_TEMPLATE,
         P_REGION_TEMPLATE_OPTIONS       => GET_PRESET_TEMPLATE_OPTIONS (P_REGION_TEMPLATE,'REGION'),
         P_PLUG_NAME                     => P_REGION_NAME,
         P_PLUG_DISPLAY_SEQUENCE         => '10',
         P_PLUG_DISPLAY_POINT            => 'BODY',
         P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
         P_PLUG_SOURCE                   => NULL,
         P_PLUG_SOURCE_TYPE              => WWV_FLOW_REGION_NATIVE.C_JET_CHART,
         P_PLUG_COMMENT                  => NULL);    
 
     
     IF NOT WWV_FLOW_PAGE.IS_JQM_UI ( 
                P_APPLICATION_ID    => P_FLOW_ID,
                P_PAGE_ID           => P_PAGE_ID,
                P_SECURITY_GROUP_ID => WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID) THEN
         L_HEIGHT := '400';
     END IF;
 
     
     
     
     L_CHART_ID := WWV_FLOW_ID.NEXT_VAL;
     WWV_FLOW_API.CREATE_JET_CHART (
         P_ID                         => L_CHART_ID,
         P_FLOW_ID                    => P_FLOW_ID,
         P_PAGE_ID                    => P_PAGE_ID,
         P_REGION_ID                  => L_REGION_ID,
         P_CHART_TYPE                 => P_CHART_TYPE,
         P_TITLE                      => P_TITLE,
         P_HEIGHT                     => L_HEIGHT,
         P_ORIENTATION                => P_ORIENTATION,
         P_HIDE_AND_SHOW_BEHAVIOR     => 'withRescale',
         P_HOVER_BEHAVIOR             => 'dim',
         P_STACK                      => P_STACK,
         P_SPARK_CHART                => P_SPARK_CHART,
         P_STOCK_RENDER_AS            => CASE WHEN P_CHART_TYPE = 'stock' THEN 'candlestick' END,
         P_DIAL_INDICATOR             => CASE WHEN P_CHART_TYPE = 'dial' THEN 'needleAlta' END,
         P_DIAL_BACKGROUND            => CASE WHEN P_CHART_TYPE = 'dial' THEN 'circleAlta' END,
         P_TOOLTIP_RENDERED           => P_SHOW_TOOLTIP,    
         P_LEGEND_RENDERED            => CASE WHEN P_SHOW_LEGEND = 'none' THEN 'off' ELSE 'on' END,
         P_LEGEND_POSITION            => CASE WHEN P_SHOW_LEGEND <> 'none' THEN P_SHOW_LEGEND ELSE 'auto' END,
         P_NO_DATA_FOUND_MESSAGE      => P_NO_DATA_FOUND);
 
     
     IF (P_CHART_TYPE IN ('area', 'bar', 'boxPlot', 'bubble', 'combo','line','lineWithArea','scatter','stock','range','polar','radar', 'gantt' ) AND NVL(P_SPARK_CHART,'N') = 'N') THEN    
         L_X_AXIS_ID := WWV_FLOW_ID.NEXT_VAL;
         WWV_FLOW_API.CREATE_JET_CHART_AXIS (
             P_ID                 => L_X_AXIS_ID,
             P_CHART_ID           => L_CHART_ID,
             P_FLOW_ID            => P_FLOW_ID,
             P_PAGE_ID            => P_PAGE_ID,
             P_AXIS               => CASE WHEN P_CHART_TYPE = 'gantt' THEN 'major' ELSE 'x' END,
             P_IS_RENDERED        => 'on',
             P_TITLE              => P_X_AXIS_TITLE,
             P_POSITION           => NULL,
             P_AXIS_SCALE         => CASE WHEN P_CHART_TYPE = 'gantt' THEN 'months' END,
             P_ZOOM_ORDER_SECONDS => FALSE,
             P_ZOOM_ORDER_MINUTES => FALSE,
             P_ZOOM_ORDER_HOURS   => FALSE,
             P_ZOOM_ORDER_DAYS    => TRUE,
             P_ZOOM_ORDER_WEEKS   => TRUE,
             P_ZOOM_ORDER_MONTHS  => TRUE,
             P_ZOOM_ORDER_QUARTERS => TRUE,
             P_ZOOM_ORDER_YEARS   => FALSE);
             
         L_Y_AXIS_ID := WWV_FLOW_ID.NEXT_VAL;
         WWV_FLOW_API.CREATE_JET_CHART_AXIS (
             P_ID                 => L_Y_AXIS_ID,
             P_CHART_ID           => L_CHART_ID,
             P_FLOW_ID            => P_FLOW_ID,
             P_PAGE_ID            => P_PAGE_ID,
             P_AXIS               => CASE WHEN P_CHART_TYPE = 'gantt' THEN 'major' ELSE 'y' END,
             P_IS_RENDERED        => 'on',
             P_TITLE              => P_Y_AXIS_TITLE,
             P_POSITION           => 'auto',
             P_AXIS_SCALE         => CASE WHEN P_CHART_TYPE = 'gantt' THEN 'days' END,
             P_ZOOM_ORDER_SECONDS => FALSE,
             P_ZOOM_ORDER_MINUTES => FALSE,
             P_ZOOM_ORDER_HOURS   => FALSE,
             P_ZOOM_ORDER_DAYS    => TRUE,
             P_ZOOM_ORDER_WEEKS   => TRUE,
             P_ZOOM_ORDER_MONTHS  => TRUE,
             P_ZOOM_ORDER_QUARTERS => FALSE,
             P_ZOOM_ORDER_YEARS   => FALSE);
     END IF;
 
     
     IF P_LOCATION    = WWV_FLOW_EXEC_API.C_LOCATION_LOCAL_DB AND 
        P_TABLE_OWNER = WWV_FLOW_SECURITY.FLOW_OWNER( P_FLOW_ID           => P_FLOW_ID, 
                                                      P_SECURITY_GROUP_ID => WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID )
     THEN
         L_TABLE_OWNER := NULL;
     END IF;
 
     
     L_SERIES_ID := WWV_FLOW_ID.NEXT_VAL;
     WWV_FLOW_API.CREATE_JET_CHART_SERIES (
         P_ID                           => L_SERIES_ID,
         P_CHART_ID                     => L_CHART_ID,
         P_FLOW_ID                      => P_FLOW_ID,
         P_PAGE_ID                      => P_PAGE_ID,
         P_SEQ                          => 10,
         P_NAME                         => WWV_FLOW_LANG.SYSTEM_MESSAGE('SERIES','1'),
         P_DATA_SOURCE_TYPE             => P_QUERY_TYPE,
         P_DATA_SOURCE                  => P_SQL,
         
         P_LOCATION                     => P_LOCATION,
         P_REMOTE_SERVER_ID             => P_REMOTE_SERVER_ID,
         P_WEB_SRC_MODULE_ID            => P_WEB_SRC_MODULE_ID,
         P_QUERY_OWNER                  => L_TABLE_OWNER,
         P_QUERY_TABLE                  => P_TABLE_NAME,
         
         P_MAX_ROW_COUNT                => P_MAX_ROW_COUNT,
         P_AJAX_ITEMS_TO_SUBMIT         => P_AJAX_ITEMS_TO_SUBMIT,
         P_SERIES_TYPE                  => P_SERIES_TYPE,
         P_SERIES_NAME_COLUMN_NAME      => P_SERIES_NAME_COLUMN_NAME,
         P_ITEMS_VALUE_COLUMN_NAME      => P_ITEMS_VALUE_COLUMN_NAME,
         P_ITEMS_LOW_COLUMN_NAME        => P_ITEMS_LOW_COLUMN_NAME,
         P_ITEMS_HIGH_COLUMN_NAME       => P_ITEMS_HIGH_COLUMN_NAME,
         P_ITEMS_OPEN_COLUMN_NAME       => P_ITEMS_OPEN_COLUMN_NAME,
         P_ITEMS_CLOSE_COLUMN_NAME      => P_ITEMS_CLOSE_COLUMN_NAME,
         P_ITEMS_VOLUME_COLUMN_NAME     => P_ITEMS_VOLUME_COLUMN_NAME,
         P_ITEMS_X_COLUMN_NAME          => P_ITEMS_X_COLUMN_NAME,
         P_ITEMS_Y_COLUMN_NAME          => P_ITEMS_Y_COLUMN_NAME,
         P_ITEMS_Z_COLUMN_NAME          => P_ITEMS_Z_COLUMN_NAME,
         P_ITEMS_TARGET_VALUE           => P_ITEMS_TARGET_VALUE,
         P_ITEMS_MAX_VALUE              => P_ITEMS_MAX_VALUE,
         P_GROUP_SHORT_DESC_COLUMN_NAME => P_GROUP_SHORT_DESC_COLUMN_NAME,
         P_ITEMS_LABEL_COLUMN_NAME      => P_ITEMS_LABEL_COLUMN_NAME,
         P_AGGREGATE_FUNCTION           => P_AGGREGATE_FUNCTION,
         P_ITEMS_LABEL_RENDERED         => TRUE,
         P_ITEMS_LABEL_POSITION         => 'auto',
         P_ITEMS_LABEL_DISPLAY_AS       => CASE WHEN P_CHART_TYPE IN ('pie','donut') THEN 'LABEL' ELSE NULL END,
         P_LINK_TARGET                  => P_LINK_TARGET,
         P_LINK_TARGET_TYPE             => P_LINK_TARGET_TYPE,
         P_GANTT_START_DATE_SOURCE      => 'DB_COLUMN',
         P_GANTT_START_DATE_COLUMN      => P_GANTT_START_DATE_COLUMN,
         P_GANTT_END_DATE_SOURCE        => 'DB_COLUMN',
         P_GANTT_END_DATE_COLUMN        => P_GANTT_END_DATE_COLUMN,
         P_GANTT_ROW_ID                 => P_GANTT_ROW_ID,
         P_GANTT_ROW_NAME               => P_GANTT_ROW_NAME,
         P_GANTT_TASK_ID                => P_GANTT_TASK_ID,
         P_GANTT_TASK_NAME              => P_GANTT_TASK_NAME,
         P_GANTT_TASK_START_DATE        => P_GANTT_TASK_START_DATE,
         P_GANTT_TASK_END_DATE          => P_GANTT_TASK_END_DATE);
     
 EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(-20001,
                            WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.CREATE_JET_CHART',SQLERRM)
                           );
 END CREATE_JET_CHART;
 
 
 
 
 
 PROCEDURE CREATE_DYNAMIC_QUERY_REGION (
    P_ID                            IN NUMBER   DEFAULT NULL,
    P_FLOW_ID                       IN NUMBER   DEFAULT NULL,
    P_PAGE_ID                       IN NUMBER   DEFAULT NULL,
    P_MIGRATE_FROM_REGION           IN NUMBER   DEFAULT NULL,
    P_PLUG_NAME                     IN VARCHAR2 DEFAULT NULL,
    P_PLUG_TEMPLATE                 IN VARCHAR2 DEFAULT NULL,
    P_PARENT_PLUG_ID                IN NUMBER   DEFAULT NULL,
    P_PLUG_DISPLAY_SEQUENCE         IN VARCHAR2 DEFAULT NULL,
    P_PLUG_DISPLAY_COLUMN           IN VARCHAR2 DEFAULT NULL,
    P_PLUG_DISPLAY_POINT            IN VARCHAR2 DEFAULT NULL,
    P_PLUG_SOURCE                   IN VARCHAR2 DEFAULT NULL,
    P_PLUG_SOURCE_TYPE              IN VARCHAR2 DEFAULT NULL,
    P_AJAX_ITEMS_TO_SUBMIT          IN VARCHAR2 DEFAULT NULL,
    
    P_PLUG_REQUIRED_ROLE            IN VARCHAR2 DEFAULT NULL,
    P_PLUG_DISPLAY_WHEN_CONDITION   IN VARCHAR2 DEFAULT NULL,
    P_PLUG_DISPLAY_WHEN_COND2       IN VARCHAR2 DEFAULT NULL,
    P_PLUG_DISPLAY_CONDITION_TYPE   IN VARCHAR2 DEFAULT NULL,
    P_PLUG_HEADER                   IN VARCHAR2 DEFAULT NULL,
    P_PLUG_FOOTER                   IN VARCHAR2 DEFAULT NULL,
    
    P_PLUG_CUSTOMIZED               IN VARCHAR2 DEFAULT NULL,
    P_PLUG_CUSTOMIZED_NAME          IN VARCHAR2 DEFAULT NULL,
    
    P_PLUG_QUERY_NUM_ROWS           IN NUMBER   DEFAULT NULL,
    P_PLUG_QUERY_SHOW_NULLS_AS      IN VARCHAR2 DEFAULT NULL,
    P_PLUG_QUERY_NO_DATA_FOUND      IN VARCHAR2 DEFAULT NULL,
    P_PLUG_QUERY_ROW_COUNT_MAX      IN NUMBER   DEFAULT NULL,
    
    P_PAGINATION_DISPLAY_POSITION   IN VARCHAR2 DEFAULT NULL,
    
    P_REQUIRED_PATCH                IN VARCHAR2 DEFAULT NULL,
    P_PLUG_COMMENT                  IN VARCHAR2 DEFAULT NULL,
    
    P_SHOW_DETAIL_LINK              IN VARCHAR2 DEFAULT NULL,
    P_USE_UI_DEFAULTS               IN VARCHAR2 DEFAULT NULL,
    P_BASE_PK1                      IN VARCHAR2 DEFAULT NULL,
    P_BASE_PK2                      IN VARCHAR2 DEFAULT NULL,
    P_BASE_PK3                      IN VARCHAR2 DEFAULT NULL)
 IS
    L_SQL                      VARCHAR2(32767);
    L_PLUG_SOURCE_TYPE         VARCHAR2(4000);
 
    L_REGION_ID                NUMBER;
    L_WORKSHEET_ID             NUMBER;
 
    L_QRY_COLS                 WWV_FLOW_GLOBAL.VC_ARR2;
    L_QRY_COL_TYPES            WWV_FLOW_GLOBAL.VC_ARR2;
    L_COL_MAX_LEN              WWV_FLOW_GLOBAL.VC_ARR2;
 
    L_DETAIL_LINK_TEXT         VARCHAR2(4000);
    L_ALIGNMENT                VARCHAR2(255);
    L_LABEL                    VARCHAR2(4000);
    L_FORMAT_MASK              VARCHAR2(4000);
    L_COLUMN_LINK              VARCHAR2(4000);
    L_COLUMN_LINKTEXT          VARCHAR2(4000);
    L_COLUMN_LINK_ATTR         VARCHAR2(4000);
    L_DISPLAY_SEQUENCE         NUMBER;
    L_DISPLAY_TEXT_AS          VARCHAR2(255);
    L_DISPLAY_CONDITION_TYPE   VARCHAR2(255);
    L_DISPLAY_CONDITION        VARCHAR2(4000);
    L_DISPLAY_CONDITION2       VARCHAR2(4000);
    L_SECURITY_SCHEME          VARCHAR2(255);
 
    L_ALLOW_SORTING            VARCHAR2(1);
    L_ALLOW_FILTERING          VARCHAR2(1);
    L_ALLOW_HIGHLIGHTING       VARCHAR2(1);
    L_ALLOW_CTRL_BREAKS        VARCHAR2(1);
    L_ALLOW_AGGREGATIONS       VARCHAR2(1);
    L_ALLOW_COMPUTATIONS       VARCHAR2(1);
    L_ALLOW_CHARTING           VARCHAR2(1);
    L_ALLOW_GROUP_BY           VARCHAR2(1);
    L_ALLOW_PIVOT              VARCHAR2(1);
    L_ALLOW_HIDE               VARCHAR2(1);
    L_RPT_SHOW_FILTER_LOV      VARCHAR2(1);
    L_TZ_DEPENDENT             VARCHAR2(1);
    L_DOWNLOAD_FILENAME        VARCHAR2(255);
    L_DOWNLOAD_FORMATS         VARCHAR2(30) := 'CSV:HTML:EMAIL:XLS:PDF:RTF';
 BEGIN
    
    
    
    WWV_FLOW_API.CHECK_SGID;
    WWV_FLOW_API.CHECK_VERSION;
 
    IF P_USE_UI_DEFAULTS = 'N' THEN
        WWV_FLOW_HINT.G_USE_UI_DEFAULTS := FALSE;
    END IF;
 
    IF P_ID IS NULL THEN
        L_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
    ELSE
        L_REGION_ID := P_ID;
    END IF;
 
    L_WORKSHEET_ID := WWV_FLOW_ID.NEXT_VAL;
    L_SQL := LTRIM(P_PLUG_SOURCE);
    L_SQL := WWV_FLOW_UTILITIES.REMOVE_TRAILING_WHITESPACE(L_SQL);
 
    L_PLUG_SOURCE_TYPE := WWV_FLOW_REGION_NATIVE.C_IR;
 
    WWV_FLOW_API.CREATE_PAGE_PLUG (
      P_ID                            => L_REGION_ID,
      P_FLOW_ID                       => P_FLOW_ID,
      P_PAGE_ID                       => P_PAGE_ID,
      P_PLUG_NAME                     => P_PLUG_NAME,
      P_PLUG_TEMPLATE                 => P_PLUG_TEMPLATE,
      P_REGION_TEMPLATE_OPTIONS       => GET_PRESET_TEMPLATE_OPTIONS (P_PLUG_TEMPLATE,'REGION'),
      P_PARENT_PLUG_ID                => P_PARENT_PLUG_ID,
      P_PLUG_DISPLAY_SEQUENCE         => P_PLUG_DISPLAY_SEQUENCE,
      P_PLUG_DISPLAY_COLUMN           => P_PLUG_DISPLAY_COLUMN,
      P_PLUG_DISPLAY_POINT            => P_PLUG_DISPLAY_POINT,
      P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
      P_PLUG_SOURCE                   => L_SQL,
      P_PLUG_SOURCE_TYPE              => L_PLUG_SOURCE_TYPE,
      P_AJAX_ITEMS_TO_SUBMIT          => P_AJAX_ITEMS_TO_SUBMIT,
      
      P_PLUG_REQUIRED_ROLE            => P_PLUG_REQUIRED_ROLE,
      P_PLUG_DISPLAY_WHEN_CONDITION   => P_PLUG_DISPLAY_WHEN_CONDITION,
      P_PLUG_DISPLAY_WHEN_COND2       => P_PLUG_DISPLAY_WHEN_COND2,
      P_PLUG_DISPLAY_CONDITION_TYPE   => P_PLUG_DISPLAY_CONDITION_TYPE,
      P_PLUG_HEADER                   => P_PLUG_HEADER,
      P_PLUG_FOOTER                   => P_PLUG_FOOTER,
      
      P_PLUG_CUSTOMIZED               => P_PLUG_CUSTOMIZED,
      P_PLUG_CUSTOMIZED_NAME          => P_PLUG_CUSTOMIZED_NAME,
      
      P_PLUG_QUERY_NUM_ROWS           => P_PLUG_QUERY_NUM_ROWS,
      P_PLUG_QUERY_SHOW_NULLS_AS      => P_PLUG_QUERY_SHOW_NULLS_AS,
      P_PLUG_QUERY_NO_DATA_FOUND      => P_PLUG_QUERY_NO_DATA_FOUND,
      P_PLUG_QUERY_ROW_COUNT_MAX      => P_PLUG_QUERY_ROW_COUNT_MAX,
      
      P_PAGINATION_DISPLAY_POSITION   => P_PAGINATION_DISPLAY_POSITION,
      
      P_REQUIRED_PATCH                => P_REQUIRED_PATCH,
      P_PLUG_COMMENT                  => P_PLUG_COMMENT
    );
 
    IF P_MIGRATE_FROM_REGION IS NOT NULL THEN 
 
        FOR C1 IN (SELECT NVL(PRN_OUTPUT_FILE_NAME,PLUG_QUERY_EXP_FILENAME) FN, PRN_FORMAT
                     FROM WWV_FLOW_PAGE_PLUGS
                    WHERE ID = P_MIGRATE_FROM_REGION ) LOOP
            L_DOWNLOAD_FILENAME := C1.FN;
            IF C1.PRN_FORMAT IS NOT NULL AND C1.PRN_FORMAT IN ('PDF','RTF','XLS') THEN
                L_DOWNLOAD_FORMATS := L_DOWNLOAD_FORMATS||':'||C1.PRN_FORMAT;
            END IF;
        END LOOP;
 
    END IF;
 
    IF P_SHOW_DETAIL_LINK = 'Y' THEN
        L_DETAIL_LINK_TEXT := C_EDIT_IMAGE;
    END IF;
 
    WWV_FLOW_API.CREATE_WORKSHEET (
      P_ID                         => L_WORKSHEET_ID,
      P_FLOW_ID                    => P_FLOW_ID,
      P_PAGE_ID                    => P_PAGE_ID,
      P_REGION_ID                  => L_REGION_ID,
      P_NAME                       => P_PLUG_NAME,
      P_DOWNLOAD_FORMATS           => L_DOWNLOAD_FORMATS,
      P_DOWNLOAD_FILENAME          => L_DOWNLOAD_FILENAME,
      P_MAX_ROW_COUNT              => 1000000,
      P_MAX_ROW_COUNT_MESSAGE      => WWV_FLOW_LANG.SYSTEM_MESSAGE('APEXIR_MAX_ROW_CNT','#MAX_ROW_COUNT#'),
      P_NO_DATA_FOUND_MESSAGE      => WWV_FLOW_LANG.SYSTEM_MESSAGE('F4000.NO_DATA_FOUND'),
      P_SHOW_DETAIL_LINK           => P_SHOW_DETAIL_LINK,
      P_DETAIL_LINK_TEXT           => L_DETAIL_LINK_TEXT,
      P_BASE_PK1                   => P_BASE_PK1,
      P_BASE_PK2                   => P_BASE_PK2,
      P_BASE_PK3                   => P_BASE_PK3,
      P_PAGINATION_TYPE            => 'ROWS_X_TO_Y',
      P_PAGINATION_DISPLAY_POS     => 'BOTTOM_RIGHT',
      P_SHOW_NULLS_AS              => '-',
      P_ICON_VIEW_ENABLED_YN       => 'N',
      P_ICON_VIEW_USE_CUSTOM       => 'N',
      P_DETAIL_VIEW_ENABLED_YN     => 'N'
      );
 
    
    IF L_SQL IS NOT NULL THEN
          
          
          
          
        GET_QUERY_COLUMNS (
          P_OWNER       => GET_FLOW_OWNER(P_FLOW_ID),
          P_QUERY       => L_SQL,
          P_INCLUDE_TZ  => 'Y',
          P_COLUMNS     => L_QRY_COLS,
          P_TYPES       => L_QRY_COL_TYPES,
          P_COL_MAX_LEN => L_COL_MAX_LEN);
 
        FOR I IN 1..L_QRY_COLS.COUNT LOOP
 
            
            WWV_FLOW_HINT.GET_AD_UI_DEFAULTS (
                 P_SGID        => WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID,
                 P_COLUMN_NAME => L_QRY_COLS(I)
            );
 
            L_ALIGNMENT            := NVL(WWV_FLOW_HINT.G_REPORT_COL_ALIGNMENT,'LEFT');
            L_ALLOW_SORTING        := 'Y';
            L_ALLOW_FILTERING      := 'Y';
            L_ALLOW_HIGHLIGHTING   := 'Y';
            L_ALLOW_CTRL_BREAKS    := 'Y';
            L_ALLOW_AGGREGATIONS   := 'Y';
            L_ALLOW_COMPUTATIONS   := 'Y';
            L_ALLOW_CHARTING       := 'Y';
            L_ALLOW_GROUP_BY       := 'Y';
            L_ALLOW_PIVOT          := 'Y';
            L_ALLOW_HIDE           := 'Y';
            L_RPT_SHOW_FILTER_LOV  := 'D';
            L_TZ_DEPENDENT         := 'N';
            IF L_QRY_COL_TYPES(I) IN ('CHAR', 'VARCHAR2') THEN
                L_QRY_COL_TYPES(I) := 'STRING';
            ELSIF L_QRY_COL_TYPES(I) = 'NUMBER' THEN
                L_ALIGNMENT        := 'RIGHT';
            ELSIF L_QRY_COL_TYPES(I) = 'CLOB' THEN
                L_ALLOW_SORTING       := 'N';
                L_ALLOW_CTRL_BREAKS   := 'N';
                L_ALLOW_AGGREGATIONS  := 'N';
                L_ALLOW_COMPUTATIONS  := 'N';
                L_ALLOW_CHARTING      := 'N';
                L_ALLOW_GROUP_BY      := 'N';
                L_ALLOW_PIVOT         := 'N';
                L_RPT_SHOW_FILTER_LOV := 'N';
            ELSIF L_QRY_COL_TYPES(I) = 'OTHER' THEN
                L_ALLOW_SORTING       := 'N';
                L_ALLOW_FILTERING     := 'N';
                L_ALLOW_HIGHLIGHTING  := 'N';
                L_ALLOW_CTRL_BREAKS   := 'N';
                L_ALLOW_AGGREGATIONS  := 'N';
                L_ALLOW_COMPUTATIONS  := 'N';
                L_ALLOW_CHARTING      := 'N';
                L_ALLOW_GROUP_BY      := 'N';
                L_ALLOW_PIVOT         := 'N';
                L_RPT_SHOW_FILTER_LOV := 'N';
            ELSIF L_QRY_COL_TYPES(I) = 'TIMESTAMP_LTZ' THEN
                L_TZ_DEPENDENT        := 'Y';
                L_QRY_COL_TYPES(I)    := 'DATE';
            ELSIF L_QRY_COL_TYPES(I)  LIKE 'TIMESTAMP%' THEN
                L_QRY_COL_TYPES(I)    := 'DATE';
            END IF;
 
            L_DISPLAY_SEQUENCE        := NULL;
            L_LABEL                   := ESCAPE_REPORT_LABEL(NVL(WWV_FLOW_HINT.G_LABEL,INITCAP(REPLACE(L_QRY_COLS(I),'_',' '))));
            L_FORMAT_MASK             := NULL;
            L_COLUMN_LINK             := NULL;
            L_COLUMN_LINKTEXT         := NULL;
            L_COLUMN_LINK_ATTR        := NULL;
            L_DISPLAY_TEXT_AS         := 'ESCAPE_SC';
            L_DISPLAY_CONDITION_TYPE  := NULL;
            L_DISPLAY_CONDITION       := NULL;
            L_DISPLAY_CONDITION2      := NULL;
            L_SECURITY_SCHEME         := NULL;
 
            
            IF P_MIGRATE_FROM_REGION IS NOT NULL THEN
                FOR C1 IN (SELECT NVL(COLUMN_HEADING, INITCAP(COLUMN_ALIAS)) LABEL, COLUMN_DISPLAY_SEQUENCE, COLUMN_FORMAT,
                                  COLUMN_LINK, COLUMN_LINKTEXT, COLUMN_LINK_ATTR, HIDDEN_COLUMN, DISPLAY_WHEN_COND_TYPE,
                                  DISPLAY_WHEN_CONDITION, DISPLAY_WHEN_CONDITION2, DISPLAY_AS, REPORT_COLUMN_REQUIRED_ROLE
                             FROM WWV_FLOW_REGION_REPORT_COLUMN
                            WHERE FLOW_ID = P_FLOW_ID
                              AND REGION_ID = P_MIGRATE_FROM_REGION
                              AND COLUMN_ALIAS = L_QRY_COLS(I) ) LOOP
 
                    L_LABEL            := C1.LABEL;
                    L_DISPLAY_SEQUENCE := C1.COLUMN_DISPLAY_SEQUENCE;
                    L_FORMAT_MASK      := C1.COLUMN_FORMAT;
                    L_COLUMN_LINK      := C1.COLUMN_LINK;
                    L_COLUMN_LINKTEXT  := C1.COLUMN_LINKTEXT;
                    L_COLUMN_LINK_ATTR := C1.COLUMN_LINK_ATTR;
                    IF C1.DISPLAY_AS = 'ESCAPE_SC' THEN
                        L_DISPLAY_TEXT_AS := 'ESCAPE_SC';
                    END IF;
                    IF C1.HIDDEN_COLUMN = 'Y' THEN
                        L_DISPLAY_TEXT_AS := 'HIDDEN';
                    END IF;
                    L_DISPLAY_CONDITION_TYPE   := C1.DISPLAY_WHEN_COND_TYPE;
                    L_DISPLAY_CONDITION        := C1.DISPLAY_WHEN_CONDITION;
                    L_DISPLAY_CONDITION2       := C1.DISPLAY_WHEN_CONDITION2;
                    L_SECURITY_SCHEME          := C1.REPORT_COLUMN_REQUIRED_ROLE;
                END LOOP;
            END IF;
 
            IF L_DISPLAY_SEQUENCE IS NULL THEN
                L_DISPLAY_SEQUENCE := I;
            END IF;
 
            WWV_FLOW_API.CREATE_WORKSHEET_COLUMN (
                P_WORKSHEET_ID            => L_WORKSHEET_ID,
                P_FLOW_ID                 => P_FLOW_ID,
                P_PAGE_ID                 => P_PAGE_ID,
                
                P_DB_COLUMN_NAME          => L_QRY_COLS(I),
                P_DISPLAY_ORDER           => L_DISPLAY_SEQUENCE,
                P_COLUMN_LABEL            => L_LABEL,
                P_REPORT_LABEL            => L_LABEL,
                P_COLUMN_LINK             => L_COLUMN_LINK,
                P_COLUMN_LINKTEXT         => L_COLUMN_LINKTEXT,
                P_COLUMN_LINK_ATTR        => L_COLUMN_LINK_ATTR,
                P_COLUMN_TYPE             => L_QRY_COL_TYPES(I),
                P_HEADING_ALIGNMENT       => L_ALIGNMENT,
                P_COLUMN_ALIGNMENT        => L_ALIGNMENT,
                P_DISPLAY_AS              => 'TEXT',
                P_DISPLAY_TEXT_AS         => L_DISPLAY_TEXT_AS,
                P_FORMAT_MASK             => L_FORMAT_MASK,
                P_TZ_DEPENDENT            => L_TZ_DEPENDENT,
                P_DISPLAY_IN_DEFAULT_RPT  => 'Y',
                
                P_ALLOW_SORTING           => L_ALLOW_SORTING,
                P_ALLOW_FILTERING         => L_ALLOW_FILTERING,
                P_ALLOW_HIGHLIGHTING      => L_ALLOW_HIGHLIGHTING,
                P_ALLOW_CTRL_BREAKS       => L_ALLOW_CTRL_BREAKS,
                P_ALLOW_AGGREGATIONS      => L_ALLOW_AGGREGATIONS,
                P_ALLOW_COMPUTATIONS      => L_ALLOW_COMPUTATIONS,
                P_ALLOW_CHARTING          => L_ALLOW_CHARTING,
                P_ALLOW_GROUP_BY          => L_ALLOW_GROUP_BY,
                P_ALLOW_PIVOT             => L_ALLOW_PIVOT,
                P_ALLOW_HIDE              => L_ALLOW_HIDE,
                P_RPT_SHOW_FILTER_LOV     => L_RPT_SHOW_FILTER_LOV,
                P_DISPLAY_CONDITION_TYPE  => L_DISPLAY_CONDITION_TYPE,
                P_DISPLAY_CONDITION       => L_DISPLAY_CONDITION,
                P_DISPLAY_CONDITION2      => L_DISPLAY_CONDITION2,
                P_SECURITY_SCHEME         => L_SECURITY_SCHEME);
        END LOOP;
    END IF;
 END CREATE_DYNAMIC_QUERY_REGION;
 
 
 PROCEDURE CREATE_IR_REGION_ON_COL_INFO (
    P_FLOW_ID                 IN NUMBER,
    P_PAGE_ID                 IN NUMBER,
    P_REGION_ID               IN NUMBER,
    P_REGION_TITLE            IN VARCHAR2 DEFAULT NULL,
    P_SQL                     IN VARCHAR2 DEFAULT NULL,
    
    P_SHOW_DETAIL_LINK        IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_LINK             IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_LINK_TEXT        IN VARCHAR2 DEFAULT NULL,
    
    P_TABLE_NAME              IN VARCHAR2 DEFAULT NULL,
    P_PK1                     IN VARCHAR2 DEFAULT NULL,
    P_PK2                     IN VARCHAR2 DEFAULT NULL,
    
    P_DB_COLUMN_NAME          IN WWV_FLOW_GLOBAL.VC_ARR2 DEFAULT EMPTY_VC_ARR,
    P_DISPLAY_ORDER           IN WWV_FLOW_GLOBAL.VC_ARR2 DEFAULT EMPTY_VC_ARR,
    P_COLUMN_LABEL            IN WWV_FLOW_GLOBAL.VC_ARR2 DEFAULT EMPTY_VC_ARR,
    P_REPORT_LABEL            IN WWV_FLOW_GLOBAL.VC_ARR2 DEFAULT EMPTY_VC_ARR,
    P_COLUMN_TYPE             IN WWV_FLOW_GLOBAL.VC_ARR2 DEFAULT EMPTY_VC_ARR,
    P_DISPLAY_TEXT_AS         IN WWV_FLOW_GLOBAL.VC_ARR2 DEFAULT EMPTY_VC_ARR,
    P_FORMAT_MASK             IN WWV_FLOW_GLOBAL.VC_ARR2 DEFAULT EMPTY_VC_ARR,
    P_COLUMN_ALIGNMENT        IN WWV_FLOW_GLOBAL.VC_ARR2 DEFAULT EMPTY_VC_ARR,
    P_HELP_TEXT               IN WWV_FLOW_GLOBAL.VC_ARR2 DEFAULT EMPTY_VC_ARR,
    P_GROUP                   IN WWV_FLOW_GLOBAL.VC_ARR2 DEFAULT EMPTY_VC_ARR)
 IS
    L_WORKSHEET_ID             NUMBER;
    L_GROUP_ID                 NUMBER;
    L_GROUP_SEQ                NUMBER;
    L_GROUP_NAME               VARCHAR2(4000);
    L_OWNER                    VARCHAR2(255);
    L_COLUMN_TYPE              VARCHAR2(255);
    L_ALIGNMENT                VARCHAR2(255);
    L_FORMAT_MASK              VARCHAR2(4000);
    L_DETAIL_LINK_TEXT         VARCHAR2(4000) := P_DETAIL_LINK_TEXT;
    L_ALLOW_SORTING            VARCHAR2(1);
    L_ALLOW_FILTERING          VARCHAR2(1);
    L_ALLOW_HIGHLIGHTING       VARCHAR2(1);
    L_ALLOW_CTRL_BREAKS        VARCHAR2(1);
    L_ALLOW_AGGREGATIONS       VARCHAR2(1);
    L_ALLOW_COMPUTATIONS       VARCHAR2(1);
    L_ALLOW_CHARTING           VARCHAR2(1);
    L_ALLOW_GROUP_BY           VARCHAR2(1);
    L_ALLOW_PIVOT              VARCHAR2(1);
    L_ALLOW_HIDE               VARCHAR2(1);
    L_RPT_SHOW_FILTER_LOV      VARCHAR2(1);
    L_TZ_DEPENDENT             VARCHAR2(1);
 
    L_QRY_COLS                 WWV_FLOW_GLOBAL.VC_ARR2;
    L_QRY_COL_TYPES            WWV_FLOW_GLOBAL.VC_ARR2;
    L_COL_MAX_LEN              WWV_FLOW_GLOBAL.VC_ARR2;
 
 BEGIN
    WWV_FLOW_API.CREATE_PAGE_PLUG (
      P_ID                            => P_REGION_ID,
      P_FLOW_ID                       => P_FLOW_ID,
      P_PAGE_ID                       => P_PAGE_ID,
      P_PLUG_NAME                     => P_REGION_TITLE,
      P_PLUG_TEMPLATE                 => NVL(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_IRR_TEMPLATE,0),
      P_REGION_TEMPLATE_OPTIONS       => GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_IRR_TEMPLATE,'REGION'),
      P_PLUG_DISPLAY_SEQUENCE         => '10',
      P_PLUG_DISPLAY_POINT            => 'BODY',
      P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
      P_PLUG_SOURCE                   => P_SQL,
      P_LOCATION                      => 'LOCAL',
      P_QUERY_TYPE                    => 'SQL',
      P_PLUG_SOURCE_TYPE              => WWV_FLOW_REGION_NATIVE.C_IR );
 
    L_WORKSHEET_ID := WWV_FLOW_ID.NEXT_VAL;
    IF NVL(P_SHOW_DETAIL_LINK,'Y') = 'Y' AND L_DETAIL_LINK_TEXT IS NULL THEN
        L_DETAIL_LINK_TEXT := C_EDIT_IMAGE;
    END IF;
    WWV_FLOW_API.CREATE_WORKSHEET (
       P_ID                         => L_WORKSHEET_ID,
       P_FLOW_ID                    => P_FLOW_ID,
       P_PAGE_ID                    => P_PAGE_ID,
       P_REGION_ID                  => P_REGION_ID,
       P_NAME                       => P_REGION_TITLE,
       P_DOWNLOAD_FORMATS           => 'CSV:HTML:EMAIL:XLS:PDF:RTF',
       P_MAX_ROW_COUNT              => 1000000,
       P_MAX_ROW_COUNT_MESSAGE      => WWV_FLOW_LANG.SYSTEM_MESSAGE('APEXIR_MAX_ROW_CNT','#MAX_ROW_COUNT#'),
       P_NO_DATA_FOUND_MESSAGE      => WWV_FLOW_LANG.SYSTEM_MESSAGE('F4000.NO_DATA_FOUND'),
       P_SHOW_DETAIL_LINK           => NVL(P_SHOW_DETAIL_LINK,'Y'),
       P_DETAIL_LINK                => P_DETAIL_LINK,
       P_DETAIL_LINK_TEXT           => L_DETAIL_LINK_TEXT,
       P_PAGINATION_TYPE            => 'ROWS_X_TO_Y',
       P_PAGINATION_DISPLAY_POS     => 'BOTTOM_RIGHT',
       P_SHOW_NULLS_AS              => '-',
       P_ICON_VIEW_ENABLED_YN       => 'N',
       P_ICON_VIEW_USE_CUSTOM       => 'N',
       P_DETAIL_VIEW_ENABLED_YN     => 'N');
 
    FOR I IN 1..P_DB_COLUMN_NAME.COUNT LOOP
        L_FORMAT_MASK := WWV_FLOW_UTILITIES.ARRAY_ELEMENT(P_FORMAT_MASK,I);
        L_ALLOW_SORTING := 'Y';
        L_ALLOW_FILTERING := 'Y';
        L_ALLOW_HIGHLIGHTING := 'Y';
        L_ALLOW_CTRL_BREAKS := 'Y';
        L_ALLOW_AGGREGATIONS := 'Y';
        L_ALLOW_COMPUTATIONS := 'Y';
        L_ALLOW_CHARTING := 'Y';
        L_ALLOW_GROUP_BY := 'Y';
        L_ALLOW_PIVOT := 'Y';
        L_ALLOW_HIDE := 'Y';
        L_RPT_SHOW_FILTER_LOV := 'D';
        L_TZ_DEPENDENT := 'N';
 
        IF P_COLUMN_TYPE(I) = 'DATE' OR P_COLUMN_TYPE(I) LIKE 'TIMESTAMP%' THEN
            L_COLUMN_TYPE := 'DATE';
            IF P_COLUMN_TYPE(I) = 'TIMESTAMP_LTZ' OR P_COLUMN_TYPE(I) LIKE 'TIMESTAMP%WITH LOCAL TIME ZONE' THEN
                L_TZ_DEPENDENT := 'Y';
            END IF;
        ELSIF  P_COLUMN_TYPE(I) = 'NUMBER' THEN
            L_COLUMN_TYPE := 'NUMBER';
        ELSIF P_COLUMN_TYPE(I) = 'CLOB' THEN
            L_COLUMN_TYPE := 'CLOB';
            L_ALLOW_SORTING := 'N';
            L_ALLOW_CTRL_BREAKS := 'N';
            L_ALLOW_AGGREGATIONS := 'N';
            L_ALLOW_COMPUTATIONS := 'N';
            L_ALLOW_CHARTING := 'N';
            L_ALLOW_GROUP_BY := 'N';
            L_ALLOW_PIVOT := 'N';
            L_RPT_SHOW_FILTER_LOV := 'N';
            IF P_TABLE_NAME IS NOT NULL AND P_PK1 IS NOT NULL THEN
                
                L_COLUMN_TYPE := 'STRING';
            END IF;
        ELSIF P_COLUMN_TYPE(I) = 'BLOB' THEN
            L_COLUMN_TYPE := 'OTHER';
            L_ALLOW_SORTING := 'N';
            L_ALLOW_FILTERING := 'N';
            L_ALLOW_HIGHLIGHTING := 'N';
            L_ALLOW_CTRL_BREAKS := 'N';
            L_ALLOW_AGGREGATIONS := 'N';
            L_ALLOW_COMPUTATIONS := 'N';
            L_ALLOW_CHARTING := 'N';
            L_ALLOW_GROUP_BY := 'N';
            L_ALLOW_PIVOT := 'N';
            L_RPT_SHOW_FILTER_LOV := 'N';
            IF P_TABLE_NAME IS NOT NULL AND P_PK1 IS NOT NULL THEN
                
                L_COLUMN_TYPE := 'NUMBER';
                
                
                
                L_FORMAT_MASK := 'DOWNLOAD:'||P_TABLE_NAME||':'||P_DB_COLUMN_NAME(I);
                IF P_PK1 IS NOT NULL THEN
                    L_FORMAT_MASK := L_FORMAT_MASK||':'||P_PK1;
                END IF;
                IF P_PK2 IS NOT NULL THEN
                    L_FORMAT_MASK := L_FORMAT_MASK||':'||P_PK2;
                END IF;
            END IF;
        ELSIF P_COLUMN_TYPE(I) IN ('CHAR','NCHAR','VARCHAR2','NVARCHAR2') THEN
            L_COLUMN_TYPE := 'STRING';
        ELSE
            L_COLUMN_TYPE := 'OTHER';
            L_ALLOW_SORTING := 'N';
            L_ALLOW_FILTERING := 'N';
            L_ALLOW_HIGHLIGHTING := 'N';
            L_ALLOW_CTRL_BREAKS := 'N';
            L_ALLOW_AGGREGATIONS := 'N';
            L_ALLOW_COMPUTATIONS := 'N';
            L_ALLOW_CHARTING := 'N';
            L_ALLOW_GROUP_BY := 'N';
            L_ALLOW_PIVOT := 'N';
            L_RPT_SHOW_FILTER_LOV := 'N';
        END IF;
 
 
        IF WWV_FLOW_UTILITIES.ARRAY_ELEMENT(P_COLUMN_ALIGNMENT,I) IS NULL THEN
            IF P_COLUMN_TYPE(I) = 'NUMBER' THEN
                L_ALIGNMENT := 'RIGHT';
            ELSE
                L_ALIGNMENT := 'LEFT';
            END IF;
        ELSE
            L_ALIGNMENT := WWV_FLOW_UTILITIES.ARRAY_ELEMENT(P_COLUMN_ALIGNMENT,I);
        END IF;
 
        
        
        
        IF P_GROUP.COUNT > 0 THEN
            IF P_GROUP(I) IS NOT NULL THEN
                FOR C1 IN (SELECT GROUP_NAME, DISPLAY_SEQUENCE
                           FROM WWV_FLOW_HNT_GROUPS
                           WHERE GROUP_ID = P_GROUP(I)
                ) LOOP
                    L_GROUP_SEQ := C1.DISPLAY_SEQUENCE;
                    L_GROUP_NAME := C1.GROUP_NAME;
                END LOOP;
 
                
                IF NOT IR_COL_GROUP_EXISTS(P_FLOW_ID => P_FLOW_ID, P_WORKSHEET_ID => L_WORKSHEET_ID, P_GROUP_NAME => L_GROUP_NAME) THEN
 
                    WWV_FLOW_API.CREATE_WORKSHEET_COL_GROUP (
                                P_FLOW_ID => P_FLOW_ID,
                                P_WORKSHEET_ID => L_WORKSHEET_ID,
                                P_NAME => L_GROUP_NAME,
                                P_DISPLAY_SEQUENCE => L_GROUP_SEQ);
                END IF;
 
                L_GROUP_ID := NULL;
 
                SELECT ID INTO L_GROUP_ID
                FROM WWV_FLOW_WORKSHEET_COL_GROUPS
                WHERE WORKSHEET_ID = L_WORKSHEET_ID
                AND FLOW_ID = P_FLOW_ID
                AND NAME = L_GROUP_NAME;
 
            ELSE
                L_GROUP_ID := NULL;
            END IF;
        END IF;
 
        
        
        
        
 
        GET_QUERY_COLUMNS (
          P_OWNER       => GET_FLOW_OWNER(P_FLOW_ID),
          P_QUERY       => P_SQL,
          P_INCLUDE_TZ  => 'Y',
          P_COLUMNS     => L_QRY_COLS,
          P_TYPES       => L_QRY_COL_TYPES,
          P_COL_MAX_LEN => L_COL_MAX_LEN);
 
 
        IF WWV_FLOW_HINT.G_USE_UI_DEFAULTS THEN
            
            IF P_TABLE_NAME IS NOT NULL THEN
                L_OWNER := WWV_FLOW_SECURITY.FLOW_OWNER(
                                    P_FLOW_ID => P_FLOW_ID,
                                    P_SECURITY_GROUP_ID =>WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID);
 
                WWV_FLOW_HINT.GET_COL_UI_DEFAULTS(
                         P_SCHEMA              => L_OWNER,
                         P_TABLE_NAME          => P_TABLE_NAME,
                         P_COLUMN_NAME         => WWV_FLOW_UTILITIES.ARRAY_ELEMENT(L_QRY_COLS,I));
            ELSE
                WWV_FLOW_HINT.GET_AD_UI_DEFAULTS (
                         P_SGID                => WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID,
                         P_COLUMN_NAME         => WWV_FLOW_UTILITIES.ARRAY_ELEMENT(L_QRY_COLS,I));
            END IF;
        END IF;
 
        WWV_FLOW_API.CREATE_WORKSHEET_COLUMN (
                    P_WORKSHEET_ID            => L_WORKSHEET_ID,
                    P_FLOW_ID                 => P_FLOW_ID,
                    P_PAGE_ID                 => P_PAGE_ID,
                    
                    P_DB_COLUMN_NAME          => WWV_FLOW_UTILITIES.ARRAY_ELEMENT(L_QRY_COLS,I),
                    P_DISPLAY_ORDER           => NVL(WWV_FLOW_UTILITIES.ARRAY_ELEMENT(P_DISPLAY_ORDER,I),I),
                    P_GROUP_ID                => L_GROUP_ID,
                    P_COLUMN_LABEL            => ESCAPE_REPORT_LABEL(WWV_FLOW_UTILITIES.ARRAY_ELEMENT(P_COLUMN_LABEL,I)),
                    P_REPORT_LABEL            => ESCAPE_REPORT_LABEL(NVL(WWV_FLOW_HINT.G_LABEL,WWV_FLOW_UTILITIES.ARRAY_ELEMENT(P_REPORT_LABEL,I))),
                    P_COLUMN_TYPE             => L_COLUMN_TYPE,
                    P_HEADING_ALIGNMENT       => NVL(WWV_FLOW_HINT.G_REPORT_COL_ALIGNMENT,L_ALIGNMENT),
                    P_COLUMN_ALIGNMENT        => NVL(WWV_FLOW_HINT.G_REPORT_COL_ALIGNMENT,L_ALIGNMENT),
                    P_DISPLAY_AS              => 'TEXT',
                    P_DISPLAY_TEXT_AS         => WWV_FLOW_UTILITIES.ARRAY_ELEMENT(P_DISPLAY_TEXT_AS,I),
                    P_FORMAT_MASK             => NVL(WWV_FLOW_HINT.G_REPORT_FORMAT_MASK,L_FORMAT_MASK),
                    P_TZ_DEPENDENT            => L_TZ_DEPENDENT,
                    P_DISPLAY_IN_DEFAULT_RPT  => 'Y',
                    P_HELP_TEXT               => NVL(WWV_FLOW_HINT.G_HELP_TEXT,WWV_FLOW_UTILITIES.ARRAY_ELEMENT(P_HELP_TEXT,I)),
                    
                    P_ALLOW_SORTING           => L_ALLOW_SORTING,
                    P_ALLOW_FILTERING         => L_ALLOW_FILTERING,
                    P_ALLOW_HIGHLIGHTING      => L_ALLOW_HIGHLIGHTING,
                    P_ALLOW_CTRL_BREAKS       => L_ALLOW_CTRL_BREAKS,
                    P_ALLOW_AGGREGATIONS      => L_ALLOW_AGGREGATIONS,
                    P_ALLOW_COMPUTATIONS      => L_ALLOW_COMPUTATIONS,
                    P_ALLOW_CHARTING          => L_ALLOW_CHARTING,
                    P_ALLOW_GROUP_BY          => L_ALLOW_GROUP_BY,
                    P_ALLOW_PIVOT             => L_ALLOW_PIVOT,
                    P_ALLOW_HIDE              => L_ALLOW_HIDE,
                    P_RPT_SHOW_FILTER_LOV     => L_RPT_SHOW_FILTER_LOV
                    );
    END LOOP;
 END CREATE_IR_REGION_ON_COL_INFO;
 
 
 
 
 
 
 PROCEDURE CREATE_QUERY_REGION (
    P_ID                            IN NUMBER   DEFAULT NULL,
    P_FLOW_ID                       IN NUMBER   DEFAULT NULL,
    P_PAGE_ID                       IN NUMBER   DEFAULT NULL,
    P_PLUG_NAME                     IN VARCHAR2 DEFAULT NULL,
    P_PLUG_TEMPLATE                 IN VARCHAR2 DEFAULT NULL,
    P_PARENT_PLUG_ID                IN NUMBER   DEFAULT NULL,
    P_PLUG_DISPLAY_SEQUENCE         IN VARCHAR2 DEFAULT NULL,
    P_PLUG_DISPLAY_COLUMN           IN VARCHAR2 DEFAULT NULL,
    P_PLUG_DISPLAY_POINT            IN VARCHAR2 DEFAULT NULL,
    P_PLUG_SOURCE                   IN VARCHAR2 DEFAULT NULL,
    P_PLUG_SOURCE_TYPE              IN VARCHAR2 DEFAULT NULL,
    P_AJAX_ITEMS_TO_SUBMIT          IN VARCHAR2 DEFAULT NULL,
    P_PLUG_CREATE_LINK_TEXT         IN VARCHAR2 DEFAULT NULL,
    P_PLUG_CREATE_LINK_TARGET       IN VARCHAR2 DEFAULT NULL,
    P_PLUG_CREATE_IMAGE             IN VARCHAR2 DEFAULT NULL,
    P_PLUG_CREATE_IMAGE_ATTRIBUTES  IN VARCHAR2 DEFAULT NULL,
    P_PLUG_EDIT_LINK_TEXT           IN VARCHAR2 DEFAULT NULL,
    P_PLUG_EDIT_LINK_TARGET         IN VARCHAR2 DEFAULT NULL,
    P_PLUG_EDIT_IMAGE               IN VARCHAR2 DEFAULT NULL,
    P_PLUG_EDIT_IMAGE_ATTRIBUTES    IN VARCHAR2 DEFAULT NULL,
    P_PLUG_EXPAND_LINK_TEXT         IN VARCHAR2 DEFAULT NULL,
    P_PLUG_EXPAND_LINK_TARGET       IN VARCHAR2 DEFAULT NULL,
    P_PLUG_EXPAND_IMAGE             IN VARCHAR2 DEFAULT NULL,
    P_PLUG_EXPAND_IMAGE_ATTRIBUTES  IN VARCHAR2 DEFAULT NULL,
    P_PLUG_CLOSE_LINK_TEXT          IN VARCHAR2 DEFAULT NULL,
    P_PLUG_CLOSE_LINK_TARGET        IN VARCHAR2 DEFAULT NULL,
    P_PLUG_CLOSE_IMAGE              IN VARCHAR2 DEFAULT NULL,
    P_PLUG_CLOSE_IMAGE_ATTRIBUTES   IN VARCHAR2 DEFAULT NULL,
    P_PLUG_REQUIRED_ROLE            IN VARCHAR2 DEFAULT NULL,
    P_PLUG_DISPLAY_WHEN_CONDITION   IN VARCHAR2 DEFAULT NULL,
    P_PLUG_DISPLAY_WHEN_COND2       IN VARCHAR2 DEFAULT NULL,
    P_PLUG_DISPLAY_CONDITION_TYPE   IN VARCHAR2 DEFAULT NULL,
    P_PLUG_HEADER                   IN VARCHAR2 DEFAULT NULL,
    P_PLUG_FOOTER                   IN VARCHAR2 DEFAULT NULL,
    P_PLUG_OVERRIDE_REG_POS         IN VARCHAR2 DEFAULT NULL,
    P_PLUG_CUSTOMIZED               IN VARCHAR2 DEFAULT NULL,
    P_PLUG_CUSTOMIZED_NAME          IN VARCHAR2 DEFAULT NULL,
    
    P_PLUG_QUERY_ROW_TEMPLATE       IN NUMBER   DEFAULT NULL,
    P_PLUG_QUERY_HEADINGS           IN VARCHAR2 DEFAULT NULL,
    P_PLUG_QUERY_HEADINGS_TYPE      IN VARCHAR2 DEFAULT 'COLON_DELMITED_LIST',
    P_PLUG_QUERY_NUM_ROWS           IN NUMBER   DEFAULT NULL,
    P_PLUG_QUERY_OPTIONS            IN VARCHAR2 DEFAULT NULL,
    P_PLUG_QUERY_FORMAT_OUT         IN VARCHAR2 DEFAULT NULL, 
    P_PLUG_QUERY_SHOW_NULLS_AS      IN VARCHAR2 DEFAULT NULL,
    P_PLUG_QUERY_COL_ALLIGNMENTS    IN VARCHAR2 DEFAULT NULL,
    P_PLUG_QUERY_BREAK_COLS         IN VARCHAR2 DEFAULT NULL,
    P_PLUG_QUERY_SUM_COLS           IN VARCHAR2 DEFAULT NULL,
    P_PLUG_QUERY_NUMBER_FORMATS     IN VARCHAR2 DEFAULT NULL,
    P_PLUG_QUERY_TABLE_BORDER       IN VARCHAR2 DEFAULT NULL, 
    P_PLUG_COLUMN_WIDTH             IN VARCHAR2 DEFAULT NULL,
    P_PLUG_QUERY_NO_DATA_FOUND      IN VARCHAR2 DEFAULT NULL,
    P_PLUG_QUERY_MORE_DATA          IN VARCHAR2 DEFAULT NULL,
    P_PLUG_IGNORE_PAGINATION        IN NUMBER   DEFAULT NULL, 
    P_PLUG_QUERY_NUM_ROWS_ITEM      IN VARCHAR2 DEFAULT NULL,
    P_PLUG_QUERY_NUM_ROWS_TYPE      IN VARCHAR2 DEFAULT NULL,
    P_PLUG_QUERY_ROW_COUNT_MAX      IN NUMBER   DEFAULT WWV_FLOW_API.C_DEFAULT_QUERY_ROW_COUNT_MAX,
    
    P_PAGINATION_DISPLAY_POSITION   IN VARCHAR2 DEFAULT NULL,
    P_REPORT_TOTAL_TEXT_FORMAT      IN VARCHAR2 DEFAULT NULL,
    P_BREAK_COLUMN_TEXT_FORMAT      IN VARCHAR2 DEFAULT NULL,
    P_BREAK_BEFORE_ROW              IN VARCHAR2 DEFAULT NULL,
    P_BREAK_GENERIC_COLUMN          IN VARCHAR2 DEFAULT NULL,
    P_BREAK_AFTER_ROW               IN VARCHAR2 DEFAULT NULL,
    P_BREAK_TYPE_FLAG               IN VARCHAR2 DEFAULT NULL,
    P_BREAK_REPEAT_HEADING_FORMAT   IN VARCHAR2 DEFAULT NULL,
    P_CSV_OUTPUT                    IN VARCHAR2 DEFAULT NULL,
    P_CSV_OUTPUT_LINK_TEXT          IN VARCHAR2 DEFAULT NULL,
    
    P_PLUG_URL_TEXT_BEGIN           IN VARCHAR2 DEFAULT NULL,
    P_PLUG_URL_TEXT_END             IN VARCHAR2 DEFAULT NULL,
    P_JAVA_ENTRY_POINT              IN VARCHAR2 DEFAULT NULL,
    
    P_PLUG_CACHING                  IN VARCHAR2 DEFAULT NULL,
    P_PLUG_CACHING_SESSION_STATE    IN VARCHAR2 DEFAULT NULL,
    P_PLUG_CACHING_MAX_AGE_IN_SEC   IN VARCHAR2 DEFAULT NULL,
    
    P_PLUG_CHART_FONT_SIZE          IN VARCHAR2 DEFAULT NULL,
    P_PLUG_CHART_MAX_ROWS           IN VARCHAR2 DEFAULT NULL,
    P_PLUG_CHART_NUM_MASK           IN VARCHAR2 DEFAULT NULL,
    P_PLUG_CHART_SCALE              IN VARCHAR2 DEFAULT NULL,
    P_PLUG_CHART_AXIS               IN VARCHAR2 DEFAULT NULL,
    P_PLUG_CHART_SHOW_SUMMARY       IN VARCHAR2 DEFAULT NULL,
    
    P_MENU_TEMPLATE_ID              IN NUMBER   DEFAULT NULL,
    
    P_REQUIRED_PATCH                IN VARCHAR2 DEFAULT NULL,
    P_PLUG_COMMENT                  IN VARCHAR2 DEFAULT NULL,
    
    P_ID_OFFSET                     IN NUMBER   DEFAULT 0,
    P_TARGET                        IN VARCHAR2 DEFAULT 'PRIME',
    P_PRN_OUTPUT                    IN VARCHAR2 DEFAULT NULL,
    P_PRN_FORMAT                    IN VARCHAR2 DEFAULT NULL,
    P_PRN_LABEL                     IN VARCHAR2 DEFAULT NULL,
    P_COLUMN_HEADING_SORT           IN VARCHAR2 DEFAULT NULL,
    P_ENABLE_SEARCH                 IN VARCHAR2 DEFAULT NULL,
    P_SEARCH_LIST                   IN VARCHAR2 DEFAULT NULL,
    P_USE_UI_DEFAULTS               IN VARCHAR2 DEFAULT NULL
 )
 IS
    L_PLUG_QUERY_ROW_TEMPLATE  NUMBER;
 
    L_SQL                      VARCHAR2(32767);
    L_PLUG_QUERY_HEADINGS      VARCHAR2(4000);
    L_PLUG_SOURCE_TYPE         VARCHAR2(4000);
 
   
    L_COLUMN_LIST                    WWV_FLOW_GLOBAL.VC_ARR2;
    L_QRY_COLS                       WWV_FLOW_GLOBAL.VC_ARR2;
    L_QRY_COL_TYPES                  WWV_FLOW_GLOBAL.VC_ARR2;
    L_COL_MAX_LEN                    WWV_FLOW_GLOBAL.VC_ARR2;
    L_SEARCH                         VARCHAR2(32767);
    L_RPT_MAX_ROW_LOV_ID             NUMBER;
    L_RPT_MAX_ROW_LOV_NAME           VARCHAR2(32767);
    L_RPT_MAX_ROW_LOV_CREATED        BOOLEAN := FALSE;
    L_QUERY_NUM_ROWS_ITEM            VARCHAR2(4000) := P_PLUG_QUERY_NUM_ROWS_ITEM;
    L_SEARCH_PLUG_ID                 NUMBER;
    L_REFRESH_BUTTON_ID              NUMBER;
    L_NEW_SQL                        VARCHAR2(32767);
    L_PLUG_DISPLAY_SEQUENCE          VARCHAR2(100) ;
 
    L_SEARCH_PLUG_DISPLAY_SEQUENCE   VARCHAR2(100) ;
    L_SEARCH_REGION_TEMPLATE_ID      NUMBER;
 
    L_PROCESS_WHEN                   VARCHAR2(32767);
    L_PROCESS_CLOB                   VARCHAR2(32767);
    L_ID                             NUMBER;
    L_REGION_NAME                    VARCHAR2(255);
    L_SEARCH_ITEM                    VARCHAR2(255);
    L_MAXROWLOV_ITEM                 VARCHAR2(255);
    L_GO_BUTTON_ITEM                 VARCHAR2(255);
    L_RESET_BUTTON_ITEM              VARCHAR2(255);
    L_SUFFIX                         NUMBER;
    L_DONE                           BOOLEAN := TRUE;
    L_AJAX_ENABLED                   VARCHAR2(1) := 'Y';
    L_USER_INTERFACE_ID              NUMBER;
    L_IS_JQM                     BOOLEAN := FALSE;
    L_JQM_COL_WIDTH              NUMBER;
 
    L_QUERY_TYPE                     VARCHAR2(30);
 
 BEGIN
    
    
    
    WWV_FLOW_API.CHECK_SGID;
    WWV_FLOW_API.CHECK_VERSION;
 
    IF P_USE_UI_DEFAULTS = 'N' THEN
       WWV_FLOW_HINT.G_USE_UI_DEFAULTS := FALSE;
    END IF;
 
    
    
    
    SELECT USER_INTERFACE_ID
      INTO L_USER_INTERFACE_ID
      FROM WWV_FLOW_STEPS
     WHERE FLOW_ID = P_FLOW_ID
       AND ID      = P_PAGE_ID;
 
   WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
       P_FLOW_ID           => P_FLOW_ID,
       P_USER_INTERFACE_ID => L_USER_INTERFACE_ID );
 
    IF WWV_FLOW_USER_INTERFACE_DEV.IS_JQM_UI(
        P_APPLICATION_ID    => P_FLOW_ID,
        P_USER_INTERFACE_ID => L_USER_INTERFACE_ID
    ) THEN
        L_IS_JQM := TRUE;
    END IF;
 
    
    IF P_PLUG_QUERY_ROW_TEMPLATE IS NULL THEN
      IF P_PLUG_QUERY_FORMAT_OUT = 'HTML' THEN
        L_PLUG_QUERY_ROW_TEMPLATE  := 1;
      ELSIF P_PLUG_QUERY_FORMAT_OUT = 'DOWN2' THEN
        L_PLUG_QUERY_ROW_TEMPLATE  := 2;
      ELSIF P_PLUG_QUERY_FORMAT_OUT = 'DOWN1' THEN
        L_PLUG_QUERY_ROW_TEMPLATE  := 3;
      ELSE
        L_PLUG_QUERY_ROW_TEMPLATE  := 1;
      END IF;
    ELSE
      L_PLUG_QUERY_ROW_TEMPLATE  := P_PLUG_QUERY_ROW_TEMPLATE;
    END IF;
 
    
    L_SQL := RTRIM(WWV_FLOW.TRIM_NL_SP_TAB(P_PLUG_SOURCE), ';');
 
    L_PLUG_QUERY_HEADINGS := NULL;
    L_PLUG_SOURCE_TYPE := WWV_FLOW_REGION_NATIVE.C_SQL_REPORT;
 
     
    IF SUBSTR(UPPER(LTRIM(L_SQL)),1,6)='SELECT' OR
       SUBSTR(UPPER(LTRIM(L_SQL)),1,4)='WITH'
    THEN
        L_QUERY_TYPE := 'SQL';
    ELSIF INSTR(UPPER(L_SQL), 'RETURN')>0 THEN
        L_QUERY_TYPE := 'FUNC_BODY_RETURNING_SQL';
        L_SQL        := L_SQL || ';';
    END IF;
    
    
    
  IF  P_ENABLE_SEARCH = 'Y' AND L_QUERY_TYPE = 'SQL' THEN
     L_SEARCH_PLUG_ID := P_ID;
     L_ID := WWV_FLOW_ID.NEXT_VAL;
     L_SEARCH_PLUG_DISPLAY_SEQUENCE := P_PLUG_DISPLAY_SEQUENCE;
     L_PLUG_DISPLAY_SEQUENCE := P_PLUG_DISPLAY_SEQUENCE+ 10;
 
     
     FOR C1 IN (SELECT ID
                  FROM WWV_FLOW_PAGE_PLUG_TEMPLATES
                 WHERE FLOW_ID           = P_FLOW_ID
                   AND THEME_ID          = WWV_FLOW_THEME_GLOBALS.G_THEME_ID
                   AND THEME_CLASS_ID    = 31
                   AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID )
     LOOP
         L_SEARCH_REGION_TEMPLATE_ID := C1.ID;
     END LOOP;
 ELSE
    L_ID := P_ID;
    L_PLUG_DISPLAY_SEQUENCE := P_PLUG_DISPLAY_SEQUENCE;
 END IF;
 
 
 L_SUFFIX := 0;
 L_REGION_NAME := WWV_FLOW_LANG.SYSTEM_MESSAGE('APEXIR_SEARCH');
 LOOP
  L_DONE := TRUE;
  FOR C1 IN ( SELECT PLUG_NAME FROM  WWV_FLOW_PAGE_PLUGS WHERE FLOW_ID = P_FLOW_ID AND
             PAGE_ID = P_PAGE_ID AND PLUG_NAME =  L_REGION_NAME)
  LOOP
     L_SUFFIX := L_SUFFIX +1;
     L_REGION_NAME :=  WWV_FLOW_LANG.SYSTEM_MESSAGE('APEXIR_SEARCH')||L_SUFFIX;
     L_DONE := FALSE;
  END LOOP;
  IF L_DONE = TRUE THEN
     EXIT;
  END IF;
 END  LOOP;
 
 
 L_SUFFIX := 0;
 L_SEARCH_ITEM := 'P'||P_PAGE_ID||'_SEARCH';
 LOOP
  L_DONE := TRUE;
  FOR C1 IN ( SELECT NAME FROM  WWV_FLOW_STEP_ITEMS WHERE FLOW_ID = P_FLOW_ID AND
             FLOW_STEP_ID = P_PAGE_ID AND NAME = L_SEARCH_ITEM)
  LOOP
     L_SUFFIX := L_SUFFIX +1;
     L_SEARCH_ITEM :=  'P'||P_PAGE_ID||'_SEARCH'||L_SUFFIX;
     L_DONE := FALSE;
  END LOOP;
  IF L_DONE = TRUE THEN
     EXIT;
  END IF;
 END  LOOP;
 
 
 L_SUFFIX := 0;
 L_MAXROWLOV_ITEM := 'P'||P_PAGE_ID||'_ROWS';
 LOOP
  L_DONE := TRUE;
  FOR C1 IN ( SELECT NAME FROM  WWV_FLOW_STEP_ITEMS WHERE FLOW_ID = P_FLOW_ID AND
             FLOW_STEP_ID = P_PAGE_ID AND NAME = L_MAXROWLOV_ITEM)
  LOOP
     L_SUFFIX := L_SUFFIX +1;
     L_MAXROWLOV_ITEM :=  'P'||P_PAGE_ID||'_ROWS' || L_SUFFIX;
     L_DONE := FALSE;
  END LOOP;
  IF L_DONE = TRUE THEN
     EXIT;
  END IF;
 END  LOOP;
 
 
 L_SUFFIX := 0;
 L_GO_BUTTON_ITEM := 'GO';
 LOOP
  L_DONE := TRUE;
  FOR C1 IN ( SELECT BUTTON_NAME FROM  WWV_FLOW_STEP_BUTTONS WHERE FLOW_ID = P_FLOW_ID AND
             FLOW_STEP_ID = P_PAGE_ID AND BUTTON_NAME = L_GO_BUTTON_ITEM)
  LOOP
     L_SUFFIX := L_SUFFIX +1;
     L_GO_BUTTON_ITEM :=  'GO' || L_SUFFIX;
     L_DONE := FALSE;
  END LOOP;
  IF L_DONE = TRUE THEN
     EXIT;
  END IF;
 END  LOOP;
 
 
 L_SUFFIX := 0;
 L_RESET_BUTTON_ITEM := 'RESET';
 LOOP
  L_DONE := TRUE;
  FOR C1 IN ( SELECT BUTTON_NAME FROM  WWV_FLOW_STEP_BUTTONS WHERE FLOW_ID = P_FLOW_ID AND
             FLOW_STEP_ID = P_PAGE_ID AND BUTTON_NAME = L_RESET_BUTTON_ITEM)
  LOOP
     L_SUFFIX := L_SUFFIX +1;
     L_RESET_BUTTON_ITEM :=  'RESET' || L_SUFFIX;
     L_DONE := FALSE;
  END LOOP;
  IF L_DONE = TRUE THEN
     EXIT;
  END IF;
 END  LOOP;
 
 
  
  IF  P_ENABLE_SEARCH = 'Y' AND L_QUERY_TYPE = 'SQL' THEN
       L_COLUMN_LIST := WWV_FLOW_UTILITIES.STRING_TO_TABLE2(P_SEARCH_LIST);
       FOR I IN 1..L_COLUMN_LIST.COUNT LOOP
          IF I > 1 THEN
            L_SEARCH := L_SEARCH||' or'||WWV_FLOW.LF;
          END IF;
          L_SEARCH := L_SEARCH||' instr(upper("'||L_COLUMN_LIST(I)||'"),upper(nvl(:'||L_SEARCH_ITEM||',"'||L_COLUMN_LIST(I)||'"))) > 0 ';
       END LOOP;
       IF L_SEARCH IS NOT NULL THEN
         L_NEW_SQL := 'select * from ('||WWV_FLOW.LF;
         L_NEW_SQL := L_NEW_SQL||L_SQL;
         L_NEW_SQL := L_NEW_SQL||')'||WWV_FLOW.LF;
         L_NEW_SQL := L_NEW_SQL||'where ('||WWV_FLOW.LF;
         L_NEW_SQL := L_NEW_SQL||L_SEARCH ||WWV_FLOW.LF;
         L_NEW_SQL := L_NEW_SQL||')'||WWV_FLOW.LF;
       ELSE
         L_NEW_SQL := L_SQL;
       END IF;
    ELSE
        L_NEW_SQL := L_SQL;
   END IF;
 
 
   IF  P_ENABLE_SEARCH = 'Y' AND L_QUERY_TYPE = 'SQL' THEN
      L_RPT_MAX_ROW_LOV_NAME := 'P'||P_PAGE_ID||'_'|| WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_CREATE_MODEL_APP.RPT_MAX_ROW');
      FOR C1 IN (SELECT  ID, LOV_NAME FROM WWV_FLOW_LISTS_OF_VALUES$
                 WHERE  FLOW_ID = P_FLOW_ID AND LOV_NAME =   L_RPT_MAX_ROW_LOV_NAME) LOOP
          L_RPT_MAX_ROW_LOV_CREATED := TRUE;
          L_RPT_MAX_ROW_LOV_ID := C1.ID;
          L_QUERY_NUM_ROWS_ITEM := L_MAXROWLOV_ITEM;
     END LOOP;
     IF  NOT L_RPT_MAX_ROW_LOV_CREATED THEN
        L_RPT_MAX_ROW_LOV_ID := WWV_FLOW_ID.NEXT_VAL;
        CREATE_REPORT_MAX_ROW_LOV (
               P_LOV_ID       => L_RPT_MAX_ROW_LOV_ID,
               P_LOV_NAME     => L_RPT_MAX_ROW_LOV_NAME,
               P_FLOW_ID      => P_FLOW_ID
               );
          L_RPT_MAX_ROW_LOV_CREATED := TRUE;
          L_QUERY_NUM_ROWS_ITEM := L_MAXROWLOV_ITEM;
      END IF;
   END IF;
 
   
   IF  P_ENABLE_SEARCH = 'Y' AND L_QUERY_TYPE = 'SQL' THEN
      WWV_FLOW_API.CREATE_PAGE_PLUG (
            P_ID                         => L_SEARCH_PLUG_ID,
            P_FLOW_ID                    => P_FLOW_ID,
            P_PAGE_ID                    => P_PAGE_ID,
            P_PLUG_NAME                  => L_REGION_NAME,
            P_PLUG_TEMPLATE              => NVL(L_SEARCH_REGION_TEMPLATE_ID,P_PLUG_TEMPLATE),
            P_REGION_TEMPLATE_OPTIONS    => GET_PRESET_TEMPLATE_OPTIONS (NVL(L_SEARCH_REGION_TEMPLATE_ID,P_PLUG_TEMPLATE),'REGION'),
            P_PARENT_PLUG_ID             => P_PARENT_PLUG_ID,
            P_PLUG_DISPLAY_SEQUENCE      => L_SEARCH_PLUG_DISPLAY_SEQUENCE,
            P_PLUG_DISPLAY_COLUMN        => P_PLUG_DISPLAY_COLUMN,
            P_PLUG_DISPLAY_POINT         => 'BODY',
            P_PLUG_ITEM_DISPLAY_POINT    => 'ABOVE',
            P_PLUG_SOURCE                => NULL,
            P_PLUG_SOURCE_TYPE           => WWV_FLOW_REGION_NATIVE.C_STATIC );
 
 
    
       WWV_FLOW_API.CREATE_PAGE_ITEM(
            P_FLOW_ID                  => P_FLOW_ID,
            P_FLOW_STEP_ID             => P_PAGE_ID,
            P_NAME                     => L_SEARCH_ITEM,
            P_DATA_TYPE                => 'VARCHAR',
            P_ITEM_PLUG_ID             => L_SEARCH_PLUG_ID,
            P_ACCEPT_PROCESSING        => 'REPLACE_EXISTING',
            P_ITEM_SEQUENCE            => 10,
            P_USE_CACHE_BEFORE_DEFAULT => 'YES',
            P_ITEM_DEFAULT             => '',
            P_PROMPT                   => WWV_FLOW_LANG.SYSTEM_MESSAGE('APEXIR_SEARCH'),
            P_SOURCE                   => NULL,
            P_SOURCE_TYPE              => NULL,
            P_DISPLAY_AS               => 'TEXT_WITH_ENTER_SUBMIT',
            P_LOV                      => NULL,
            P_LOV_DISPLAY_NULL         => 'YES',
            P_CSIZE                    => 30,
            P_CMAXLENGTH               => 2000,
            P_CHEIGHT                  => NULL,
            P_CATTRIBUTES              => '',
            P_BEGIN_ON_NEW_LINE        => 'YES',
            P_BEGIN_ON_NEW_FIELD       => 'YES',
            P_COLSPAN                  => 3,
            P_GRID_LABEL_COLUMN_SPAN   => 1,
            P_LABEL_ALIGNMENT          => 'RIGHT',
            P_FIELD_ALIGNMENT          => 'LEFT',
            P_FIELD_TEMPLATE           => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,
            P_ITEM_TEMPLATE_OPTIONS    => GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,'ITEM'),
            P_DISPLAY_WHEN             => '',
            P_WARN_ON_UNSAVED_CHANGES  => 'I',
            P_IS_PERSISTENT            => 'Y',
            P_SECURITY_SCHEME          => '',
            P_ITEM_COMMENT             => NULL
        );
 
        
        WWV_FLOW_API.CREATE_PAGE_ITEM(
            P_FLOW_ID                  => P_FLOW_ID,
            P_FLOW_STEP_ID             => P_PAGE_ID,
            P_NAME                     => L_QUERY_NUM_ROWS_ITEM,
            P_DATA_TYPE                => 'VARCHAR',
            P_ITEM_PLUG_ID             => L_SEARCH_PLUG_ID,
            P_ACCEPT_PROCESSING        => 'REPLACE_EXISTING',
            P_ITEM_SEQUENCE            => 20,
            P_USE_CACHE_BEFORE_DEFAULT => 'YES',
            P_ITEM_DEFAULT             => '15',
            P_ITEM_DEFAULT_TYPE        => 'STATIC_TEXT_WITH_SUBSTITUTIONS',
            P_PROMPT                   => WWV_FLOW_LANG.SYSTEM_MESSAGE('LAYOUT.T_DISPLAY'),
            P_SOURCE                   =>'15',
            P_SOURCE_TYPE              => 'STATIC',
            P_DISPLAY_AS               => WWV_FLOW_NATIVE_ITEM.C_SELECT_LIST,
            P_NAMED_LOV                => L_RPT_MAX_ROW_LOV_NAME,
            P_LOV                      => '.'||L_RPT_MAX_ROW_LOV_ID||'.',
            P_LOV_DISPLAY_NULL         => 'NO',
            P_LOV_TRANSLATED           => 'N',
            P_CSIZE                    => 30,
            P_CMAXLENGTH               => 2000,
            P_CHEIGHT                  => NULL,
            P_CATTRIBUTES              => '',
            P_BEGIN_ON_NEW_LINE        => 'NO',
            P_BEGIN_ON_NEW_FIELD       => 'YES',
            P_COLSPAN                  => 2,
            P_GRID_LABEL_COLUMN_SPAN   => 1,
            P_LABEL_ALIGNMENT          => 'RIGHT',
            P_FIELD_ALIGNMENT          => 'LEFT',
            P_FIELD_TEMPLATE           => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,
            P_ITEM_TEMPLATE_OPTIONS    => GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,'ITEM'),
            P_DISPLAY_WHEN             => '',
            P_WARN_ON_UNSAVED_CHANGES  => 'I',
            P_IS_PERSISTENT            => 'Y',
            P_SECURITY_SCHEME          => '',
            P_ITEM_COMMENT             => NULL
        );
 
        WWV_FLOW_API.CREATE_PAGE_BUTTON (
            P_FLOW_ID                  => P_FLOW_ID,
            P_FLOW_STEP_ID             => P_PAGE_ID,
            P_BUTTON_NAME              => L_GO_BUTTON_ITEM,
            P_BUTTON_SEQUENCE          => 30,
            P_BUTTON_PLUG_ID           => L_SEARCH_PLUG_ID,
            P_BUTTON_TEMPLATE_ID       => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE,
            P_BUTTON_TEMPLATE_OPTIONS  => GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE, 'BUTTON'),
            P_BUTTON_IMAGE_ALT         => WWV_FLOW_LANG.SYSTEM_MESSAGE('F4000.P119.GO'),
            P_BUTTON_POSITION          => 'BODY',
            P_BUTTON_ALIGNMENT         => 'LEFT',
            P_BUTTON_ACTION            => WWV_FLOW_BUTTON.C_ACTION_SUBMIT,
            P_GRID_NEW_ROW             => 'N',
            P_GRID_NEW_COLUMN          => 'Y' );
 
        WWV_FLOW_API.CREATE_PAGE_BUTTON (
            P_FLOW_ID                  => P_FLOW_ID,
            P_FLOW_STEP_ID             => P_PAGE_ID,
            P_BUTTON_NAME              => L_RESET_BUTTON_ITEM,
            P_BUTTON_SEQUENCE          => 40,
            P_BUTTON_PLUG_ID           => L_SEARCH_PLUG_ID,
            P_BUTTON_TEMPLATE_ID       => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE,
            P_BUTTON_TEMPLATE_OPTIONS  => GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE, 'BUTTON'),
            P_BUTTON_IMAGE_ALT         => WWV_FLOW_LANG.SYSTEM_MESSAGE('F4050.RESET'),
            P_BUTTON_POSITION          => 'BODY',
            P_BUTTON_ALIGNMENT         => 'LEFT',
            P_BUTTON_ACTION            => WWV_FLOW_BUTTON.C_ACTION_SUBMIT,
            P_GRID_NEW_ROW             => 'N',
            P_GRID_NEW_COLUMN          => 'N' );
 
        L_PROCESS_WHEN := L_GO_BUTTON_ITEM||','||L_SEARCH_ITEM||','||L_RESET_BUTTON_ITEM;
        WWV_FLOW_API.CREATE_PAGE_PROCESS(
           P_FLOW_ID                 => P_FLOW_ID,
           P_FLOW_STEP_ID            => P_PAGE_ID,
           P_PROCESS_SEQUENCE        => 10,
           P_PROCESS_POINT           => 'AFTER_SUBMIT',
           P_PROCESS_TYPE            => 'RESET_PAGINATION',
           P_PROCESS_NAME            => WWV_FLOW_LANG.SYSTEM_MESSAGE('F4000_P4734_RESET_PAG'),
           P_PROCESS_SQL_CLOB        => 'reset_pagination',
           P_ERROR_DISPLAY_LOCATION  => WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION,
           P_PROCESS_WHEN_BUTTON_ID  => NULL,
           P_PROCESS_WHEN            => L_PROCESS_WHEN,
           P_PROCESS_WHEN_TYPE       => 'REQUEST_IN_CONDITION',
           P_PROCESS_SUCCESS_MESSAGE => NULL,
           P_PROCESS_COMMENT         => NULL);
 
          L_PROCESS_CLOB := L_SEARCH_ITEM;
          L_PROCESS_CLOB := L_PROCESS_CLOB||','|| L_QUERY_NUM_ROWS_ITEM;
 
          FOR C1 IN ( SELECT ID FROM WWV_FLOW_STEP_ITEMS WHERE FLOW_ID = P_FLOW_ID AND
          FLOW_STEP_ID = P_PAGE_ID AND NAME = L_RESET_BUTTON_ITEM)
          LOOP
             L_REFRESH_BUTTON_ID := C1.ID;
          END LOOP;
 
          WWV_FLOW_API.CREATE_PAGE_PROCESS(
           P_FLOW_ID                 => P_FLOW_ID,
           P_FLOW_STEP_ID            => P_PAGE_ID,
           P_PROCESS_SEQUENCE        => 20,
           P_PROCESS_POINT           => 'AFTER_SUBMIT',
           P_PROCESS_TYPE            => 'CLEAR_CACHE_FOR_ITEMS',
           P_PROCESS_NAME            => WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_CREATE_MODEL_APP.RESET_RPT_SEARCH'),
           P_PROCESS_SQL_CLOB        => L_PROCESS_CLOB,
           P_ERROR_DISPLAY_LOCATION  => WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION,
           P_PROCESS_WHEN_BUTTON_ID  => L_REFRESH_BUTTON_ID,
           P_PROCESS_WHEN            => '',
           P_PROCESS_WHEN_TYPE       => '',
           P_PROCESS_SUCCESS_MESSAGE => NULL,
           P_PROCESS_COMMENT         => NULL);
 
           WWV_FLOW_API.CREATE_PAGE_BRANCH (
            P_FLOW_ID               => P_FLOW_ID,
            P_FLOW_STEP_ID          => P_PAGE_ID,
            P_BRANCH_ACTION         => 'f?p=&APP_ID.:'||P_PAGE_ID||':&SESSION.',
            P_BRANCH_POINT          => 'AFTER_PROCESSING',
            P_BRANCH_TYPE           => 'REDIRECT_URL',
            P_BRANCH_WHEN_BUTTON_ID => NULL,
            P_BRANCH_SEQUENCE       => '10',
            P_BRANCH_CONDITION_TYPE => '',
            P_BRANCH_CONDITION      => NULL,
            P_BRANCH_CONDITION_TEXT => NULL,
            P_REQUIRED_PATCH        => NULL,
            P_BRANCH_COMMENT        => NULL);
 
 
 END IF;
 
    
    
    
    
    IF IS_OLD_PPR_TEMPLATE(P_FLOW_ID => P_FLOW_ID, P_REPORT_TEMPLATE_ID => L_PLUG_QUERY_ROW_TEMPLATE) OR L_IS_JQM THEN
        L_AJAX_ENABLED := 'N';
    END IF;
 
    WWV_FLOW_API.CREATE_PAGE_PLUG (
      P_ID                            => L_ID,
      P_FLOW_ID                       => P_FLOW_ID,
      P_PAGE_ID                       => P_PAGE_ID,
      P_PLUG_NAME                     => P_PLUG_NAME,
      P_PLUG_TEMPLATE                 => P_PLUG_TEMPLATE,
      P_REGION_TEMPLATE_OPTIONS       => GET_PRESET_TEMPLATE_OPTIONS (P_PLUG_TEMPLATE,'REGION'),
      P_COMPONENT_TEMPLATE_OPTIONS    => GET_PRESET_TEMPLATE_OPTIONS (L_PLUG_QUERY_ROW_TEMPLATE,'REPORT'),
      P_PARENT_PLUG_ID                => P_PARENT_PLUG_ID,
      P_PLUG_DISPLAY_SEQUENCE         => L_PLUG_DISPLAY_SEQUENCE,
      P_PLUG_DISPLAY_COLUMN           => P_PLUG_DISPLAY_COLUMN,
      P_PLUG_DISPLAY_POINT            => P_PLUG_DISPLAY_POINT,
      
      P_QUERY_TYPE                    => L_QUERY_TYPE,
      P_LOCATION                      => 'LOCAL',
      P_PLUG_SOURCE                   => L_NEW_SQL,
      P_PLUG_SOURCE_TYPE              => L_PLUG_SOURCE_TYPE,
      
      P_PLUG_CREATE_LINK_TEXT         => P_PLUG_CREATE_LINK_TEXT,
      P_PLUG_CREATE_LINK_TARGET       => P_PLUG_CREATE_LINK_TARGET,
      P_PLUG_CREATE_IMAGE             => P_PLUG_CREATE_IMAGE,
      P_PLUG_CREATE_IMAGE_ATTRIBUTES  => P_PLUG_CREATE_IMAGE_ATTRIBUTES,
      P_PLUG_EDIT_LINK_TEXT           => P_PLUG_EDIT_LINK_TEXT,
      P_PLUG_EDIT_LINK_TARGET         => P_PLUG_EDIT_LINK_TARGET,
      P_PLUG_EDIT_IMAGE               => P_PLUG_EDIT_IMAGE,
      P_PLUG_EDIT_IMAGE_ATTRIBUTES    => P_PLUG_EDIT_IMAGE_ATTRIBUTES,
      P_PLUG_EXPAND_LINK_TEXT         => P_PLUG_EXPAND_LINK_TEXT,
      P_PLUG_EXPAND_LINK_TARGET       => P_PLUG_EXPAND_LINK_TARGET,
      P_PLUG_EXPAND_IMAGE             => P_PLUG_EXPAND_IMAGE,
      P_PLUG_EXPAND_IMAGE_ATTRIBUTES  => P_PLUG_EXPAND_IMAGE_ATTRIBUTES,
      P_PLUG_CLOSE_LINK_TEXT          => P_PLUG_CLOSE_LINK_TEXT,
      P_PLUG_CLOSE_LINK_TARGET        => P_PLUG_CLOSE_LINK_TARGET,
      P_PLUG_CLOSE_IMAGE              => P_PLUG_CLOSE_IMAGE,
      P_PLUG_CLOSE_IMAGE_ATTRIBUTES   => P_PLUG_CLOSE_IMAGE_ATTRIBUTES,
      P_PLUG_REQUIRED_ROLE            => P_PLUG_REQUIRED_ROLE,
      P_PLUG_DISPLAY_WHEN_CONDITION   => P_PLUG_DISPLAY_WHEN_CONDITION,
      P_PLUG_DISPLAY_WHEN_COND2       => P_PLUG_DISPLAY_WHEN_COND2,
      P_PLUG_DISPLAY_CONDITION_TYPE   => P_PLUG_DISPLAY_CONDITION_TYPE,
      P_PLUG_HEADER                   => P_PLUG_HEADER,
      P_PLUG_FOOTER                   => P_PLUG_FOOTER,
      P_PLUG_OVERRIDE_REG_POS         => P_PLUG_OVERRIDE_REG_POS,
      P_PLUG_CUSTOMIZED               => P_PLUG_CUSTOMIZED,
      P_PLUG_CUSTOMIZED_NAME          => P_PLUG_CUSTOMIZED_NAME,
      
      P_AJAX_ENABLED                  => L_AJAX_ENABLED,
      P_AJAX_ITEMS_TO_SUBMIT          => P_AJAX_ITEMS_TO_SUBMIT,
      P_PLUG_QUERY_ROW_TEMPLATE       => L_PLUG_QUERY_ROW_TEMPLATE,
      P_PLUG_QUERY_HEADINGS           => L_PLUG_QUERY_HEADINGS,
      P_PLUG_QUERY_HEADINGS_TYPE      => 'COLON_DELMITED_LIST',
      P_PLUG_QUERY_NUM_ROWS           => P_PLUG_QUERY_NUM_ROWS,
      P_PLUG_QUERY_OPTIONS            => P_PLUG_QUERY_OPTIONS,
      
      P_PLUG_QUERY_FORMAT_OUT         => P_PLUG_QUERY_FORMAT_OUT,
      P_PLUG_QUERY_SHOW_NULLS_AS      => P_PLUG_QUERY_SHOW_NULLS_AS,
      P_PLUG_QUERY_COL_ALLIGNMENTS    => P_PLUG_QUERY_COL_ALLIGNMENTS,
      P_PLUG_QUERY_BREAK_COLS         => P_PLUG_QUERY_BREAK_COLS,
      P_PLUG_QUERY_SUM_COLS           => P_PLUG_QUERY_SUM_COLS,
      P_PLUG_QUERY_NUMBER_FORMATS     => P_PLUG_QUERY_NUMBER_FORMATS,
      P_PLUG_QUERY_TABLE_BORDER       => P_PLUG_QUERY_TABLE_BORDER,
      P_PLUG_COLUMN_WIDTH             => P_PLUG_COLUMN_WIDTH,
      P_PLUG_QUERY_NO_DATA_FOUND      => P_PLUG_QUERY_NO_DATA_FOUND,
      P_PLUG_QUERY_MORE_DATA          => P_PLUG_QUERY_MORE_DATA,
      P_PLUG_IGNORE_PAGINATION        => P_PLUG_IGNORE_PAGINATION,
      P_PLUG_QUERY_NUM_ROWS_ITEM      => L_QUERY_NUM_ROWS_ITEM,
      P_PLUG_QUERY_NUM_ROWS_TYPE      => P_PLUG_QUERY_NUM_ROWS_TYPE,
      P_PLUG_QUERY_ROW_COUNT_MAX      => P_PLUG_QUERY_ROW_COUNT_MAX,
      
      P_PAGINATION_DISPLAY_POSITION   => P_PAGINATION_DISPLAY_POSITION,
      P_REPORT_TOTAL_TEXT_FORMAT      => P_REPORT_TOTAL_TEXT_FORMAT,
      P_BREAK_COLUMN_TEXT_FORMAT      => P_BREAK_COLUMN_TEXT_FORMAT,
      P_BREAK_BEFORE_ROW              => P_BREAK_BEFORE_ROW,
      P_BREAK_GENERIC_COLUMN          => P_BREAK_GENERIC_COLUMN,
      P_BREAK_AFTER_ROW               => P_BREAK_AFTER_ROW,
      P_BREAK_TYPE_FLAG               => P_BREAK_TYPE_FLAG,
      P_BREAK_REPEAT_HEADING_FORMAT   => P_BREAK_REPEAT_HEADING_FORMAT,
      P_CSV_OUTPUT                    => P_CSV_OUTPUT,
      P_CSV_OUTPUT_LINK_TEXT          => P_CSV_OUTPUT_LINK_TEXT,
      
      P_PLUG_URL_TEXT_BEGIN           => P_PLUG_URL_TEXT_BEGIN,
      P_PLUG_URL_TEXT_END             => P_PLUG_URL_TEXT_END,
      P_JAVA_ENTRY_POINT              => P_JAVA_ENTRY_POINT,
      
      P_PLUG_CACHING                  => P_PLUG_CACHING,
      P_PLUG_CACHING_SESSION_STATE    => P_PLUG_CACHING_SESSION_STATE,
      P_PLUG_CACHING_MAX_AGE_IN_SEC   => P_PLUG_CACHING_MAX_AGE_IN_SEC,
      
      P_PLUG_CHART_FONT_SIZE          => P_PLUG_CHART_FONT_SIZE,
      P_PLUG_CHART_MAX_ROWS           => P_PLUG_CHART_MAX_ROWS,
      P_PLUG_CHART_NUM_MASK           => P_PLUG_CHART_NUM_MASK,
      P_PLUG_CHART_SCALE              => P_PLUG_CHART_SCALE,
      P_PLUG_CHART_AXIS               => P_PLUG_CHART_AXIS,
      P_PLUG_CHART_SHOW_SUMMARY       => P_PLUG_CHART_SHOW_SUMMARY,
      P_MENU_TEMPLATE_ID              => P_MENU_TEMPLATE_ID,
      P_REQUIRED_PATCH                => P_REQUIRED_PATCH,
      P_PLUG_COMMENT                  => P_PLUG_COMMENT,
      P_ID_OFFSET                     => P_ID_OFFSET,
      P_PRN_OUTPUT                    => P_PRN_OUTPUT,
      P_PRN_FORMAT                    => P_PRN_FORMAT,
      P_PRN_OUTPUT_LINK_TEXT  => P_PRN_LABEL
    );
 
 
    
    
    
    
    IF P_COLUMN_HEADING_SORT = 'Y' THEN
        UPDATE WWV_FLOW_REGION_REPORT_COLUMN
           SET DISABLE_SORT_COLUMN = 'N'
         WHERE REGION_ID = P_ID;
        
        UPDATE WWV_FLOW_REGION_REPORT_COLUMN
           SET DEFAULT_SORT_COLUMN_SEQUENCE = 0
         WHERE REGION_ID = P_ID;
        
        UPDATE WWV_FLOW_REGION_REPORT_COLUMN
           SET DEFAULT_SORT_COLUMN_SEQUENCE = 1
         WHERE REGION_ID = P_ID
           AND QUERY_COLUMN_ID = 1;
    END IF;
 
    IF L_IS_JQM THEN
 
        
        SELECT (100/COUNT(1)) INTO L_JQM_COL_WIDTH
          FROM WWV_FLOW_REGION_REPORT_COLUMN
         WHERE REGION_ID = P_ID
           AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
           AND FLOW_ID = P_FLOW_ID;
 
        
        UPDATE WWV_FLOW_REGION_REPORT_COLUMN
           SET REPORT_COLUMN_WIDTH = L_JQM_COL_WIDTH
         WHERE REGION_ID = P_ID
           AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
           AND FLOW_ID = P_FLOW_ID;
 
    END IF;
 
        
    
    
    IF WWV_FLOW_HINT.G_USE_UI_DEFAULTS THEN
 
        IF ( L_PLUG_SOURCE_TYPE = WWV_FLOW_REGION_NATIVE.C_SQL_REPORT ) AND ( L_QUERY_TYPE = 'SQL' ) THEN
            GET_QUERY_COLUMNS (
              P_OWNER       => GET_FLOW_OWNER(P_FLOW_ID),
              P_QUERY       => L_NEW_SQL,
              P_INCLUDE_TZ  => 'Y',
              P_COLUMNS     => L_QRY_COLS,
              P_TYPES       => L_QRY_COL_TYPES,
              P_COL_MAX_LEN => L_COL_MAX_LEN);
 
            FOR I IN 1..L_QRY_COLS.COUNT LOOP
                
                WWV_FLOW_HINT.GET_AD_UI_DEFAULTS (
                     P_SGID        => WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID,
                     P_COLUMN_NAME => L_QRY_COLS(I));
 
                UPDATE WWV_FLOW_REGION_REPORT_COLUMN
                   SET COLUMN_HEADING   = ESCAPE_REPORT_LABEL(NVL( WWV_FLOW_HINT.G_LABEL, INITCAP( REPLACE( L_QRY_COLS(I), '_', ' ' )))),
                       COLUMN_ALIGNMENT = NVL(WWV_FLOW_HINT.G_REPORT_COL_ALIGNMENT,'LEFT'),
                       HEADING_ALIGNMENT= NVL(WWV_FLOW_HINT.G_REPORT_COL_ALIGNMENT,'LEFT'),
                       COLUMN_FORMAT    = WWV_FLOW_HINT.G_REPORT_FORMAT_MASK,
                       COLUMN_WIDTH     = WWV_FLOW_HINT.G_FORM_DISPLAY_WIDTH,
                       COLUMN_HEIGHT    = WWV_FLOW_HINT.G_FORM_DISPLAY_HEIGHT,
                       COLUMN_DEFAULT   = WWV_FLOW_HINT.G_DEFAULT_VALUE
                 WHERE COLUMN_ALIAS = L_QRY_COLS(I)
                   AND REGION_ID = P_ID
                   AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                   AND FLOW_ID = P_FLOW_ID;
            END LOOP;
        ELSE
            FOR C1 IN (SELECT COLUMN_ALIAS FROM WWV_FLOW_REGION_REPORT_COLUMN
                       WHERE REGION_ID = P_ID
                       AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                        AND FLOW_ID = P_FLOW_ID
            ) LOOP
                WWV_FLOW_HINT.GET_AD_UI_DEFAULTS (
                     P_SGID        => WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID,
                     P_COLUMN_NAME => C1.COLUMN_ALIAS);
 
                UPDATE WWV_FLOW_REGION_REPORT_COLUMN
                   SET COLUMN_HEADING   = ESCAPE_REPORT_LABEL(NVL(WWV_FLOW_HINT.G_LABEL, INITCAP( REPLACE( C1.COLUMN_ALIAS, '_', ' ' )))),
                       COLUMN_ALIGNMENT = NVL(WWV_FLOW_HINT.G_REPORT_COL_ALIGNMENT,'LEFT'),
                       HEADING_ALIGNMENT= NVL(WWV_FLOW_HINT.G_REPORT_COL_ALIGNMENT,'LEFT'),
                       COLUMN_FORMAT    = WWV_FLOW_HINT.G_REPORT_FORMAT_MASK,
                       COLUMN_WIDTH     = WWV_FLOW_HINT.G_FORM_DISPLAY_WIDTH,
                       COLUMN_HEIGHT    = WWV_FLOW_HINT.G_FORM_DISPLAY_HEIGHT,
                       COLUMN_DEFAULT   = WWV_FLOW_HINT.G_DEFAULT_VALUE
                 WHERE COLUMN_ALIAS = C1.COLUMN_ALIAS
                   AND REGION_ID = P_ID
                   AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                   AND FLOW_ID = P_FLOW_ID;
            END LOOP;
        END IF;
    ELSE
        INITCAP_REPORT_COLUMN_HEADINGS (
            P_REGION_ID => P_ID );
    END IF;
 
 END CREATE_QUERY_REGION;
 
 
 
 
 PROCEDURE CREATE_NEXT_PREV_PK_PROCESS (
     P_FLOW_ID          IN NUMBER,
     P_PAGE_ID          IN NUMBER,
     P_PAGE_MODE        IN VARCHAR2 DEFAULT WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL,
     P_OWNER            IN VARCHAR2 DEFAULT NULL,
     P_TABLE            IN VARCHAR2 DEFAULT NULL,
     P_NAV_REGION       IN VARCHAR2 DEFAULT NULL,
     P_PK_COLUMN        IN VARCHAR2 DEFAULT NULL,
     P_PK_COLUMN2       IN VARCHAR2 DEFAULT NULL,
     P_SORT_COLUMN      IN VARCHAR2 DEFAULT NULL,
     P_SORT_COLUMN2     IN VARCHAR2 DEFAULT NULL,
     P_ITEM_PK          IN VARCHAR2 DEFAULT NULL,
     P_ITEM_PK2         IN VARCHAR2 DEFAULT NULL,
     P_WHERE            IN VARCHAR2 DEFAULT NULL)
 IS
     L_HTML_REGION_ID            NUMBER;
     L_HTML_REGION_TEMPLATE      NUMBER;
 
     L_PAGE_PROCESS              VARCHAR2(32767);
     L_ITEM_NEXT                 VARCHAR2(255);
     L_ITEM_PREV                 VARCHAR2(255);
     L_ITEM_NEXT2                VARCHAR2(255);
     L_ITEM_PREV2                VARCHAR2(255);
     L_ITEM_ROW_CNT              VARCHAR2(255);
     
     L_NEXT_BUTTON_ID            NUMBER := WWV_FLOW_ID.NEXT_VAL;
     L_PREV_BUTTON_ID            NUMBER := WWV_FLOW_ID.NEXT_VAL;
 
     L_NEXT_URL                  VARCHAR2(4000);
     L_PREV_URL                  VARCHAR2(4000);
 
     L_TOTAL_ROW_CNT             PLS_INTEGER := 0;
 
     L_SHORTCUT_NAME             VARCHAR2(1000) := 'OK_TO_GET_NEXT_PREV_PK_VALUE';
 
     L_BUTTON_TEMPLATE_OPTIONS   VARCHAR2(255);
 
     
     
     
     FUNCTION GET_MAX_ITEM_SEQ (
         P_FLOW_ID   IN NUMBER,
         P_PAGE_ID   IN NUMBER)
     RETURN NUMBER
     IS
         L_ITEM_SEQ     NUMBER;
     BEGIN
         FOR C1 IN (SELECT NVL(MAX(ITEM_SEQUENCE),0) S
                    FROM   WWV_FLOW_STEP_ITEMS
                    WHERE  FLOW_STEP_ID = P_PAGE_ID
                    AND FLOW_ID = P_FLOW_ID)
         LOOP
             L_ITEM_SEQ := C1.S;
             L_ITEM_SEQ := TRUNC(L_ITEM_SEQ) + 10;
         END LOOP;
         RETURN L_ITEM_SEQ;
     END GET_MAX_ITEM_SEQ;    
     
     
     
     FUNCTION GET_MAX_BUTTON_SEQ (
         P_FLOW_ID   IN NUMBER,
         P_PAGE_ID   IN NUMBER)
     RETURN NUMBER
     IS
         L_BUTTON_SEQ     NUMBER;
     BEGIN
         FOR C1 IN (SELECT NVL(MAX(BUTTON_SEQUENCE),0) S
                    FROM   WWV_FLOW_STEP_BUTTONS
                    WHERE  FLOW_STEP_ID = P_PAGE_ID
                    AND FLOW_ID = P_FLOW_ID)
         LOOP
             L_BUTTON_SEQ := C1.S;
             L_BUTTON_SEQ := TRUNC(L_BUTTON_SEQ) + 10;
         END LOOP;
         RETURN L_BUTTON_SEQ;
     END GET_MAX_BUTTON_SEQ;    
     
     
     
     FUNCTION GET_MAX_PROCESS_SEQ (
         P_FLOW_ID   IN NUMBER,
         P_PAGE_ID   IN NUMBER)
     RETURN NUMBER
     IS
         L_PROCESS_SEQ     NUMBER;
     BEGIN
         FOR C1 IN (SELECT NVL(MAX(PROCESS_SEQUENCE),0) S
                    FROM WWV_FLOW_STEP_PROCESSING
                    WHERE FLOW_STEP_ID = P_PAGE_ID
                    AND FLOW_ID = P_FLOW_ID
                    AND PROCESS_POINT = 'AFTER_HEADER')
         LOOP
             L_PROCESS_SEQ := C1.S;
             L_PROCESS_SEQ := TRUNC(L_PROCESS_SEQ) + 10;
         END LOOP;
         RETURN L_PROCESS_SEQ;
     END GET_MAX_PROCESS_SEQ;
 BEGIN
     IF P_NAV_REGION IS NULL THEN
         
         FOR L_REGION IN (SELECT ID
                          FROM WWV_FLOW_PAGE_PLUGS
                          WHERE PAGE_ID = P_PAGE_ID
                          AND FLOW_ID = P_FLOW_ID
                          AND PLUG_SOURCE_TYPE = WWV_FLOW_REGION_NATIVE.C_STATIC )
         LOOP
             L_HTML_REGION_ID := L_REGION.ID;
             EXIT;
         END LOOP;
     ELSE
         L_HTML_REGION_ID := P_NAV_REGION;
     END IF;
 
     
     FOR L_REGION IN (SELECT PLUG_TEMPLATE
                      FROM WWV_FLOW_PAGE_PLUGS
                      WHERE PAGE_ID = P_PAGE_ID
                      AND FLOW_ID = P_FLOW_ID
                      AND ID = L_HTML_REGION_ID )
     LOOP
         L_HTML_REGION_TEMPLATE := L_REGION.PLUG_TEMPLATE;
     END LOOP;
 
 
     
     
     
     IF NOT SHORTCUT_EXIST(P_FLOW_ID=>P_FLOW_ID,P_SHORTCUT_NAME=>L_SHORTCUT_NAME) THEN
       WWV_FLOW_API.CREATE_SHORTCUT (
           P_ID=> NULL,
           P_FLOW_ID=> P_FLOW_ID,
           P_SHORTCUT_NAME=> L_SHORTCUT_NAME,
           P_SHORTCUT_TYPE=> 'TEXT_ESCAPE_JS',
           P_SHORTCUT=> WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.GET_NEXT_PREV_PK_SHORTCUT'));
     END IF;
 
 
     
     
     
     UPDATE_JS_CODE_W_SHORTCUT (
        P_FLOW_ID             => P_FLOW_ID,
        P_PAGE_ID             => P_PAGE_ID,
        P_SHORTCUT_NAME       => L_SHORTCUT_NAME,
        P_ADD_JAVASCRIPT_CODE => 'var htmldb_ch_message=''"'||L_SHORTCUT_NAME||'"'';' );
 
     
     
     
     L_ITEM_NEXT := GET_VALID_ITEM_NAME(P_PK_COLUMN, P_PAGE_ID)||'_NEXT';
     L_ITEM_PREV := GET_VALID_ITEM_NAME(P_PK_COLUMN, P_PAGE_ID)||'_PREV';
 
     WWV_FLOW_API.CREATE_PAGE_ITEM (
            P_ID                       => NULL,
            P_FLOW_ID                  => P_FLOW_ID,
            P_FLOW_STEP_ID             => P_PAGE_ID,
            P_NAME                     => L_ITEM_NEXT,
            P_DATA_TYPE                => 'VARCHAR',
            P_ACCEPT_PROCESSING        => NULL,
            P_ITEM_SEQUENCE            => GET_MAX_ITEM_SEQ(P_FLOW_ID,P_PAGE_ID),
            P_ITEM_PLUG_ID             => L_HTML_REGION_ID,
            P_USE_CACHE_BEFORE_DEFAULT => 'YES',
            P_IS_PERSISTENT            => 'Y',
            P_ITEM_DEFAULT             => NULL,
            P_ITEM_DEFAULT_TYPE        => NULL,
            P_PROMPT                   => L_ITEM_NEXT,
            P_SOURCE                   => NULL,
            P_SOURCE_TYPE              => NULL,
            P_DISPLAY_AS               => 'HIDDEN',
            P_CSIZE                    => 30,
            P_ITEM_COMMENT             => WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.GET_NEXT_PREV_PK_ITEM'));
 
      WWV_FLOW_API.CREATE_PAGE_ITEM (
            P_ID                       => NULL,
            P_FLOW_ID                  => P_FLOW_ID,
            P_FLOW_STEP_ID             => P_PAGE_ID,
            P_NAME                     => L_ITEM_PREV,
            P_DATA_TYPE                => 'VARCHAR',
            P_ACCEPT_PROCESSING        => NULL,
            P_ITEM_SEQUENCE            => GET_MAX_ITEM_SEQ(P_FLOW_ID,P_PAGE_ID),
            P_ITEM_PLUG_ID             => L_HTML_REGION_ID,
            P_USE_CACHE_BEFORE_DEFAULT => 'YES',
            P_IS_PERSISTENT            => 'Y',
            P_ITEM_DEFAULT             => NULL,
            P_ITEM_DEFAULT_TYPE        => NULL,
            P_PROMPT                   => L_ITEM_PREV,
            P_SOURCE                   => NULL,
            P_SOURCE_TYPE              => NULL,
            P_DISPLAY_AS               => 'HIDDEN',
            P_CSIZE                    => 30,
            P_ITEM_COMMENT             => WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.GET_NEXT_PREV_PK_ITEM'));
 
 
     IF P_PK_COLUMN2 IS NOT NULL THEN
         L_ITEM_NEXT2 := GET_VALID_ITEM_NAME(P_PK_COLUMN2, P_PAGE_ID)||'_NEXT2';
         L_ITEM_PREV2 := GET_VALID_ITEM_NAME(P_PK_COLUMN2, P_PAGE_ID)||'_PREV2';
 
         WWV_FLOW_API.CREATE_PAGE_ITEM (
                P_ID                       => NULL,
                P_FLOW_ID                  => P_FLOW_ID,
                P_FLOW_STEP_ID             => P_PAGE_ID,
                P_NAME                     => L_ITEM_NEXT2,
                P_DATA_TYPE                => 'VARCHAR',
                P_ACCEPT_PROCESSING        => NULL,
                P_ITEM_SEQUENCE            => GET_MAX_ITEM_SEQ(P_FLOW_ID,P_PAGE_ID),
                P_ITEM_PLUG_ID             => L_HTML_REGION_ID,
                P_USE_CACHE_BEFORE_DEFAULT => 'YES',
                P_IS_PERSISTENT            => 'Y',
                P_ITEM_DEFAULT             => NULL,
                P_ITEM_DEFAULT_TYPE        => NULL,
                P_PROMPT                   => L_ITEM_NEXT2,
                P_SOURCE                   => NULL,
                P_SOURCE_TYPE              => NULL,
                P_DISPLAY_AS               => 'HIDDEN',
                P_CSIZE                    => 30,
                P_ITEM_COMMENT             => WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.GET_NEXT_PREV_PK_ITEM'));
 
         WWV_FLOW_API.CREATE_PAGE_ITEM (
                P_ID                       => NULL,
                P_FLOW_ID                  => P_FLOW_ID,
                P_FLOW_STEP_ID             => P_PAGE_ID,
                P_NAME                     => L_ITEM_PREV2,
                P_DATA_TYPE                => 'VARCHAR',
                P_ACCEPT_PROCESSING        => NULL,
                P_ITEM_SEQUENCE            => GET_MAX_ITEM_SEQ(P_FLOW_ID,P_PAGE_ID),
                P_ITEM_PLUG_ID             => L_HTML_REGION_ID,
                P_USE_CACHE_BEFORE_DEFAULT => 'YES',
                P_IS_PERSISTENT            => 'Y',
                P_ITEM_DEFAULT             => NULL,
                P_ITEM_DEFAULT_TYPE        => NULL,
                P_PROMPT                   => L_ITEM_PREV2,
                P_SOURCE                   => NULL,
                P_SOURCE_TYPE              => NULL,
                P_DISPLAY_AS               => 'HIDDEN',
                P_CSIZE                    => 30,
                P_ITEM_COMMENT             => WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.GET_NEXT_PREV_PK_ITEM'));
     END IF;
 
     
     
     
     
     L_TOTAL_ROW_CNT := WWV_FLOW_DYNAMIC_EXEC.GET_FIRST_ROW_RESULT_NUMBER (
                            P_SQL_STATEMENT   => 'select count(*) from "'||P_OWNER||'"."'||P_TABLE||'"'||
                                                 CASE WHEN P_WHERE IS NOT NULL THEN ' where '||P_WHERE END,
                            P_PARSE_AS_SCHEMA => P_OWNER );
 
     IF L_TOTAL_ROW_CNT < 10000 THEN
       L_ITEM_ROW_CNT := GET_VALID_ITEM_NAME(P_PK_COLUMN, P_PAGE_ID)||'_COUNT';
       WWV_FLOW_API.CREATE_PAGE_ITEM (
                  P_ID                       => NULL,
                  P_FLOW_ID                  => P_FLOW_ID,
                  P_FLOW_STEP_ID             => P_PAGE_ID,
                  P_NAME                     => L_ITEM_ROW_CNT,
                  P_DATA_TYPE                => 'VARCHAR',
                  P_ACCEPT_PROCESSING        => NULL,
                  P_ITEM_SEQUENCE            => GET_MAX_ITEM_SEQ(P_FLOW_ID,P_PAGE_ID),
                  P_ITEM_PLUG_ID             => L_HTML_REGION_ID,
                  P_USE_CACHE_BEFORE_DEFAULT => 'YES',
                  P_IS_PERSISTENT            => 'Y',
                  P_ITEM_DEFAULT             => NULL,
                  P_ITEM_DEFAULT_TYPE        => NULL,
                  P_PROMPT                   => NULL,
                  P_SOURCE                   => NULL,
                  P_SOURCE_TYPE              => NULL,
                  P_DISPLAY_AS               => WWV_FLOW_NATIVE_ITEM.C_DISPLAY_ONLY,
                  P_ATTRIBUTE_01             => 'Y', 
                  P_ATTRIBUTE_02             => 'VALUE', 
                  P_ESCAPE_ON_HTTP_OUTPUT    => 'Y',
                  P_CSIZE                    => 30,
                  P_TAG_ATTRIBUTES           => 'class="fielddata"',
                  P_ITEM_COMMENT             => WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.GET_NEXT_PREV_PK_ITEM'));
     END IF;
 
 
     
     
     
     IF WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE IS NOT NULL THEN
         L_BUTTON_TEMPLATE_OPTIONS :=  GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE,'BUTTON');
     END IF;
 
     WWV_FLOW_API.CREATE_PAGE_BUTTON(
         P_ID                          => L_PREV_BUTTON_ID,
         P_FLOW_ID                     => P_FLOW_ID,
         P_FLOW_STEP_ID                => P_PAGE_ID,
         P_BUTTON_SEQUENCE             => GET_MAX_BUTTON_SEQ (P_FLOW_ID, P_PAGE_ID),
         P_BUTTON_PLUG_ID              => L_HTML_REGION_ID,
         P_BUTTON_NAME                 => 'GET_PREVIOUS_'||GET_VALID_BUTTON_NAME(P_PK_COLUMN),
         P_BUTTON_ACTION               => WWV_FLOW_BUTTON.C_ACTION_SUBMIT,
         P_BUTTON_TEMPLATE_ID          => CASE WHEN WWV_FLOW_THEME_GLOBALS.G_THEME_ID = 42 THEN
                                             NVL( GET_BUTTON_TEMPLATE_ID( P_FLOW_ID => P_FLOW_ID ), WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE )
                                          ELSE
                                             WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE
                                          END,
         P_BUTTON_IMAGE_ALT            => WWV_FLOW_LANG.SYSTEM_MESSAGE('PAGINATION.PREVIOUS'),
         P_BUTTON_TEMPLATE_OPTIONS     => L_BUTTON_TEMPLATE_OPTIONS,
         P_BUTTON_POSITION             => NVL( WWV_FLOW_THEME_MANAGER.GET_BUTTON_POSTION( 
                                               P_TEMPLATE_ID => L_HTML_REGION_TEMPLATE,
                                               P_POSITION    => '#CHANGE#' ), 'BOTTOM' ),
         P_WARN_ON_UNSAVED_CHANGES     => NULL, 
         P_BUTTON_CONDITION            => L_ITEM_PREV,
         P_BUTTON_CONDITION_TYPE       => 'ITEM_IS_NOT_NULL',
         P_ICON_CSS_CLASSES            => CASE WHEN WWV_FLOW_THEME_GLOBALS.G_THEME_ID = 42 THEN 'fa-chevron-left' END,
         P_BUTTON_COMMENT              => WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.GET_NEXT_PREV_PK_BUTTON'));
 
     WWV_FLOW_API.CREATE_PAGE_BUTTON(
         P_ID                          => L_NEXT_BUTTON_ID,
         P_FLOW_ID                     => P_FLOW_ID,
         P_FLOW_STEP_ID                => P_PAGE_ID,
         P_BUTTON_SEQUENCE             => GET_MAX_BUTTON_SEQ (P_FLOW_ID, P_PAGE_ID),
         P_BUTTON_PLUG_ID              => L_HTML_REGION_ID,
         P_BUTTON_NAME                 => 'GET_NEXT_'||GET_VALID_BUTTON_NAME(P_PK_COLUMN),
         P_BUTTON_ACTION               => WWV_FLOW_BUTTON.C_ACTION_SUBMIT,
         P_BUTTON_TEMPLATE_ID          => CASE WHEN WWV_FLOW_THEME_GLOBALS.G_THEME_ID = 42 THEN
                                             NVL( GET_BUTTON_TEMPLATE_ID( P_FLOW_ID => P_FLOW_ID ), WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE )
                                          ELSE
                                             WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE
                                          END,
         P_BUTTON_IMAGE_ALT            => WWV_FLOW_LANG.SYSTEM_MESSAGE('PAGINATION.NEXT'),
         P_BUTTON_TEMPLATE_OPTIONS     => L_BUTTON_TEMPLATE_OPTIONS,
         P_BUTTON_POSITION             => NVL( WWV_FLOW_THEME_MANAGER.GET_BUTTON_POSTION( 
                                               P_TEMPLATE_ID => L_HTML_REGION_TEMPLATE,
                                               P_POSITION    => '#CHANGE#' ), 'BOTTOM' ),
         P_WARN_ON_UNSAVED_CHANGES     => NULL, 
         P_BUTTON_CONDITION            => L_ITEM_NEXT,
         P_BUTTON_CONDITION_TYPE       => 'ITEM_IS_NOT_NULL',
         P_ICON_CSS_CLASSES            => CASE WHEN WWV_FLOW_THEME_GLOBALS.G_THEME_ID = 42 THEN 'fa-chevron-right' END,
         P_BUTTON_COMMENT              => WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.GET_NEXT_PREV_PK_BUTTON'));
 
     
     
     
     IF P_PK_COLUMN2 IS NOT NULL THEN
         L_PAGE_PROCESS := WWV_FLOW_PROCESS_UTILITY.GET_NEXT_OR_PREV_PK_SQL (
          P_OWNER              => GET_OWNER(P_FLOW_ID=>P_FLOW_ID,P_OWNER=>P_OWNER),
          P_TABLE              => P_TABLE,
          P_PK_COLUMN          => P_PK_COLUMN,
          P_PK_COLUMN2         => P_PK_COLUMN2,
          P_SORT_COLUMN        => P_SORT_COLUMN,
          P_SORT_COLUMN2       => P_SORT_COLUMN2,
          P_ITEM_PK            => P_ITEM_PK,
          P_ITEM_PK2           => P_ITEM_PK2,
          P_ITEM_NEXT          => L_ITEM_NEXT,
          P_ITEM_PREV          => L_ITEM_PREV,
          P_ITEM_NEXT2         => L_ITEM_NEXT2,
          P_ITEM_PREV2         => L_ITEM_PREV2,
          P_ITEM_ROW_CNT       => L_ITEM_ROW_CNT,
          P_WHERE              => P_WHERE);
     ELSE
         L_PAGE_PROCESS := WWV_FLOW_PROCESS_UTILITY.GET_NEXT_OR_PREV_PK_SQL (
          P_OWNER              => GET_OWNER(P_FLOW_ID=>P_FLOW_ID,P_OWNER=>P_OWNER),
          P_TABLE              => P_TABLE,
          P_PK_COLUMN          => P_PK_COLUMN,
          P_SORT_COLUMN        => P_SORT_COLUMN,
          P_SORT_COLUMN2       => P_SORT_COLUMN2,
          P_ITEM_PK            => P_ITEM_PK,
          P_ITEM_NEXT          => L_ITEM_NEXT,
          P_ITEM_PREV          => L_ITEM_PREV,
          P_ITEM_ROW_CNT       => L_ITEM_ROW_CNT,
          P_WHERE              => P_WHERE);
     END IF;
 
     WWV_FLOW_API.CREATE_PAGE_PROCESS (
         P_FLOW_ID                => P_FLOW_ID,
         P_FLOW_STEP_ID           => P_PAGE_ID,
         P_PROCESS_SEQUENCE       => GET_MAX_PROCESS_SEQ (P_FLOW_ID, P_PAGE_ID),
         P_PROCESS_POINT          => 'AFTER_HEADER',
         P_PROCESS_TYPE           => 'GET_NEXT_OR_PREV_PK',
         P_PROCESS_NAME           => WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.GET_NEXT_PREV_PK'),
         P_PROCESS_SQL            => L_PAGE_PROCESS,
         P_ERROR_DISPLAY_LOCATION => CASE WHEN P_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION ELSE WWV_FLOW_ERROR_API.C_ON_ERROR_PAGE END
         );
 
     
     
     
     L_PREV_URL := 'f?p=&APP_ID.:'||P_PAGE_ID||':&SESSION.::&DEBUG.::'||P_ITEM_PK;
     IF (P_ITEM_PK2 IS NOT NULL) AND (P_PK_COLUMN2 IS NOT NULL) THEN
         L_PREV_URL := L_PREV_URL||','||P_ITEM_PK2;
     END IF;
     L_PREV_URL := L_PREV_URL||':'||GET_ITEM_SUBSTITUTION_VALUE(L_ITEM_PREV);
     IF (P_ITEM_PK2 IS NOT NULL) AND (P_PK_COLUMN2 IS NOT NULL) THEN
         L_PREV_URL := L_PREV_URL||','||GET_ITEM_SUBSTITUTION_VALUE(L_ITEM_PREV2);
     END IF;
 
     L_NEXT_URL := 'f?p=&APP_ID.:'||P_PAGE_ID||':&SESSION.::&DEBUG.::'||P_ITEM_PK;
     IF (P_ITEM_PK2 IS NOT NULL) AND (P_PK_COLUMN2 IS NOT NULL) THEN
         L_NEXT_URL := L_NEXT_URL||','||P_ITEM_PK2;
     END IF;
     L_NEXT_URL := L_NEXT_URL||':'||GET_ITEM_SUBSTITUTION_VALUE(L_ITEM_NEXT);
     IF (P_ITEM_PK2 IS NOT NULL) AND (P_PK_COLUMN2 IS NOT NULL) THEN
         L_NEXT_URL := L_NEXT_URL||','||GET_ITEM_SUBSTITUTION_VALUE(L_ITEM_NEXT2);
     END IF;
 
     WWV_FLOW_API.CREATE_PAGE_BRANCH(
         P_ID => NULL,
         P_FLOW_ID => P_FLOW_ID,
         P_FLOW_STEP_ID => P_PAGE_ID,
         P_BRANCH_ACTION => L_NEXT_URL,
         P_BRANCH_POINT => 'BEFORE_COMPUTATION',
         P_BRANCH_TYPE => 'REDIRECT_URL',
         P_BRANCH_WHEN_BUTTON_ID => L_NEXT_BUTTON_ID,
         P_BRANCH_SEQUENCE => 1,
         P_BRANCH_COMMENT => WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.GET_NEXT_PREV_PK_BUTTON'));
 
     WWV_FLOW_API.CREATE_PAGE_BRANCH(
         P_ID => NULL,
         P_FLOW_ID => P_FLOW_ID,
         P_FLOW_STEP_ID => P_PAGE_ID,
         P_BRANCH_ACTION => L_PREV_URL,
         P_BRANCH_POINT => 'BEFORE_COMPUTATION',
         P_BRANCH_TYPE => 'REDIRECT_URL',
         P_BRANCH_WHEN_BUTTON_ID => L_PREV_BUTTON_ID,
         P_BRANCH_SEQUENCE => 1,
         P_BRANCH_COMMENT => WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.GET_NEXT_PREV_PK_BUTTON'));
 EXCEPTION WHEN OTHERS THEN
  RAISE_APPLICATION_ERROR(-20001,WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.NEXT_PREV_PK_PROCESS_ERROR',SQLERRM));
 END CREATE_NEXT_PREV_PK_PROCESS;
 
 
 
 
 PROCEDURE CREATE_2PAGE_MASTER_DETAIL (
    P_FLOW_ID                   IN NUMBER   DEFAULT NULL,
    P_MASTER_PAGE_ID            IN NUMBER   DEFAULT NULL,
    P_DETAIL_PAGE_ID            IN NUMBER   DEFAULT NULL,
    
    P_MASTER_PAGE_TITLE         IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_PAGE_TITLE         IN VARCHAR2 DEFAULT NULL,
    P_MASTER_REGION_TITLE       IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_REGION_TITLE       IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_REGION_TITLE2      IN VARCHAR2 DEFAULT NULL,
    
    P_GROUP_NAME                IN VARCHAR2 DEFAULT NULL,
    
    P_MASTER_PAGE_MODE          IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_PAGE_MODE          IN VARCHAR2 DEFAULT NULL,
    
    P_USER_INTERFACE_ID         IN NUMBER,
    
    P_TAB_SET                   IN VARCHAR2 DEFAULT NULL,
    P_TAB_NAME                  IN VARCHAR2 DEFAULT NULL,
    P_TAB_TEXT                  IN VARCHAR2 DEFAULT NULL,
    
    P_NAV_LIST_ID               IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_ITEM_ID          IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_ITEM_NAME        IN VARCHAR2 DEFAULT NULL,
    P_NAV_LIST_PARENT_ITEM_ID   IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_CHILD_ITEM_NAME  IN VARCHAR2 DEFAULT NULL,
    
    P_MASTER_TABLE_OWNER        IN VARCHAR2 DEFAULT NULL,
    P_MASTER_TABLE_NAME         IN VARCHAR2 DEFAULT NULL,
    P_MASTER_SORT_COLUMN        IN VARCHAR2 DEFAULT NULL,
    P_MASTER_SORT_COLUMN2       IN VARCHAR2 DEFAULT NULL,
    P_MASTER_DISPLAY_COLUMN     IN VARCHAR2 DEFAULT NULL,
    P_INCLUDE_MASTER_REPORT     IN VARCHAR2 DEFAULT 'Y',
    P_INCLUDE_MASTER_ROW_NAV    IN VARCHAR2 DEFAULT 'Y',
    
    P_MASTER_TABLE_PK1          IN VARCHAR2 DEFAULT NULL,
    P_MASTER_TABLE_PK1_SRC_TYPE IN VARCHAR2 DEFAULT NULL,
    P_MASTER_TABLE_PK1_SRC      IN VARCHAR2 DEFAULT NULL,
    P_MASTER_TABLE_PK2          IN VARCHAR2 DEFAULT NULL,
    P_MASTER_TABLE_PK2_SRC_TYPE IN VARCHAR2 DEFAULT NULL,
    P_MASTER_TABLE_PK2_SRC      IN VARCHAR2 DEFAULT NULL,
    
    P_DETAIL_TABLE_OWNER        IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_TABLE_NAME         IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_DISPLAY_COLUMN     IN VARCHAR2 DEFAULT NULL,
    
    P_DETAIL_TABLE_PK1          IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_TABLE_PK1_SRC_TYPE IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_TABLE_PK1_SRC      IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_TABLE_PK2          IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_TABLE_PK2_SRC_TYPE IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_TABLE_PK2_SRC      IN VARCHAR2 DEFAULT NULL,
    
    P_MASTER_LINK               IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_LINK               IN VARCHAR2 DEFAULT NULL
    )
 IS
    C_DIALOG_CLOSED_EVENT_TYPE      CONSTANT VARCHAR2(20) := 'apexafterclosedialog';
    J                               PLS_INTEGER := 0;
    
    L_REGION_TEMPLATE               NUMBER;
    L_REPORT_TEMPLATE               NUMBER;
    L_UPDATEABLE_RPT_REGION         NUMBER;
    L_PROCESS_SEQ                   NUMBER := 0;
    L_BRANCH_SEQ                    NUMBER := 0;
    L_MASTER_REGION_ID              NUMBER := WWV_FLOW_ID.NEXT_VAL;
    L_SAVE_BUTTON_BRANCH_ID         NUMBER;
    L_PREV_BUTTON_ID                NUMBER;
    L_NEXT_BUTTON_ID                NUMBER;
    L_ADD_BUTTON_ID                 NUMBER;
    L_SUBMIT_BUTTON_ID              NUMBER;
    L_GROUP_ID                      NUMBER := NULL;
    L_CREATE_BUTTON_ID              NUMBER := NULL;
    L_CREATE_BUTTON_DA_ID           NUMBER := NULL;
    L_EDIT_REPORT_DA_ID             NUMBER := NULL;
    
    L_MASTER_PK                     VARCHAR2(255);
    L_MASTER_PK2                    VARCHAR2(255);
    L_MASTER_PK_ITEM                VARCHAR2(255);
    L_MASTER_PK2_ITEM               VARCHAR2(255);
    L_DETAIL_PK                     VARCHAR2(255);
    L_DETAIL_PK2                    VARCHAR2(255);
    L_DETAIL_FK                     VARCHAR2(255);
    L_DETAIL_FK2                    VARCHAR2(255);
    L_TABLE_FK                      VARCHAR2(255);
    L_TABLE_FK_SRC_TYPE             VARCHAR2(255);
    L_CREATE_BUTTON_NAME            VARCHAR2(255)   := WWV_FLOW_LANG.SYSTEM_MESSAGE('LAYOUT.T_CREATE_BUTTON');
    L_ADD_BUTTON_NAME               VARCHAR2(255)   := WWV_FLOW_LANG.SYSTEM_MESSAGE('F4000.P4731.ADD');
    L_ADD_BUTTON_POS                VARCHAR2(255);
    L_SAVE_BUTTON_NAME              VARCHAR2(255)   := WWV_FLOW_LANG.SYSTEM_MESSAGE('SAVE');
    L_DELETE_BUTTON_NAME            VARCHAR2(255)   := WWV_FLOW_LANG.SYSTEM_MESSAGE('F4350.DELETE');
    L_CANCEL_BUTTON_NAME            VARCHAR2(255)   := WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_SPELING.BUTTON_CANCEL');
    L_CREATE_BUTTON_DA              VARCHAR2(255)   := WWV_FLOW_LANG.SYSTEM_MESSAGE('CREATE_DIALOG_CLOSED_DA');
    L_EDIT_REPORT_DA                VARCHAR2(255)   := WWV_FLOW_LANG.SYSTEM_MESSAGE('EDIT_REPORT_DIALOG_CLOSED_DA');
    L_TAB_NAME                      VARCHAR2(255)   := P_TAB_NAME;
    L_TAB_TEXT                      VARCHAR2(255)   := P_TAB_TEXT;
    
    
    L_TABLE_FK_SRC                  VARCHAR2(4000);
    L_BUTTON_IMAGE                  VARCHAR2(4000);
    L_MASTER_LINK                   VARCHAR2(32767);
    L_MASTER_LINK_TEXT              VARCHAR2(32767);
    L_PROCESS                       VARCHAR2(32767);
    L_MASTER_SQL                    VARCHAR2(32767);
    L_MASTER_DISPLAY_COLUMNS        VARCHAR2(32767);
 
    L_BUTTON_TEMPLATE_OPTIONS       VARCHAR2(255);
    
    E                               VARCHAR2(32767);
    
    LA_MASTER_LINKS                 WWV_FLOW_GLOBAL.VC_ARR2;
    LA_DETAIL_LINKS                 WWV_FLOW_GLOBAL.VC_ARR2;
    LA_DETAIL_TABLE_FK              WWV_FLOW_GLOBAL.VC_ARR2;
    LA_DETAIL_DISPLAY_COLUMNS       WWV_FLOW_GLOBAL.VC_ARR2;
    LA_DETAIL_DISPLAY_COLUMNS2      WWV_FLOW_GLOBAL.VC_ARR2;
    LA_UPDATABLE_COLUMNS            WWV_FLOW_GLOBAL.VC_ARR2;
 BEGIN
    
    
    
   WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
       P_FLOW_ID           => P_FLOW_ID,
       P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
    
    
    
    
    
    L_TAB_NAME := P_TAB_NAME;
    L_TAB_TEXT := P_TAB_TEXT;
 
    
    
    
    L_REGION_TEMPLATE := WWV_FLOW_THEME_GLOBALS.G_DEFAULT_REPORTR_TEMPLATE;
    IF L_REGION_TEMPLATE IS NULL THEN
        L_REGION_TEMPLATE := GET_DEFAULT_TEMPLATE_ID (
                                 P_FLOW_ID       => P_FLOW_ID,
                                 P_TEMPLATE_TYPE => 'REGION'
                                 );
    END IF;
    L_REPORT_TEMPLATE := WWV_FLOW_THEME_GLOBALS.G_DEFAULT_REPORT_TEMPLATE;
    IF L_REPORT_TEMPLATE IS NULL THEN
        L_REPORT_TEMPLATE := GET_DEFAULT_TEMPLATE_ID (
                                 P_FLOW_ID       => P_FLOW_ID,
                                 P_TEMPLATE_TYPE => 'REPORT'
                                 );
    END IF;
 
   IF WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE IS NOT NULL THEN
       L_BUTTON_IMAGE := 'template:'||WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE;
       L_BUTTON_TEMPLATE_OPTIONS :=  GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE,'BUTTON');
   END IF;
 
    L_MASTER_PK      := P_MASTER_TABLE_PK1;
    L_MASTER_PK2     := P_MASTER_TABLE_PK2;
    L_MASTER_PK_ITEM := GET_VALID_ITEM_NAME (
                            P_COLUMN_NAME => L_MASTER_PK,
                            P_PAGE_ID     => P_DETAIL_PAGE_ID );
    IF L_MASTER_PK2 IS NOT NULL THEN
        L_MASTER_PK2_ITEM := GET_VALID_ITEM_NAME (
                                 P_COLUMN_NAME => L_MASTER_PK2,
                                 P_PAGE_ID     => P_DETAIL_PAGE_ID );
    END IF;
 
    L_DETAIL_PK  := P_DETAIL_TABLE_PK1;
    L_DETAIL_PK2 := P_DETAIL_TABLE_PK2;
    
    
    
    LA_DETAIL_TABLE_FK := WWV_FLOW_UTILITIES.STRING_TO_TABLE2(
                          GET_FK (P_TABLE_OWNER=>P_DETAIL_TABLE_OWNER,
                                  P_TABLE_NAME=>P_DETAIL_TABLE_NAME,
                                  P_PARENT_TABLE_NAME=>P_MASTER_TABLE_NAME)
                                   );
    
    
    
    L_DETAIL_FK := ARRAY_ELEMENT(P_VCARR=>LA_DETAIL_TABLE_FK,P_INDEX=>1);
    
    IF INSTR(L_DETAIL_FK,',',1) > 0 THEN
        L_DETAIL_FK2 := SUBSTR(L_DETAIL_FK,INSTR(L_DETAIL_FK,',',1)+1);
        L_DETAIL_FK := SUBSTR(L_DETAIL_FK,1,INSTR(L_DETAIL_FK,',',1)-1);
    END IF;
 
 
    
    
    
    IF P_GROUP_NAME IS NOT NULL THEN
        L_GROUP_ID := WWV_FLOW_UTILITIES.GET_PAGE_GROUP_ID(P_GROUP_NAME => P_GROUP_NAME, P_APPLICATION_ID => P_FLOW_ID);
        
        IF L_GROUP_ID IS NULL THEN
            L_GROUP_ID := WWV_FLOW_ID.NEXT_VAL;
            WWV_FLOW_API.CREATE_PAGE_GROUP(P_ID => L_GROUP_ID, P_FLOW_ID => P_FLOW_ID, P_GROUP_NAME => P_GROUP_NAME);
        END IF;
    END IF;
 
    IF P_INCLUDE_MASTER_REPORT = 'Y' THEN
        
        
        
        IF NOT PAGE_EXISTS (P_FLOW_ID, P_MASTER_PAGE_ID) THEN
            WWV_FLOW_API.CREATE_PAGE(
              P_ID                  => P_MASTER_PAGE_ID,
              P_FLOW_ID             => P_FLOW_ID,
              P_TAB_SET             => REPLACE(P_TAB_SET,'%null%',NULL),
              P_NAME                => P_MASTER_PAGE_TITLE,
              P_PAGE_MODE           => P_MASTER_PAGE_MODE,
              P_GROUP_ID            => L_GROUP_ID,
              P_USER_INTERFACE_ID   => P_USER_INTERFACE_ID,
              P_PAGE_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_PAGE_TEMPLATE, 'PAGE'),
              P_STEP_TITLE          => P_MASTER_PAGE_TITLE,
              P_STEP_SUB_TITLE      => P_MASTER_PAGE_TITLE,
              P_STEP_SUB_TITLE_TYPE => 'TEXT_WITH_SUBSTITUTIONS',
              P_WELCOME_TEXT        => '',
              P_BOX_WELCOME_TEXT    => '',
              P_BOX_FOOTER_TEXT     => '',
              P_FOOTER_TEXT         => '');
 
            IF P_NAV_LIST_ID IS NOT NULL THEN
                G_NAV_LIST_ITEM_ID := NULL;
                
                CREATE_NAVIGATION_LIST_ITEM (
                    P_FLOW_ID                  => P_FLOW_ID,
                    P_PAGE_ID                  => P_MASTER_PAGE_ID,
                    P_PAGE_NAME                => P_MASTER_PAGE_TITLE,
                    P_NAV_LIST_ID              => P_NAV_LIST_ID,
                    P_NAV_LIST_ITEM_ID         => P_NAV_LIST_ITEM_ID,
                    P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_ITEM_NAME,
                    P_NAV_LIST_PARENT_ITEM_ID  => P_NAV_LIST_PARENT_ITEM_ID,
                    P_NAV_LIST_CHILD_ITEM_NAME => P_NAV_LIST_CHILD_ITEM_NAME);
            ELSE
                
                IF REPLACE(P_TAB_SET,'%null%',NULL) IS NOT NULL THEN
                    CREATE_TAB (
                        P_FLOW_ID    => P_FLOW_ID,
                        P_PAGE_ID    => P_MASTER_PAGE_ID,
                        P_TAB_SET    => P_TAB_SET,
                        P_TAB_NAME   => L_TAB_NAME,
                        P_TAB_TEXT   => L_TAB_TEXT);
                END IF;
            END IF;
        END IF;
 
        IF L_MASTER_PK = 'ROWID' THEN
            L_MASTER_DISPLAY_COLUMNS := 'ROWID:'||P_MASTER_DISPLAY_COLUMN;
        ELSE
            L_MASTER_DISPLAY_COLUMNS := P_MASTER_DISPLAY_COLUMN;
        END IF;
 
        L_MASTER_SQL := WWV_FLOW_PLUGIN_DEV.BUILD_SQL_STATEMENT (
            P_APPLICATION_ID => P_FLOW_ID,
            P_TABLE_OWNER    => P_MASTER_TABLE_OWNER,
            P_TABLE_NAME     => P_MASTER_TABLE_NAME,
            P_COLUMNS        => L_MASTER_DISPLAY_COLUMNS );
        
        
        
        WWV_FLOW_API.CREATE_PAGE_PLUG (
            P_ID                            => L_MASTER_REGION_ID,
            P_FLOW_ID                       => P_FLOW_ID,
            P_PAGE_ID                       => P_MASTER_PAGE_ID,
            P_PLUG_NAME                     => P_MASTER_REGION_TITLE,
            P_PLUG_TEMPLATE                 => L_REGION_TEMPLATE,
            P_REGION_TEMPLATE_OPTIONS       => GET_PRESET_TEMPLATE_OPTIONS (L_REGION_TEMPLATE,'REGION'),
            P_COMPONENT_TEMPLATE_OPTIONS    => GET_PRESET_TEMPLATE_OPTIONS (L_REPORT_TEMPLATE,'REPORT'),
            P_PLUG_DISPLAY_SEQUENCE         => GET_MAX_REGION_DISPLAY_SEQ(P_FLOW_ID=>P_FLOW_ID,P_PAGE_ID=>P_MASTER_PAGE_ID),
            P_PLUG_DISPLAY_POINT            => 'BODY',
            P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
            P_PLUG_SOURCE                   => L_MASTER_SQL,
            P_PLUG_SOURCE_TYPE              => WWV_FLOW_REGION_NATIVE.C_SQL_REPORT,
            P_PLUG_QUERY_ROW_TEMPLATE       => L_REPORT_TEMPLATE,
            P_PLUG_QUERY_NUM_ROWS           => '15',
            P_PLUG_QUERY_NUM_ROWS_TYPE      => 'ROW_RANGES_IN_SELECT_LIST',
            P_PLUG_QUERY_ROW_COUNT_MAX      => WWV_FLOW_API.C_DEFAULT_QUERY_ROW_COUNT_MAX,
            P_PLUG_QUERY_NO_DATA_FOUND      => WWV_FLOW_LANG.SYSTEM_MESSAGE('F4000.NO_DATA_FOUND'),
            P_PAGINATION_DISPLAY_POSITION   => 'BOTTOM_RIGHT',
            P_PLUG_QUERY_HEADINGS_TYPE      => 'COLON_DELMITED_LIST',
            P_PLUG_COMMENT                  => NULL,
            P_AJAX_ENABLED                  => CASE WHEN P_DETAIL_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN 'Y' ELSE 'N' END);  
 
 
        
        
        
        IF L_MASTER_PK IS NOT NULL THEN
          L_MASTER_LINK_TEXT := C_EDIT_IMAGE;
 
          IF L_MASTER_PK2 IS NULL THEN
            L_MASTER_LINK := 'f?p=#APP_ID#:'||P_DETAIL_PAGE_ID||
                           ':#APP_SESSION#:::RP:';
            L_MASTER_LINK := L_MASTER_LINK||L_MASTER_PK_ITEM;
            L_MASTER_LINK := L_MASTER_LINK||':';
            L_MASTER_LINK := L_MASTER_LINK||'#'||L_MASTER_PK||'#';
          ELSE
            L_MASTER_LINK := 'f?p=#APP_ID#:'||P_DETAIL_PAGE_ID||
                           ':#APP_SESSION#::::';
            L_MASTER_LINK := L_MASTER_LINK||L_MASTER_PK_ITEM;
            L_MASTER_LINK := L_MASTER_LINK||',';
            L_MASTER_LINK := L_MASTER_LINK||L_MASTER_PK2_ITEM;
            L_MASTER_LINK := L_MASTER_LINK||':';
            L_MASTER_LINK := L_MASTER_LINK||'#'||L_MASTER_PK||'#';
            L_MASTER_LINK := L_MASTER_LINK||',';
            L_MASTER_LINK := L_MASTER_LINK||'#'||L_MASTER_PK2||'#';
          END IF;
 
          
          UPDATE WWV_FLOW_REGION_REPORT_COLUMN
          SET COLUMN_LINK = L_MASTER_LINK,
              COLUMN_LINKTEXT = L_MASTER_LINK_TEXT,
              COLUMN_HEADING = WWV_FLOW_LANG.SYSTEM_MESSAGE('EDIT')
          WHERE COLUMN_ALIAS = L_MASTER_PK
          AND FLOW_ID = P_FLOW_ID
          AND REGION_ID = L_MASTER_REGION_ID
          AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
        END IF;
 
        
        
        
        IF WWV_FLOW_HINT.G_USE_UI_DEFAULTS THEN
 
            FOR C1 IN (SELECT COLUMN_ALIAS FROM WWV_FLOW_REGION_REPORT_COLUMN
                       WHERE REGION_ID = L_MASTER_REGION_ID
                       AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                        AND FLOW_ID = P_FLOW_ID
            ) LOOP
                IF C1.COLUMN_ALIAS != 'ROWID' THEN
                    WWV_FLOW_HINT.GET_AD_UI_DEFAULTS (
                         P_SGID        => WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID,
                         P_COLUMN_NAME => C1.COLUMN_ALIAS);
 
                    UPDATE WWV_FLOW_REGION_REPORT_COLUMN
                       SET COLUMN_HEADING   = NVL(WWV_FLOW_HINT.G_LABEL, INITCAP(REPLACE(C1.COLUMN_ALIAS, '_', ' '))),
                           COLUMN_ALIGNMENT = NVL(WWV_FLOW_HINT.G_REPORT_COL_ALIGNMENT,'LEFT'),
                           HEADING_ALIGNMENT= NVL(WWV_FLOW_HINT.G_REPORT_COL_ALIGNMENT,'LEFT'),
                           COLUMN_FORMAT    = WWV_FLOW_HINT.G_REPORT_FORMAT_MASK,
                           COLUMN_WIDTH     = WWV_FLOW_HINT.G_FORM_DISPLAY_WIDTH,
                           COLUMN_HEIGHT    = WWV_FLOW_HINT.G_FORM_DISPLAY_HEIGHT,
                           COLUMN_DEFAULT   = WWV_FLOW_HINT.G_DEFAULT_VALUE
                     WHERE COLUMN_ALIAS = C1.COLUMN_ALIAS
                       AND REGION_ID = L_MASTER_REGION_ID
                       AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                       AND FLOW_ID = P_FLOW_ID;
                END IF;
            END LOOP;
        ELSE
            INITCAP_REPORT_COLUMN_HEADINGS (
                P_REGION_ID => L_MASTER_REGION_ID );
        END IF;
 
        
        
        
        L_CREATE_BUTTON_ID := WWV_FLOW_ID.NEXT_VAL;
        WWV_FLOW_API.CREATE_PAGE_BUTTON(
              P_ID                    => L_CREATE_BUTTON_ID,
              P_FLOW_ID               => P_FLOW_ID,
              P_FLOW_STEP_ID          => P_MASTER_PAGE_ID,
              P_BUTTON_PLUG_ID        => L_MASTER_REGION_ID,
              P_BUTTON_SEQUENCE       => 10,
              P_BUTTON_NAME           => 'CREATE',
              P_BUTTON_IMAGE          => L_BUTTON_IMAGE,
              P_BUTTON_IMAGE_ALT      => L_CREATE_BUTTON_NAME,
              P_BUTTON_TEMPLATE_OPTIONS=> L_BUTTON_TEMPLATE_OPTIONS,
              P_BUTTON_POSITION       => WWV_FLOW_THEME_MANAGER.GET_BUTTON_POSTION(
                                         P_TEMPLATE_ID => L_REGION_TEMPLATE,
                                         P_POSITION    => '#CREATE#'),
              P_BUTTON_IS_HOT         => 'Y',
              P_BUTTON_REDIRECT_URL   => 'f?p=&APP_ID.:'||P_DETAIL_PAGE_ID||':&SESSION.::&DEBUG.:'||P_DETAIL_PAGE_ID,
              P_BUTTON_ACTION         => WWV_FLOW_BUTTON.C_ACTION_REDIRECT_PAGE
              );
 
        
        IF P_DETAIL_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN
            L_CREATE_BUTTON_DA_ID := WWV_FLOW_ID.NEXT_VAL;
            WWV_FLOW_API.CREATE_PAGE_DA_EVENT(
                P_ID                      => L_CREATE_BUTTON_DA_ID,
                P_FLOW_ID                 => P_FLOW_ID,
                P_PAGE_ID                 => P_MASTER_PAGE_ID,
                P_NAME                    => L_CREATE_BUTTON_DA,
                P_EVENT_SEQUENCE          => 20,
                P_TRIGGERING_ELEMENT_TYPE => 'BUTTON',
                P_TRIGGERING_BUTTON_ID    => L_CREATE_BUTTON_ID,
                P_BIND_TYPE               => 'bind',
                P_BIND_EVENT_TYPE         => C_DIALOG_CLOSED_EVENT_TYPE);
 
            WWV_FLOW_API.CREATE_PAGE_DA_ACTION(
                P_ID                      => NULL,
                P_FLOW_ID                 => P_FLOW_ID,
                P_PAGE_ID                 => P_MASTER_PAGE_ID,
                P_EVENT_ID                => L_CREATE_BUTTON_DA_ID,
                P_EVENT_RESULT            => 'TRUE',
                P_ACTION_SEQUENCE         => 10,
                P_EXECUTE_ON_PAGE_INIT    => 'N',
                P_ACTION                  => 'NATIVE_REFRESH',
                P_AFFECTED_ELEMENTS_TYPE  => 'REGION',
                P_AFFECTED_REGION_ID      => L_MASTER_REGION_ID,
                P_STOP_EXECUTION_ON_ERROR => 'Y');
        END IF;
 
        
        
        
 
        WWV_FLOW_API.CREATE_PAGE_COMPUTATION (
              P_ID                    =>NULL,
              P_FLOW_ID               =>P_FLOW_ID,
              P_FLOW_STEP_ID          =>P_MASTER_PAGE_ID,
              P_COMPUTATION_SEQUENCE  =>1,
              P_COMPUTATION_ITEM      =>L_MASTER_PK_ITEM,
              P_COMPUTATION_POINT     =>'AFTER_SUBMIT',
              P_COMPUTATION_TYPE      =>'STATIC_ASSIGNMENT',
              P_COMPUTATION_PROCESSED =>'REPLACE_EXISTING',
              P_COMPUTATION           =>NULL,
              P_COMPUTATION_COMMENT   =>NULL,
              P_COMPUTE_WHEN          =>'CREATE',
              P_COMPUTE_WHEN_TYPE     =>'REQUEST_EQUALS_CONDITION');
        IF L_MASTER_PK2 IS NOT NULL THEN
            WWV_FLOW_API.CREATE_PAGE_COMPUTATION (
              P_ID                    =>NULL,
              P_FLOW_ID               =>P_FLOW_ID,
              P_FLOW_STEP_ID          =>P_MASTER_PAGE_ID,
              P_COMPUTATION_SEQUENCE  =>1,
              P_COMPUTATION_ITEM      =>L_MASTER_PK2_ITEM,
              P_COMPUTATION_POINT     =>'AFTER_SUBMIT',
              P_COMPUTATION_TYPE      =>'STATIC_ASSIGNMENT',
              P_COMPUTATION_PROCESSED =>'REPLACE_EXISTING',
              P_COMPUTATION           =>NULL,
              P_COMPUTATION_COMMENT   =>NULL,
              P_COMPUTE_WHEN          =>'CREATE',
              P_COMPUTE_WHEN_TYPE     =>'REQUEST_EQUALS_CONDITION');
        END IF;
 
 
        
        
        
        
        
        IF P_TAB_TEXT IS NOT NULL THEN
          L_TAB_NAME := P_TAB_TEXT;
          L_TAB_TEXT := NULL;
        END IF;
 
        
        IF P_DETAIL_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN
            L_EDIT_REPORT_DA_ID := WWV_FLOW_ID.NEXT_VAL;
            WWV_FLOW_API.CREATE_PAGE_DA_EVENT(
                P_ID                      => L_EDIT_REPORT_DA_ID,
                P_FLOW_ID                 => P_FLOW_ID,
                P_PAGE_ID                 => P_MASTER_PAGE_ID,
                P_NAME                    => L_EDIT_REPORT_DA,
                P_EVENT_SEQUENCE          => 10,
                P_TRIGGERING_ELEMENT_TYPE => 'REGION',
                P_TRIGGERING_REGION_ID    => L_MASTER_REGION_ID,
                P_BIND_TYPE               => 'bind',
                P_BIND_EVENT_TYPE         => C_DIALOG_CLOSED_EVENT_TYPE);
 
           WWV_FLOW_API.CREATE_PAGE_DA_ACTION(
               P_ID                      => NULL,
               P_FLOW_ID                 => P_FLOW_ID,
               P_PAGE_ID                 => P_MASTER_PAGE_ID,
               P_EVENT_ID                => L_EDIT_REPORT_DA_ID,
               P_EVENT_RESULT            => 'TRUE',
               P_ACTION_SEQUENCE         => 10,
               P_EXECUTE_ON_PAGE_INIT    => 'N',
               P_ACTION                  => 'NATIVE_REFRESH',
               P_AFFECTED_ELEMENTS_TYPE  => 'REGION',
               P_AFFECTED_REGION_ID      => L_MASTER_REGION_ID,
               P_STOP_EXECUTION_ON_ERROR => 'Y');
     END IF;
 
 
    END IF;
 
 
    
    
    
    CREATE_FORM_ON_TABLE (
        P_FLOW_ID                  => P_FLOW_ID,
        P_PAGE_ID                  => P_DETAIL_PAGE_ID,
        P_PAGE_NAME                => P_DETAIL_PAGE_TITLE,
        P_GROUP_NAME               => P_GROUP_NAME,
        P_PAGE_MODE                => P_DETAIL_PAGE_MODE,
        P_USER_INTERFACE_ID        => P_USER_INTERFACE_ID,
        
        P_TAB_SET                  => P_TAB_SET,
        P_TAB_NAME                 => L_TAB_NAME,
        P_TAB_TEXT                 => L_TAB_TEXT,
        
        P_NAV_LIST_ID              => P_NAV_LIST_ID,
        P_NAV_LIST_ITEM_ID         => NVL(P_NAV_LIST_ITEM_ID,G_NAV_LIST_ITEM_ID),
        P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_CHILD_ITEM_NAME,
        P_NAV_LIST_PARENT_ITEM_ID  => CASE WHEN (P_NAV_LIST_PARENT_ITEM_ID IS NOT NULL AND P_NAV_LIST_CHILD_ITEM_NAME IS NULL) THEN P_NAV_LIST_PARENT_ITEM_ID ELSE NULL END,
        P_NAV_LIST_CHILD_ITEM_NAME => NULL,
        
        P_REGION_TITLE             => P_DETAIL_REGION_TITLE,
        P_REGION_TEMPLATE          => L_REGION_TEMPLATE,
        P_TABLE_OWNER              => P_MASTER_TABLE_OWNER,
        P_TABLE_NAME               => P_MASTER_TABLE_NAME,
        P_TABLE_PK_COLUMN_NAME     => L_MASTER_PK,
        P_TABLE_PK_SRC_TYPE        => P_MASTER_TABLE_PK1_SRC_TYPE,
        P_TABLE_PK_SRC             => P_MASTER_TABLE_PK1_SRC,
        P_TABLE_PK2_COLUMN_NAME    => L_MASTER_PK2,
        P_TABLE_PK2_SRC_TYPE       => P_MASTER_TABLE_PK2_SRC_TYPE,
        P_TABLE_PK2_SRC            => P_MASTER_TABLE_PK2_SRC,
        P_DISPLAY_COLUMN_LIST      => P_MASTER_DISPLAY_COLUMN,
        P_CANCEL_BRANCH            => P_MASTER_PAGE_ID,
        P_CREATE_BUTTON_NAME       => L_CREATE_BUTTON_NAME,
        P_SAVE_BUTTON_NAME         => L_SAVE_BUTTON_NAME,
        P_DELETE_BUTTON_NAME       => L_DELETE_BUTTON_NAME,
        P_CANCEL_BUTTON_NAME       => L_CANCEL_BUTTON_NAME);
 
    
    
    
    
    
    FOR C1 IN (SELECT ID
               FROM WWV_FLOW_STEP_BUTTONS
               WHERE FLOW_ID = P_FLOW_ID
               AND FLOW_STEP_ID = P_DETAIL_PAGE_ID
               AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
               AND BUTTON_NAME = 'SAVE')
    LOOP
          L_SAVE_BUTTON_BRANCH_ID := WWV_FLOW_ID.NEXT_VAL;
        WWV_FLOW_API.CREATE_PAGE_BRANCH (
               P_ID                    => L_SAVE_BUTTON_BRANCH_ID,
               P_FLOW_ID               => P_FLOW_ID,
               P_FLOW_STEP_ID          => P_DETAIL_PAGE_ID,
               P_BRANCH_ACTION         => 'f?p=&APP_ID.:'||P_MASTER_PAGE_ID||':&SESSION.&success_msg=#SUCCESS_MSG#',
               P_BRANCH_POINT          => 'AFTER_PROCESSING',
               P_BRANCH_TYPE           => 'REDIRECT_URL',
               P_BRANCH_SEQUENCE       => '1',
               P_BRANCH_WHEN_BUTTON_ID => NULL,
               P_BRANCH_CONDITION_TYPE => 'REQUEST_IN_CONDITION',
               P_BRANCH_CONDITION      => 'SAVE,DELETE,CREATE',
               P_BRANCH_CONDITION_TEXT => NULL,
               P_REQUIRED_PATCH        => NULL,
               P_BRANCH_COMMENT        => NULL);
    END LOOP;
    
 
    
    
    
    
    
    IF P_INCLUDE_MASTER_REPORT != 'Y' THEN
        IF P_TAB_TEXT IS NOT NULL THEN
          L_TAB_NAME := P_TAB_TEXT;
          L_TAB_TEXT := NULL;
        END IF;
    END IF;
 
    
    
    
    IF P_INCLUDE_MASTER_ROW_NAV = 'Y' THEN
        CREATE_NEXT_PREV_PK_PROCESS (
            P_FLOW_ID          => P_FLOW_ID,
            P_PAGE_ID          => P_DETAIL_PAGE_ID,
            P_PAGE_MODE        => P_DETAIL_PAGE_MODE,
            P_OWNER            => P_MASTER_TABLE_OWNER,
            P_TABLE            => P_MASTER_TABLE_NAME,
            P_PK_COLUMN        => L_MASTER_PK,
            P_PK_COLUMN2       => L_MASTER_PK2,
            P_SORT_COLUMN      => P_MASTER_SORT_COLUMN,
            P_SORT_COLUMN2     => P_MASTER_SORT_COLUMN2,
            P_ITEM_PK          => L_MASTER_PK_ITEM,
            P_ITEM_PK2         => L_MASTER_PK2_ITEM);
    END IF;
 
    
    
    
 
    
    
    
    L_PROCESS := WWV_FLOW_WIZARD_API.GET_OWNER(P_FLOW_ID,P_DETAIL_TABLE_OWNER);
    L_PROCESS := L_PROCESS||':'||P_DETAIL_TABLE_NAME||':'||L_DETAIL_PK;
    IF L_DETAIL_PK2 IS NOT NULL THEN
      L_PROCESS := L_PROCESS||':'||L_DETAIL_PK2;
    END IF;
 
    
    
    
    
    IF P_MASTER_LINK IS NULL THEN
        IF L_MASTER_PK <> 'ROWID' THEN
            LA_MASTER_LINKS(1) := P_MASTER_TABLE_NAME||'.'||L_MASTER_PK;
        ELSE
            
            LA_MASTER_LINKS(1) := L_DETAIL_FK;
        END IF;
        IF L_MASTER_PK2 IS NOT NULL THEN
            LA_MASTER_LINKS(2) := P_MASTER_TABLE_NAME||'.'||L_MASTER_PK2;
        END IF;
 
        LA_DETAIL_LINKS(1) := P_DETAIL_TABLE_NAME||'.'||L_DETAIL_FK;
        IF L_DETAIL_FK2 IS NOT NULL THEN
            LA_DETAIL_LINKS(2) := P_DETAIL_TABLE_NAME||'.'||L_DETAIL_FK2;
        END IF;
    ELSE
        LA_MASTER_LINKS := WWV_FLOW_UTILITIES.STRING_TO_TABLE2(P_MASTER_LINK);
        LA_DETAIL_LINKS := WWV_FLOW_UTILITIES.STRING_TO_TABLE2(P_DETAIL_LINK);
    END IF;
 
    L_TABLE_FK          := REPLACE(ARRAY_ELEMENT(P_VCARR=>LA_DETAIL_LINKS,P_INDEX=>1),P_DETAIL_TABLE_NAME||'.');
    L_TABLE_FK_SRC      := GET_VALID_ITEM_NAME (
                               P_COLUMN_NAME => REPLACE(LA_MASTER_LINKS(1), P_MASTER_TABLE_NAME||'.'),
                               P_PAGE_ID     => P_DETAIL_PAGE_ID );
    L_TABLE_FK_SRC_TYPE := 'ITEM';
 
    
    
    
    LA_DETAIL_DISPLAY_COLUMNS := WWV_FLOW_UTILITIES.STRING_TO_TABLE2(P_DETAIL_DISPLAY_COLUMN);
    J := 0;
    FOR I IN 1..LA_DETAIL_DISPLAY_COLUMNS.COUNT
    LOOP
        IF (LA_DETAIL_DISPLAY_COLUMNS(I) != L_DETAIL_PK) AND
           (LA_DETAIL_DISPLAY_COLUMNS(I) != NVL(L_DETAIL_PK2,' ')) AND
           (LA_DETAIL_DISPLAY_COLUMNS(I) != L_TABLE_FK) THEN
            J := J + 1;
            LA_UPDATABLE_COLUMNS(J) := LA_DETAIL_DISPLAY_COLUMNS(I);
            LA_DETAIL_DISPLAY_COLUMNS2(J) := LA_DETAIL_DISPLAY_COLUMNS(I);
        END IF;
    END LOOP;
 
 
    CREATE_UPDATEABLE_REPORT (
        P_FLOW_ID            => P_FLOW_ID,
        P_PAGE_ID            => P_DETAIL_PAGE_ID,
        P_PAGE_NAME          => P_DETAIL_PAGE_TITLE,
        P_GROUP_NAME         => P_GROUP_NAME,
        P_PAGE_MODE          => P_DETAIL_PAGE_MODE,
        P_USER_INTERFACE_ID  => P_USER_INTERFACE_ID,
        
        P_SELECT_COLUMNS     => WWV_FLOW_UTILITIES.TABLE_TO_STRING2(LA_DETAIL_DISPLAY_COLUMNS2),
        P_UPDATABLE_COLUMNS  => WWV_FLOW_UTILITIES.TABLE_TO_STRING2(LA_UPDATABLE_COLUMNS),
        P_TABLE_PK1          => L_DETAIL_PK,
        P_TABLE_PK1_SRC_TYPE => P_DETAIL_TABLE_PK1_SRC_TYPE,
        P_TABLE_PK1_SRC      => P_DETAIL_TABLE_PK1_SRC,
        P_TABLE_PK2          => L_DETAIL_PK2,
        P_TABLE_PK2_SRC_TYPE => P_DETAIL_TABLE_PK2_SRC_TYPE,
        P_TABLE_PK2_SRC      => P_DETAIL_TABLE_PK2_SRC,
        P_IMPLEMENT_TYPE     => 1,
        P_SECURITY_GROUP_ID  => WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID,
        P_TABLE_FK           => L_TABLE_FK,
        P_TABLE_FK_SRC_TYPE  => L_TABLE_FK_SRC_TYPE,
        P_TABLE_FK_SRC       => L_TABLE_FK_SRC,
        
        P_QUERY              => GENERATE_UPDATABLE_RPT_QUERY (
                                P_SELECT_COLUMNS     => WWV_FLOW_UTILITIES.TABLE_TO_STRING2(LA_DETAIL_DISPLAY_COLUMNS2),
                                P_UPDATABLE_COLUMNS  => WWV_FLOW_UTILITIES.TABLE_TO_STRING2(LA_UPDATABLE_COLUMNS),
                                P_TABLE_OWNER        => P_DETAIL_TABLE_OWNER,
                                P_TABLE_NAME         => P_DETAIL_TABLE_NAME,
                                P_TABLE_PK1          => L_DETAIL_PK,
                                P_TABLE_PK2          => L_DETAIL_PK2,
                                P_TABLE_FK           => L_TABLE_FK,
                                P_TABLE_FK_SRC_TYPE  => L_TABLE_FK_SRC_TYPE,
                                P_TABLE_FK_SRC       => L_TABLE_FK_SRC,
                                P_IMPLEMENT_TYPE     => '1'),
        P_REGION_TITLE       => P_DETAIL_REGION_TITLE2,
        P_REGION_TEMPLATE    => L_REGION_TEMPLATE,
        P_REPORT_TEMPLATE    => L_REPORT_TEMPLATE,
        P_CANCEL_BRANCH      => P_MASTER_PAGE_ID,
        P_SUBMIT_BRANCH      => P_DETAIL_PAGE_ID,
        P_PROCESS            => L_PROCESS,
        P_DELETE_BUTTON_NAME => WWV_FLOW_LANG.SYSTEM_MESSAGE('WIZAPI_DELETE_CHECKED'),
        P_ADD_BUTTON_NAME    => L_ADD_BUTTON_NAME,
        P_SUBMIT_BUTTON_NAME => L_SAVE_BUTTON_NAME,
        P_IS_MASTER_DETAIL   => TRUE);
 
    
    
    
    FOR C1 IN (
        SELECT ID
          FROM WWV_FLOW_PAGE_PLUGS
         WHERE FLOW_ID          = P_FLOW_ID
           AND PAGE_ID          = P_DETAIL_PAGE_ID
           AND PLUG_SOURCE_TYPE = WWV_FLOW_REGION_NATIVE.C_TABFORM
    ) LOOP
 
      L_UPDATEABLE_RPT_REGION := C1.ID;
 
      
      
      UPDATE WWV_FLOW_PAGE_PLUGS
         SET PLUG_DISPLAY_CONDITION_TYPE = 'ITEM_IS_NOT_NULL',
             PLUG_DISPLAY_WHEN_CONDITION = GET_VALID_ITEM_NAME(DECODE(L_MASTER_PK,'ROWID',L_DETAIL_FK,L_MASTER_PK), P_DETAIL_PAGE_ID),
             AJAX_ENABLED                = 'Y',
             AJAX_ITEMS_TO_SUBMIT        = GET_VALID_ITEM_NAME(L_DETAIL_FK, P_DETAIL_PAGE_ID)||
                                           CASE WHEN L_DETAIL_FK2 IS NOT NULL THEN ',' ||GET_VALID_ITEM_NAME(L_DETAIL_FK2, P_DETAIL_PAGE_ID) END
       WHERE ID                = C1.ID
         AND FLOW_ID           = P_FLOW_ID
         AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
 
    END LOOP;
 
    
    
    
    
    
    E := 'select 1 '||WWV_FLOW.LF;
    IF P_DETAIL_TABLE_OWNER = GET_FLOW_OWNER THEN
       E := E||'from "#OWNER#"."'||P_DETAIL_TABLE_NAME||'"'||WWV_FLOW.LF;
    ELSE
       E := E||'from "'||P_DETAIL_TABLE_OWNER||'"."'||P_DETAIL_TABLE_NAME||'"'||WWV_FLOW.LF;
    END IF;
 
    IF L_TABLE_FK IS NOT NULL THEN
        IF L_TABLE_FK_SRC_TYPE = 'ITEM' THEN
            E := E||'where "'||L_TABLE_FK||'" = '||GET_ITEM_BIND_VARIABLE(L_TABLE_FK_SRC)||WWV_FLOW.LF;
        ELSIF L_TABLE_FK_SRC_TYPE = 'FUNCTION' THEN
            E := E||'where "'||L_TABLE_FK||'" = '||L_TABLE_FK_SRC||WWV_FLOW.LF;
        END IF;
    END IF;
 
    FOR C1 IN (
        SELECT ID, BUTTON_NAME
        FROM WWV_FLOW_STEP_BUTTONS
        WHERE FLOW_ID = P_FLOW_ID
        AND FLOW_STEP_ID = P_DETAIL_PAGE_ID
        AND BUTTON_PLUG_ID = L_UPDATEABLE_RPT_REGION
        AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
    ) LOOP
        IF C1.BUTTON_NAME = 'ADD' THEN
              L_ADD_BUTTON_ID := C1.ID;
              L_ADD_BUTTON_POS := WWV_FLOW_THEME_MANAGER.GET_BUTTON_POSTION(
                                   P_TEMPLATE_ID => L_REGION_TEMPLATE,
                                   P_POSITION    => '#CHANGE#');
            UPDATE WWV_FLOW_STEP_BUTTONS
            SET BUTTON_POSITION = L_ADD_BUTTON_POS,
            BUTTON_NAME = 'APPLY_CHANGES_ADD'
            WHERE ID = C1.ID
            AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
        ELSIF C1.BUTTON_NAME = 'MULTI_ROW_DELETE' THEN
            
            UPDATE WWV_FLOW_STEP_BUTTONS
            SET BUTTON_CONDITION_TYPE = 'EXISTS',
            BUTTON_CONDITION = E,
            BUTTON_NAME = 'APPLY_CHANGES_MRD',
            BUTTON_REDIRECT_URL = REPLACE(BUTTON_REDIRECT_URL,'MULTI_ROW_DELETE','APPLY_CHANGES_MRD')
            WHERE ID = C1.ID
            AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
        ELSIF C1.BUTTON_NAME = 'SUBMIT' THEN
              L_SUBMIT_BUTTON_ID := C1.ID;
            DELETE FROM WWV_FLOW_STEP_BUTTONS
            WHERE ID = C1.ID
            AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
        END IF;
    END LOOP;
 
    
    FOR C1 IN (
        SELECT ID, PROCESS_TYPE, PROCESS_WHEN_BUTTON_ID, PROCESS_SEQUENCE, ATTRIBUTE_01
        FROM   WWV_FLOW_STEP_PROCESSING
        WHERE  FLOW_ID           = P_FLOW_ID
        AND    FLOW_STEP_ID      = P_DETAIL_PAGE_ID
        AND    PROCESS_POINT     = 'AFTER_SUBMIT'
        AND    SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
        ORDER BY PROCESS_SEQUENCE
    ) LOOP
 
        L_PROCESS_SEQ := L_PROCESS_SEQ + 10;
 
        
        IF C1.PROCESS_TYPE = WWV_FLOW_PROCESS_NATIVE.C_FORM_PROCESS THEN
 
            UPDATE WWV_FLOW_STEP_PROCESSING
            SET PROCESS_SEQUENCE = 10
            WHERE ID = C1.ID
            AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
 
        ELSIF C1.PROCESS_TYPE = WWV_FLOW_PROCESS_NATIVE.C_TABFORM_UPDATE THEN
 
            UPDATE WWV_FLOW_STEP_PROCESSING
            SET PROCESS_WHEN_BUTTON_ID = NULL,
                PROCESS_SEQUENCE       = 20,
                
            PROCESS_WHEN_TYPE = 'PLSQL_EXPRESSION',
            PROCESS_WHEN = ':request like (''SAVE'') or :request like ''GET_NEXT%'' or :request like ''GET_PREV%'''
            WHERE ID = C1.ID
            AND   SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
 
        ELSIF C1.PROCESS_TYPE = WWV_FLOW_PROCESS_NATIVE.C_TABFORM_DELETE THEN
 
            UPDATE WWV_FLOW_STEP_PROCESSING
            SET PROCESS_WHEN_TYPE = 'REQUEST_IN_CONDITION',
                PROCESS_WHEN      = 'APPLY_CHANGES_MRD',
                PROCESS_SEQUENCE  = 30
            WHERE ID = C1.ID
            AND   SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
 
        ELSIF C1.PROCESS_TYPE = WWV_FLOW_PROCESS_NATIVE.C_SESSION_STATE AND C1.ATTRIBUTE_01 = 'CLEAR_CACHE_FOR_PAGES' THEN
 
            UPDATE WWV_FLOW_STEP_PROCESSING
            SET PROCESS_SEQUENCE = 40
            WHERE ID = C1.ID
            AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
 
        ELSIF C1.PROCESS_TYPE = WWV_FLOW_PROCESS_NATIVE.C_PLSQL THEN
 
            UPDATE WWV_FLOW_STEP_PROCESSING
            SET PROCESS_SEQUENCE = 5
            WHERE ID = C1.ID
            AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
 
        END IF;
 
    END LOOP;
 
    
    FOR C1 IN (
        SELECT ID
        FROM   WWV_FLOW_STEP_BRANCHES
        WHERE  FLOW_ID               =  P_FLOW_ID
        AND    FLOW_STEP_ID          =  P_DETAIL_PAGE_ID
        AND    SECURITY_GROUP_ID     =  WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
        AND    BRANCH_WHEN_BUTTON_ID IN (L_PREV_BUTTON_ID,L_NEXT_BUTTON_ID))
    LOOP
        L_BRANCH_SEQ := L_BRANCH_SEQ + 10;
        UPDATE WWV_FLOW_STEP_BRANCHES
        SET BRANCH_POINT = 'AFTER_PROCESSING',
        BRANCH_SEQUENCE = L_BRANCH_SEQ,
        BRANCH_ACTION = BRANCH_ACTION||'&success_msg=#SUCCESS_MSG#'
        WHERE ID = C1.ID
        AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
    END LOOP;
 
    
    FOR C1 IN (SELECT ID
               FROM WWV_FLOW_STEP_BRANCHES
               WHERE FLOW_ID = P_FLOW_ID
               AND FLOW_STEP_ID = P_DETAIL_PAGE_ID
               AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
               AND ID = L_SAVE_BUTTON_BRANCH_ID)
    LOOP
          L_BRANCH_SEQ := L_BRANCH_SEQ + 10;
        UPDATE WWV_FLOW_STEP_BRANCHES
        SET BRANCH_SEQUENCE = L_BRANCH_SEQ
        WHERE ID = C1.ID
        AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
    END LOOP;
 
    
    FOR C1 IN (SELECT ID
               FROM WWV_FLOW_STEP_BRANCHES
               WHERE FLOW_ID = P_FLOW_ID
               AND FLOW_STEP_ID = P_DETAIL_PAGE_ID
               AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
               AND BRANCH_WHEN_BUTTON_ID IS NULL
               AND BRANCH_CONDITION_TYPE IS NULL
               AND BRANCH_CONDITION IS NULL)
    LOOP
          L_BRANCH_SEQ := L_BRANCH_SEQ + 10;
        UPDATE WWV_FLOW_STEP_BRANCHES
        SET BRANCH_SEQUENCE = L_BRANCH_SEQ
        WHERE ID = C1.ID
        AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
    END LOOP;
 EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(-20001,
        WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.CREATE_MASTER_DETAIL',SQLERRM)
    );
 END CREATE_2PAGE_MASTER_DETAIL;
 
 
 
 
 PROCEDURE CREATE_3PAGE_MASTER_DETAIL (
    P_FLOW_ID                       IN NUMBER   DEFAULT NULL,
    P_MASTER_PAGE_ID                IN NUMBER   DEFAULT NULL,
    P_DETAIL_PAGE_ID                IN NUMBER   DEFAULT NULL,
    P_DETAIL2_PAGE_ID               IN NUMBER   DEFAULT NULL,
    
    P_MASTER_PAGE_TITLE             IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_PAGE_TITLE             IN VARCHAR2 DEFAULT NULL,
    P_DETAIL2_PAGE_TITLE            IN VARCHAR2 DEFAULT NULL,
    P_MASTER_REGION_TITLE           IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_REGION_TITLE           IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_REGION_TITLE2          IN VARCHAR2 DEFAULT NULL,
    P_DETAIL2_REGION_TITLE          IN VARCHAR2 DEFAULT NULL,
    
    P_GROUP_NAME                    IN VARCHAR2 DEFAULT NULL,
    
    P_MASTER_PAGE_MODE              IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_PAGE_MODE              IN VARCHAR2 DEFAULT NULL,
    P_DETAIL2_PAGE_MODE             IN VARCHAR2 DEFAULT NULL,
    
    P_USER_INTERFACE_ID             IN NUMBER,
    
    P_TAB_SET                       IN VARCHAR2 DEFAULT NULL,
    P_TAB_NAME                      IN VARCHAR2 DEFAULT NULL,
    P_TAB_TEXT                      IN VARCHAR2 DEFAULT NULL,
    
    P_NAV_LIST_ID                   IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_ITEM_ID              IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_ITEM_NAME            IN VARCHAR2 DEFAULT NULL,
    P_NAV_LIST_PARENT_ITEM_ID       IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_CHILD_ITEM_NAME      IN VARCHAR2 DEFAULT NULL,
    
    P_MASTER_TABLE_OWNER            IN VARCHAR2 DEFAULT NULL,
    P_MASTER_TABLE_NAME             IN VARCHAR2 DEFAULT NULL,
    P_MASTER_SORT_COLUMN            IN VARCHAR2 DEFAULT NULL,
    P_MASTER_SORT_COLUMN2           IN VARCHAR2 DEFAULT NULL,
    P_MASTER_DISPLAY_COLUMN         IN VARCHAR2 DEFAULT NULL,
    P_INCLUDE_MASTER_REPORT         IN VARCHAR2 DEFAULT 'Y',
    P_INCLUDE_MASTER_ROW_NAV        IN VARCHAR2 DEFAULT 'Y',
    
    P_MASTER_TABLE_PK1              IN VARCHAR2 DEFAULT NULL,
    P_MASTER_TABLE_PK1_SRC_TYPE     IN VARCHAR2 DEFAULT NULL,
    P_MASTER_TABLE_PK1_SRC          IN VARCHAR2 DEFAULT NULL,
    P_MASTER_TABLE_PK2              IN VARCHAR2 DEFAULT NULL,
    P_MASTER_TABLE_PK2_SRC_TYPE     IN VARCHAR2 DEFAULT NULL,
    P_MASTER_TABLE_PK2_SRC          IN VARCHAR2 DEFAULT NULL,
    
    P_DETAIL_TABLE_OWNER            IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_TABLE_NAME             IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_DISPLAY_COLUMN         IN VARCHAR2 DEFAULT NULL,
    
    P_DETAIL_TABLE_PK1              IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_TABLE_PK1_SRC_TYPE     IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_TABLE_PK1_SRC          IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_TABLE_PK2              IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_TABLE_PK2_SRC_TYPE     IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_TABLE_PK2_SRC          IN VARCHAR2 DEFAULT NULL,
    
    P_MASTER_LINK                   IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_LINK                   IN VARCHAR2 DEFAULT NULL
    )
 IS
    C_DIALOG_CLOSED_EVENT_TYPE      CONSTANT VARCHAR2(20) := 'apexafterclosedialog';
    L_MASTER_REGION_ID              NUMBER          := WWV_FLOW_ID.NEXT_VAL;
    L_DETAIL_REGION_ID              NUMBER          := WWV_FLOW_ID.NEXT_VAL;
    L_DETAIL2_REGION_ID             NUMBER;
    L_REGION_TEMPLATE               NUMBER;
    L_REPORT_TEMPLATE               NUMBER;
    L_DETAIL2_FK_ITEM_ID            NUMBER;
    L_DETAIL2_ITEM_SEQ              NUMBER;
    L_BRANCH_SEQ                    NUMBER := 0;
    L_GROUP_ID                      NUMBER := NULL;
    L_CREATE_BUTTON_ID              NUMBER := NULL;
    L_CREATE_BUTTON_DA_ID           NUMBER := NULL;
    L_EDIT_REPORT_DA_ID             NUMBER := NULL;
    
    L_MASTER_PK                     VARCHAR2(255);
    L_MASTER_PK2                    VARCHAR2(255);
    L_MASTER_PK_ITEM                VARCHAR2(255);
    L_MASTER_PK2_ITEM               VARCHAR2(255);
    L_DETAIL_PK                     VARCHAR2(255);
    L_DETAIL_PK2                    VARCHAR2(255);
    L_DETAIL_PK_ITEM                VARCHAR2(255);
    L_DETAIL_PK2_ITEM               VARCHAR2(255);
    L_DETAIL_FK                     VARCHAR2(255);
    L_DETAIL_FK2                    VARCHAR2(255);
    L_DETAIL_FK_ITEM                VARCHAR2(255);
    L_DETAIL_FK_VALUE               VARCHAR2(255);
    L_DETAIL_FK_ITEM_NAME           VARCHAR2(255);
    L_DETAIL_FK2_ITEM               VARCHAR2(255);
    L_DETAIL_FK2_VALUE              VARCHAR2(255);
    L_DETAIL_FK2_ITEM_NAME          VARCHAR2(255);
    L_DETAIL2_FK_ITEM_NAME          VARCHAR2(255);
    L_CREATE_BUTTON_NAME            VARCHAR2(255)   := WWV_FLOW_LANG.SYSTEM_MESSAGE('LAYOUT.T_CREATE_BUTTON');
    L_SAVE_BUTTON_NAME              VARCHAR2(255)   := WWV_FLOW_LANG.SYSTEM_MESSAGE('SAVE');
    L_DELETE_BUTTON_NAME            VARCHAR2(255)   := WWV_FLOW_LANG.SYSTEM_MESSAGE('F4350.DELETE');
    L_CANCEL_BUTTON_NAME            VARCHAR2(255)   := WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_SPELING.BUTTON_CANCEL');
    L_EDIT                          VARCHAR2(255)   := WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW.EDIT');
    L_CREATE_BUTTON_DA              VARCHAR2(255)   := WWV_FLOW_LANG.SYSTEM_MESSAGE('CREATE_DIALOG_CLOSED_DA');
    L_EDIT_REPORT_DA                VARCHAR2(255)   := WWV_FLOW_LANG.SYSTEM_MESSAGE('EDIT_REPORT_DIALOG_CLOSED_DA');
    L_TAB_NAME                      VARCHAR2(255)   := P_TAB_NAME;
    L_TAB_TEXT                      VARCHAR2(255)   := P_TAB_TEXT;
    
    L_CREATE_BUTTON_REDIRECT_URL    VARCHAR2(4000);
    L_BUTTON_IMAGE                  VARCHAR2(4000);
    L_CONDITION                     VARCHAR2(4000);
    L_COND_COLUMN                   VARCHAR2(4000);
    L_DETAIL_LINK                   VARCHAR2(32767);
    L_DETAIL_LINK_TEXT              VARCHAR2(32767);
    L_MASTER_LINK                   VARCHAR2(32767);
    L_MASTER_LINK_TEXT              VARCHAR2(32767);
    L_MASTER_SQL                    VARCHAR2(32767);
    L_MASTER_DISPLAY_COLUMNS        VARCHAR2(32767);
    L_DETAIL_SQL                    VARCHAR2(32767);
    L_DETAIL_DISPLAY_COLUMNS        VARCHAR2(32767);
    
    LA_MASTER_LINKS                 WWV_FLOW_GLOBAL.VC_ARR2;
    LA_DETAIL_LINKS                 WWV_FLOW_GLOBAL.VC_ARR2;
    LA_DETAIL_TABLE_FK              WWV_FLOW_GLOBAL.VC_ARR2;
 BEGIN
    
    
    
   WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
       P_FLOW_ID           => P_FLOW_ID,
       P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
    
    
    
    
    
    L_TAB_NAME := P_TAB_NAME;
    L_TAB_TEXT := P_TAB_TEXT;
 
    IF LOWER(WWV_FLOW.G_BROWSER_LANGUAGE) = 'en' THEN
        NULL;
    ELSE
        L_CREATE_BUTTON_NAME := WWV_FLOW_LANG.SYSTEM_MESSAGE('LAYOUT.T_CREATE_BUTTON');
        L_SAVE_BUTTON_NAME   := WWV_FLOW_LANG.SYSTEM_MESSAGE('SAVE');
        L_DELETE_BUTTON_NAME := WWV_FLOW_LANG.SYSTEM_MESSAGE('F4350.DELETE');
        L_CANCEL_BUTTON_NAME := WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_SPELING.BUTTON_CANCEL');
        L_EDIT               := WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW.EDIT');
    END IF;
 
 
    
    
    
    L_REGION_TEMPLATE := NVL(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_REPORTR_TEMPLATE,
                             WWV_FLOW_THEME_GLOBALS.G_DEFAULT_REGION_TEMPLATE);
    IF L_REGION_TEMPLATE IS NULL THEN
        L_REGION_TEMPLATE := GET_DEFAULT_TEMPLATE_ID (
                             P_FLOW_ID       => P_FLOW_ID,
                             P_TEMPLATE_TYPE => 'REGION'
                             );
    END IF;
    L_REPORT_TEMPLATE := WWV_FLOW_THEME_GLOBALS.G_DEFAULT_REPORT_TEMPLATE;
    IF L_REPORT_TEMPLATE IS NULL THEN
        L_REPORT_TEMPLATE := GET_DEFAULT_TEMPLATE_ID (
                             P_FLOW_ID       => P_FLOW_ID,
                             P_TEMPLATE_TYPE => 'REPORT'
                             );
    END IF;
 
    IF WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE IS NOT NULL THEN
        L_BUTTON_IMAGE := 'template:'||WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE;
    END IF;
 
    
    
    
    L_MASTER_PK      := P_MASTER_TABLE_PK1;
    L_MASTER_PK2     := P_MASTER_TABLE_PK2;
    L_MASTER_PK_ITEM := GET_VALID_ITEM_NAME ( P_COLUMN_NAME => L_MASTER_PK,
                                              P_PAGE_ID     => P_DETAIL_PAGE_ID );
    IF L_MASTER_PK2 IS NOT NULL THEN
        L_MASTER_PK2_ITEM := GET_VALID_ITEM_NAME (P_COLUMN_NAME => L_MASTER_PK2,
                                                  P_PAGE_ID     => P_DETAIL_PAGE_ID );
    END IF;
 
    
    
    
    L_DETAIL_PK      := P_DETAIL_TABLE_PK1;
    L_DETAIL_PK2     := P_DETAIL_TABLE_PK2;
    L_DETAIL_PK_ITEM := GET_VALID_ITEM_NAME (P_COLUMN_NAME => L_DETAIL_PK,
                                             P_PAGE_ID     => P_DETAIL2_PAGE_ID );
    IF L_DETAIL_PK2 IS NOT NULL THEN
        L_DETAIL_PK2_ITEM := GET_VALID_ITEM_NAME (P_COLUMN_NAME => L_DETAIL_PK2,
                                                  P_PAGE_ID     => P_DETAIL2_PAGE_ID );
    END IF;
 
    
    
    
    LA_DETAIL_TABLE_FK := WWV_FLOW_UTILITIES.STRING_TO_TABLE2(
                                GET_FK (P_TABLE_OWNER       => P_DETAIL_TABLE_OWNER,
                                        P_TABLE_NAME        => P_DETAIL_TABLE_NAME,
                                        P_PARENT_TABLE_NAME => P_MASTER_TABLE_NAME));
    
    
    
    L_DETAIL_FK := ARRAY_ELEMENT(P_VCARR=>LA_DETAIL_TABLE_FK,P_INDEX=>1);
    
    IF INSTR(L_DETAIL_FK,',',1) > 0 THEN
        L_DETAIL_FK2 := SUBSTR(L_DETAIL_FK,INSTR(L_DETAIL_FK,',',1)+1);
        L_DETAIL_FK  := SUBSTR(L_DETAIL_FK,1,INSTR(L_DETAIL_FK,',',1)-1);
    END IF;
 
     
     
     
     IF P_GROUP_NAME IS NOT NULL THEN
         L_GROUP_ID := WWV_FLOW_UTILITIES.GET_PAGE_GROUP_ID(P_GROUP_NAME => P_GROUP_NAME, P_APPLICATION_ID => P_FLOW_ID);
         
         IF L_GROUP_ID IS NULL THEN
             L_GROUP_ID := WWV_FLOW_ID.NEXT_VAL;
             WWV_FLOW_API.CREATE_PAGE_GROUP(P_ID => L_GROUP_ID, P_FLOW_ID => P_FLOW_ID, P_GROUP_NAME => P_GROUP_NAME);
         END IF;
     END IF;
 
    IF P_INCLUDE_MASTER_REPORT = 'Y' THEN
        
        
        
        IF NOT PAGE_EXISTS (P_FLOW_ID, P_MASTER_PAGE_ID) THEN
            WWV_FLOW_API.CREATE_PAGE(
              P_ID                  => P_MASTER_PAGE_ID,
              P_FLOW_ID             => P_FLOW_ID,
              P_TAB_SET             => REPLACE(P_TAB_SET,'%null%',NULL),
              P_NAME                => P_MASTER_PAGE_TITLE,
              P_PAGE_MODE           => P_MASTER_PAGE_MODE,
              P_GROUP_ID            => L_GROUP_ID,
              P_USER_INTERFACE_ID   => P_USER_INTERFACE_ID,
              P_PAGE_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_PAGE_TEMPLATE, 'PAGE'),
              P_STEP_TITLE          => P_MASTER_PAGE_TITLE,
              P_STEP_SUB_TITLE      => P_MASTER_PAGE_TITLE,
              P_STEP_SUB_TITLE_TYPE => 'TEXT_WITH_SUBSTITUTIONS',
              P_WELCOME_TEXT        => '',
              P_BOX_WELCOME_TEXT    => '',
              P_BOX_FOOTER_TEXT     => '',
              P_FOOTER_TEXT         => '');
 
 
           IF P_NAV_LIST_ID IS NOT NULL THEN
                G_NAV_LIST_ITEM_ID := NULL;
                
                CREATE_NAVIGATION_LIST_ITEM (
                    P_FLOW_ID                  => P_FLOW_ID,
                    P_PAGE_ID                  => P_MASTER_PAGE_ID,
                    P_PAGE_NAME                => P_MASTER_PAGE_TITLE,
                    P_NAV_LIST_ID              => P_NAV_LIST_ID,
                    P_NAV_LIST_ITEM_ID         => P_NAV_LIST_ITEM_ID,
                    P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_ITEM_NAME,
                    P_NAV_LIST_PARENT_ITEM_ID  => P_NAV_LIST_PARENT_ITEM_ID,
                    P_NAV_LIST_CHILD_ITEM_NAME => P_NAV_LIST_CHILD_ITEM_NAME);
            ELSE
                
                IF REPLACE(P_TAB_SET,'%null%',NULL) IS NOT NULL THEN
                    CREATE_TAB (
                        P_FLOW_ID    => P_FLOW_ID,
                        P_PAGE_ID    => P_MASTER_PAGE_ID,
                        P_TAB_SET    => P_TAB_SET,
                        P_TAB_NAME   => L_TAB_NAME,
                        P_TAB_TEXT   => L_TAB_TEXT);
                END IF;
            END IF;
        END IF;
 
        IF L_MASTER_PK = 'ROWID' THEN
            L_MASTER_DISPLAY_COLUMNS := 'ROWID:'||P_MASTER_DISPLAY_COLUMN;
        ELSE
            L_MASTER_DISPLAY_COLUMNS := P_MASTER_DISPLAY_COLUMN;
        END IF;
 
        L_MASTER_SQL := WWV_FLOW_PLUGIN_DEV.BUILD_SQL_STATEMENT (
            P_APPLICATION_ID => P_FLOW_ID,
            P_TABLE_OWNER    => P_MASTER_TABLE_OWNER,
            P_TABLE_NAME     => P_MASTER_TABLE_NAME,
            P_COLUMNS        => L_MASTER_DISPLAY_COLUMNS );
        
        
        
        WWV_FLOW_API.CREATE_PAGE_PLUG (
            P_ID                            => L_MASTER_REGION_ID,
            P_FLOW_ID                       => P_FLOW_ID,
            P_PAGE_ID                       => P_MASTER_PAGE_ID,
            P_PLUG_NAME                     => P_MASTER_REGION_TITLE,
            P_PLUG_TEMPLATE                 => L_REGION_TEMPLATE,
            P_REGION_TEMPLATE_OPTIONS       => GET_PRESET_TEMPLATE_OPTIONS (L_REGION_TEMPLATE,'REGION'),
            P_COMPONENT_TEMPLATE_OPTIONS    => GET_PRESET_TEMPLATE_OPTIONS (L_REPORT_TEMPLATE,'REPORT'),
            P_PLUG_DISPLAY_SEQUENCE         => GET_MAX_REGION_DISPLAY_SEQ(P_FLOW_ID=>P_FLOW_ID,P_PAGE_ID=>P_MASTER_PAGE_ID),
            P_PLUG_DISPLAY_POINT            => 'BODY',
            P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
            P_PLUG_SOURCE                   => L_MASTER_SQL,
            P_PLUG_SOURCE_TYPE              => WWV_FLOW_REGION_NATIVE.C_SQL_REPORT,
            P_PLUG_QUERY_ROW_TEMPLATE       => L_REPORT_TEMPLATE,
            P_PLUG_QUERY_NUM_ROWS           => '15',
            P_PLUG_QUERY_NUM_ROWS_TYPE      => 'ROW_RANGES_IN_SELECT_LIST',
            P_PLUG_QUERY_ROW_COUNT_MAX      => WWV_FLOW_API.C_DEFAULT_QUERY_ROW_COUNT_MAX,
            P_PLUG_QUERY_NO_DATA_FOUND      => WWV_FLOW_LANG.SYSTEM_MESSAGE('F4000.NO_DATA_FOUND'),
            P_PAGINATION_DISPLAY_POSITION   => 'BOTTOM_RIGHT',
            P_PLUG_QUERY_HEADINGS_TYPE      => 'COLON_DELMITED_LIST',
            P_PLUG_COMMENT                  => NULL,
            P_AJAX_ENABLED                  => CASE WHEN P_DETAIL_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN 'Y' ELSE 'N' END);  
 
        
        
        
        IF L_MASTER_PK IS NOT NULL THEN
          L_MASTER_LINK_TEXT := C_EDIT_IMAGE;
 
          IF L_MASTER_PK2 IS NULL THEN
            L_MASTER_LINK := 'f?p=#APP_ID#:'||P_DETAIL_PAGE_ID||
                           ':#APP_SESSION#::::';
            L_MASTER_LINK := L_MASTER_LINK||L_MASTER_PK_ITEM;
            L_MASTER_LINK := L_MASTER_LINK||':';
            L_MASTER_LINK := L_MASTER_LINK||'#'||L_MASTER_PK||'#';
          ELSE
            L_MASTER_LINK := 'f?p=#APP_ID#:'||P_DETAIL_PAGE_ID||
                           ':#APP_SESSION#::::';
            L_MASTER_LINK := L_MASTER_LINK||L_MASTER_PK_ITEM;
            L_MASTER_LINK := L_MASTER_LINK||',';
            L_MASTER_LINK := L_MASTER_LINK||L_MASTER_PK2_ITEM;
            L_MASTER_LINK := L_MASTER_LINK||':';
            L_MASTER_LINK := L_MASTER_LINK||'#'||L_MASTER_PK||'#';
            L_MASTER_LINK := L_MASTER_LINK||',';
            L_MASTER_LINK := L_MASTER_LINK||'#'||L_MASTER_PK2||'#';
          END IF;
 
          
          UPDATE WWV_FLOW_REGION_REPORT_COLUMN
          SET COLUMN_LINK = L_MASTER_LINK,
              COLUMN_LINKTEXT = L_MASTER_LINK_TEXT,
              COLUMN_HEADING = WWV_FLOW_LANG.SYSTEM_MESSAGE('EDIT')
          WHERE COLUMN_ALIAS = L_MASTER_PK
          AND FLOW_ID = P_FLOW_ID
          AND REGION_ID = L_MASTER_REGION_ID
          AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
        END IF;
 
        
        
        
        IF WWV_FLOW_HINT.G_USE_UI_DEFAULTS THEN
 
            FOR C1 IN (SELECT COLUMN_ALIAS FROM WWV_FLOW_REGION_REPORT_COLUMN
                       WHERE REGION_ID = L_MASTER_REGION_ID
                       AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                        AND FLOW_ID = P_FLOW_ID
            ) LOOP
                IF C1.COLUMN_ALIAS != 'ROWID' THEN
                    WWV_FLOW_HINT.GET_AD_UI_DEFAULTS (
                         P_SGID        => WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID,
                         P_COLUMN_NAME => C1.COLUMN_ALIAS);
 
                    UPDATE WWV_FLOW_REGION_REPORT_COLUMN
                       SET COLUMN_HEADING   = NVL(WWV_FLOW_HINT.G_LABEL, INITCAP(REPLACE(C1.COLUMN_ALIAS, '_', ' '))),
                           COLUMN_ALIGNMENT = NVL(WWV_FLOW_HINT.G_REPORT_COL_ALIGNMENT,'LEFT'),
                           HEADING_ALIGNMENT = NVL(WWV_FLOW_HINT.G_REPORT_COL_ALIGNMENT,'LEFT'),
                           COLUMN_FORMAT    = WWV_FLOW_HINT.G_REPORT_FORMAT_MASK,
                           COLUMN_WIDTH     = WWV_FLOW_HINT.G_FORM_DISPLAY_WIDTH,
                           COLUMN_HEIGHT    = WWV_FLOW_HINT.G_FORM_DISPLAY_HEIGHT,
                           COLUMN_DEFAULT   = WWV_FLOW_HINT.G_DEFAULT_VALUE
                     WHERE COLUMN_ALIAS = C1.COLUMN_ALIAS
                       AND REGION_ID = L_MASTER_REGION_ID
                       AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                       AND FLOW_ID = P_FLOW_ID;
                END IF;
            END LOOP;
        ELSE
            INITCAP_REPORT_COLUMN_HEADINGS (
                P_REGION_ID => L_MASTER_REGION_ID );
        END IF;
 
        
        
        
        L_CREATE_BUTTON_ID := WWV_FLOW_ID.NEXT_VAL;
        WWV_FLOW_API.CREATE_PAGE_BUTTON(
              P_ID                    => L_CREATE_BUTTON_ID,
              P_FLOW_ID               => P_FLOW_ID,
              P_FLOW_STEP_ID          => P_MASTER_PAGE_ID,
              P_BUTTON_PLUG_ID        => L_MASTER_REGION_ID,
              P_BUTTON_SEQUENCE       => 10,
              P_BUTTON_NAME           => 'CREATE',
              P_BUTTON_IMAGE          => L_BUTTON_IMAGE,
              P_BUTTON_IMAGE_ALT      => L_CREATE_BUTTON_NAME,
              P_BUTTON_POSITION       => WWV_FLOW_THEME_MANAGER.GET_BUTTON_POSTION(
                                         P_TEMPLATE_ID => L_REGION_TEMPLATE,
                                         P_POSITION    => '#CREATE#'),
              P_BUTTON_IS_HOT         => 'Y',
              P_BUTTON_REDIRECT_URL   => 'f?p=&APP_ID.:'||P_DETAIL_PAGE_ID||':&SESSION.::&DEBUG.:'||P_DETAIL_PAGE_ID,
              P_BUTTON_ACTION         => WWV_FLOW_BUTTON.C_ACTION_REDIRECT_PAGE
              );
 
        
        IF P_DETAIL_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN
            L_CREATE_BUTTON_DA_ID := WWV_FLOW_ID.NEXT_VAL;
            WWV_FLOW_API.CREATE_PAGE_DA_EVENT(
                P_ID                      => L_CREATE_BUTTON_DA_ID,
                P_FLOW_ID                 => P_FLOW_ID,
                P_PAGE_ID                 => P_MASTER_PAGE_ID,
                P_NAME                    => L_CREATE_BUTTON_DA,
                P_EVENT_SEQUENCE          => 20,
                P_TRIGGERING_ELEMENT_TYPE => 'BUTTON',
                P_TRIGGERING_BUTTON_ID    => L_CREATE_BUTTON_ID,
                P_BIND_TYPE               => 'bind',
                P_BIND_EVENT_TYPE         => C_DIALOG_CLOSED_EVENT_TYPE);
 
            WWV_FLOW_API.CREATE_PAGE_DA_ACTION(
                P_ID                      => NULL,
                P_FLOW_ID                 => P_FLOW_ID,
                P_PAGE_ID                 => P_MASTER_PAGE_ID,
                P_EVENT_ID                => L_CREATE_BUTTON_DA_ID,
                P_EVENT_RESULT            => 'TRUE',
                P_ACTION_SEQUENCE         => 10,
                P_EXECUTE_ON_PAGE_INIT    => 'N',
                P_ACTION                  => 'NATIVE_REFRESH',
                P_AFFECTED_ELEMENTS_TYPE  => 'REGION',
                P_AFFECTED_REGION_ID      => L_MASTER_REGION_ID,
                P_STOP_EXECUTION_ON_ERROR => 'Y');
        END IF;
 
 
        
        
        
 
        WWV_FLOW_API.CREATE_PAGE_COMPUTATION (
              P_ID                    =>NULL,
              P_FLOW_ID               =>P_FLOW_ID,
              P_FLOW_STEP_ID          =>P_MASTER_PAGE_ID,
              P_COMPUTATION_SEQUENCE  =>1,
              P_COMPUTATION_ITEM      =>L_MASTER_PK_ITEM,
              P_COMPUTATION_POINT     =>'AFTER_SUBMIT',
              P_COMPUTATION_TYPE      =>'STATIC_ASSIGNMENT',
              P_COMPUTATION_PROCESSED =>'REPLACE_EXISTING',
              P_COMPUTATION           =>NULL,
              P_COMPUTATION_COMMENT   =>NULL,
              P_COMPUTE_WHEN          =>'CREATE',
              P_COMPUTE_WHEN_TYPE     =>'REQUEST_EQUALS_CONDITION');
        IF L_MASTER_PK2 IS NOT NULL THEN
            WWV_FLOW_API.CREATE_PAGE_COMPUTATION (
              P_ID                    =>NULL,
              P_FLOW_ID               =>P_FLOW_ID,
              P_FLOW_STEP_ID          =>P_MASTER_PAGE_ID,
              P_COMPUTATION_SEQUENCE  =>1,
              P_COMPUTATION_ITEM      =>L_MASTER_PK2_ITEM,
              P_COMPUTATION_POINT     =>'AFTER_SUBMIT',
              P_COMPUTATION_TYPE      =>'STATIC_ASSIGNMENT',
              P_COMPUTATION_PROCESSED =>'REPLACE_EXISTING',
              P_COMPUTATION           =>NULL,
              P_COMPUTATION_COMMENT   =>NULL,
              P_COMPUTE_WHEN          =>'CREATE',
              P_COMPUTE_WHEN_TYPE     =>'REQUEST_EQUALS_CONDITION');
        END IF;
 
 
        
        
        
        
        
        IF P_TAB_TEXT IS NOT NULL THEN
          L_TAB_NAME := P_TAB_TEXT;
          L_TAB_TEXT := NULL;
        END IF;
 
        
        IF P_DETAIL_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN
            L_EDIT_REPORT_DA_ID := WWV_FLOW_ID.NEXT_VAL;
            WWV_FLOW_API.CREATE_PAGE_DA_EVENT(
                P_ID                      => L_EDIT_REPORT_DA_ID,
                P_FLOW_ID                 => P_FLOW_ID,
                P_PAGE_ID                 => P_MASTER_PAGE_ID,
                P_NAME                    => L_EDIT_REPORT_DA,
                P_EVENT_SEQUENCE          => 10,
                P_TRIGGERING_ELEMENT_TYPE => 'REGION',
                P_TRIGGERING_REGION_ID    => L_MASTER_REGION_ID,
                P_BIND_TYPE               => 'bind',
                P_BIND_EVENT_TYPE         => C_DIALOG_CLOSED_EVENT_TYPE);
 
           WWV_FLOW_API.CREATE_PAGE_DA_ACTION(
               P_ID                      => NULL,
               P_FLOW_ID                 => P_FLOW_ID,
               P_PAGE_ID                 => P_MASTER_PAGE_ID,
               P_EVENT_ID                => L_EDIT_REPORT_DA_ID,
               P_EVENT_RESULT            => 'TRUE',
               P_ACTION_SEQUENCE         => 10,
               P_EXECUTE_ON_PAGE_INIT    => 'N',
               P_ACTION                  => 'NATIVE_REFRESH',
               P_AFFECTED_ELEMENTS_TYPE  => 'REGION',
               P_AFFECTED_REGION_ID      => L_MASTER_REGION_ID,
               P_STOP_EXECUTION_ON_ERROR => 'Y');
        END IF;
    END IF;
 
 
    
    
    
    CREATE_FORM_ON_TABLE (
        P_FLOW_ID                  => P_FLOW_ID,
        P_PAGE_ID                  => P_DETAIL_PAGE_ID,
        P_PAGE_NAME                => P_DETAIL_PAGE_TITLE,
        P_GROUP_NAME               => P_GROUP_NAME,
        P_PAGE_MODE                => P_DETAIL_PAGE_MODE,
        P_USER_INTERFACE_ID        => P_USER_INTERFACE_ID,
        
        P_TAB_SET                  => P_TAB_SET,
        P_TAB_NAME                 => L_TAB_NAME,
        P_TAB_TEXT                 => L_TAB_TEXT,
        
        P_NAV_LIST_ID              => P_NAV_LIST_ID,
        P_NAV_LIST_ITEM_ID         => NVL(P_NAV_LIST_ITEM_ID,G_NAV_LIST_ITEM_ID),
        P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_CHILD_ITEM_NAME,
        P_NAV_LIST_PARENT_ITEM_ID  => CASE WHEN (P_NAV_LIST_PARENT_ITEM_ID IS NOT NULL AND P_NAV_LIST_CHILD_ITEM_NAME IS NULL) THEN P_NAV_LIST_PARENT_ITEM_ID ELSE NULL END,
        P_NAV_LIST_CHILD_ITEM_NAME => NULL,
        
        P_REGION_TITLE             => P_DETAIL_REGION_TITLE,
        P_REGION_TEMPLATE          => L_REGION_TEMPLATE,
        P_TABLE_OWNER              => P_MASTER_TABLE_OWNER,
        P_TABLE_NAME               => P_MASTER_TABLE_NAME,
        P_TABLE_PK_COLUMN_NAME     => L_MASTER_PK,
        P_TABLE_PK_SRC_TYPE        => P_MASTER_TABLE_PK1_SRC_TYPE,
        P_TABLE_PK_SRC             => P_MASTER_TABLE_PK1_SRC,
        P_TABLE_PK2_COLUMN_NAME    => L_MASTER_PK2,
        P_TABLE_PK2_SRC_TYPE       => P_MASTER_TABLE_PK2_SRC_TYPE,
        P_TABLE_PK2_SRC            => P_MASTER_TABLE_PK2_SRC,
        P_DISPLAY_COLUMN_LIST      => P_MASTER_DISPLAY_COLUMN,
        P_BRANCH                   => NVL(P_MASTER_PAGE_ID,P_DETAIL_PAGE_ID),
        P_CANCEL_BRANCH            => P_MASTER_PAGE_ID,
        P_CREATE_BUTTON_NAME       => L_CREATE_BUTTON_NAME,
        P_SAVE_BUTTON_NAME         => L_SAVE_BUTTON_NAME,
        P_DELETE_BUTTON_NAME       => L_DELETE_BUTTON_NAME,
        P_CANCEL_BUTTON_NAME       => L_CANCEL_BUTTON_NAME);
 
    
    
    
    
    
    IF P_INCLUDE_MASTER_REPORT != 'Y' THEN
        IF P_TAB_TEXT IS NOT NULL THEN
          L_TAB_NAME := P_TAB_TEXT;
          L_TAB_TEXT := NULL;
        END IF;
    END IF;
 
    
    
    
    IF P_INCLUDE_MASTER_ROW_NAV = 'Y' THEN
        CREATE_NEXT_PREV_PK_PROCESS (
            P_FLOW_ID          => P_FLOW_ID,
            P_PAGE_ID          => P_DETAIL_PAGE_ID,
            P_PAGE_MODE        => P_DETAIL_PAGE_MODE,
            P_OWNER            => P_MASTER_TABLE_OWNER,
            P_TABLE            => P_MASTER_TABLE_NAME,
            P_PK_COLUMN        => L_MASTER_PK,
            P_PK_COLUMN2       => L_MASTER_PK2,
            P_SORT_COLUMN      => P_MASTER_SORT_COLUMN,
            P_SORT_COLUMN2     => P_MASTER_SORT_COLUMN2,
            P_ITEM_PK          => L_MASTER_PK_ITEM,
            P_ITEM_PK2         => L_MASTER_PK2_ITEM);
    END IF;
 
    
    
    
    IF L_DETAIL_PK = 'ROWID' THEN
        L_DETAIL_DISPLAY_COLUMNS := 'ROWID:'||P_DETAIL_DISPLAY_COLUMN;
    ELSE
        L_DETAIL_DISPLAY_COLUMNS := P_DETAIL_DISPLAY_COLUMN;
    END IF;
 
    L_DETAIL_SQL := WWV_FLOW_PLUGIN_DEV.BUILD_SQL_STATEMENT (
        P_APPLICATION_ID => P_FLOW_ID,
        P_TABLE_OWNER    => P_DETAIL_TABLE_OWNER,
        P_TABLE_NAME     => P_DETAIL_TABLE_NAME,
        P_COLUMNS        => L_DETAIL_DISPLAY_COLUMNS );
 
    
    IF P_MASTER_LINK IS NULL THEN
        IF L_MASTER_PK <> 'ROWID' THEN
            LA_MASTER_LINKS(1) := P_MASTER_TABLE_NAME||'.'||L_MASTER_PK;
        ELSE
            LA_MASTER_LINKS(1) := L_DETAIL_FK;
        END IF;
        IF L_MASTER_PK2 IS NOT NULL THEN
            LA_MASTER_LINKS(2) := P_MASTER_TABLE_NAME||'.'||L_MASTER_PK2;
        END IF;
 
        LA_DETAIL_LINKS(1) := P_DETAIL_TABLE_NAME||'.'||L_DETAIL_FK;
        IF L_DETAIL_FK2 IS NOT NULL THEN
            LA_DETAIL_LINKS(2) := P_DETAIL_TABLE_NAME||'.'||L_DETAIL_FK2;
        END IF;
    ELSE
        LA_MASTER_LINKS := WWV_FLOW_UTILITIES.STRING_TO_TABLE2(P_MASTER_LINK);
        LA_DETAIL_LINKS := WWV_FLOW_UTILITIES.STRING_TO_TABLE2(P_DETAIL_LINK);
    END IF;
 
    IF LA_MASTER_LINKS.COUNT > 0 THEN
        L_DETAIL_SQL := L_DETAIL_SQL||UNISTR('\000a')||' where ';
    END IF;
 
    FOR I IN 1..LA_MASTER_LINKS.COUNT
    LOOP
        IF LA_MASTER_LINKS(I) IS NOT NULL THEN
            L_CONDITION := '= '||GET_ITEM_BIND_VARIABLE (
                                     GET_VALID_ITEM_NAME (
                                         P_COLUMN_NAME => REPLACE(LA_MASTER_LINKS(I), P_MASTER_TABLE_NAME||'.'),
                                         P_PAGE_ID     => P_DETAIL_PAGE_ID )
                                     );
            L_COND_COLUMN := ARRAY_ELEMENT(P_VCARR=>LA_DETAIL_LINKS,P_INDEX=>I);
            IF I = 1 THEN
                L_DETAIL_SQL := L_DETAIL_SQL||L_COND_COLUMN||' '||L_CONDITION;
            ELSIF L_COND_COLUMN IS NOT NULL THEN
                L_DETAIL_SQL := L_DETAIL_SQL||UNISTR('\000a')||'   and '||L_COND_COLUMN||' '||L_CONDITION;
            END IF;
        END IF;
    END LOOP;
 
    WWV_FLOW_API.CREATE_PAGE_PLUG (
        P_ID                            => L_DETAIL_REGION_ID,
        P_FLOW_ID                       => P_FLOW_ID,
        P_PAGE_ID                       => P_DETAIL_PAGE_ID,
        P_PLUG_NAME                     => P_DETAIL_REGION_TITLE2,
        P_PLUG_TEMPLATE                 => L_REGION_TEMPLATE,
        P_REGION_TEMPLATE_OPTIONS       => GET_PRESET_TEMPLATE_OPTIONS (L_REGION_TEMPLATE,'REGION'),
        P_COMPONENT_TEMPLATE_OPTIONS    => GET_PRESET_TEMPLATE_OPTIONS (L_REPORT_TEMPLATE,'REPORT'),
        P_PLUG_DISPLAY_SEQUENCE         => GET_MAX_REGION_DISPLAY_SEQ(P_FLOW_ID=>P_FLOW_ID,P_PAGE_ID=>P_DETAIL_PAGE_ID),
        P_PLUG_DISPLAY_POINT            => 'BODY',
        P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
        P_PLUG_SOURCE                   => L_DETAIL_SQL,
        P_PLUG_SOURCE_TYPE              => WWV_FLOW_REGION_NATIVE.C_SQL_REPORT,
        P_PLUG_QUERY_ROW_TEMPLATE       => L_REPORT_TEMPLATE,
        P_PLUG_QUERY_NUM_ROWS           => '15',
        P_PLUG_QUERY_NUM_ROWS_TYPE      => 'ROW_RANGES_IN_SELECT_LIST',
        P_PLUG_QUERY_ROW_COUNT_MAX      => WWV_FLOW_API.C_DEFAULT_QUERY_ROW_COUNT_MAX,
        P_PLUG_QUERY_NO_DATA_FOUND      => WWV_FLOW_LANG.SYSTEM_MESSAGE('F4000.NO_DATA_FOUND'),
        P_PAGINATION_DISPLAY_POSITION   => 'BOTTOM_RIGHT',
        P_PLUG_QUERY_HEADINGS_TYPE      => 'COLON_DELMITED_LIST',
        P_PLUG_COMMENT                  => NULL,
        P_AJAX_ENABLED                  => CASE WHEN P_DETAIL2_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN 'Y' ELSE 'N' END);  
 
 
    
    
    
    IF L_DETAIL_PK IS NOT NULL THEN
      L_DETAIL_LINK_TEXT := C_EDIT_IMAGE;
      IF L_DETAIL_PK2 IS NULL THEN
        L_DETAIL_LINK := 'f?p=#APP_ID#:'||P_DETAIL2_PAGE_ID||
                       ':#APP_SESSION#::::';
        L_DETAIL_LINK := L_DETAIL_LINK||L_DETAIL_PK_ITEM;
        L_DETAIL_LINK := L_DETAIL_LINK||':';
        L_DETAIL_LINK := L_DETAIL_LINK||'#'||L_DETAIL_PK||'#';
      ELSE
        L_DETAIL_LINK := 'f?p=#APP_ID#:'||P_DETAIL2_PAGE_ID||
                       ':#APP_SESSION#::::';
        L_DETAIL_LINK := L_DETAIL_LINK||L_DETAIL_PK_ITEM;
        L_DETAIL_LINK := L_DETAIL_LINK||',';
        L_DETAIL_LINK := L_DETAIL_LINK||L_DETAIL_PK2_ITEM;
        L_DETAIL_LINK := L_DETAIL_LINK||':';
        L_DETAIL_LINK := L_DETAIL_LINK||'#'||L_DETAIL_PK||'#';
        L_DETAIL_LINK := L_DETAIL_LINK||',';
        L_DETAIL_LINK := L_DETAIL_LINK||'#'||L_DETAIL_PK2||'#';
      END IF;
 
      
      UPDATE WWV_FLOW_REGION_REPORT_COLUMN
         SET COLUMN_LINK = L_DETAIL_LINK,
             COLUMN_LINKTEXT = L_DETAIL_LINK_TEXT,
             COLUMN_HEADING = WWV_FLOW_LANG.SYSTEM_MESSAGE('EDIT')
       WHERE COLUMN_ALIAS = L_DETAIL_PK
         AND FLOW_ID = P_FLOW_ID
         AND REGION_ID = L_DETAIL_REGION_ID
         AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
 
       
       
       
       IF WWV_FLOW_HINT.G_USE_UI_DEFAULTS THEN
 
           FOR C1 IN (SELECT COLUMN_ALIAS FROM WWV_FLOW_REGION_REPORT_COLUMN
                      WHERE REGION_ID = L_DETAIL_REGION_ID
                      AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                       AND FLOW_ID = P_FLOW_ID
           ) LOOP
               IF C1.COLUMN_ALIAS != 'ROWID' THEN
                   WWV_FLOW_HINT.GET_AD_UI_DEFAULTS (
                        P_SGID        => WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID,
                        P_COLUMN_NAME => C1.COLUMN_ALIAS);
 
                   UPDATE WWV_FLOW_REGION_REPORT_COLUMN
                      SET COLUMN_HEADING   = NVL(WWV_FLOW_HINT.G_LABEL, INITCAP(REPLACE(C1.COLUMN_ALIAS, '_', ' '))),
                          COLUMN_ALIGNMENT = NVL(WWV_FLOW_HINT.G_REPORT_COL_ALIGNMENT,'LEFT'),
                          HEADING_ALIGNMENT = NVL(WWV_FLOW_HINT.G_REPORT_COL_ALIGNMENT,'LEFT'),
                          COLUMN_FORMAT    = WWV_FLOW_HINT.G_REPORT_FORMAT_MASK,
                          COLUMN_WIDTH     = WWV_FLOW_HINT.G_FORM_DISPLAY_WIDTH,
                          COLUMN_HEIGHT    = WWV_FLOW_HINT.G_FORM_DISPLAY_HEIGHT,
                          COLUMN_DEFAULT   = WWV_FLOW_HINT.G_DEFAULT_VALUE
                    WHERE COLUMN_ALIAS = C1.COLUMN_ALIAS
                      AND REGION_ID = L_DETAIL_REGION_ID
                      AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                      AND FLOW_ID = P_FLOW_ID;
               END IF;
           END LOOP;
        ELSE
            INITCAP_REPORT_COLUMN_HEADINGS (
                P_REGION_ID => L_DETAIL_REGION_ID );
       END IF;
 
      
      IF P_DETAIL2_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN
          L_EDIT_REPORT_DA_ID := WWV_FLOW_ID.NEXT_VAL;
          WWV_FLOW_API.CREATE_PAGE_DA_EVENT(
              P_ID                      => L_EDIT_REPORT_DA_ID,
              P_FLOW_ID                 => P_FLOW_ID,
              P_PAGE_ID                 => P_DETAIL_PAGE_ID,
              P_NAME                    => L_EDIT_REPORT_DA,
              P_EVENT_SEQUENCE          => 10,
              P_TRIGGERING_ELEMENT_TYPE => 'REGION',
              P_TRIGGERING_REGION_ID    => L_DETAIL_REGION_ID,
              P_BIND_TYPE               => 'bind',
              P_BIND_EVENT_TYPE         => C_DIALOG_CLOSED_EVENT_TYPE);
 
         WWV_FLOW_API.CREATE_PAGE_DA_ACTION(
             P_ID                      => NULL,
             P_FLOW_ID                 => P_FLOW_ID,
             P_PAGE_ID                 => P_DETAIL_PAGE_ID,
             P_EVENT_ID                => L_EDIT_REPORT_DA_ID,
             P_EVENT_RESULT            => 'TRUE',
             P_ACTION_SEQUENCE         => 10,
             P_EXECUTE_ON_PAGE_INIT    => 'N',
             P_ACTION                  => 'NATIVE_REFRESH',
             P_AFFECTED_ELEMENTS_TYPE  => 'REGION',
             P_AFFECTED_REGION_ID      => L_DETAIL_REGION_ID,
             P_STOP_EXECUTION_ON_ERROR => 'Y');
      END IF;
 
 
    END IF;
 
    
    
    
    FOR C1 IN (SELECT ID
                 FROM WWV_FLOW_PAGE_PLUGS
                WHERE FLOW_ID = P_FLOW_ID
                  AND PAGE_ID = P_DETAIL_PAGE_ID
                  AND ID      = L_DETAIL_REGION_ID)
    LOOP
        UPDATE WWV_FLOW_PAGE_PLUGS
           SET PLUG_DISPLAY_CONDITION_TYPE = 'ITEM_IS_NOT_NULL',
               PLUG_DISPLAY_WHEN_CONDITION = DECODE(L_MASTER_PK,'ROWID',GET_VALID_ITEM_NAME (
                                                                                REPLACE(LA_MASTER_LINKS(1), P_MASTER_TABLE_NAME||'.'),
                                                                                P_DETAIL_PAGE_ID ),L_MASTER_PK_ITEM),
               AJAX_ENABLED                = 'Y',
               AJAX_ITEMS_TO_SUBMIT        = GET_VALID_ITEM_NAME(L_DETAIL_FK, P_DETAIL_PAGE_ID)||
                                               CASE WHEN L_DETAIL_FK2 IS NOT NULL THEN ',' ||GET_VALID_ITEM_NAME(L_DETAIL_FK2, P_DETAIL_PAGE_ID) END
         WHERE ID = C1.ID
           AND FLOW_ID = P_FLOW_ID
           AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
    END LOOP;
 
    
    
    
    
    L_CREATE_BUTTON_REDIRECT_URL := 'f?p=&APP_ID.:'||P_DETAIL2_PAGE_ID||':&SESSION.::&DEBUG.:'||P_DETAIL2_PAGE_ID;
    IF L_DETAIL_FK IS NOT NULL THEN
        L_DETAIL_FK_ITEM := GET_VALID_ITEM_NAME (
                                P_COLUMN_NAME => L_DETAIL_FK,
                                P_PAGE_ID     => P_DETAIL2_PAGE_ID );
 
        
        L_DETAIL_FK_VALUE := GET_VALID_ITEM_NAME (
                                P_COLUMN_NAME => L_DETAIL_FK,
                                P_PAGE_ID     => P_DETAIL_PAGE_ID );
 
        IF L_DETAIL_FK2 IS NOT NULL THEN
            L_DETAIL_FK2_ITEM := GET_VALID_ITEM_NAME (
                                     P_COLUMN_NAME => L_DETAIL_FK2,
                                     P_PAGE_ID     => P_DETAIL2_PAGE_ID );
 
            
            L_DETAIL_FK2_VALUE := GET_VALID_ITEM_NAME (
                                     P_COLUMN_NAME => L_DETAIL_FK2,
                                     P_PAGE_ID     => P_DETAIL_PAGE_ID );
        END IF;
 
        L_CREATE_BUTTON_REDIRECT_URL := L_CREATE_BUTTON_REDIRECT_URL||':'||L_DETAIL_FK_ITEM;
 
        IF L_DETAIL_FK2 IS NOT NULL THEN
            L_CREATE_BUTTON_REDIRECT_URL :=
                L_CREATE_BUTTON_REDIRECT_URL||','||L_DETAIL_FK2_ITEM||':'||
                GET_ITEM_SUBSTITUTION_VALUE(L_DETAIL_FK_VALUE)||','||GET_ITEM_SUBSTITUTION_VALUE(L_DETAIL_FK2_VALUE);
        ELSE
            L_CREATE_BUTTON_REDIRECT_URL  :=
                L_CREATE_BUTTON_REDIRECT_URL||':'||GET_ITEM_SUBSTITUTION_VALUE(L_DETAIL_FK_VALUE);
        END IF;
    END IF;
 
    
   IF P_MASTER_LINK IS NOT NULL THEN
        L_CREATE_BUTTON_REDIRECT_URL :=
            L_CREATE_BUTTON_REDIRECT_URL||':'||
            GET_VALID_ITEM_NAME (
                P_COLUMN_NAME => REPLACE(LA_DETAIL_LINKS(1), P_DETAIL_TABLE_NAME||'.'),
                P_PAGE_ID     => P_DETAIL2_PAGE_ID );
 
        IF LA_MASTER_LINKS.COUNT > 1 THEN
            L_CREATE_BUTTON_REDIRECT_URL :=
                L_CREATE_BUTTON_REDIRECT_URL||','||
                GET_VALID_ITEM_NAME (
                    P_COLUMN_NAME => REPLACE(LA_DETAIL_LINKS(2), P_DETAIL_TABLE_NAME||'.'),
                    P_PAGE_ID     => P_DETAIL2_PAGE_ID )||
                ':'||
                GET_ITEM_SUBSTITUTION_VALUE (
                    GET_VALID_ITEM_NAME (
                        P_COLUMN_NAME => REPLACE(LA_MASTER_LINKS(1), P_MASTER_TABLE_NAME||'.'),
                        P_PAGE_ID     => P_DETAIL_PAGE_ID )
                    )||
                ','||
                GET_ITEM_SUBSTITUTION_VALUE (
                    GET_VALID_ITEM_NAME (
                        P_COLUMN_NAME => REPLACE(LA_MASTER_LINKS(2), P_MASTER_TABLE_NAME||'.'),
                        P_PAGE_ID     => P_DETAIL_PAGE_ID )
                    );
        ELSE
            L_CREATE_BUTTON_REDIRECT_URL :=
                L_CREATE_BUTTON_REDIRECT_URL||':'||
                GET_ITEM_SUBSTITUTION_VALUE (
                    GET_VALID_ITEM_NAME (
                        P_COLUMN_NAME => REPLACE(LA_MASTER_LINKS(1), P_MASTER_TABLE_NAME||'.'),
                        P_PAGE_ID     => P_DETAIL_PAGE_ID )
                    );
        END IF;
    END IF;
 
    L_CREATE_BUTTON_ID := WWV_FLOW_ID.NEXT_VAL;
    WWV_FLOW_API.CREATE_PAGE_BUTTON(
          P_ID                    => L_CREATE_BUTTON_ID,
          P_FLOW_ID               => P_FLOW_ID,
          P_FLOW_STEP_ID          => P_DETAIL_PAGE_ID,
          P_BUTTON_PLUG_ID        => L_DETAIL_REGION_ID,
          P_BUTTON_SEQUENCE       => 10,
          P_BUTTON_NAME           => 'CREATE',
          P_BUTTON_IMAGE          => L_BUTTON_IMAGE,
          P_BUTTON_IMAGE_ALT      => L_CREATE_BUTTON_NAME,
          P_BUTTON_POSITION       => WWV_FLOW_THEME_MANAGER.GET_BUTTON_POSTION(
                                     P_TEMPLATE_ID => L_REGION_TEMPLATE,
                                     P_POSITION    => '#CREATE#'),
          P_BUTTON_IS_HOT         => 'Y',
          P_BUTTON_REDIRECT_URL   => L_CREATE_BUTTON_REDIRECT_URL,
          P_BUTTON_ACTION         => WWV_FLOW_BUTTON.C_ACTION_REDIRECT_PAGE
          );
 
     
     IF P_DETAIL2_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN
            L_CREATE_BUTTON_DA_ID := WWV_FLOW_ID.NEXT_VAL;
            WWV_FLOW_API.CREATE_PAGE_DA_EVENT(
                P_ID                      => L_CREATE_BUTTON_DA_ID,
                P_FLOW_ID                 => P_FLOW_ID,
                P_PAGE_ID                 => P_DETAIL_PAGE_ID,
                P_NAME                    => L_CREATE_BUTTON_DA,
                P_EVENT_SEQUENCE          => 20,
                P_TRIGGERING_ELEMENT_TYPE => 'BUTTON',
                P_TRIGGERING_BUTTON_ID    => L_CREATE_BUTTON_ID,
                P_BIND_TYPE               => 'bind',
                P_BIND_EVENT_TYPE         => C_DIALOG_CLOSED_EVENT_TYPE);
 
            WWV_FLOW_API.CREATE_PAGE_DA_ACTION(
                P_ID                      => NULL,
                P_FLOW_ID                 => P_FLOW_ID,
                P_PAGE_ID                 => P_DETAIL_PAGE_ID,
                P_EVENT_ID                => L_CREATE_BUTTON_DA_ID,
                P_EVENT_RESULT            => 'TRUE',
                P_ACTION_SEQUENCE         => 10,
                P_EXECUTE_ON_PAGE_INIT    => 'N',
                P_ACTION                  => 'NATIVE_REFRESH',
                P_AFFECTED_ELEMENTS_TYPE  => 'REGION',
                P_AFFECTED_REGION_ID      => L_DETAIL_REGION_ID,
                P_STOP_EXECUTION_ON_ERROR => 'Y');
        END IF;
 
    
    
    
 
    WWV_FLOW_API.CREATE_PAGE_COMPUTATION (
          P_ID                    =>NULL,
          P_FLOW_ID               =>P_FLOW_ID,
          P_FLOW_STEP_ID          =>P_DETAIL_PAGE_ID,
          P_COMPUTATION_SEQUENCE  =>1,
          P_COMPUTATION_ITEM      =>L_DETAIL_PK_ITEM,
          P_COMPUTATION_POINT     =>'AFTER_SUBMIT',
          P_COMPUTATION_TYPE      =>'STATIC_ASSIGNMENT',
          P_COMPUTATION_PROCESSED =>'REPLACE_EXISTING',
          P_COMPUTATION           =>NULL,
          P_COMPUTATION_COMMENT   =>NULL,
          P_COMPUTE_WHEN          =>'CREATE',
          P_COMPUTE_WHEN_TYPE     =>'REQUEST_EQUALS_CONDITION');
 
    IF L_DETAIL_PK2 IS NOT NULL THEN
        WWV_FLOW_API.CREATE_PAGE_COMPUTATION (
          P_ID                    =>NULL,
          P_FLOW_ID               =>P_FLOW_ID,
          P_FLOW_STEP_ID          =>P_DETAIL_PAGE_ID,
          P_COMPUTATION_SEQUENCE  =>1,
          P_COMPUTATION_ITEM      =>L_DETAIL_PK2_ITEM,
          P_COMPUTATION_POINT     =>'AFTER_SUBMIT',
          P_COMPUTATION_TYPE      =>'STATIC_ASSIGNMENT',
          P_COMPUTATION_PROCESSED =>'REPLACE_EXISTING',
          P_COMPUTATION           =>NULL,
          P_COMPUTATION_COMMENT   =>NULL,
          P_COMPUTE_WHEN          =>'CREATE',
          P_COMPUTE_WHEN_TYPE     =>'REQUEST_EQUALS_CONDITION');
    END IF;
 
    
    
    
    CREATE_FORM_ON_TABLE (
    P_FLOW_ID                  => P_FLOW_ID,
    P_PAGE_ID                  => P_DETAIL2_PAGE_ID,
    P_PAGE_NAME                => P_DETAIL2_PAGE_TITLE,
    P_GROUP_NAME               => P_GROUP_NAME,
    P_PAGE_MODE                => P_DETAIL2_PAGE_MODE,
    P_USER_INTERFACE_ID        => P_USER_INTERFACE_ID,
    
    P_TAB_SET                  => P_TAB_SET,
    P_TAB_NAME                 => L_TAB_NAME,
    P_TAB_TEXT                 => L_TAB_TEXT,
    
    P_NAV_LIST_ID              => P_NAV_LIST_ID,
    P_NAV_LIST_ITEM_ID         => NVL(P_NAV_LIST_ITEM_ID,G_NAV_LIST_ITEM_ID),
    P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_CHILD_ITEM_NAME,
    P_NAV_LIST_PARENT_ITEM_ID  => CASE WHEN (P_NAV_LIST_PARENT_ITEM_ID IS NOT NULL AND P_NAV_LIST_CHILD_ITEM_NAME IS NULL) THEN P_NAV_LIST_PARENT_ITEM_ID ELSE NULL END,
    P_NAV_LIST_CHILD_ITEM_NAME => NULL,
    
    P_REGION_TITLE             => P_DETAIL2_REGION_TITLE,
    P_REGION_TEMPLATE          => L_REGION_TEMPLATE,
    P_TABLE_OWNER              => P_DETAIL_TABLE_OWNER,
    P_TABLE_NAME               => P_DETAIL_TABLE_NAME,
    P_TABLE_PK_COLUMN_NAME     => L_DETAIL_PK,
    P_TABLE_PK_SRC_TYPE        => P_DETAIL_TABLE_PK1_SRC_TYPE,
    P_TABLE_PK_SRC             => P_DETAIL_TABLE_PK1_SRC,
    P_TABLE_PK2_COLUMN_NAME    => L_DETAIL_PK2,
    P_TABLE_PK2_SRC_TYPE       => P_DETAIL_TABLE_PK2_SRC_TYPE,
    P_TABLE_PK2_SRC            => P_DETAIL_TABLE_PK2_SRC,
    P_DISPLAY_COLUMN_LIST      => P_DETAIL_DISPLAY_COLUMN,
    P_BRANCH                   => NVL(P_DETAIL_PAGE_ID,P_DETAIL2_PAGE_ID),
    P_CANCEL_BRANCH            => P_DETAIL_PAGE_ID,
    P_CREATE_BUTTON_NAME       => L_CREATE_BUTTON_NAME,
    P_SAVE_BUTTON_NAME         => L_SAVE_BUTTON_NAME,
    P_DELETE_BUTTON_NAME       => L_DELETE_BUTTON_NAME,
    P_CANCEL_BUTTON_NAME       => L_CANCEL_BUTTON_NAME,
    P_DIALOG_CHAINED           => CASE
                                    WHEN (P_DETAIL2_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL AND P_DETAIL_PAGE_MODE = P_DETAIL2_PAGE_MODE)
                                    THEN 'N'
                                    ELSE 'Y'
                                  END);
 
    
    FOR C1 IN (SELECT ID
               FROM WWV_FLOW_PAGE_PLUGS
               WHERE FLOW_ID = P_FLOW_ID
               AND PAGE_ID = P_DETAIL2_PAGE_ID
               AND PLUG_DISPLAY_POINT = 'BODY'
               AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
    )LOOP
        L_DETAIL2_REGION_ID := C1.ID;
    END LOOP;
 
    
    FOR C2 IN (SELECT  MAX(ITEM_SEQUENCE) SEQ
               FROM WWV_FLOW_STEP_ITEMS
               WHERE ITEM_PLUG_ID = L_DETAIL2_REGION_ID
               AND FLOW_ID = P_FLOW_ID
               AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
    )LOOP
        L_DETAIL2_ITEM_SEQ := NVL(C2.SEQ,0) + 1;
    END LOOP;
 
    
    IF L_DETAIL_FK IS NOT NULL THEN
 
        
        
        IF INSTR(P_DETAIL_DISPLAY_COLUMN,L_DETAIL_FK) = 0 THEN
            L_DETAIL2_FK_ITEM_ID := WWV_FLOW_ID.NEXT_VAL;
 
            WWV_FLOW_API.CREATE_PAGE_ITEM(
                         P_ID                       => L_DETAIL2_FK_ITEM_ID,
                         P_FLOW_ID                  => P_FLOW_ID,
                         P_FLOW_STEP_ID             => P_DETAIL2_PAGE_ID,
                         P_NAME                     => GET_VALID_ITEM_NAME (
                                                           P_COLUMN_NAME => L_DETAIL_FK,
                                                           P_PAGE_ID     => P_DETAIL2_PAGE_ID ),
                         P_DATA_TYPE                => 'VARCHAR',
                         P_ITEM_PLUG_ID             => L_DETAIL2_REGION_ID,
                         P_ACCEPT_PROCESSING        => 'REPLACE_EXISTING',
                         P_ITEM_SEQUENCE            => L_DETAIL2_ITEM_SEQ,
                         P_USE_CACHE_BEFORE_DEFAULT => 'NO',
                         P_PROMPT                   => NVL(WWV_FLOW_HINT.GET_LABEL (
                                                       P_SCHEMA      => P_DETAIL_TABLE_OWNER,
                                                       P_TABLE_NAME  => P_DETAIL_TABLE_NAME,
                                                       P_COLUMN_NAME => L_DETAIL_FK),
                                                       REPLACE(INITCAP(L_DETAIL_FK),'_',' ')),
                         P_SOURCE                   => L_DETAIL_FK,
                         P_SOURCE_TYPE              => 'DB_COLUMN',
                         P_DISPLAY_AS               => 'HIDDEN_PROTECTED',
                         P_LOV                      => '',
                         P_LOV_DISPLAY_NULL         => 'NO',
                         P_CSIZE                    => 30,
                         P_CMAXLENGTH               => 255,
                         P_CHEIGHT                  => NULL,
                         P_CATTRIBUTES              => '',
                         P_BEGIN_ON_NEW_LINE        => 'YES',
                         P_BEGIN_ON_NEW_FIELD       => 'YES',
                         P_LABEL_ALIGNMENT          => 'RIGHT',
                         P_FIELD_TEMPLATE           => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,
                         P_ITEM_TEMPLATE_OPTIONS    => GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,'ITEM'),
                         P_FIELD_ALIGNMENT          => 'LEFT',
                         P_DISPLAY_WHEN             => '',
                         P_IS_PERSISTENT            => 'Y',
                         P_SECURITY_SCHEME          => '',
                         P_PROTECTION_LEVEL         => WWV_FLOW_ITEM.C_PROTECTION_CHECKSUM,
                         P_ITEM_COMMENT             => NULL);
 
         ELSE
             L_DETAIL_FK_ITEM_NAME := GET_VALID_ITEM_NAME (
                                          P_COLUMN_NAME => L_DETAIL_FK,
                                          P_PAGE_ID     => P_DETAIL2_PAGE_ID );
 
             UPDATE WWV_FLOW_STEP_ITEMS
                SET DISPLAY_AS            = WWV_FLOW_NATIVE_ITEM.C_DISPLAY_ONLY,
                    ATTRIBUTE_01          = 'Y',     
                    ATTRIBUTE_02          = 'VALUE', 
                    ESCAPE_ON_HTTP_OUTPUT = 'Y',
                    CATTRIBUTES_ELEMENT   = 'class="fielddatabold"',
                    PROTECTION_LEVEL      = WWV_FLOW_ITEM.C_PROTECTION_CHECKSUM
              WHERE FLOW_ID           = P_FLOW_ID
                AND FLOW_STEP_ID      = P_DETAIL2_PAGE_ID
                AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                AND NAME              = L_DETAIL_FK_ITEM_NAME;
 
             IF L_DETAIL_FK2 IS NOT NULL THEN
                 L_DETAIL_FK2_ITEM_NAME := GET_VALID_ITEM_NAME (
                                               P_COLUMN_NAME => L_DETAIL_FK2,
                                               P_PAGE_ID     => P_DETAIL2_PAGE_ID );
                 UPDATE WWV_FLOW_STEP_ITEMS
                    SET DISPLAY_AS            = WWV_FLOW_NATIVE_ITEM.C_DISPLAY_ONLY,
                        ATTRIBUTE_01          = 'Y',     
                        ATTRIBUTE_02          = 'VALUE', 
                        ESCAPE_ON_HTTP_OUTPUT = 'Y',
                        CATTRIBUTES_ELEMENT   = 'class="fielddatabold"',
                        PROTECTION_LEVEL      = WWV_FLOW_ITEM.C_PROTECTION_CHECKSUM
                  WHERE FLOW_ID           = P_FLOW_ID
                    AND FLOW_STEP_ID      = P_DETAIL2_PAGE_ID
                    AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                    AND NAME              = L_DETAIL_FK2_ITEM_NAME;
             END IF;
 
        END IF;
 
    ELSE
 
        
        IF LA_DETAIL_LINKS.COUNT > 0 THEN
 
            FOR I IN 1..LA_DETAIL_LINKS.COUNT
            LOOP
                L_DETAIL2_FK_ITEM_NAME := GET_VALID_ITEM_NAME (
                                              P_COLUMN_NAME => REPLACE(LA_DETAIL_LINKS(I), P_DETAIL_TABLE_NAME||'.'),
                                              P_PAGE_ID     => P_DETAIL2_PAGE_ID );
                
                IF INSTR(P_DETAIL_DISPLAY_COLUMN,REPLACE(LA_DETAIL_LINKS(I),P_DETAIL_TABLE_NAME||'.')) > 0 THEN
                    UPDATE WWV_FLOW_STEP_ITEMS
                       SET DISPLAY_AS            = WWV_FLOW_NATIVE_ITEM.C_DISPLAY_ONLY,
                           ATTRIBUTE_01          = 'Y',     
                           ATTRIBUTE_02          = 'VALUE', 
                           ESCAPE_ON_HTTP_OUTPUT = 'Y',
                           CATTRIBUTES_ELEMENT   = 'class="fielddatabold"',
                           PROTECTION_LEVEL      = WWV_FLOW_ITEM.C_PROTECTION_CHECKSUM
                     WHERE FLOW_ID           = P_FLOW_ID
                       AND FLOW_STEP_ID      = P_DETAIL2_PAGE_ID
                       AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                       AND NAME              = L_DETAIL2_FK_ITEM_NAME;
                ELSE
                    L_DETAIL2_FK_ITEM_ID := WWV_FLOW_ID.NEXT_VAL;
                    WWV_FLOW_API.CREATE_PAGE_ITEM(
                              P_ID                       => L_DETAIL2_FK_ITEM_ID,
                              P_FLOW_ID                  => P_FLOW_ID,
                              P_FLOW_STEP_ID             => P_DETAIL2_PAGE_ID,
                              P_NAME                     => L_DETAIL2_FK_ITEM_NAME,
                              P_DATA_TYPE                => 'VARCHAR',
                              P_ITEM_PLUG_ID             => L_DETAIL2_REGION_ID,
                              P_ACCEPT_PROCESSING        => 'REPLACE_EXISTING',
                              P_ITEM_SEQUENCE            => L_DETAIL2_ITEM_SEQ,
                              P_USE_CACHE_BEFORE_DEFAULT => 'NO',
                              P_PROMPT                   => NVL(WWV_FLOW_HINT.GET_LABEL (
                                                                    P_SCHEMA      => P_DETAIL_TABLE_OWNER,
                                                                    P_TABLE_NAME  => P_DETAIL_TABLE_NAME,
                                                                    P_COLUMN_NAME => REPLACE(LA_DETAIL_LINKS(I),P_DETAIL_TABLE_NAME||'.')),
                                                                                     REPLACE(INITCAP(REPLACE(LA_DETAIL_LINKS(I),P_DETAIL_TABLE_NAME||'.')),'_',' ')),
                              P_SOURCE                   => REPLACE(LA_DETAIL_LINKS(I),P_DETAIL_TABLE_NAME||'.'),
                              P_SOURCE_TYPE              => 'DB_COLUMN',
                              P_DISPLAY_AS               => 'HIDDEN_PROTECTED',
                              P_LOV                      => '',
                              P_LOV_DISPLAY_NULL         => 'NO',
                              P_CSIZE                    => 30,
                              P_CMAXLENGTH               => 255,
                              P_CHEIGHT                  => NULL,
                              P_CATTRIBUTES              => '',
                              P_BEGIN_ON_NEW_LINE        => 'YES',
                              P_BEGIN_ON_NEW_FIELD       => 'YES',
                              P_LABEL_ALIGNMENT          => 'RIGHT',
                              P_FIELD_TEMPLATE           => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,
                              P_ITEM_TEMPLATE_OPTIONS    => GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,'ITEM'),
                              P_FIELD_ALIGNMENT          => 'LEFT',
                              P_DISPLAY_WHEN             => '',
                              P_IS_PERSISTENT            => 'Y',
                              P_SECURITY_SCHEME          => '',
                              P_PROTECTION_LEVEL         => WWV_FLOW_ITEM.C_PROTECTION_CHECKSUM,
                              P_ITEM_COMMENT             => NULL);
 
                        L_DETAIL2_ITEM_SEQ := L_DETAIL2_ITEM_SEQ + 1;
 
                    END IF;
            END LOOP;
        END IF;
 
    END IF;
 
    
    FOR C1 IN (SELECT ID
               FROM WWV_FLOW_STEP_BRANCHES
               WHERE FLOW_ID = P_FLOW_ID
               AND FLOW_STEP_ID = P_DETAIL_PAGE_ID
               AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
               AND BRANCH_WHEN_BUTTON_ID IS NOT NULL
    )
    LOOP
        L_BRANCH_SEQ := L_BRANCH_SEQ + 10;
 
        UPDATE WWV_FLOW_STEP_BRANCHES
        SET BRANCH_SEQUENCE = L_BRANCH_SEQ
        WHERE ID = C1.ID
        AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
    END LOOP;
 
   
    FOR C2 IN (SELECT ID
               FROM WWV_FLOW_STEP_BRANCHES
               WHERE FLOW_ID = P_FLOW_ID
               AND FLOW_STEP_ID = P_DETAIL_PAGE_ID
               AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
               AND BRANCH_WHEN_BUTTON_ID IS NULL
    )
    LOOP
        L_BRANCH_SEQ := L_BRANCH_SEQ + 10;
 
        UPDATE WWV_FLOW_STEP_BRANCHES
        SET BRANCH_SEQUENCE = L_BRANCH_SEQ
        WHERE ID = C2.ID
        AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
    END LOOP;
 
 EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(-20001,
                           WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.CREATE_MASTER_DETAIL',SQLERRM)
                           );
 END CREATE_3PAGE_MASTER_DETAIL;
 
 
 
 PROCEDURE CREATE_MASTER_DETAIL (
    P_FLOW_ID                   IN NUMBER   DEFAULT NULL,
    P_MASTER_PAGE_ID            IN NUMBER   DEFAULT NULL,
    P_DETAIL_PAGE_ID            IN NUMBER   DEFAULT NULL,
    P_DETAIL2_PAGE_ID           IN NUMBER   DEFAULT NULL,
    P_GROUP_NAME                IN VARCHAR2 DEFAULT NULL,
    P_LAYOUT                    IN VARCHAR2 DEFAULT '2_PAGE',
    P_USER_INTERFACE_ID         IN NUMBER,
    P_USE_UI_DEFAULT            IN VARCHAR2 DEFAULT 'Y',
    
    P_MASTER_PAGE_TITLE         IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_PAGE_TITLE         IN VARCHAR2 DEFAULT NULL,
    P_DETAIL2_PAGE_TITLE        IN VARCHAR2 DEFAULT NULL,
    P_MASTER_REGION_TITLE       IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_REGION_TITLE       IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_REGION_TITLE2      IN VARCHAR2 DEFAULT NULL,
    P_DETAIL2_REGION_TITLE      IN VARCHAR2 DEFAULT NULL,
    
    P_MASTER_PAGE_MODE          IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_PAGE_MODE          IN VARCHAR2 DEFAULT NULL,
    P_DETAIL2_PAGE_MODE         IN VARCHAR2 DEFAULT NULL,
    
    P_TAB_SET                   IN VARCHAR2 DEFAULT NULL,
    P_TAB_NAME                  IN VARCHAR2 DEFAULT NULL,
    P_TAB_TEXT                  IN VARCHAR2 DEFAULT NULL,
    
    P_NAV_LIST_ID               IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_ITEM_ID          IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_ITEM_NAME        IN VARCHAR2 DEFAULT NULL,
    P_NAV_LIST_PARENT_ITEM_ID   IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_CHILD_ITEM_NAME  IN VARCHAR2 DEFAULT NULL,
    
    P_MASTER_TABLE_OWNER        IN VARCHAR2 DEFAULT NULL,
    P_MASTER_TABLE_NAME         IN VARCHAR2 DEFAULT NULL,
    
    P_MASTER_SORT_COLUMN        IN VARCHAR2 DEFAULT NULL,
    P_MASTER_SORT_COLUMN2       IN VARCHAR2 DEFAULT NULL,
    P_INCLUDE_MASTER_REPORT     IN VARCHAR2 DEFAULT 'Y',
    P_INCLUDE_MASTER_ROW_NAV    IN VARCHAR2 DEFAULT 'Y',
    
    P_MASTER_TABLE_PK1          IN VARCHAR2 DEFAULT NULL,
    P_MASTER_TABLE_PK1_SRC_TYPE IN VARCHAR2 DEFAULT NULL,
    P_MASTER_TABLE_PK1_SRC      IN VARCHAR2 DEFAULT NULL,
    P_MASTER_TABLE_PK2          IN VARCHAR2 DEFAULT NULL,
    P_MASTER_TABLE_PK2_SRC_TYPE IN VARCHAR2 DEFAULT NULL,
    P_MASTER_TABLE_PK2_SRC      IN VARCHAR2 DEFAULT NULL,
    
    P_DETAIL_TABLE_OWNER        IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_TABLE_NAME         IN VARCHAR2 DEFAULT NULL,
    
    P_DETAIL_TABLE_PK1          IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_TABLE_PK1_SRC_TYPE IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_TABLE_PK1_SRC      IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_TABLE_PK2          IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_TABLE_PK2_SRC_TYPE IN VARCHAR2 DEFAULT NULL,
    P_DETAIL_TABLE_PK2_SRC      IN VARCHAR2 DEFAULT NULL,
    
    P_BREADCRUMB_ID              IN NUMBER   DEFAULT NULL,
    P_PARENT_BREADCRUMB_ENTRY_ID IN NUMBER   DEFAULT NULL,
    P_BREADCRUMB_NAME1           IN VARCHAR2 DEFAULT NULL,
    P_BREADCRUMB_NAME2           IN VARCHAR2 DEFAULT NULL,
    P_BREADCRUMB_NAME3           IN VARCHAR2 DEFAULT NULL
 
    )
 IS
    L_MASTER_PK_INCLUDED         BOOLEAN := FALSE;
    L_DETAIL_PK_INCLUDED         BOOLEAN := FALSE;
    L_BREADCRUMB_ENTRY_ID        NUMBER;
    L_PARENT_BREADCRUMB_ENTRY_ID NUMBER;
    L_MASTER_PK                  VARCHAR2(255);
    L_DETAIL_PK                  VARCHAR2(255);
    L_MASTER_TITLE               VARCHAR2(4000);
    L_DETAIL_TITLE               VARCHAR2(4000);
    L_MASTER_PAGE_TITLE          VARCHAR2(4000);
    L_DETAIL_PAGE_TITLE          VARCHAR2(4000);
    L_DETAIL2_PAGE_TITLE         VARCHAR2(4000);
    L_MASTER_REGION_TITLE        VARCHAR2(4000);
    L_DETAIL_REGION_TITLE        VARCHAR2(4000);
    L_DETAIL_REGION_TITLE2       VARCHAR2(4000);
    L_DETAIL2_REGION_TITLE       VARCHAR2(4000);
    L_MASTER_COL                 VARCHAR2(32767);
    L_DETAIL_COL                 VARCHAR2(32767);
    LA_MASTER_COLS               WWV_FLOW_GLOBAL.VC_ARR2;
    LA_DETAIL_COLS               WWV_FLOW_GLOBAL.VC_ARR2;
    LA_MASTER_LINKS              WWV_FLOW_GLOBAL.VC_ARR2;
    LA_DETAIL_LINKS              WWV_FLOW_GLOBAL.VC_ARR2;
 BEGIN
   
   
   
   WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
       P_FLOW_ID           => P_FLOW_ID,
       P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
    
    
    
    
    
    
    IF P_USE_UI_DEFAULT = 'N' THEN
        WWV_FLOW_HINT.G_USE_UI_DEFAULTS := FALSE;
    END IF;
 
    SELECT C003
    BULK COLLECT INTO
    LA_MASTER_COLS
    FROM WWV_FLOW_COLLECTIONS
    WHERE COLLECTION_NAME = 'MASTER_COLUMNS';
 
    SELECT C003
    BULK COLLECT INTO
    LA_DETAIL_COLS
    FROM WWV_FLOW_COLLECTIONS
    WHERE COLLECTION_NAME = 'DETAIL_COLUMNS';
 
    SELECT REPLACE(C001,'"'), REPLACE(C002,'"')
    BULK COLLECT INTO
    LA_MASTER_LINKS, LA_DETAIL_LINKS
    FROM WWV_FLOW_COLLECTIONS
    WHERE COLLECTION_NAME = 'LINK_MASTER_DETAIL'
    AND C001 IS NOT NULL
    AND C002 IS NOT NULL;
 
    
    
    
    L_MASTER_PK := P_MASTER_TABLE_PK1;
 
    FOR I IN 1..LA_MASTER_COLS.COUNT
    LOOP
      IF LA_MASTER_COLS(I) = L_MASTER_PK THEN
        L_MASTER_PK_INCLUDED := TRUE;
        EXIT;
      END IF;
    END LOOP;
 
    IF NOT L_MASTER_PK_INCLUDED THEN
      WWV_FLOW_COLLECTION.CREATE_OR_TRUNCATE_COLLECTION('MASTER_COLUMNS');
 
      WWV_FLOW_COLLECTION.ADD_MEMBER(
          P_COLLECTION_NAME => 'MASTER_COLUMNS',
          P_C001            => P_MASTER_TABLE_OWNER,
          P_C002            => P_MASTER_TABLE_NAME,
          P_C003            => L_MASTER_PK );
      FOR I IN 1..LA_MASTER_COLS.COUNT
      LOOP
          WWV_FLOW_COLLECTION.ADD_MEMBER(
              P_COLLECTION_NAME => 'MASTER_COLUMNS',
              P_C001            => P_MASTER_TABLE_OWNER,
              P_C002            => P_MASTER_TABLE_NAME,
              P_C003            => LA_MASTER_COLS(I) );
       END LOOP;
    END IF;
    
    
    
    L_DETAIL_PK := P_DETAIL_TABLE_PK1;
 
    FOR I IN 1..LA_DETAIL_COLS.COUNT
    LOOP
        IF LA_DETAIL_COLS(I) = L_DETAIL_PK THEN
            L_DETAIL_PK_INCLUDED := TRUE;
            EXIT;
        END IF;
    END LOOP;
 
    IF NOT L_DETAIL_PK_INCLUDED THEN
        WWV_FLOW_COLLECTION.CREATE_OR_TRUNCATE_COLLECTION('DETAIL_COLUMNS');
 
        WWV_FLOW_COLLECTION.ADD_MEMBER(
            P_COLLECTION_NAME => 'DETAIL_COLUMNS',
            P_C001            => P_DETAIL_TABLE_OWNER,
            P_C002            => P_DETAIL_TABLE_NAME,
            P_C003            => L_DETAIL_PK );
        FOR I IN 1..LA_DETAIL_COLS.COUNT
        LOOP
            WWV_FLOW_COLLECTION.ADD_MEMBER(
                P_COLLECTION_NAME => 'DETAIL_COLUMNS',
                P_C001            => P_DETAIL_TABLE_OWNER,
                P_C002            => P_DETAIL_TABLE_NAME,
                P_C003            => LA_DETAIL_COLS(I) );
        END LOOP;
    END IF;
 
    
    
    
    
    L_MASTER_COL         := WWV_FLOW_UTILITIES.TABLE_TO_STRING2(LA_MASTER_COLS);
    L_DETAIL_COL         := WWV_FLOW_UTILITIES.TABLE_TO_STRING2(LA_DETAIL_COLS);
 
    L_MASTER_TITLE       := INITCAP(REPLACE(P_MASTER_TABLE_NAME,'_',' '));
    L_DETAIL_TITLE       := INITCAP(REPLACE(P_DETAIL_TABLE_NAME,'_',' '));
 
    L_MASTER_PAGE_TITLE  := NVL(P_MASTER_PAGE_TITLE,L_MASTER_TITLE);
    L_DETAIL_PAGE_TITLE  := NVL(P_DETAIL_PAGE_TITLE,'Master Detail');
    L_DETAIL2_PAGE_TITLE := NVL(P_DETAIL2_PAGE_TITLE,L_DETAIL_TITLE);
 
    IF P_USE_UI_DEFAULT = 'Y' THEN
        L_MASTER_REGION_TITLE := NVL(P_MASTER_REGION_TITLE,NVL(WWV_FLOW_HINT.GET_REPORT_REGION_TITLE (
                                 P_SCHEMA      => P_MASTER_TABLE_OWNER,
                                 P_TABLE_NAME  => P_MASTER_TABLE_NAME
                                 ),L_MASTER_TITLE));
        L_DETAIL_REGION_TITLE := NVL(P_DETAIL_REGION_TITLE,NVL(WWV_FLOW_HINT.GET_FORM_REGION_TITLE (
                                 P_SCHEMA      => P_MASTER_TABLE_OWNER,
                                 P_TABLE_NAME  => P_MASTER_TABLE_NAME
                                 ),'Edit '||L_MASTER_TITLE));
        L_DETAIL_REGION_TITLE2 := NVL(P_DETAIL_REGION_TITLE2,NVL(WWV_FLOW_HINT.GET_REPORT_REGION_TITLE (
                                 P_SCHEMA      => P_DETAIL_TABLE_OWNER,
                                 P_TABLE_NAME  => P_DETAIL_TABLE_NAME
                                 ),L_DETAIL_TITLE||' Detail'));
        L_DETAIL2_REGION_TITLE := NVL(P_DETAIL2_REGION_TITLE,NVL(WWV_FLOW_HINT.GET_FORM_REGION_TITLE (
                                 P_SCHEMA      => P_DETAIL_TABLE_OWNER,
                                 P_TABLE_NAME  => P_DETAIL_TABLE_NAME
                                 ),'Edit '||L_DETAIL_TITLE));
    ELSE
        L_MASTER_REGION_TITLE := NVL(P_MASTER_REGION_TITLE,L_MASTER_TITLE);
        L_DETAIL_REGION_TITLE := NVL(P_DETAIL_REGION_TITLE,'Edit '||L_MASTER_TITLE);
        L_DETAIL_REGION_TITLE2 := NVL(P_DETAIL_REGION_TITLE2,L_DETAIL_TITLE||' Detail');
        L_DETAIL2_REGION_TITLE := NVL(P_DETAIL2_REGION_TITLE,'Edit '||L_DETAIL_TITLE);
    END IF;
 
    IF P_LAYOUT = '3_PAGE' THEN
        WWV_FLOW_WIZARD_API.CREATE_3PAGE_MASTER_DETAIL (
            P_FLOW_ID                   => P_FLOW_ID,
            P_MASTER_PAGE_ID            => P_MASTER_PAGE_ID,
            P_DETAIL_PAGE_ID            => P_DETAIL_PAGE_ID,
            P_DETAIL2_PAGE_ID           => P_DETAIL2_PAGE_ID,
            
            P_MASTER_PAGE_TITLE         => L_MASTER_PAGE_TITLE,
            P_DETAIL_PAGE_TITLE         => L_DETAIL_PAGE_TITLE,
            P_DETAIL2_PAGE_TITLE        => L_DETAIL2_PAGE_TITLE,
            P_MASTER_REGION_TITLE       => L_MASTER_REGION_TITLE,
            P_DETAIL_REGION_TITLE       => L_DETAIL_REGION_TITLE,
            P_DETAIL_REGION_TITLE2      => L_DETAIL_REGION_TITLE2,
            P_DETAIL2_REGION_TITLE      => L_DETAIL2_REGION_TITLE,
            
            P_GROUP_NAME                => P_GROUP_NAME,
            
            P_MASTER_PAGE_MODE          => P_MASTER_PAGE_MODE,
            P_DETAIL_PAGE_MODE          => P_DETAIL_PAGE_MODE,
            P_DETAIL2_PAGE_MODE         => P_DETAIL2_PAGE_MODE,
            
            P_USER_INTERFACE_ID         => P_USER_INTERFACE_ID,
            
            P_TAB_SET                   => P_TAB_SET,
            P_TAB_NAME                  => P_TAB_NAME,
            P_TAB_TEXT                  => P_TAB_TEXT,
            
            P_NAV_LIST_ID               => P_NAV_LIST_ID,
            P_NAV_LIST_ITEM_ID          => P_NAV_LIST_ITEM_ID,
            P_NAV_LIST_ITEM_NAME        => P_NAV_LIST_ITEM_NAME,
            P_NAV_LIST_PARENT_ITEM_ID   => P_NAV_LIST_PARENT_ITEM_ID,
            P_NAV_LIST_CHILD_ITEM_NAME  => P_NAV_LIST_CHILD_ITEM_NAME,
            
            P_MASTER_TABLE_OWNER        => P_MASTER_TABLE_OWNER,
            P_MASTER_TABLE_NAME         => P_MASTER_TABLE_NAME,
            P_MASTER_SORT_COLUMN        => P_MASTER_SORT_COLUMN,
            P_MASTER_SORT_COLUMN2       => P_MASTER_SORT_COLUMN2,
            P_MASTER_DISPLAY_COLUMN     => L_MASTER_COL,
            P_INCLUDE_MASTER_REPORT     => P_INCLUDE_MASTER_REPORT,
            P_INCLUDE_MASTER_ROW_NAV    => P_INCLUDE_MASTER_ROW_NAV,
            
            P_MASTER_TABLE_PK1          => P_MASTER_TABLE_PK1,
            P_MASTER_TABLE_PK1_SRC_TYPE => P_MASTER_TABLE_PK1_SRC_TYPE,
            P_MASTER_TABLE_PK1_SRC      => P_MASTER_TABLE_PK1_SRC,
            P_MASTER_TABLE_PK2          => P_MASTER_TABLE_PK2,
            P_MASTER_TABLE_PK2_SRC_TYPE => P_MASTER_TABLE_PK2_SRC_TYPE,
            P_MASTER_TABLE_PK2_SRC      => P_MASTER_TABLE_PK2_SRC,
            
            P_DETAIL_TABLE_OWNER        => P_DETAIL_TABLE_OWNER,
            P_DETAIL_TABLE_NAME         => P_DETAIL_TABLE_NAME,
            P_DETAIL_DISPLAY_COLUMN     => L_DETAIL_COL,
            
            P_DETAIL_TABLE_PK1          => P_DETAIL_TABLE_PK1,
            P_DETAIL_TABLE_PK1_SRC_TYPE => P_DETAIL_TABLE_PK1_SRC_TYPE,
            P_DETAIL_TABLE_PK1_SRC      => P_DETAIL_TABLE_PK1_SRC,
            P_DETAIL_TABLE_PK2          => P_DETAIL_TABLE_PK2,
            P_DETAIL_TABLE_PK2_SRC_TYPE => P_DETAIL_TABLE_PK2_SRC_TYPE,
            P_DETAIL_TABLE_PK2_SRC      => P_DETAIL_TABLE_PK2_SRC,
            
            P_MASTER_LINK               => WWV_FLOW_UTILITIES.TABLE_TO_STRING2(LA_MASTER_LINKS),
            P_DETAIL_LINK               => WWV_FLOW_UTILITIES.TABLE_TO_STRING2(LA_DETAIL_LINKS)
        );
 
         L_PARENT_BREADCRUMB_ENTRY_ID := P_PARENT_BREADCRUMB_ENTRY_ID;
 
         IF P_INCLUDE_MASTER_REPORT = 'Y' THEN
             L_BREADCRUMB_ENTRY_ID  := WWV_FLOW_ID.NEXT_VAL;
 
             CREATE_BREADCRUMB_REGION (
                 P_APPLICATION_ID             => P_FLOW_ID,
                 P_PAGE_ID                    => P_MASTER_PAGE_ID,
                 P_SEQ                        => 10,
                 P_BREADCRUMB_ID              => P_BREADCRUMB_ID,
                 P_BREADCRUMB_ENTRY_ID        => L_BREADCRUMB_ENTRY_ID,
                 P_BREADCRUMB_ENTRY_NAME      => NVL(P_BREADCRUMB_NAME1, L_MASTER_PAGE_TITLE),
                 P_PARENT_BREADCRUMB_ENTRY_ID => L_PARENT_BREADCRUMB_ENTRY_ID );
 
             L_PARENT_BREADCRUMB_ENTRY_ID := L_BREADCRUMB_ENTRY_ID;
         END IF;
 
         L_BREADCRUMB_ENTRY_ID  := WWV_FLOW_ID.NEXT_VAL;
         CREATE_BREADCRUMB_REGION (
             P_APPLICATION_ID             => P_FLOW_ID,
             P_PAGE_ID                    => P_DETAIL_PAGE_ID,
             P_SEQ                        => 10,
             P_BREADCRUMB_ID              => P_BREADCRUMB_ID,
             P_BREADCRUMB_ENTRY_ID        => L_BREADCRUMB_ENTRY_ID,
             P_BREADCRUMB_ENTRY_NAME      => NVL(P_BREADCRUMB_NAME2, L_DETAIL_PAGE_TITLE),
             P_PARENT_BREADCRUMB_ENTRY_ID => L_PARENT_BREADCRUMB_ENTRY_ID );
 
         L_PARENT_BREADCRUMB_ENTRY_ID := L_BREADCRUMB_ENTRY_ID;
 
         CREATE_BREADCRUMB_REGION (
             P_APPLICATION_ID             => P_FLOW_ID,
             P_PAGE_ID                    => P_DETAIL2_PAGE_ID,
             P_SEQ                        => 10,
             P_BREADCRUMB_ID              => P_BREADCRUMB_ID,
             P_BREADCRUMB_ENTRY_NAME      => NVL(P_BREADCRUMB_NAME3, L_DETAIL2_PAGE_TITLE),
             P_PARENT_BREADCRUMB_ENTRY_ID => L_PARENT_BREADCRUMB_ENTRY_ID );
 
    ELSIF P_LAYOUT = '2_PAGE' THEN
        CREATE_2PAGE_MASTER_DETAIL (
            P_FLOW_ID                   => P_FLOW_ID,
            P_MASTER_PAGE_ID            => P_MASTER_PAGE_ID,
            P_DETAIL_PAGE_ID            => P_DETAIL_PAGE_ID,
            
            P_MASTER_PAGE_TITLE         => L_MASTER_PAGE_TITLE,
            P_DETAIL_PAGE_TITLE         => L_DETAIL_PAGE_TITLE,
            P_MASTER_REGION_TITLE       => L_MASTER_REGION_TITLE,
            P_DETAIL_REGION_TITLE       => L_DETAIL_REGION_TITLE,
            P_DETAIL_REGION_TITLE2      => L_DETAIL_REGION_TITLE2,
            
            P_GROUP_NAME                => P_GROUP_NAME,
            
            P_MASTER_PAGE_MODE          => P_MASTER_PAGE_MODE,
            P_DETAIL_PAGE_MODE          => P_DETAIL_PAGE_MODE,
            
            P_USER_INTERFACE_ID         => P_USER_INTERFACE_ID,
            
            P_TAB_SET                   => P_TAB_SET,
            P_TAB_NAME                  => P_TAB_NAME,
            P_TAB_TEXT                  => P_TAB_TEXT,
            
            P_NAV_LIST_ID               => P_NAV_LIST_ID,
            P_NAV_LIST_ITEM_ID          => P_NAV_LIST_ITEM_ID,
            P_NAV_LIST_ITEM_NAME        => P_NAV_LIST_ITEM_NAME,
            P_NAV_LIST_PARENT_ITEM_ID   => P_NAV_LIST_PARENT_ITEM_ID,
            P_NAV_LIST_CHILD_ITEM_NAME  => P_NAV_LIST_CHILD_ITEM_NAME,
            
            P_MASTER_TABLE_OWNER        => P_MASTER_TABLE_OWNER,
            P_MASTER_TABLE_NAME         => P_MASTER_TABLE_NAME,
            P_MASTER_SORT_COLUMN        => P_MASTER_SORT_COLUMN,
            P_MASTER_SORT_COLUMN2       => P_MASTER_SORT_COLUMN2,
            P_MASTER_DISPLAY_COLUMN     => L_MASTER_COL,
            P_INCLUDE_MASTER_REPORT     => P_INCLUDE_MASTER_REPORT,
            P_INCLUDE_MASTER_ROW_NAV    => P_INCLUDE_MASTER_ROW_NAV,
            
            P_MASTER_TABLE_PK1          => P_MASTER_TABLE_PK1,
            P_MASTER_TABLE_PK1_SRC_TYPE => P_MASTER_TABLE_PK1_SRC_TYPE,
            P_MASTER_TABLE_PK1_SRC      => P_MASTER_TABLE_PK1_SRC,
            P_MASTER_TABLE_PK2          => P_MASTER_TABLE_PK2,
            P_MASTER_TABLE_PK2_SRC_TYPE => P_MASTER_TABLE_PK2_SRC_TYPE,
            P_MASTER_TABLE_PK2_SRC      => P_MASTER_TABLE_PK2_SRC,
            
            P_DETAIL_TABLE_OWNER        => P_DETAIL_TABLE_OWNER,
            P_DETAIL_TABLE_NAME         => P_DETAIL_TABLE_NAME,
            P_DETAIL_DISPLAY_COLUMN     => L_DETAIL_COL,
             
            P_DETAIL_TABLE_PK1          => P_DETAIL_TABLE_PK1,
            P_DETAIL_TABLE_PK1_SRC_TYPE => P_DETAIL_TABLE_PK1_SRC_TYPE,
            P_DETAIL_TABLE_PK1_SRC      => P_DETAIL_TABLE_PK1_SRC,
            P_DETAIL_TABLE_PK2          => P_DETAIL_TABLE_PK2,
            P_DETAIL_TABLE_PK2_SRC_TYPE => P_DETAIL_TABLE_PK2_SRC_TYPE,
            P_DETAIL_TABLE_PK2_SRC      => P_DETAIL_TABLE_PK2_SRC,
            
            P_MASTER_LINK               => WWV_FLOW_UTILITIES.TABLE_TO_STRING2(LA_MASTER_LINKS),
            P_DETAIL_LINK               => WWV_FLOW_UTILITIES.TABLE_TO_STRING2(LA_DETAIL_LINKS)
            );
 
         L_PARENT_BREADCRUMB_ENTRY_ID := P_PARENT_BREADCRUMB_ENTRY_ID;
 
         IF P_INCLUDE_MASTER_REPORT = 'Y' THEN
             L_BREADCRUMB_ENTRY_ID  := WWV_FLOW_ID.NEXT_VAL;
 
             CREATE_BREADCRUMB_REGION (
                 P_APPLICATION_ID             => P_FLOW_ID,
                 P_PAGE_ID                    => P_MASTER_PAGE_ID,
                 P_SEQ                        => 10,
                 P_BREADCRUMB_ID              => P_BREADCRUMB_ID,
                 P_BREADCRUMB_ENTRY_ID        => L_BREADCRUMB_ENTRY_ID,
                 P_BREADCRUMB_ENTRY_NAME      => NVL(P_BREADCRUMB_NAME1, L_MASTER_PAGE_TITLE),
                 P_PARENT_BREADCRUMB_ENTRY_ID => L_PARENT_BREADCRUMB_ENTRY_ID );
 
             L_PARENT_BREADCRUMB_ENTRY_ID := L_BREADCRUMB_ENTRY_ID;
         END IF;
 
         CREATE_BREADCRUMB_REGION (
             P_APPLICATION_ID             => P_FLOW_ID,
             P_PAGE_ID                    => P_DETAIL_PAGE_ID,
             P_SEQ                        => 10,
             P_BREADCRUMB_ID              => P_BREADCRUMB_ID,
             P_BREADCRUMB_ENTRY_NAME      => NVL(P_BREADCRUMB_NAME2, L_DETAIL_PAGE_TITLE),
             P_PARENT_BREADCRUMB_ENTRY_ID => L_PARENT_BREADCRUMB_ENTRY_ID );
 
    END IF;
 
 END CREATE_MASTER_DETAIL;
 
 FUNCTION CREATE_ACL_TAB_PRIV (
    P_FLOW_ID      IN NUMBER) RETURN BOOLEAN
 IS
    L_SCHEMA      VARCHAR2(255);
    L_FND         BOOLEAN := FALSE;
    L_SEQ_EXISTS  BOOLEAN := FALSE;
    L_CHECK_PRIV  BOOLEAN := FALSE;
 BEGIN
    FOR C1 IN (SELECT OWNER
               FROM WWV_FLOWS
               WHERE ID = P_FLOW_ID
               AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID)
    LOOP
        L_SCHEMA := C1.OWNER;
    END LOOP;
 
    FOR C1 IN (SELECT 1
               FROM SYS.DBA_OBJECTS
               WHERE OBJECT_NAME = 'APEX_ACCESS_CONTROL_SEQ'
               AND OBJECT_TYPE = 'SEQUENCE'
               AND OWNER = L_SCHEMA)
    LOOP
      L_SEQ_EXISTS := TRUE;
    END LOOP;
 
    IF NOT L_SEQ_EXISTS OR
       NOT TABLE_VIEW_EXISTS(P_NAME => 'APEX_ACCESS_SETUP',P_OWNER => L_SCHEMA) OR
       NOT TABLE_VIEW_EXISTS(P_NAME => 'APEX_ACCESS_CONTROL',P_OWNER => L_SCHEMA) THEN
        L_CHECK_PRIV := TRUE;
    END IF;
 
    IF L_CHECK_PRIV THEN
        FOR C1 IN (SELECT NULL
                     FROM SYS.DBA_SYS_PRIVS
                    WHERE GRANTEE = L_SCHEMA
                      AND PRIVILEGE = 'CREATE TABLE'
                      AND EXISTS (SELECT NULL
                                    FROM SYS.DBA_SYS_PRIVS
                                   WHERE GRANTEE = L_SCHEMA
                                     AND PRIVILEGE = 'CREATE TRIGGER')
                      AND EXISTS (SELECT NULL
                                    FROM SYS.DBA_SYS_PRIVS
                                   WHERE GRANTEE = L_SCHEMA
                                     AND PRIVILEGE = 'CREATE SEQUENCE')) LOOP
            L_FND := TRUE;
          END LOOP;
 
        RETURN L_FND;
    ELSE
        RETURN TRUE;
    END IF;
 END CREATE_ACL_TAB_PRIV;
 
 PROCEDURE CREATE_ACCESS_CONTROL_TABLES (
    P_SCHEMA    IN VARCHAR2,
    P_FLOW_ID   IN NUMBER
    )
 IS
   L_SCHEMA       VARCHAR2(255)   := P_SCHEMA;
 
   S1             WWV_FLOW_GLOBAL.VC_ARR2;
   S2             WWV_FLOW_GLOBAL.VC_ARR2;
   L_INSERT       VARCHAR2(32767);
   L_SETUP_CNT    PLS_INTEGER := 0;
   L_SEQ_EXISTS   BOOLEAN := FALSE;
 BEGIN
   WWV_FLOW_SW_API.CHECK_PRIV (
    P_SCHEMA => L_SCHEMA
    );
 
   FOR C1 IN (SELECT 1
              FROM SYS.DBA_OBJECTS
              WHERE OBJECT_NAME = 'APEX_ACCESS_CONTROL_SEQ'
              AND OBJECT_TYPE = 'SEQUENCE'
              AND OWNER = L_SCHEMA)
   LOOP
     L_SEQ_EXISTS := TRUE;
   END LOOP;
 
   IF NOT L_SEQ_EXISTS THEN
     WWV_FLOW_DYNAMIC_EXEC.RUN_BLOCK(
                  P_SQL =>  'CREATE SEQUENCE APEX_ACCESS_CONTROL_SEQ',
                  P_USER => L_SCHEMA);
   END IF;
 
   IF NOT TABLE_VIEW_EXISTS(P_NAME => 'APEX_ACCESS_SETUP',P_OWNER => P_SCHEMA) THEN
       S1(1) := 'CREATE TABLE  APEX_ACCESS_SETUP'||WWV_FLOW.LF
               ||'( ID NUMBER,'||WWV_FLOW.LF
                 ||'APPLICATION_MODE VARCHAR2(255),'||WWV_FLOW.LF
                 ||'APPLICATION_ID NUMBER,'||WWV_FLOW.LF
                 ||'CONSTRAINT APEX_ACCESS_SETUP_PK PRIMARY KEY (ID) ENABLE,'||WWV_FLOW.LF
                 ||'CONSTRAINT APEX_ACCESS_SETUP_UK UNIQUE (APPLICATION_ID) ENABLE'||WWV_FLOW.LF
                 ||')'||WWV_FLOW.LF;
 
       S1(2) := 'create or replace trigger  bi_apex_access_setup'||WWV_FLOW.LF
               ||'before insert or update on apex_access_setup '||WWV_FLOW.LF
               ||'for each row'||WWV_FLOW.LF
               ||'begin'||WWV_FLOW.LF
               ||'if inserting and :new.id is null then'||WWV_FLOW.LF
               ||'select apex_access_control_seq.nextval into :new.id from sys.dual;'||WWV_FLOW.LF
               ||'end if;'||WWV_FLOW.LF
               ||'if :new.application_id is null then'||WWV_FLOW.LF
               ||':new.application_id := v(''APP_ID'');'||WWV_FLOW.LF
               ||'end if;'||WWV_FLOW.LF
               ||'end;'||WWV_FLOW.LF;
 
       FOR I IN 1..S1.COUNT
       LOOP
           WWV_FLOW_DYNAMIC_EXEC.RUN_BLOCK(
                P_SQL =>  S1(I),
                P_USER => L_SCHEMA);
       END LOOP;
   END IF;
 
   L_SETUP_CNT := WWV_FLOW_DYNAMIC_EXEC.GET_FIRST_ROW_RESULT_NUMBER (
                  P_SQL_STATEMENT   => 'select count(*) cnt from apex_access_setup where application_id = '||P_FLOW_ID,
                  P_PARSE_AS_SCHEMA => L_SCHEMA );
 
   IF L_SETUP_CNT = 0 THEN
       L_INSERT := 'insert into apex_access_setup (application_mode, application_id)'||WWV_FLOW.LF
                   ||'values (''ALL'','||P_FLOW_ID||')'||WWV_FLOW.LF;
 
       WWV_FLOW_DYNAMIC_EXEC.RUN_BLOCK(
                P_SQL =>  L_INSERT,
                P_USER => L_SCHEMA);
   END IF;
 
 
   IF NOT TABLE_VIEW_EXISTS(P_NAME => 'APEX_ACCESS_CONTROL',P_OWNER => P_SCHEMA) THEN
       S2(1) := 'CREATE TABLE APEX_ACCESS_CONTROL'||WWV_FLOW.LF
               ||'(ID NUMBER,'||WWV_FLOW.LF
               ||'ADMIN_USERNAME VARCHAR2(255),'||WWV_FLOW.LF
               ||'ADMIN_PRIVILEGES VARCHAR2(255),'||WWV_FLOW.LF
               ||'SETUP_ID NUMBER, '||WWV_FLOW.LF
                 ||'CREATED_BY VARCHAR2(255),'||WWV_FLOW.LF
                 ||'CREATED_ON DATE,'||WWV_FLOW.LF
                 ||'UPDATED_ON DATE, '||WWV_FLOW.LF
                 ||'UPDATED_BY VARCHAR2(255), '||WWV_FLOW.LF
                 ||' CONSTRAINT APEX_ACCESS_CONTROL_PK PRIMARY KEY (ID) ENABLE,'||WWV_FLOW.LF
                 ||' CONSTRAINT APEX_ACCESS_CONTROL_UK UNIQUE (ADMIN_USERNAME,SETUP_ID) ENABLE,'||WWV_FLOW.LF
                 ||' CONSTRAINT APEX_ACCESS_CONTROL_FK FOREIGN KEY (SETUP_ID)'||WWV_FLOW.LF
                 ||'  REFERENCES  APEX_ACCESS_SETUP (ID) ENABLE'||WWV_FLOW.LF
               ||' )'||WWV_FLOW.LF;
 
       S2(2) := 'create index apex_access_control_fk_idx on apex_access_control (setup_id)';
 
       S2(3) := 'create or replace trigger  bi_apex_access_control'||WWV_FLOW.LF
               ||'  before insert or update on apex_access_control'||WWV_FLOW.LF
               ||'  for each row'||WWV_FLOW.LF
               ||'begin'||WWV_FLOW.LF
               ||'    if inserting and :new.id is null then'||WWV_FLOW.LF
               ||'        select apex_access_control_seq.nextval into :new.id from sys.dual;'||WWV_FLOW.LF
               ||'    end if;'||WWV_FLOW.LF
               ||'    if inserting then'||WWV_FLOW.LF
               ||'        :new.created_by := v(''USER'');'||WWV_FLOW.LF
               ||'        :new.created_on := sysdate;'||WWV_FLOW.LF
               ||'    end if;'||WWV_FLOW.LF
               ||'    if updating then'||WWV_FLOW.LF
               ||'        :new.updated_by := v(''USER'');'||WWV_FLOW.LF
               ||'        :new.updated_on := sysdate;'||WWV_FLOW.LF
               ||'    end if;'||WWV_FLOW.LF
               ||'end; '||WWV_FLOW.LF;
 
 
       FOR I IN 1..S2.COUNT
       LOOP
           WWV_FLOW_DYNAMIC_EXEC.RUN_BLOCK(
                P_SQL =>  S2(I),
                P_USER => L_SCHEMA);
       END LOOP;
   END IF;
 EXCEPTION WHEN OTHERS THEN
     RAISE_APPLICATION_ERROR(-20001,WWV_FLOW_LANG.SYSTEM_MESSAGE('ACCESS_CONTROL_CREATE_TABLE_ERROR',SQLERRM));
 END CREATE_ACCESS_CONTROL_TABLES;
 
 
 PROCEDURE CREATE_ACCESS_CONTROL (
    P_FLOW_ID                  IN NUMBER   DEFAULT NULL,
    P_PAGE_ID                  IN NUMBER   DEFAULT NULL,
    P_PAGE_NAME                IN VARCHAR2 DEFAULT NULL,
    P_PAGE_MODE                IN VARCHAR2,
    P_USER_INTERFACE_ID        IN NUMBER,
    
    P_TAB_SET                  IN VARCHAR2 DEFAULT NULL,
    P_TAB_NAME                 IN VARCHAR2 DEFAULT NULL, 
    P_TAB_TEXT                 IN VARCHAR2 DEFAULT NULL,
    
    P_NAV_LIST_ID              IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_ITEM_ID         IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_ITEM_NAME       IN VARCHAR2 DEFAULT NULL,
    P_NAV_LIST_PARENT_ITEM_ID  IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_CHILD_ITEM_NAME IN VARCHAR2 DEFAULT NULL,
    
    P_GROUP_NAME               IN VARCHAR2 DEFAULT NULL
    )
 IS
    
    L_SCHEMA              VARCHAR2(255);
    L_ACCESS_CONTROL_TAB  VARCHAR2(255) := 'APEX_ACCESS_CONTROL';
 
    
    L_GROUP_ID            NUMBER := NULL;
 
    
    L_ACCESS_MODE_REGION  NUMBER;
    L_SAVE_BUTTON_ID      NUMBER;
    L_LOV_ID              NUMBER;
    L_LOV_NAME            VARCHAR2(4000);
    L_LOV_QUERY           VARCHAR2(4000);
 
    
    L_QUERY               VARCHAR2(32767);
    L_USER_PRIV_REGION    NUMBER;
    L_SUBMIT_BUTTON_ID    NUMBER;
    L_DELETE_BUTTON_ID    NUMBER;
    L_ADD_BUTTON_ID       NUMBER;
    L_GO_BUTTON_ID        NUMBER;
    L_SHORTCUT_NAME       VARCHAR2(4000);
    L_SHORTCUT            VARCHAR2(4000);
    L_PRIV_LOV_ID         NUMBER;
    L_PRIV_LOV_NAME       VARCHAR2(4000);
 
    
    L_AC_ADMIN_FOUND      BOOLEAN := FALSE;
    L_AC_EDIT_FOUND       BOOLEAN := FALSE;
    L_AC_VIEW_FOUND       BOOLEAN := FALSE;
 BEGIN
   
   
   
   WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
       P_FLOW_ID           => P_FLOW_ID,
       P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
      FOR C1 IN (SELECT OWNER
                 FROM WWV_FLOWS
                 WHERE ID = P_FLOW_ID
                 AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID)
      LOOP
          L_SCHEMA := C1.OWNER;
      END LOOP;
 
      
      
      
      CREATE_ACCESS_CONTROL_TABLES(P_SCHEMA => L_SCHEMA, P_FLOW_ID => P_FLOW_ID);
 
      
      
      
      IF P_GROUP_NAME IS NOT NULL THEN
          L_GROUP_ID := WWV_FLOW_UTILITIES.GET_PAGE_GROUP_ID(P_GROUP_NAME => P_GROUP_NAME, P_APPLICATION_ID => P_FLOW_ID);
          
          IF L_GROUP_ID IS NULL THEN
              L_GROUP_ID := WWV_FLOW_ID.NEXT_VAL;
              WWV_FLOW_API.CREATE_PAGE_GROUP(P_ID => L_GROUP_ID, P_FLOW_ID => P_FLOW_ID, P_GROUP_NAME => P_GROUP_NAME);
          END IF;
      END IF;
 
      
    
    
    WWV_FLOW_API.CREATE_PAGE(
          P_ID                  => P_PAGE_ID,
          P_FLOW_ID             => P_FLOW_ID,
          P_TAB_SET             => REPLACE(P_TAB_SET,'%null%',NULL),
          P_NAME                => P_PAGE_NAME,
          P_PAGE_MODE           => P_PAGE_MODE,
          P_GROUP_ID            => L_GROUP_ID,
          P_USER_INTERFACE_ID   => P_USER_INTERFACE_ID,
          P_RELOAD_ON_SUBMIT    => 'A',
          P_PAGE_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_PAGE_TEMPLATE, 'PAGE'),
          P_STEP_TITLE          => P_PAGE_NAME,
          P_STEP_SUB_TITLE      => P_PAGE_NAME,
          P_STEP_SUB_TITLE_TYPE => 'TEXT_WITH_SUBSTITUTIONS',
          P_WELCOME_TEXT        => '',
          P_BOX_WELCOME_TEXT    => '',
          P_BOX_FOOTER_TEXT     => '',
          P_FOOTER_TEXT         => '',
          P_PROTECTION_LEVEL    => WWV_FLOW_PAGE.C_PROTECTION_CHECKSUM);
 
    IF P_NAV_LIST_ID IS NOT NULL THEN
        
        CREATE_NAVIGATION_LIST_ITEM (
            P_FLOW_ID                  => P_FLOW_ID,
            P_PAGE_ID                  => P_PAGE_ID,
            P_PAGE_NAME                => P_PAGE_NAME,
            P_NAV_LIST_ID              => P_NAV_LIST_ID,
            P_NAV_LIST_ITEM_ID         => P_NAV_LIST_ITEM_ID,
            P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_ITEM_NAME,
            P_NAV_LIST_PARENT_ITEM_ID  => P_NAV_LIST_PARENT_ITEM_ID,
            P_NAV_LIST_CHILD_ITEM_NAME => P_NAV_LIST_CHILD_ITEM_NAME);
    ELSE
        
        IF REPLACE(P_TAB_SET,'%null%',NULL) IS NOT NULL THEN
            CREATE_TAB (
                P_FLOW_ID  => P_FLOW_ID,
                P_PAGE_ID  => P_PAGE_ID,
                P_TAB_SET  => P_TAB_SET,
                P_TAB_NAME => P_TAB_NAME,
                P_TAB_TEXT => P_TAB_TEXT);
        END IF;
    END IF;
 
    
    
    
    L_ACCESS_MODE_REGION := WWV_FLOW_ID.NEXT_VAL;
    WWV_FLOW_API.CREATE_PAGE_PLUG (
      P_ID                          => L_ACCESS_MODE_REGION,
      P_FLOW_ID                     => P_FLOW_ID,
      P_PAGE_ID                     => P_PAGE_ID,
      P_PLUG_NAME                   => WWV_FLOW_LANG.SYSTEM_MESSAGE('ACCESS_CONTROL_APP_ADMIN'),
      P_PLUG_TEMPLATE               => GET_DEFAULT_TEMPLATE_ID(P_FLOW_ID=>P_FLOW_ID,P_TEMPLATE_TYPE=>'REGION'),
      P_REGION_TEMPLATE_OPTIONS     => GET_PRESET_TEMPLATE_OPTIONS (GET_DEFAULT_TEMPLATE_ID(P_FLOW_ID=>P_FLOW_ID,P_TEMPLATE_TYPE=>'REGION'),'REGION'),
      P_PLUG_DISPLAY_SEQUENCE       => 10,
      P_PLUG_DISPLAY_POINT          => 'BODY',
      P_PLUG_ITEM_DISPLAY_POINT     => 'ABOVE',
      P_PLUG_SOURCE                 => NULL,
      P_PLUG_SOURCE_TYPE            => WWV_FLOW_REGION_NATIVE.C_STATIC,
      P_PLUG_COMMENT                => '');
 
    
    L_LOV_NAME := 'APEX_APPLICATION_MODE';
    FOR C1 IN (SELECT ID
               FROM WWV_FLOW_LISTS_OF_VALUES$
               WHERE LOV_NAME = L_LOV_NAME
               AND FLOW_ID = P_FLOW_ID)
    LOOP
        L_LOV_ID := C1.ID;
    END LOOP;
    IF L_LOV_ID IS NULL THEN
        L_LOV_ID := WWV_FLOW_ID.NEXT_VAL;
        WWV_FLOW_API.CREATE_LIST_OF_VALUES (
            P_ID       => L_LOV_ID,
            P_FLOW_ID  => P_FLOW_ID,
            P_LOV_NAME => L_LOV_NAME,
            P_LOV_QUERY=> '.'||TO_CHAR(L_LOV_ID)||'.');
 
        WWV_FLOW_API.CREATE_STATIC_LOV_DATA (
            P_LOV_ID            => L_LOV_ID,
            P_LOV_DISP_SEQUENCE => 10,
            P_LOV_DISP_VALUE    => WWV_FLOW_LANG.SYSTEM_MESSAGE('ACCESS_CONTROL_MODE1'),
            P_LOV_RETURN_VALUE  => 'ALL');
 
        WWV_FLOW_API.CREATE_STATIC_LOV_DATA (
            P_LOV_ID            => L_LOV_ID,
            P_LOV_DISP_SEQUENCE => 20,
            P_LOV_DISP_VALUE    => WWV_FLOW_LANG.SYSTEM_MESSAGE('ACCESS_CONTROL_MODE2'),
            P_LOV_RETURN_VALUE  => 'RESTRICTED');
 
        WWV_FLOW_API.CREATE_STATIC_LOV_DATA (
            P_LOV_ID            => L_LOV_ID,
            P_LOV_DISP_SEQUENCE => 30,
            P_LOV_DISP_VALUE    => WWV_FLOW_LANG.SYSTEM_MESSAGE('ACCESS_CONTROL_MODE3'),
            P_LOV_RETURN_VALUE  => 'PUBLIC_RESTRICTED');
 
        WWV_FLOW_API.CREATE_STATIC_LOV_DATA (
            P_LOV_ID            => L_LOV_ID,
            P_LOV_DISP_SEQUENCE => 40,
            P_LOV_DISP_VALUE    => WWV_FLOW_LANG.SYSTEM_MESSAGE('ACCESS_CONTROL_MODE4'),
            P_LOV_RETURN_VALUE  => 'ADMIN_ONLY');
    END IF;
    L_LOV_QUERY := '.'||TO_CHAR(L_LOV_ID)||'.';
    
 
    WWV_FLOW_API.CREATE_PAGE_ITEM(
      P_FLOW_ID                 => P_FLOW_ID,
      P_FLOW_STEP_ID            => P_PAGE_ID,
      P_NAME                    =>'P'||P_PAGE_ID||'_APPLICATION_MODE',
      P_DATA_TYPE               => 'VARCHAR',
      P_ACCEPT_PROCESSING       => 'REPLACE_EXISTING',
      P_ITEM_SEQUENCE           => 10,
      P_ITEM_PLUG_ID            => L_ACCESS_MODE_REGION,
      P_USE_CACHE_BEFORE_DEFAULT=> 'NO',
      P_ITEM_DEFAULT            => 'ALL',
      P_ITEM_DEFAULT_TYPE       => 'STATIC_TEXT_WITH_SUBSTITUTIONS',
      P_PROMPT                  =>WWV_FLOW_LANG.SYSTEM_MESSAGE('ACCESS_CONTROL_APP_MODE'),
      P_SOURCE                  =>'APPLICATION_MODE',
      P_SOURCE_TYPE             => 'DB_COLUMN',
      P_DISPLAY_AS              => 'RADIOGROUP',
      P_NAMED_LOV               => L_LOV_NAME,
      P_LOV                     => L_LOV_QUERY,
      P_LOV_DISPLAY_NULL        => 'NO',
      P_CSIZE                   => 32,
      P_CMAXLENGTH              => 255,
      P_CHEIGHT                 => 1,
      P_BEGIN_ON_NEW_LINE       => 'YES',
      P_BEGIN_ON_NEW_FIELD      => 'YES',
      P_LABEL_ALIGNMENT         => 'RIGHT-TOP',
      P_FIELD_ALIGNMENT         => 'LEFT',
      P_FIELD_TEMPLATE          => GET_DEFAULT_TEMPLATE_ID(P_FLOW_ID=>P_FLOW_ID,P_TEMPLATE_TYPE=>'LABEL'),
      P_ITEM_TEMPLATE_OPTIONS   => GET_PRESET_TEMPLATE_OPTIONS (GET_DEFAULT_TEMPLATE_ID(P_FLOW_ID=>P_FLOW_ID,P_TEMPLATE_TYPE=>'LABEL'),'ITEM'),
      P_IS_PERSISTENT           => 'Y',
      P_LOV_DISPLAY_EXTRA       => 'YES',
      P_PROTECTION_LEVEL        => WWV_FLOW_ITEM.C_PROTECTION_CHECKSUM,
      P_ESCAPE_ON_HTTP_INPUT    => 'Y',
      P_ITEM_COMMENT            => '',
      P_HELP_TEXT               => WWV_FLOW_LANG.SYSTEM_MESSAGE('ACCESS_CONTROL_APP_MODE_HELP'));
 
 
    L_SAVE_BUTTON_ID := WWV_FLOW_ID.NEXT_VAL;
    WWV_FLOW_API.CREATE_PAGE_BUTTON(
      P_ID                          => L_SAVE_BUTTON_ID,
      P_FLOW_ID                     => P_FLOW_ID,
      P_FLOW_STEP_ID                => P_PAGE_ID,
      P_BUTTON_SEQUENCE             => 10,
      P_BUTTON_PLUG_ID              => L_ACCESS_MODE_REGION,
      P_BUTTON_NAME                 => 'SAVE',
      P_BUTTON_IMAGE                => 'template:'||GET_DEFAULT_TEMPLATE_ID(P_FLOW_ID=>P_FLOW_ID,P_TEMPLATE_TYPE=>'BUTTON'),
      P_BUTTON_IMAGE_ALT            => WWV_FLOW_LANG.SYSTEM_MESSAGE('ACCESS_CONTROL_SET_APP_MODE'),
      P_BUTTON_POSITION             => 'REGION_TEMPLATE_CHANGE',
      P_BUTTON_ALIGNMENT            => 'RIGHT',
      P_BUTTON_EXECUTE_VALIDATIONS  => 'Y',
      P_BUTTON_ACTION               => WWV_FLOW_BUTTON.C_ACTION_SUBMIT,
      P_BUTTON_CONDITION            => 'P'||P_PAGE_ID||'_SETUP_ID',
      P_BUTTON_CONDITION_TYPE       => 'ITEM_IS_NOT_NULL',
      P_DATABASE_ACTION             => 'UPDATE');
 
 
    
    
    
    WWV_FLOW_API.CREATE_PAGE_PROCESS(
      P_FLOW_ID                => P_FLOW_ID,
      P_FLOW_STEP_ID           => P_PAGE_ID,
      P_PROCESS_SEQUENCE       => 10,
      P_PROCESS_POINT          => 'AFTER_SUBMIT',
      P_PROCESS_TYPE           => 'DML_PROCESS_ROW',
      P_PROCESS_NAME           => 'Process Row of APEX_ACCESS_SETUP',
      P_PROCESS_SQL_CLOB       => '#OWNER#:APEX_ACCESS_SETUP:P'||P_PAGE_ID||'_SETUP_ID:ID|U',
      P_ERROR_DISPLAY_LOCATION => WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION,
      P_PROCESS_WHEN_BUTTON_ID =>L_SAVE_BUTTON_ID,
      P_PROCESS_SUCCESS_MESSAGE=> WWV_FLOW_LANG.SYSTEM_MESSAGE('ACCESS_CONTROL_APP_MODE_SET_SUCCESS'),
      P_PROCESS_IS_STATEFUL_Y_N=>'N');
 
    
    
    
    L_USER_PRIV_REGION := WWV_FLOW_ID.NEXT_VAL;
    L_QUERY := L_QUERY||'select id,'||WWV_FLOW.LF||
               'admin_username,'||WWV_FLOW.LF||
               'admin_privileges,'||WWV_FLOW.LF||
               'setup_id,'||WWV_FLOW.LF||
               'lower(nvl(updated_by,created_by)) last_changed_by,'||WWV_FLOW.LF||
               'nvl(updated_on,created_on) last_changed_on'||WWV_FLOW.LF||
               'from apex_access_control'||WWV_FLOW.LF||
               'where setup_id = :P'||P_PAGE_ID||'_SETUP_ID'||WWV_FLOW.LF||
               'and (:P'||P_PAGE_ID||'_FIND is null or'||WWV_FLOW.LF||
               '      instr(upper(admin_username),upper(:P'||P_PAGE_ID||'_FIND)) > 0)'||WWV_FLOW.LF||
               '';
 
    WWV_FLOW_API.CREATE_REPORT_REGION (
       P_ID                           => L_USER_PRIV_REGION,
       P_FLOW_ID                      => P_FLOW_ID,
       P_PAGE_ID                      => P_PAGE_ID,
       P_NAME                         => WWV_FLOW_LANG.SYSTEM_MESSAGE('ACCESS_CONTROL_LIST'),
       P_TEMPLATE                     => GET_DEFAULT_TEMPLATE_ID(P_FLOW_ID=>P_FLOW_ID,P_TEMPLATE_TYPE=>'REGION'),
       P_REGION_TEMPLATE_OPTIONS      => GET_PRESET_TEMPLATE_OPTIONS (GET_DEFAULT_TEMPLATE_ID(P_FLOW_ID=>P_FLOW_ID,P_TEMPLATE_TYPE=>'REGION'),'REGION'),
       P_COMPONENT_TEMPLATE_OPTIONS   => GET_PRESET_TEMPLATE_OPTIONS (GET_DEFAULT_TEMPLATE_ID(P_FLOW_ID=>P_FLOW_ID,P_TEMPLATE_TYPE=>'REPORT'),'REPORT'),
       P_DISPLAY_SEQUENCE             => 20,
       P_DISPLAY_POINT                => 'BODY',
       P_ITEM_DISPLAY_POINT           => 'ABOVE',
       P_SOURCE                       => L_QUERY,
       P_SOURCE_TYPE                  => WWV_FLOW_REGION_NATIVE.C_TABFORM,
       
       P_DISPLAY_WHEN_CONDITION       => NULL,
       P_DISPLAY_WHEN_COND2           => NULL,
       P_DISPLAY_CONDITION_TYPE       => NULL,
       P_HEADER                       => WWV_FLOW_LANG.SYSTEM_MESSAGE('ACCESS_CONTROL_RPT_REGION_HEADER'),
       
       P_QUERY_ROW_TEMPLATE           => GET_DEFAULT_TEMPLATE_ID(P_FLOW_ID=>P_FLOW_ID,P_TEMPLATE_TYPE=>'REPORT'),
       P_QUERY_HEADINGS_TYPE          => 'COLON_DELMITED_LIST',
       P_QUERY_NUM_ROWS               => '10',
       P_QUERY_OPTIONS                => 'DERIVED_REPORT_COLUMNS',
       P_QUERY_SHOW_NULLS_AS          => WWV_FLOW_LANG.SYSTEM_MESSAGE('NULL_IN_PAREN'),
       P_QUERY_NO_DATA_FOUND          => WWV_FLOW_LANG.SYSTEM_MESSAGE('F4000.NO_DATA_FOUND'),
       P_QUERY_NUM_ROWS_TYPE          => 'ROW_RANGES_IN_SELECT_LIST',
       P_QUERY_ROW_COUNT_MAX          => WWV_FLOW_API.C_DEFAULT_QUERY_ROW_COUNT_MAX,
       P_PAGINATION_DISPLAY_POSITION  => 'BOTTOM_RIGHT',
       P_COMMENT                      => NULL);
 
 
 
    WWV_FLOW_API.CREATE_REPORT_COLUMNS (
       P_REGION_ID                   => L_USER_PRIV_REGION,
       P_FLOW_ID                     => P_FLOW_ID,
       P_QUERY_COLUMN_ID             => 1,
       P_FORM_ELEMENT_ID             => NULL,
       P_COLUMN_ALIAS                => 'CHECK$01',
       P_COLUMN_DISPLAY_SEQUENCE     => 1,
       P_COLUMN_HEADING              => '&nbsp;',
       P_COLUMN_ALIGNMENT            => 'LEFT',
       P_HEADING_ALIGNMENT           => 'CENTER',
       P_DEFAULT_SORT_COLUMN_SEQUENCE=> 0,
       P_DISABLE_SORT_COLUMN         => 'Y',
       P_SUM_COLUMN                  => 'N',
       P_HIDDEN_COLUMN               => 'N',
       P_DISPLAY_AS                  => 'CHECKBOX',
       P_DERIVED_COLUMN              => 'Y',
       P_COLUMN_COMMENT              => '');
 
    WWV_FLOW_API.CREATE_REPORT_COLUMNS (
       P_REGION_ID                   => L_USER_PRIV_REGION,
       P_FLOW_ID                     => P_FLOW_ID,
       P_QUERY_COLUMN_ID             => 2,
       P_FORM_ELEMENT_ID             => NULL,
       P_COLUMN_ALIAS                => 'ID',
       P_COLUMN_DISPLAY_SEQUENCE     => 2,
       P_COLUMN_HEADING              => '&nbsp;',
       P_COLUMN_ALIGNMENT            => 'LEFT',
       P_DEFAULT_SORT_COLUMN_SEQUENCE=> 0,
       P_DISABLE_SORT_COLUMN         => 'Y',
       P_SUM_COLUMN                  => 'N',
       P_HIDDEN_COLUMN               => 'Y',
       P_DISPLAY_AS                  => 'HIDDEN',
       P_COLUMN_WIDTH                => '16',
       P_PK_COL_SOURCE_TYPE          => 'T',
       P_REF_SCHEMA                  => L_SCHEMA,
       P_REF_TABLE_NAME              => L_ACCESS_CONTROL_TAB,
       P_REF_COLUMN_NAME             => 'ID',
       P_COLUMN_COMMENT              => '');
 
    WWV_FLOW_API.CREATE_REPORT_COLUMNS (
       P_REGION_ID                   => L_USER_PRIV_REGION,
       P_FLOW_ID                     => P_FLOW_ID,
       P_QUERY_COLUMN_ID             => 3,
       P_FORM_ELEMENT_ID             => NULL,
       P_COLUMN_ALIAS                => 'ADMIN_USERNAME',
       P_COLUMN_DISPLAY_SEQUENCE     => 3,
       P_COLUMN_HEADING              => WWV_FLOW_LANG.SYSTEM_MESSAGE('ACCESS_CONTROL_USERNAME'),
       P_COLUMN_ALIGNMENT            => 'LEFT',
       P_HEADING_ALIGNMENT           => 'LEFT',
       P_DEFAULT_SORT_COLUMN_SEQUENCE=> 1,
       P_DISABLE_SORT_COLUMN         => 'N',
       P_SUM_COLUMN                  => 'N',
       P_HIDDEN_COLUMN               => 'N',
       P_DISPLAY_AS                  => 'TEXT',
       P_COLUMN_WIDTH                => '16',
       P_REF_SCHEMA                  => L_SCHEMA,
       P_REF_TABLE_NAME              => L_ACCESS_CONTROL_TAB,
       P_REF_COLUMN_NAME             => 'ADMIN_USERNAME',
       P_COLUMN_COMMENT              => '');
 
    
    
    L_PRIV_LOV_NAME := 'APEX_APPLICATION_PRIV';
    FOR C1 IN (SELECT ID
               FROM WWV_FLOW_LISTS_OF_VALUES$
               WHERE LOV_NAME = L_PRIV_LOV_NAME
               AND FLOW_ID = P_FLOW_ID)
    LOOP
        L_PRIV_LOV_ID := C1.ID;
    END LOOP;
    IF L_PRIV_LOV_ID IS NULL THEN
        L_PRIV_LOV_ID := WWV_FLOW_ID.NEXT_VAL;
        WWV_FLOW_API.CREATE_LIST_OF_VALUES (
            P_ID       => L_PRIV_LOV_ID,
            P_FLOW_ID  => P_FLOW_ID,
            P_LOV_NAME => L_PRIV_LOV_NAME,
            P_LOV_QUERY=> '.'||TO_CHAR(L_PRIV_LOV_ID)||'.');
 
        WWV_FLOW_API.CREATE_STATIC_LOV_DATA (
            P_LOV_ID            => L_PRIV_LOV_ID,
            P_LOV_DISP_SEQUENCE => 10,
            P_LOV_DISP_VALUE    => WWV_FLOW_LANG.SYSTEM_MESSAGE('ACCESS_CONTROL_ADMIN'),
            P_LOV_RETURN_VALUE  => 'ADMIN');
 
        WWV_FLOW_API.CREATE_STATIC_LOV_DATA (
            P_LOV_ID            => L_PRIV_LOV_ID,
            P_LOV_DISP_SEQUENCE => 20,
            P_LOV_DISP_VALUE    => WWV_FLOW_LANG.SYSTEM_MESSAGE('EDIT'),
            P_LOV_RETURN_VALUE  => 'EDIT');
 
        WWV_FLOW_API.CREATE_STATIC_LOV_DATA (
            P_LOV_ID            => L_PRIV_LOV_ID,
            P_LOV_DISP_SEQUENCE => 30,
            P_LOV_DISP_VALUE    => WWV_FLOW_LANG.SYSTEM_MESSAGE('LAYOUT.T_VIEW_BUTTON'),
            P_LOV_RETURN_VALUE  => 'VIEW');
    END IF;
 
 
    WWV_FLOW_API.CREATE_REPORT_COLUMNS (
       P_REGION_ID                   => L_USER_PRIV_REGION,
       P_FLOW_ID                     => P_FLOW_ID,
       P_QUERY_COLUMN_ID             => 4,
       P_FORM_ELEMENT_ID             => NULL,
       P_COLUMN_ALIAS                => 'ADMIN_PRIVILEGES',
       P_COLUMN_DISPLAY_SEQUENCE     => 4,
       P_COLUMN_HEADING              => WWV_FLOW_LANG.SYSTEM_MESSAGE('ACCESS_CONTROL_PRIV'),
       P_COLUMN_ALIGNMENT            => 'LEFT',
       P_HEADING_ALIGNMENT           => 'LEFT',
       P_DEFAULT_SORT_COLUMN_SEQUENCE=> 0,
       P_DISABLE_SORT_COLUMN         => 'N',
       P_SUM_COLUMN                  => 'N',
       P_HIDDEN_COLUMN               => 'N',
       P_DISPLAY_AS                  => 'SELECT_LIST_FROM_LOV',
       P_NAMED_LOV                   => L_PRIV_LOV_ID,
       P_LOV_SHOW_NULLS              => 'NO',
       P_COLUMN_WIDTH                => '16',
       P_LOV_DISPLAY_EXTRA           => 'YES',
       P_REF_SCHEMA                  => L_SCHEMA,
       P_REF_TABLE_NAME              => L_ACCESS_CONTROL_TAB,
       P_REF_COLUMN_NAME             => 'ADMIN_PRIVILEGES',
       P_COLUMN_COMMENT              => '');
 
    WWV_FLOW_API.CREATE_REPORT_COLUMNS (
       P_REGION_ID                   => L_USER_PRIV_REGION,
       P_FLOW_ID                     => P_FLOW_ID,
       P_QUERY_COLUMN_ID             => 5,
       P_FORM_ELEMENT_ID             => NULL,
       P_COLUMN_ALIAS                => 'SETUP_ID',
       P_COLUMN_DISPLAY_SEQUENCE     => 5,
       P_COLUMN_HEADING              => '&nbsp;',
       P_COLUMN_ALIGNMENT            => 'LEFT',
       P_HEADING_ALIGNMENT           => 'LEFT',
       P_DEFAULT_SORT_COLUMN_SEQUENCE=> 0,
       P_DISABLE_SORT_COLUMN         => 'Y',
       P_SUM_COLUMN                  => 'N',
       P_HIDDEN_COLUMN               => 'Y',
       P_DISPLAY_AS                  => 'HIDDEN',
       P_COLUMN_DEFAULT              => 'P'||P_PAGE_ID||'_SETUP_ID',
       P_COLUMN_DEFAULT_TYPE         => 'ITEM',
       P_REF_SCHEMA                  => L_SCHEMA,
       P_REF_TABLE_NAME              => 'APEX_ACCESS_CONTROL',
       P_REF_COLUMN_NAME             => 'SETUP_ID');
 
    WWV_FLOW_API.CREATE_REPORT_COLUMNS (
       P_REGION_ID                   => L_USER_PRIV_REGION,
       P_FLOW_ID                     => P_FLOW_ID,
       P_QUERY_COLUMN_ID             => 6,
       P_FORM_ELEMENT_ID             => NULL,
       P_COLUMN_ALIAS                => 'LAST_CHANGED_BY',
       P_COLUMN_DISPLAY_SEQUENCE     => 6,
       P_COLUMN_HEADING              => WWV_FLOW_LANG.SYSTEM_MESSAGE('ACCESS_CONTROL_LAST_CHANGED_BY'),
       P_COLUMN_ALIGNMENT            => 'LEFT',
       P_HEADING_ALIGNMENT           => 'LEFT',
       P_DEFAULT_SORT_COLUMN_SEQUENCE=> 0,
       P_DISABLE_SORT_COLUMN         => 'N',
       P_SUM_COLUMN                  => 'N',
       P_HIDDEN_COLUMN               => 'N',
       P_DISPLAY_AS                  => 'ESCAPE_SC',
       P_COLUMN_COMMENT              => '');
 
    WWV_FLOW_API.CREATE_REPORT_COLUMNS (
       P_REGION_ID                   => L_USER_PRIV_REGION,
       P_FLOW_ID                     => P_FLOW_ID,
       P_QUERY_COLUMN_ID             => 7,
       P_FORM_ELEMENT_ID             => NULL,
       P_COLUMN_ALIAS                => 'LAST_CHANGED_ON',
       P_COLUMN_DISPLAY_SEQUENCE     => 7,
       P_COLUMN_HEADING              => WWV_FLOW_LANG.SYSTEM_MESSAGE('DATE'),
       P_COLUMN_FORMAT               => 'SINCE',
       P_COLUMN_ALIGNMENT            => 'LEFT',
       P_HEADING_ALIGNMENT           => 'LEFT',
       P_DEFAULT_SORT_COLUMN_SEQUENCE=> 0,
       P_DISABLE_SORT_COLUMN         => 'N',
       P_SUM_COLUMN                  => 'N',
       P_HIDDEN_COLUMN               => 'N',
       P_DISPLAY_AS                  => 'ESCAPE_SC',
       P_COLUMN_COMMENT              => '');
 
    
    
    
    WWV_FLOW_API.CREATE_REGION_RPT_COLS (
       P_ID               => WWV_FLOW_ID.NEXT_VAL,
       P_FLOW_ID          => P_FLOW_ID,
       P_PLUG_ID          => L_USER_PRIV_REGION,
       P_COLUMN_SEQUENCE  => 1,
       P_QUERY_COLUMN_NAME=> 'ID',
       P_DISPLAY_AS       => 'TEXT');
 
    WWV_FLOW_API.CREATE_REGION_RPT_COLS (
       P_ID               => WWV_FLOW_ID.NEXT_VAL,
       P_FLOW_ID          => P_FLOW_ID,
       P_PLUG_ID          => L_USER_PRIV_REGION,
       P_COLUMN_SEQUENCE  => 2,
       P_QUERY_COLUMN_NAME=> 'ADMIN_USERNAME',
       P_DISPLAY_AS       => 'TEXT');
 
    WWV_FLOW_API.CREATE_REGION_RPT_COLS (
       P_ID               => WWV_FLOW_ID.NEXT_VAL,
       P_FLOW_ID          => P_FLOW_ID,
       P_PLUG_ID          => L_USER_PRIV_REGION,
       P_COLUMN_SEQUENCE  => 3,
       P_QUERY_COLUMN_NAME=> 'ADMIN_PRIVILEGES',
       P_DISPLAY_AS       => 'TEXT');
 
    WWV_FLOW_API.CREATE_REGION_RPT_COLS (
       P_ID               => WWV_FLOW_ID.NEXT_VAL,
       P_FLOW_ID          => P_FLOW_ID,
       P_PLUG_ID          => L_USER_PRIV_REGION,
       P_COLUMN_SEQUENCE  => 4,
       P_QUERY_COLUMN_NAME=> 'SETUP_ID',
       P_DISPLAY_AS       => 'TEXT');
 
    WWV_FLOW_API.CREATE_REGION_RPT_COLS (
       P_ID               => WWV_FLOW_ID.NEXT_VAL,
       P_FLOW_ID          => P_FLOW_ID,
       P_PLUG_ID          => L_USER_PRIV_REGION,
       P_COLUMN_SEQUENCE  => 5,
       P_QUERY_COLUMN_NAME=> 'LAST_CHANGED_BY',
       P_DISPLAY_AS       => 'TEXT');
 
    WWV_FLOW_API.CREATE_REGION_RPT_COLS (
       P_ID               => WWV_FLOW_ID.NEXT_VAL,
       P_FLOW_ID          => P_FLOW_ID,
       P_PLUG_ID          => L_USER_PRIV_REGION,
       P_COLUMN_SEQUENCE  => 6,
       P_QUERY_COLUMN_NAME=> 'LAST_CHANGED_ON',
       P_DISPLAY_AS       => 'TEXT');
 
    
    
    
    WWV_FLOW_API.CREATE_PAGE_ITEM(
       P_FLOW_ID                  => P_FLOW_ID,
       P_FLOW_STEP_ID             => P_PAGE_ID,
       P_NAME                     =>'P'||P_PAGE_ID||'_SETUP_ID',
       P_DATA_TYPE                => 'VARCHAR',
       P_ACCEPT_PROCESSING        => 'REPLACE_EXISTING',
       P_ITEM_SEQUENCE            => 20,
       P_ITEM_PLUG_ID             => L_USER_PRIV_REGION,
       P_USE_CACHE_BEFORE_DEFAULT => 'NO',
       P_ITEM_DEFAULT             => '1',
       P_ITEM_DEFAULT_TYPE        => 'STATIC_TEXT_WITH_SUBSTITUTIONS',
       P_PROMPT                   =>'',
       P_SOURCE                   =>'ID',
       P_SOURCE_TYPE              => 'DB_COLUMN',
       P_DISPLAY_AS               => 'HIDDEN',
       P_CSIZE                    => 30,
       P_CMAXLENGTH               => 255,
       P_CHEIGHT                  => 1,
       P_BEGIN_ON_NEW_LINE        => 'YES',
       P_BEGIN_ON_NEW_FIELD       => 'YES',
       P_LABEL_ALIGNMENT          => 'RIGHT',
       P_FIELD_ALIGNMENT          => 'LEFT',
       P_FIELD_TEMPLATE           => GET_DEFAULT_TEMPLATE_ID(P_FLOW_ID=>P_FLOW_ID,P_TEMPLATE_TYPE=>'LABEL'),
       P_ITEM_TEMPLATE_OPTIONS    => GET_PRESET_TEMPLATE_OPTIONS (GET_DEFAULT_TEMPLATE_ID(P_FLOW_ID=>P_FLOW_ID,P_TEMPLATE_TYPE=>'LABEL'),'ITEM'),
       P_IS_PERSISTENT            => 'Y',
       P_PROTECTION_LEVEL         => WWV_FLOW_ITEM.C_PROTECTION_CHECKSUM,
       P_ESCAPE_ON_HTTP_INPUT     => 'Y',
       P_ITEM_COMMENT             => '');
 
    WWV_FLOW_API.CREATE_PAGE_ITEM(
       P_FLOW_ID                 => P_FLOW_ID,
       P_FLOW_STEP_ID            => P_PAGE_ID,
       P_NAME                    =>'P'||P_PAGE_ID||'_FIND',
       P_DATA_TYPE               => 'VARCHAR',
       P_ACCEPT_PROCESSING       => 'REPLACE_EXISTING',
       P_ITEM_SEQUENCE           => 30,
       P_ITEM_PLUG_ID            => L_USER_PRIV_REGION,
       P_USE_CACHE_BEFORE_DEFAULT=> 'YES',
       P_ITEM_DEFAULT_TYPE       => 'STATIC_TEXT_WITH_SUBSTITUTIONS',
       P_PROMPT                  =>WWV_FLOW_LANG.SYSTEM_MESSAGE('F4500.FIND'),
       P_SOURCE_TYPE             => 'STATIC',
       P_DISPLAY_AS              => 'TEXT',
       P_CSIZE                   => 30,
       P_CMAXLENGTH              => 2000,
       P_CHEIGHT                 => NULL,
       P_CATTRIBUTES             => 'nowrap="nowrap"',
       P_BEGIN_ON_NEW_LINE       => 'YES',
       P_BEGIN_ON_NEW_FIELD      => 'YES',
       P_LABEL_ALIGNMENT         => 'RIGHT',
       P_FIELD_ALIGNMENT         => 'LEFT',
       P_FIELD_TEMPLATE          => GET_DEFAULT_TEMPLATE_ID(P_FLOW_ID=>P_FLOW_ID,P_TEMPLATE_TYPE=>'LABEL'),
       P_ITEM_TEMPLATE_OPTIONS   => GET_PRESET_TEMPLATE_OPTIONS (GET_DEFAULT_TEMPLATE_ID(P_FLOW_ID=>P_FLOW_ID,P_TEMPLATE_TYPE=>'LABEL'),'ITEM'),
       P_IS_PERSISTENT           => 'Y',
       P_PROTECTION_LEVEL        => WWV_FLOW_ITEM.C_PROTECTION_CHECKSUM,
       P_ITEM_COMMENT            => '',
       P_HELP_TEXT               => WWV_FLOW_LANG.SYSTEM_MESSAGE('ACCESS_CONTROL_FIND_HELP'));
 
    L_GO_BUTTON_ID := WWV_FLOW_ID.NEXT_VAL;
    WWV_FLOW_API.CREATE_PAGE_ITEM(
       P_ID                      => L_GO_BUTTON_ID,
       P_FLOW_ID                 => P_FLOW_ID,
       P_FLOW_STEP_ID            => P_PAGE_ID,
       P_NAME                    =>'P'||P_PAGE_ID||'_GO',
       P_DATA_TYPE               => 'VARCHAR',
       P_ACCEPT_PROCESSING       => 'REPLACE_EXISTING',
       P_ITEM_SEQUENCE           => 40,
       P_ITEM_PLUG_ID            => L_USER_PRIV_REGION,
       P_USE_CACHE_BEFORE_DEFAULT=> 'NO',
       P_ITEM_DEFAULT            => WWV_FLOW_LANG.SYSTEM_MESSAGE('F4000.P119.GO'),
       P_PROMPT                  => WWV_FLOW_LANG.SYSTEM_MESSAGE('F4000.P119.GO'),
       P_SOURCE                  => WWV_FLOW_LANG.SYSTEM_MESSAGE('F4000.P119.GO'),
       P_SOURCE_TYPE             => 'STATIC',
       P_DISPLAY_AS              => 'BUTTON',
       P_TAG_ATTRIBUTES          => GET_DEFAULT_TEMPLATE_ID(P_FLOW_ID=>P_FLOW_ID,P_TEMPLATE_TYPE=>'BUTTON'),
       P_BEGIN_ON_NEW_LINE       => 'NO',
       P_BEGIN_ON_NEW_FIELD      => 'YES',
       P_LABEL_ALIGNMENT         => 'RIGHT',
       P_FIELD_ALIGNMENT         => 'LEFT',
       P_IS_PERSISTENT           => 'N',
       P_ITEM_COMMENT            => '',
       P_BUTTON_ACTION           => WWV_FLOW_BUTTON.C_ACTION_SUBMIT);
    
    
    
    L_DELETE_BUTTON_ID := WWV_FLOW_ID.NEXT_VAL;
 
    L_SHORTCUT_NAME := 'DELETE_CONFIRM_MSG';
    L_SHORTCUT := L_SHORTCUT_NAME;
    
    
    
    IF NOT SHORTCUT_EXIST(P_FLOW_ID=>P_FLOW_ID,P_SHORTCUT_NAME=>L_SHORTCUT_NAME) THEN
      L_SHORTCUT := GET_SHORTCUT_NAME(P_FLOW_ID=>P_FLOW_ID,P_SHORTCUT_NAME=>L_SHORTCUT_NAME);
 
      WWV_FLOW_API.CREATE_SHORTCUT (
          P_ID           => NULL,
          P_FLOW_ID      => P_FLOW_ID,
          P_SHORTCUT_NAME=> L_SHORTCUT,
          P_SHORTCUT_TYPE=> 'TEXT_ESCAPE_JS',
          P_SHORTCUT     => WWV_FLOW_LANG.SYSTEM_MESSAGE('DELETE_MSG'));
    END IF;
 
    UPDATE_JS_CODE_W_SHORTCUT (
           P_FLOW_ID             => P_FLOW_ID,
           P_PAGE_ID             => P_PAGE_ID,
           P_SHORTCUT_NAME       => L_SHORTCUT,
           P_ADD_JAVASCRIPT_CODE => 'var htmldb_delete_message=''"'||L_SHORTCUT||'"'';' );
 
    WWV_FLOW_API.CREATE_PAGE_BUTTON(
       P_ID                 => L_DELETE_BUTTON_ID,
       P_FLOW_ID            => P_FLOW_ID,
       P_FLOW_STEP_ID       => P_PAGE_ID,
       P_BUTTON_SEQUENCE    => 30,
       P_BUTTON_PLUG_ID     => L_USER_PRIV_REGION,
       P_BUTTON_NAME        => 'MULTI_ROW_DELETE',
       P_BUTTON_IMAGE       => 'template:'||GET_DEFAULT_TEMPLATE_ID(P_FLOW_ID=>P_FLOW_ID,P_TEMPLATE_TYPE=>'BUTTON'),
       P_BUTTON_IMAGE_ALT   => WWV_FLOW_LANG.SYSTEM_MESSAGE('LAYOUT.T_ALT_DELETE'),
       P_BUTTON_POSITION    => 'REGION_TEMPLATE_DELETE',
       P_BUTTON_ALIGNMENT   => 'RIGHT',
       P_BUTTON_EXECUTE_VALIDATIONS => 'N',
       P_BUTTON_REDIRECT_URL=> 'javascript:apex.confirm(htmldb_delete_message,''MULTI_ROW_DELETE'');',
       P_BUTTON_ACTION      => WWV_FLOW_BUTTON.C_ACTION_REDIRECT_URL);
 
    L_SUBMIT_BUTTON_ID := WWV_FLOW_ID.NEXT_VAL;
    WWV_FLOW_API.CREATE_PAGE_BUTTON(
       P_ID               => L_SUBMIT_BUTTON_ID,
       P_FLOW_ID          => P_FLOW_ID,
       P_FLOW_STEP_ID     => P_PAGE_ID,
       P_BUTTON_SEQUENCE  => 40,
       P_BUTTON_PLUG_ID   => L_USER_PRIV_REGION,
       P_BUTTON_NAME      => 'SUBMIT',
       P_BUTTON_IMAGE     => 'template:'||GET_DEFAULT_TEMPLATE_ID(P_FLOW_ID=>P_FLOW_ID,P_TEMPLATE_TYPE=>'BUTTON'),
       P_BUTTON_IMAGE_ALT => WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_CUSTOMIZE.T_APPLY'),
       P_BUTTON_POSITION  => 'REGION_TEMPLATE_CHANGE',
       P_BUTTON_ALIGNMENT => 'RIGHT',
       P_BUTTON_EXECUTE_VALIDATIONS => 'Y',
       P_BUTTON_ACTION    => WWV_FLOW_BUTTON.C_ACTION_SUBMIT );
 
    L_ADD_BUTTON_ID := WWV_FLOW_ID.NEXT_VAL;
    WWV_FLOW_API.CREATE_PAGE_BUTTON(
       P_ID               => L_ADD_BUTTON_ID,
       P_FLOW_ID          => P_FLOW_ID,
       P_FLOW_STEP_ID     => P_PAGE_ID,
       P_BUTTON_SEQUENCE  => 50,
       P_BUTTON_PLUG_ID   => L_USER_PRIV_REGION,
       P_BUTTON_NAME      => 'ADD',
       P_BUTTON_IMAGE     => 'template:'||GET_DEFAULT_TEMPLATE_ID(P_FLOW_ID=>P_FLOW_ID,P_TEMPLATE_TYPE=>'BUTTON'),
       P_BUTTON_IMAGE_ALT => WWV_FLOW_LANG.SYSTEM_MESSAGE('ACL_ADD_USER'),
       P_BUTTON_POSITION  => 'BOTTOM',
       P_BUTTON_ALIGNMENT => 'RIGHT',
       P_BUTTON_EXECUTE_VALIDATIONS => 'Y',
       P_BUTTON_REDIRECT_URL        => 'javascript:apex.widget.tabular.addRow();',
       P_BUTTON_ACTION              => WWV_FLOW_BUTTON.C_ACTION_REDIRECT_URL);
 
    
    
    
    WWV_FLOW_API.CREATE_PAGE_VALIDATION(
      P_FLOW_ID             => P_FLOW_ID,
      P_FLOW_STEP_ID        => P_PAGE_ID,
      P_VALIDATION_NAME     => 'cannot delete current user',
      P_VALIDATION_SEQUENCE => 10,
      P_VALIDATION          => 'for i in 1..apex_application.g_f01.count'||WWV_FLOW.LF||
                               'loop'||WWV_FLOW.LF||
                               '  if upper(apex_application.g_f03(apex_application.g_f01(i))) = upper(:APP_USER) then'||WWV_FLOW.LF||
                               '    return false;'||WWV_FLOW.LF||
                               '  end if;'||WWV_FLOW.LF||
                               'end loop;'||WWV_FLOW.LF||
                               'return true;',
      P_VALIDATION_TYPE    => 'FUNC_BODY_RETURNING_BOOLEAN',
      P_ERROR_MESSAGE      => WWV_FLOW_LANG.SYSTEM_MESSAGE('ACCESS_CONTROL_CANNOT_DELETE'),
      P_WHEN_BUTTON_PRESSED=> L_DELETE_BUTTON_ID,
      P_ERROR_DISPLAY_LOCATION=>'INLINE_WITH_FIELD_AND_NOTIFICATION');
 
 
    WWV_FLOW_API.CREATE_PAGE_VALIDATION(
      P_FLOW_ID            => P_FLOW_ID,
      P_FLOW_STEP_ID       => P_PAGE_ID,
      P_VALIDATION_NAME    => 'cannot remove admin priv',
      P_VALIDATION_SEQUENCE=> 20,
      P_VALIDATION         => 'for i in 1..apex_application.g_f03.count'||WWV_FLOW.LF||
                              'loop'||WWV_FLOW.LF||
                              '  if upper(apex_application.g_f03(i)) = upper(:APP_USER) then'||WWV_FLOW.LF||
                              '    if apex_application.g_f04(i) != ''ADMIN'' then'||WWV_FLOW.LF||
                              '      return false;'||WWV_FLOW.LF||
                              '    end if;'||WWV_FLOW.LF||
                              '  end if;'||WWV_FLOW.LF||
                              'end loop;'||WWV_FLOW.LF||
                              'return true;',
      P_VALIDATION_TYPE    => 'FUNC_BODY_RETURNING_BOOLEAN',
      P_ERROR_MESSAGE      => WWV_FLOW_LANG.SYSTEM_MESSAGE('ACCESS_CONTROL_CANNOT_REMOVE_ADMIN'),
      P_WHEN_BUTTON_PRESSED=> L_SUBMIT_BUTTON_ID,
      P_ERROR_DISPLAY_LOCATION=>'INLINE_WITH_FIELD_AND_NOTIFICATION');
 
    
    
    
    WWV_FLOW_API.CREATE_PAGE_PROCESS(
      P_FLOW_ID=> P_FLOW_ID,
      P_FLOW_STEP_ID => P_PAGE_ID,
      P_PROCESS_SEQUENCE=> 10,
      P_PROCESS_POINT=> 'AFTER_HEADER',
      P_PROCESS_TYPE=> 'PLSQL',
      P_PROCESS_NAME=> 'get application mode',
      P_PROCESS_SQL_CLOB => 'declare'||WWV_FLOW.LF||
                            '  l_setup_id number;'||WWV_FLOW.LF||
                            'begin'||WWV_FLOW.LF||
                            '  for c1 in (select id '||WWV_FLOW.LF||
                            '             from APEX_ACCESS_SETUP '||WWV_FLOW.LF||
                            '             where application_id = :APP_ID)'||WWV_FLOW.LF||
                            '  loop'||WWV_FLOW.LF||
                            '    l_setup_id:= c1.id;'||WWV_FLOW.LF||
                            '  end loop;'||WWV_FLOW.LF||
                            '  if l_setup_id is null then   '||WWV_FLOW.LF||
                            '   insert into apex_access_setup (application_mode, application_id)'||WWV_FLOW.LF||
                            '    values (''ALL'',:APP_ID) returning id into l_setup_id;     '||WWV_FLOW.LF||
                            '  end if;'||WWV_FLOW.LF||
                            '  :P'||P_PAGE_ID||'_SETUP_ID := l_setup_id;'||WWV_FLOW.LF||
                            'end;',
      P_ERROR_DISPLAY_LOCATION=> CASE WHEN P_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION ELSE WWV_FLOW_ERROR_API.C_ON_ERROR_PAGE END,
      P_PROCESS_SUCCESS_MESSAGE=> '',
      P_PROCESS_IS_STATEFUL_Y_N=>'N',
      P_REQUIRED_PATCH=>NULL + WWV_FLOW_API.G_ID_OFFSET,
      P_PROCESS_COMMENT=>'');
 
    
    
    
    WWV_FLOW_API.CREATE_PAGE_PROCESS(
       P_FLOW_ID                => P_FLOW_ID,
       P_FLOW_STEP_ID           => P_PAGE_ID,
       P_PROCESS_SEQUENCE       => 20,
       P_PROCESS_POINT          => 'AFTER_HEADER',
       P_PROCESS_TYPE           => 'DML_FETCH_ROW',
       P_PROCESS_NAME           => 'Fetch Row from APEX_ACCESS_SETUP',
       P_PROCESS_SQL_CLOB       => 'F|#OWNER#:APEX_ACCESS_SETUP:P'||P_PAGE_ID||'_SETUP_ID:ID',
       P_ERROR_DISPLAY_LOCATION => CASE WHEN P_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION ELSE WWV_FLOW_ERROR_API.C_ON_ERROR_PAGE END,
       P_PROCESS_SUCCESS_MESSAGE=> '',
       P_PROCESS_IS_STATEFUL_Y_N=>'N',
       P_PROCESS_COMMENT        =>'');
 
    
    
    
 
    
    WWV_FLOW_API.CREATE_PAGE_PROCESS(
       P_FLOW_ID                 => P_FLOW_ID,
       P_FLOW_STEP_ID            => P_PAGE_ID,
       P_PROCESS_SEQUENCE        => 20,
       P_PROCESS_POINT           => 'AFTER_SUBMIT',
       P_REGION_ID               => L_USER_PRIV_REGION,
       P_PROCESS_TYPE            => 'MULTI_ROW_UPDATE',
       P_PROCESS_NAME            => 'ApplyMRU',
       P_PROCESS_SQL_CLOB        => '#OWNER#:'||L_ACCESS_CONTROL_TAB||':ID',
       P_ERROR_DISPLAY_LOCATION  => WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION,
       P_PROCESS_WHEN_BUTTON_ID  => L_SUBMIT_BUTTON_ID,
       P_PROCESS_SUCCESS_MESSAGE => WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.UPDATE_INSERT_SUCCESS'),
       P_PROCESS_IS_STATEFUL_Y_N =>'N');
 
    
    WWV_FLOW_API.CREATE_PAGE_PROCESS(
       P_FLOW_ID                 => P_FLOW_ID,
       P_FLOW_STEP_ID            => P_PAGE_ID,
       P_PROCESS_SEQUENCE        => 30,
       P_PROCESS_POINT           => 'AFTER_SUBMIT',
       P_REGION_ID               => L_USER_PRIV_REGION,
       P_PROCESS_TYPE            => 'MULTI_ROW_DELETE',
       P_PROCESS_NAME            => 'ApplyMRD',
       P_PROCESS_SQL_CLOB        => '#OWNER#:'||L_ACCESS_CONTROL_TAB||':ID',
       P_ERROR_DISPLAY_LOCATION  => WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION,
       P_PROCESS_WHEN            => 'MULTI_ROW_DELETE',
       P_PROCESS_WHEN_TYPE       => 'REQUEST_EQUALS_CONDITION',
       P_PROCESS_SUCCESS_MESSAGE => WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.DELETE_SUCCESS'),
       P_PROCESS_IS_STATEFUL_Y_N => 'N');
 
    
    WWV_FLOW_API.CREATE_PAGE_PROCESS(
       P_FLOW_ID                 => P_FLOW_ID,
       P_FLOW_STEP_ID            => P_PAGE_ID,
       P_PROCESS_SEQUENCE        => 60,
       P_PROCESS_POINT           => 'AFTER_SUBMIT',
       P_PROCESS_TYPE            => 'RESET_PAGINATION',
       P_PROCESS_NAME            => 'Reset Pagination',
       P_PROCESS_SQL_CLOB        => 'reset_pagination',
       P_ERROR_DISPLAY_LOCATION  => WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION,
       P_PROCESS_WHEN_BUTTON_ID  => L_GO_BUTTON_ID,
       P_PROCESS_SUCCESS_MESSAGE => '',
       P_PROCESS_IS_STATEFUL_Y_N => 'N');
 
    
    
    
    WWV_FLOW_API.CREATE_PAGE_BRANCH(
       P_FLOW_ID        => P_FLOW_ID,
       P_FLOW_STEP_ID   => P_PAGE_ID,
       P_BRANCH_ACTION  => 'f?p=&APP_ID.:'||P_PAGE_ID||':&SESSION.::&DEBUG.:::&success_msg=#SUCCESS_MSG#',
       P_BRANCH_POINT   => 'AFTER_PROCESSING',
       P_BRANCH_TYPE    => 'REDIRECT_URL',
       P_BRANCH_SEQUENCE=> 99);
 
    
    
    
    FOR C1 IN (SELECT 1 FROM WWV_FLOW_SECURITY_SCHEMES
               WHERE NAME = WWV_FLOW_LANG.SYSTEM_MESSAGE('ACCESS_CONTROL_ADMIN_AUTH')
               AND FLOW_ID = P_FLOW_ID
               AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID)
    LOOP
        L_AC_ADMIN_FOUND := TRUE;
    END LOOP;
    IF NOT L_AC_ADMIN_FOUND THEN
        WWV_FLOW_API.CREATE_SECURITY_SCHEME(
              P_FLOW_ID      => P_FLOW_ID,
              P_NAME         =>WWV_FLOW_LANG.SYSTEM_MESSAGE('ACCESS_CONTROL_ADMIN_AUTH'),
              P_SCHEME_TYPE  =>'NATIVE_FUNCTION_BODY',
              P_ATTRIBUTE_01 =>'declare'||WWV_FLOW.LF||
                               '  l_setup_id number;'||WWV_FLOW.LF||
                               '  l_mode     varchar2(50);'||WWV_FLOW.LF||
                               '  l_priv     varchar2(50);'||WWV_FLOW.LF||
                               'begin'||WWV_FLOW.LF||
                               '  if apex_application.is_custom_auth_page then'||WWV_FLOW.LF||
                               '    return true;'||WWV_FLOW.LF||
                               '  end if;'||WWV_FLOW.LF||
                               '  '||WWV_FLOW.LF||
                               '  for c1 in (select id, application_mode'||WWV_FLOW.LF||
                               '             from apex_access_setup '||WWV_FLOW.LF||
                               '             where application_id = :app_id)'||WWV_FLOW.LF||
                               '  loop'||WWV_FLOW.LF||
                               '    l_setup_id := c1.id;'||WWV_FLOW.LF||
                               '    l_mode := c1.application_mode;'||WWV_FLOW.LF||
                               '  end loop;'||WWV_FLOW.LF||
                               '  '||WWV_FLOW.LF||
                               '  if (l_mode = ''ALL'') or (l_mode is null) then'||WWV_FLOW.LF||
                               '    return true;'||WWV_FLOW.LF||
                               '  end if;'||WWV_FLOW.LF||
                               '   '||WWV_FLOW.LF||
                               '  for c1 in (select admin_privileges '||WWV_FLOW.LF||
                               '             from apex_access_control'||WWV_FLOW.LF||
                               '             where upper(admin_username) = upper(:app_user)'||WWV_FLOW.LF||
                               '             and setup_id = l_setup_id)'||WWV_FLOW.LF||
                               '  loop'||WWV_FLOW.LF||
                               '    l_priv := c1.admin_privileges;'||WWV_FLOW.LF||
                               '  end loop;'||WWV_FLOW.LF||
                               '  '||WWV_FLOW.LF||
                               '  if nvl(l_priv,''x'') = ''ADMIN'' then return true; end if;'||WWV_FLOW.LF||
                               '  return false;'||WWV_FLOW.LF||
                               'end;',
              P_CACHING       =>'BY_USER_BY_PAGE_VIEW',
              P_ERROR_MESSAGE =>WWV_FLOW_LANG.SYSTEM_MESSAGE('ACCESS_CONTROL_NO_PRIV'));
    END IF;
 
    FOR C1 IN (SELECT 1 FROM WWV_FLOW_SECURITY_SCHEMES
               WHERE NAME = WWV_FLOW_LANG.SYSTEM_MESSAGE('ACCESS_CONTROL_EDIT_AUTH')
               AND FLOW_ID = P_FLOW_ID
               AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID)
    LOOP
        L_AC_EDIT_FOUND := TRUE;
    END LOOP;
    IF NOT L_AC_EDIT_FOUND THEN
        WWV_FLOW_API.CREATE_SECURITY_SCHEME(
              P_FLOW_ID         => P_FLOW_ID,
              P_NAME            =>WWV_FLOW_LANG.SYSTEM_MESSAGE('ACCESS_CONTROL_EDIT_AUTH'),
              P_SCHEME_TYPE     =>'NATIVE_FUNCTION_BODY',
              P_ATTRIBUTE_01    =>'declare'||WWV_FLOW.LF||
                                  '  l_setup_id number;'||WWV_FLOW.LF||
                                  '  l_mode     varchar2(50);'||WWV_FLOW.LF||
                                  '  l_priv     varchar2(50);'||WWV_FLOW.LF||
                                  'begin'||WWV_FLOW.LF||
                                  '  if apex_application.is_custom_auth_page then'||WWV_FLOW.LF||
                                  '    return true;'||WWV_FLOW.LF||
                                  '  end if;'||WWV_FLOW.LF||
                                  '  '||WWV_FLOW.LF||
                                  '  for c1 in (select id, application_mode'||WWV_FLOW.LF||
                                  '             from apex_access_setup'||WWV_FLOW.LF||
                                  '             where application_id = :app_id)'||WWV_FLOW.LF||
                                  '  loop'||WWV_FLOW.LF||
                                  '     l_setup_id := c1.id;'||WWV_FLOW.LF||
                                  '     l_mode := c1.application_mode;'||WWV_FLOW.LF||
                                  '  end loop;'||WWV_FLOW.LF||
                                  '  '||WWV_FLOW.LF||
                                  '  if (l_mode = ''ALL'') or (l_mode is null) then'||WWV_FLOW.LF||
                                  '    return true;'||WWV_FLOW.LF||
                                  '  end if;'||WWV_FLOW.LF||
                                  '  '||WWV_FLOW.LF||
                                  '  for c1 in (select admin_privileges'||WWV_FLOW.LF||
                                  '             from apex_access_control'||WWV_FLOW.LF||
                                  '             where upper(admin_username) = upper(:app_user)'||WWV_FLOW.LF||
                                  '             and setup_id = l_setup_id)'||WWV_FLOW.LF||
                                  '  loop'||WWV_FLOW.LF||
                                  '     l_priv := c1.admin_privileges;'||WWV_FLOW.LF||
                                  '  end loop;'||WWV_FLOW.LF||
                                  '  '||WWV_FLOW.LF||
                                  '  if l_mode in (''RESTRICTED'',''PUBLIC_RESTRICTED'') then'||WWV_FLOW.LF||
                                  '    if l_priv in (''EDIT'',''ADMIN'') then'||WWV_FLOW.LF||
                                  '      return true;'||WWV_FLOW.LF||
                                  '    else'||WWV_FLOW.LF||
                                  '      return false;'||WWV_FLOW.LF||
                                  '    end if; '||WWV_FLOW.LF||
                                  '  elsif l_mode =''ADMIN_ONLY'' then'||WWV_FLOW.LF||
                                  '    if l_priv = ''ADMIN'' then'||WWV_FLOW.LF||
                                  '      return true;'||WWV_FLOW.LF||
                                  '    else'||WWV_FLOW.LF||
                                  '      return false;'||WWV_FLOW.LF||
                                  '    end if; '||WWV_FLOW.LF||
                                  '  else'||WWV_FLOW.LF||
                                  '    return false;'||WWV_FLOW.LF||
                                  '  end if;'||WWV_FLOW.LF||
                                  '  return false;'||WWV_FLOW.LF||
                                  'end;',
              P_CACHING       =>'BY_USER_BY_PAGE_VIEW',
              P_ERROR_MESSAGE =>WWV_FLOW_LANG.SYSTEM_MESSAGE('ACCESS_CONTROL_NO_PRIV'));
    END IF;
 
    FOR C1 IN (SELECT 1 FROM WWV_FLOW_SECURITY_SCHEMES
               WHERE NAME = WWV_FLOW_LANG.SYSTEM_MESSAGE('ACCESS_CONTROL_VIEW_AUTH')
               AND FLOW_ID = P_FLOW_ID
               AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID)
    LOOP
        L_AC_VIEW_FOUND := TRUE;
    END LOOP;
    IF NOT L_AC_VIEW_FOUND THEN
        WWV_FLOW_API.CREATE_SECURITY_SCHEME(
              P_FLOW_ID       => P_FLOW_ID,
              P_NAME          =>WWV_FLOW_LANG.SYSTEM_MESSAGE('ACCESS_CONTROL_VIEW_AUTH'),
              P_SCHEME_TYPE   =>'NATIVE_FUNCTION_BODY',
              P_ATTRIBUTE_01  =>'declare'||WWV_FLOW.LF||
                                '  l_setup_id number;'||WWV_FLOW.LF||
                                '  l_mode     varchar2(50);'||WWV_FLOW.LF||
                                '  l_priv     varchar2(50);'||WWV_FLOW.LF||
                                'begin '||WWV_FLOW.LF||
                                '  if apex_application.is_custom_auth_page then'||WWV_FLOW.LF||
                                '    return true;'||WWV_FLOW.LF||
                                '  end if;'||WWV_FLOW.LF||
                                '  '||WWV_FLOW.LF||
                                '  for c1 in (select id, application_mode'||WWV_FLOW.LF||
                                '             from apex_access_setup'||WWV_FLOW.LF||
                                '             where application_id = :app_id)'||WWV_FLOW.LF||
                                '  loop'||WWV_FLOW.LF||
                                '   l_setup_id := c1.id;'||WWV_FLOW.LF||
                                '   l_mode := c1.application_mode;'||WWV_FLOW.LF||
                                '  end loop;'||WWV_FLOW.LF||
                                '  '||WWV_FLOW.LF||
                                '  if (l_mode = ''ALL'') or (l_mode is null) then '||WWV_FLOW.LF||
                                '    return true;'||WWV_FLOW.LF||
                                '  end if; '||WWV_FLOW.LF||
                                '  '||WWV_FLOW.LF||
                                '  for c1 in (select admin_privileges'||WWV_FLOW.LF||
                                '             from apex_access_control'||WWV_FLOW.LF||
                                '             where upper(admin_username) = upper(:app_user)'||WWV_FLOW.LF||
                                '             and setup_id = l_setup_id)'||WWV_FLOW.LF||
                                '  loop'||WWV_FLOW.LF||
                                '    l_priv := c1.admin_privileges;'||WWV_FLOW.LF||
                                '  end loop;'||WWV_FLOW.LF||
                                '  '||WWV_FLOW.LF||
                                '  if l_mode = ''RESTRICTED'' then '||WWV_FLOW.LF||
                                '    if l_priv in (''VIEW'',''ADMIN'',''EDIT'') then '||WWV_FLOW.LF||
                                '      return true;'||WWV_FLOW.LF||
                                '    else '||WWV_FLOW.LF||
                                '      return false;'||WWV_FLOW.LF||
                                '    end if;'||WWV_FLOW.LF||
                                '  elsif l_mode = ''ADMIN_ONLY'' then '||WWV_FLOW.LF||
                                '    if l_priv = ''ADMIN'' then '||WWV_FLOW.LF||
                                '      return true;'||WWV_FLOW.LF||
                                '    else '||WWV_FLOW.LF||
                                '      return false;'||WWV_FLOW.LF||
                                '    end if;'||WWV_FLOW.LF||
                                '  elsif l_mode = ''PUBLIC_RESTRICTED'' then '||WWV_FLOW.LF||
                                '    return true;'||WWV_FLOW.LF||
                                '  else'||WWV_FLOW.LF||
                                '    return false;'||WWV_FLOW.LF||
                                '  end if;'||WWV_FLOW.LF||
                                '  return false;'||WWV_FLOW.LF||
                                'end;',
              P_CACHING       =>'BY_USER_BY_PAGE_VIEW',
              P_ERROR_MESSAGE =>WWV_FLOW_LANG.SYSTEM_MESSAGE('ACCESS_CONTROL_NO_PRIV'));
    END IF;
 EXCEPTION WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR (-20001,WWV_FLOW_LANG.SYSTEM_MESSAGE('ACCESS_CONTROL_CREATE_PAGE_ERROR',SQLERRM));
 END CREATE_ACCESS_CONTROL;
 
 
 PROCEDURE CREATE_DYNAMIC_QUERY (
     P_FLOW_ID                   IN NUMBER   DEFAULT NULL,
     P_PAGE_ID                   IN NUMBER   DEFAULT NULL,
     P_PAGE_NAME                 IN VARCHAR2 DEFAULT NULL,
     P_GROUP_NAME                IN VARCHAR2 DEFAULT NULL,
     P_PAGE_MODE                 IN VARCHAR2,
     P_USER_INTERFACE_ID         IN NUMBER,
     P_REGION_NAME               IN VARCHAR2 DEFAULT NULL,
     P_REGION_TEMPLATE           IN VARCHAR2 DEFAULT NULL,
     P_TAB_SET                   IN VARCHAR2 DEFAULT NULL,
     P_TAB_NAME                  IN VARCHAR2 DEFAULT NULL,
     P_TAB_TEXT                  IN VARCHAR2 DEFAULT NULL,
     
     P_NAV_LIST_ID               IN NUMBER   DEFAULT NULL,
     P_NAV_LIST_ITEM_ID          IN NUMBER   DEFAULT NULL,
     P_NAV_LIST_ITEM_NAME        IN VARCHAR2 DEFAULT NULL,
     P_NAV_LIST_PARENT_ITEM_ID   IN NUMBER   DEFAULT NULL,
     P_NAV_LIST_CHILD_ITEM_NAME  IN VARCHAR2 DEFAULT NULL,
     
     P_BREADCRUMB_ID             IN NUMBER   DEFAULT NULL,
     P_BREADCRUMB_NAME           IN VARCHAR2 DEFAULT NULL,
     P_PARENT_BC_ID              IN  NUMBER  DEFAULT NULL,
     
     P_QUERY                     IN VARCHAR2 DEFAULT NULL,
     P_SHOW_DETAIL_LINK          IN VARCHAR2 DEFAULT NULL,
     P_USE_UI_DEFAULTS           IN VARCHAR2 DEFAULT NULL,
     P_BASE_PK1                  IN VARCHAR2 DEFAULT NULL,
     P_BASE_PK2                  IN VARCHAR2 DEFAULT NULL,
     P_BASE_PK3                  IN VARCHAR2 DEFAULT NULL
    )
 IS
     L_GROUP_ID  NUMBER := NULL;
 BEGIN
   
   
   
   WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
       P_FLOW_ID           => P_FLOW_ID,
       P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
    
    
    
    IF NOT PAGE_EXISTS (P_FLOW_ID,P_PAGE_ID) THEN
 
        
        
        
        IF P_GROUP_NAME IS NOT NULL THEN
            L_GROUP_ID := WWV_FLOW_UTILITIES.GET_PAGE_GROUP_ID(P_GROUP_NAME => P_GROUP_NAME, P_APPLICATION_ID => P_FLOW_ID);
            
            IF L_GROUP_ID IS NULL THEN
                L_GROUP_ID := WWV_FLOW_ID.NEXT_VAL;
                WWV_FLOW_API.CREATE_PAGE_GROUP(P_ID => L_GROUP_ID, P_FLOW_ID => P_FLOW_ID, P_GROUP_NAME => P_GROUP_NAME);
            END IF;
        END IF;
 
        WWV_FLOW_API.CREATE_PAGE(
          P_ID                  => P_PAGE_ID,
          P_FLOW_ID             => P_FLOW_ID,
          P_TAB_SET             => REPLACE(P_TAB_SET,'%null%',NULL),
          P_NAME                => P_PAGE_NAME,
          P_PAGE_MODE           => P_PAGE_MODE,
          P_GROUP_ID            => L_GROUP_ID,
          P_USER_INTERFACE_ID   => P_USER_INTERFACE_ID,
          P_STEP_TITLE          => P_PAGE_NAME,
          P_STEP_SUB_TITLE      => P_PAGE_NAME,
          P_STEP_SUB_TITLE_TYPE => 'TEXT_WITH_SUBSTITUTIONS',
          P_WELCOME_TEXT        => '',
          P_BOX_WELCOME_TEXT    => '',
          P_BOX_FOOTER_TEXT     => '',
          P_FOOTER_TEXT         => '',
          P_STEP_TEMPLATE       => '',
          P_PAGE_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_PAGE_TEMPLATE, 'PAGE'),
          P_BOX_IMAGE           => '',
          P_REQUIRED_ROLE       => '',
          P_PAGE_COMMENT       => NULL);
 
 
       IF P_NAV_LIST_ID IS NOT NULL THEN
         
         CREATE_NAVIGATION_LIST_ITEM (
             P_FLOW_ID                  => P_FLOW_ID,
             P_PAGE_ID                  => P_PAGE_ID,
             P_PAGE_NAME                => P_PAGE_NAME,
             P_NAV_LIST_ID              => P_NAV_LIST_ID,
             P_NAV_LIST_ITEM_ID         => P_NAV_LIST_ITEM_ID,
             P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_ITEM_NAME,
             P_NAV_LIST_PARENT_ITEM_ID  => P_NAV_LIST_PARENT_ITEM_ID,
             P_NAV_LIST_CHILD_ITEM_NAME => P_NAV_LIST_CHILD_ITEM_NAME
         );
       ELSE
 
           
           IF REPLACE(P_TAB_SET,'%null%',NULL) IS NOT NULL THEN
               CREATE_TAB (
                  P_FLOW_ID  => P_FLOW_ID,
                  P_PAGE_ID  => P_PAGE_ID,
                  P_TAB_SET  => P_TAB_SET,
                  P_TAB_NAME => P_TAB_NAME,
                  P_TAB_TEXT => P_TAB_TEXT);
           END IF;
 
       END IF;
 
 
    END IF;
 
    
    
    
     WWV_FLOW_WIZARD_API.CREATE_BREADCRUMB_REGION (
         P_APPLICATION_ID             => P_FLOW_ID,
         P_PAGE_ID                    => P_PAGE_ID,
         P_SEQ                        => 10,
         P_BREADCRUMB_ID              => P_BREADCRUMB_ID,
         P_BREADCRUMB_ENTRY_NAME      => P_BREADCRUMB_NAME,
         P_PARENT_BREADCRUMB_ENTRY_ID => P_PARENT_BC_ID );
 
 
    CREATE_DYNAMIC_QUERY_REGION (
        P_FLOW_ID                       => P_FLOW_ID,
        P_PAGE_ID                       => P_PAGE_ID,
        P_PLUG_NAME                     => P_REGION_NAME,
        P_PLUG_TEMPLATE                 => P_REGION_TEMPLATE,
        P_PLUG_DISPLAY_SEQUENCE         => '10',
        P_PLUG_DISPLAY_POINT            => 'BODY',
        P_PLUG_SOURCE                   => P_QUERY,
        P_SHOW_DETAIL_LINK              => P_SHOW_DETAIL_LINK,
        P_USE_UI_DEFAULTS               => P_USE_UI_DEFAULTS,
        P_BASE_PK1                      => P_BASE_PK1,
        P_BASE_PK2                      => P_BASE_PK2,
        P_BASE_PK3                      => P_BASE_PK3
        );
 END CREATE_DYNAMIC_QUERY;
 
 PROCEDURE CREATE_IR_REGION (
     P_ID                            IN NUMBER   DEFAULT NULL,
     P_FLOW_ID                       IN NUMBER   DEFAULT NULL,
     P_PAGE_ID                       IN NUMBER   DEFAULT NULL,
     P_MIGRATE_FROM_REGION           IN NUMBER   DEFAULT NULL,
     P_PLUG_NAME                     IN VARCHAR2 DEFAULT NULL,
     P_PLUG_TEMPLATE                 IN VARCHAR2 DEFAULT NULL,
     P_PARENT_PLUG_ID                IN NUMBER   DEFAULT NULL,
     P_PLUG_DISPLAY_SEQUENCE         IN VARCHAR2 DEFAULT NULL,
     P_PLUG_DISPLAY_COLUMN           IN VARCHAR2 DEFAULT NULL,
     P_PLUG_DISPLAY_POINT            IN VARCHAR2 DEFAULT NULL,
     P_AJAX_ITEMS_TO_SUBMIT          IN VARCHAR2 DEFAULT NULL,
     
     P_QUERY_TYPE                    IN VARCHAR2,
     P_LOCATION                      IN VARCHAR2 DEFAULT 'LOCAL',
     P_REMOTE_SERVER_ID              IN NUMBER   DEFAULT NULL,
     P_WEB_SRC_MODULE_ID             IN NUMBER   DEFAULT NULL,
     P_OWNER                         IN VARCHAR2 DEFAULT NULL,
     P_TABLE_NAME                    IN VARCHAR2 DEFAULT NULL,
     P_SQL_SOURCE                    IN VARCHAR2 DEFAULT NULL,
     P_INCLUDE_ROWID_COLUMN          IN BOOLEAN  DEFAULT FALSE,
     
     P_COLUMNS                       IN VARCHAR2 DEFAULT NULL,
     P_LOOKUPS                       IN T_LOOKUPS DEFAULT C_EMPTY_LOOKUP,
     
     P_PLUG_REQUIRED_ROLE            IN VARCHAR2 DEFAULT NULL,
     P_PLUG_DISPLAY_WHEN_CONDITION   IN VARCHAR2 DEFAULT NULL,
     P_PLUG_DISPLAY_WHEN_COND2       IN VARCHAR2 DEFAULT NULL,
     P_PLUG_DISPLAY_CONDITION_TYPE   IN VARCHAR2 DEFAULT NULL,
     P_PLUG_HEADER                   IN VARCHAR2 DEFAULT NULL,
     P_PLUG_FOOTER                   IN VARCHAR2 DEFAULT NULL,
     
     P_PLUG_CUSTOMIZED               IN VARCHAR2 DEFAULT NULL,
     P_PLUG_CUSTOMIZED_NAME          IN VARCHAR2 DEFAULT NULL,
     
     P_PLUG_QUERY_NUM_ROWS           IN NUMBER   DEFAULT NULL,
     P_PLUG_QUERY_SHOW_NULLS_AS      IN VARCHAR2 DEFAULT NULL,
     P_PLUG_QUERY_NO_DATA_FOUND      IN VARCHAR2 DEFAULT NULL,
     P_PLUG_QUERY_ROW_COUNT_MAX      IN NUMBER   DEFAULT NULL,
     
     P_PAGINATION_DISPLAY_POSITION   IN VARCHAR2 DEFAULT NULL,
     
     P_REQUIRED_PATCH                IN VARCHAR2 DEFAULT NULL,
     P_PLUG_COMMENT                  IN VARCHAR2 DEFAULT NULL,
     
     P_SHOW_DETAIL_LINK              IN VARCHAR2 DEFAULT NULL,
     P_USE_UI_DEFAULTS               IN VARCHAR2 DEFAULT NULL,
     P_BASE_PK1                      IN VARCHAR2 DEFAULT NULL,
     P_BASE_PK2                      IN VARCHAR2 DEFAULT NULL,
     P_BASE_PK3                      IN VARCHAR2 DEFAULT NULL,
     P_WEB_SRC_PARAM_COLLECTION      IN VARCHAR2 DEFAULT NULL )
 IS
     L_REGION_ID                NUMBER;
     L_WORKSHEET_ID             NUMBER;
 
     L_COLUMNS                  VARCHAR2(32767) := P_COLUMNS;
     L_LOOKUPS                  T_LOOKUPS;
 
     L_QUERY_TYPE               WWV_FLOW_PAGE_PLUGS.QUERY_TYPE%TYPE  := P_QUERY_TYPE;
     L_SQL_SOURCE               WWV_FLOW_PAGE_PLUGS.PLUG_SOURCE%TYPE := P_SQL_SOURCE;
     L_PLUG_SOURCE_TYPE         VARCHAR2(4000);
     L_DETAIL_LINK_TEXT         VARCHAR2(4000);
     L_ALIGNMENT                VARCHAR2(255);
     L_LABEL                    VARCHAR2(4000);
     L_FORMAT_MASK              VARCHAR2(4000);
     L_COLUMN_LINK              VARCHAR2(4000);
     L_COLUMN_LINKTEXT          VARCHAR2(4000);
     L_COLUMN_LINK_ATTR         VARCHAR2(4000);
     L_DISPLAY_SEQUENCE         NUMBER;
     L_DISPLAY_TEXT_AS          VARCHAR2(255);
     L_DISPLAY_CONDITION_TYPE   VARCHAR2(255);
     L_DISPLAY_CONDITION        VARCHAR2(4000);
     L_DISPLAY_CONDITION2       VARCHAR2(4000);
     L_SECURITY_SCHEME          VARCHAR2(255);
 
     L_ALLOW_SORTING            VARCHAR2(1);
     L_ALLOW_FILTERING          VARCHAR2(1);
     L_ALLOW_HIGHLIGHTING       VARCHAR2(1);
     L_ALLOW_CTRL_BREAKS        VARCHAR2(1);
     L_ALLOW_AGGREGATIONS       VARCHAR2(1);
     L_ALLOW_COMPUTATIONS       VARCHAR2(1);
     L_ALLOW_CHARTING           VARCHAR2(1);
     L_ALLOW_GROUP_BY           VARCHAR2(1);
     L_ALLOW_PIVOT              VARCHAR2(1);
     L_ALLOW_HIDE               VARCHAR2(1);
     L_DISPLAY_IN_DEFAULT_RPT   VARCHAR2(1);
     L_RPT_SHOW_FILTER_LOV      VARCHAR2(1);
     L_TZ_DEPENDENT             VARCHAR2(1);
     L_DOWNLOAD_FILENAME        VARCHAR2(255);
     L_DOWNLOAD_FORMATS         VARCHAR2(30) := 'CSV:HTML:EMAIL:XLS:PDF:RTF';
 
     L_DESCRIBE_RESULT          WWV_FLOW_EXEC_DEV.T_DESCRIBE_RESULT;
     L_DATA_TYPE_STRING         WWV_FLOW_GLOBAL.T_DBMS_ID;
     L_COLUMN_OK                BOOLEAN;
 BEGIN
     
     
     
     WWV_FLOW_API.CHECK_SGID;
     WWV_FLOW_API.CHECK_VERSION;
 
     IF P_USE_UI_DEFAULTS = 'N' THEN
         WWV_FLOW_HINT.G_USE_UI_DEFAULTS := FALSE;
     END IF;
 
     IF P_ID IS NULL THEN
         L_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
     ELSE
         L_REGION_ID := P_ID;
     END IF;
 
     L_WORKSHEET_ID := WWV_FLOW_ID.NEXT_VAL;
     L_PLUG_SOURCE_TYPE := WWV_FLOW_REGION_NATIVE.C_IR;
 
     
     IF P_LOCATION = 'LOCAL' AND P_QUERY_TYPE = 'TABLE' AND P_LOOKUPS.COUNT > 0 THEN
         L_QUERY_TYPE := 'SQL';
         L_LOOKUPS := P_LOOKUPS;
         L_SQL_SOURCE := BUILD_LOOKUP_SQL(
                             P_FLOW_ID        => P_FLOW_ID,
                             P_OWNER          => P_OWNER,
                             P_TABLE_NAME     => P_TABLE_NAME,
                             P_DISPLAY_COLUMN => L_COLUMNS,
                             P_LOOKUPS        => L_LOOKUPS );
     END IF;
 
     WWV_FLOW_API.CREATE_PAGE_PLUG (
         P_ID                            => L_REGION_ID,
         P_FLOW_ID                       => P_FLOW_ID,
         P_PAGE_ID                       => P_PAGE_ID,
         P_PLUG_NAME                     => P_PLUG_NAME,
         P_PLUG_TEMPLATE                 => P_PLUG_TEMPLATE,
         P_PLUG_SOURCE_TYPE              => L_PLUG_SOURCE_TYPE,
         P_REGION_TEMPLATE_OPTIONS       => GET_PRESET_TEMPLATE_OPTIONS (P_PLUG_TEMPLATE,'REGION'),
         P_PARENT_PLUG_ID                => P_PARENT_PLUG_ID,
         P_PLUG_DISPLAY_SEQUENCE         => P_PLUG_DISPLAY_SEQUENCE,
         P_PLUG_DISPLAY_COLUMN           => P_PLUG_DISPLAY_COLUMN,
         P_PLUG_DISPLAY_POINT            => P_PLUG_DISPLAY_POINT,
         P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
         P_AJAX_ITEMS_TO_SUBMIT          => P_AJAX_ITEMS_TO_SUBMIT,
         
         P_QUERY_TYPE                    => L_QUERY_TYPE,
         P_LOCATION                      => P_LOCATION,
         P_REMOTE_SERVER_ID              => P_REMOTE_SERVER_ID,
         P_WEB_SRC_MODULE_ID             => P_WEB_SRC_MODULE_ID,
         P_QUERY_OWNER                   => P_OWNER,
         P_QUERY_TABLE                   => P_TABLE_NAME,
         P_INCLUDE_ROWID_COLUMN          => P_INCLUDE_ROWID_COLUMN,
         P_PLUG_SOURCE                   => L_SQL_SOURCE,
         
         P_PLUG_REQUIRED_ROLE            => P_PLUG_REQUIRED_ROLE,
         P_PLUG_DISPLAY_WHEN_CONDITION   => P_PLUG_DISPLAY_WHEN_CONDITION,
         P_PLUG_DISPLAY_WHEN_COND2       => P_PLUG_DISPLAY_WHEN_COND2,
         P_PLUG_DISPLAY_CONDITION_TYPE   => P_PLUG_DISPLAY_CONDITION_TYPE,
         P_PLUG_HEADER                   => P_PLUG_HEADER,
         P_PLUG_FOOTER                   => P_PLUG_FOOTER,
         
         P_PLUG_CUSTOMIZED               => P_PLUG_CUSTOMIZED,
         P_PLUG_CUSTOMIZED_NAME          => P_PLUG_CUSTOMIZED_NAME,
         
         P_PLUG_QUERY_NUM_ROWS           => P_PLUG_QUERY_NUM_ROWS,
         P_PLUG_QUERY_SHOW_NULLS_AS      => P_PLUG_QUERY_SHOW_NULLS_AS,
         P_PLUG_QUERY_NO_DATA_FOUND      => P_PLUG_QUERY_NO_DATA_FOUND,
         P_PLUG_QUERY_ROW_COUNT_MAX      => P_PLUG_QUERY_ROW_COUNT_MAX,
         
         P_PAGINATION_DISPLAY_POSITION   => P_PAGINATION_DISPLAY_POSITION,
         
         P_REQUIRED_PATCH                => P_REQUIRED_PATCH,
         P_PLUG_COMMENT                  => P_PLUG_COMMENT);
 
     IF P_SHOW_DETAIL_LINK = 'Y' THEN
         L_DETAIL_LINK_TEXT := C_EDIT_IMAGE;
     END IF;
 
     WWV_FLOW_API.CREATE_WORKSHEET (
         P_ID                         => L_WORKSHEET_ID,
         P_FLOW_ID                    => P_FLOW_ID,
         P_PAGE_ID                    => P_PAGE_ID,
         P_REGION_ID                  => L_REGION_ID,
         P_NAME                       => P_PLUG_NAME,
         P_DOWNLOAD_FORMATS           => L_DOWNLOAD_FORMATS,
         P_DOWNLOAD_FILENAME          => L_DOWNLOAD_FILENAME,
         P_MAX_ROW_COUNT              => NULL,
         P_MAX_ROW_COUNT_MESSAGE      => WWV_FLOW_LANG.SYSTEM_MESSAGE('APEXIR_MAX_ROW_CNT','#MAX_ROW_COUNT#'),
         P_NO_DATA_FOUND_MESSAGE      => WWV_FLOW_LANG.SYSTEM_MESSAGE('F4000.NO_DATA_FOUND'),
         P_SHOW_DETAIL_LINK           => P_SHOW_DETAIL_LINK,
         P_DETAIL_LINK_TEXT           => L_DETAIL_LINK_TEXT,
         P_BASE_PK1                   => P_BASE_PK1,
         P_BASE_PK2                   => P_BASE_PK2,
         P_BASE_PK3                   => P_BASE_PK3,
         P_PAGINATION_TYPE            => 'ROWS_X_TO_Y',
         P_PAGINATION_DISPLAY_POS     => 'BOTTOM_RIGHT',
         P_SHOW_NULLS_AS              => '-',
         P_ICON_VIEW_ENABLED_YN       => 'N',
         P_ICON_VIEW_USE_CUSTOM       => 'N',
         P_DETAIL_VIEW_ENABLED_YN     => 'N');
 
     L_DESCRIBE_RESULT := WWV_FLOW_EXEC_DEV.CHECK_AND_DESCRIBE(
         P_LOCATION          => CASE P_LOCATION
                                    WHEN 'LOCAL' THEN WWV_FLOW_EXEC_API.C_LOCATION_LOCAL_DB
                                    WHEN 'REMOTE' THEN WWV_FLOW_EXEC_API.C_LOCATION_REMOTE_DB
                                    WHEN 'WEB_SOURCE' THEN WWV_FLOW_EXEC_API.C_LOCATION_WEB_SOURCE END,
         P_QUERY_TYPE        => CASE L_QUERY_TYPE
                                    WHEN 'TABLE' THEN WWV_FLOW_EXEC_API.C_QUERY_TYPE_TABLE
                                    WHEN 'SQL' THEN WWV_FLOW_EXEC_API.C_QUERY_TYPE_SQL_QUERY
                                    WHEN 'QUERY' THEN WWV_FLOW_EXEC_API.C_QUERY_TYPE_SQL_QUERY END,
         P_OWNER             => P_OWNER,
         P_TABLE_NAME        => P_TABLE_NAME,
         P_SQL_QUERY         => L_SQL_SOURCE,
         P_TEST_FOR_ROWID    => FALSE,
         P_REMOTE_SERVER_ID  => P_REMOTE_SERVER_ID,
         P_WEB_SRC_MODULE_ID => P_WEB_SRC_MODULE_ID,
         P_APPLICATION_ID    => P_FLOW_ID );
 
     FOR I IN 1 .. L_DESCRIBE_RESULT.QUERY_COLUMNS.COUNT LOOP
 
         L_COLUMN_OK := TRUE;
 
         IF ( (L_QUERY_TYPE = 'TABLE') OR (P_LOCATION = 'WEB_SOURCE') ) AND 
             L_COLUMNS IS NOT NULL AND
             INSTR( ':' || L_COLUMNS || ':', ':' || L_DESCRIBE_RESULT.QUERY_COLUMNS( I ).NAME || ':' ) = 0 
         THEN
             L_COLUMN_OK := FALSE;
         END IF;
        
         IF L_COLUMN_OK AND NOT L_DESCRIBE_RESULT.QUERY_COLUMNS( I ).DATA_TYPE = WWV_FLOW_EXEC_API.C_DATA_TYPE_BLOB THEN
             
             
             WWV_FLOW_HINT.GET_AD_UI_DEFAULTS (
                 P_SGID        => WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID,
                 P_COLUMN_NAME => L_DESCRIBE_RESULT.QUERY_COLUMNS(I).NAME );
 
             L_ALIGNMENT            := NVL(WWV_FLOW_HINT.G_REPORT_COL_ALIGNMENT,'LEFT');
             L_ALLOW_SORTING        := 'Y';
             L_ALLOW_FILTERING      := 'Y';
             L_ALLOW_HIGHLIGHTING   := 'Y';
             L_ALLOW_CTRL_BREAKS    := 'Y';
             L_ALLOW_AGGREGATIONS   := 'Y';
             L_ALLOW_COMPUTATIONS   := 'Y';
             L_ALLOW_CHARTING       := 'Y';
             L_ALLOW_GROUP_BY       := 'Y';
             L_ALLOW_PIVOT          := 'Y';
             L_ALLOW_HIDE           := 'Y';
             L_RPT_SHOW_FILTER_LOV  := 'D';
             L_TZ_DEPENDENT         := 'N';
 
             IF L_DESCRIBE_RESULT.QUERY_COLUMNS( I ).DATA_TYPE = WWV_FLOW_EXEC_API.C_DATA_TYPE_VARCHAR2 THEN
                 L_DATA_TYPE_STRING := 'STRING';
 
             ELSIF L_DESCRIBE_RESULT.QUERY_COLUMNS( I ).DATA_TYPE = WWV_FLOW_EXEC_API.C_DATA_TYPE_NUMBER THEN
                 L_DATA_TYPE_STRING := 'NUMBER';
                 L_ALIGNMENT        := 'RIGHT';
 
             ELSIF L_DESCRIBE_RESULT.QUERY_COLUMNS( I ).DATA_TYPE = WWV_FLOW_EXEC_API.C_DATA_TYPE_CLOB THEN
                 L_DATA_TYPE_STRING    := 'STRING';
                 L_ALLOW_SORTING       := 'N';
                 L_ALLOW_CTRL_BREAKS   := 'N';
                 L_ALLOW_AGGREGATIONS  := 'N';
                 L_ALLOW_COMPUTATIONS  := 'N';
                 L_ALLOW_CHARTING      := 'N';
                 L_ALLOW_GROUP_BY      := 'N';
                 L_ALLOW_PIVOT         := 'N';
                 L_RPT_SHOW_FILTER_LOV := 'N';
 
             ELSIF L_DESCRIBE_RESULT.QUERY_COLUMNS( I ).DATA_TYPE = WWV_FLOW_EXEC_API.C_DATA_TYPE_TIMESTAMP_LTZ THEN
                 L_TZ_DEPENDENT        := 'Y';
                 L_DATA_TYPE_STRING    := 'DATE';
 
             ELSIF L_DESCRIBE_RESULT.QUERY_COLUMNS( I ).DATA_TYPE IN ( 
                 WWV_FLOW_EXEC_API.C_DATA_TYPE_DATE,
                 WWV_FLOW_EXEC_API.C_DATA_TYPE_TIMESTAMP,
                 WWV_FLOW_EXEC_API.C_DATA_TYPE_TIMESTAMP_TZ )
             THEN
                 L_DATA_TYPE_STRING    := 'DATE';
             ELSE
                 L_DATA_TYPE_STRING    := 'OTHER';
                 L_ALLOW_SORTING       := 'N';
                 L_ALLOW_FILTERING     := 'N';
                 L_ALLOW_HIGHLIGHTING  := 'N';
                 L_ALLOW_CTRL_BREAKS   := 'N';
                 L_ALLOW_AGGREGATIONS  := 'N';
                 L_ALLOW_COMPUTATIONS  := 'N';
                 L_ALLOW_CHARTING      := 'N';
                 L_ALLOW_GROUP_BY      := 'N';
                 L_ALLOW_PIVOT         := 'N';
                 L_RPT_SHOW_FILTER_LOV := 'N';
             END IF;
 
             L_DISPLAY_SEQUENCE        := NULL;
             L_LABEL                   := ESCAPE_REPORT_LABEL(NVL(WWV_FLOW_HINT.G_LABEL,INITCAP(REPLACE(L_DESCRIBE_RESULT.QUERY_COLUMNS(I).NAME,'_',' '))));
             L_FORMAT_MASK             := WWV_FLOW_HINT.G_REPORT_FORMAT_MASK;
             L_COLUMN_LINK             := NULL;
             L_COLUMN_LINKTEXT         := NULL;
             L_COLUMN_LINK_ATTR        := NULL;
             L_DISPLAY_TEXT_AS         := 'ESCAPE_SC';
             L_DISPLAY_CONDITION_TYPE  := NULL;
             L_DISPLAY_CONDITION       := NULL;
             L_DISPLAY_CONDITION2      := NULL;
             L_SECURITY_SCHEME         := NULL;
 
             
             L_DISPLAY_IN_DEFAULT_RPT := 'Y';
             FOR J IN 1..L_LOOKUPS.COUNT
             LOOP
                 IF L_LOOKUPS(J).COLUMN_NAME = L_DESCRIBE_RESULT.QUERY_COLUMNS(I).NAME THEN
                     
                     L_DISPLAY_IN_DEFAULT_RPT := 'N';
                     L_DISPLAY_TEXT_AS := 'HIDDEN';
                     L_LOOKUPS(J).COLUMN_LABEL := L_LABEL;
                 ELSIF L_LOOKUPS(J).LOOKUP_COLUMN_ALIAS = L_DESCRIBE_RESULT.QUERY_COLUMNS(I).NAME THEN
                     L_LABEL := L_LOOKUPS(J).COLUMN_LABEL;
                 END IF;
             END LOOP;
 
             
             IF P_MIGRATE_FROM_REGION IS NOT NULL THEN
                 FOR C1 IN (SELECT NVL(COLUMN_HEADING, INITCAP(COLUMN_ALIAS)) LABEL, COLUMN_DISPLAY_SEQUENCE, COLUMN_FORMAT,
                                   COLUMN_LINK, COLUMN_LINKTEXT, COLUMN_LINK_ATTR, HIDDEN_COLUMN, DISPLAY_WHEN_COND_TYPE,
                                   DISPLAY_WHEN_CONDITION, DISPLAY_WHEN_CONDITION2, DISPLAY_AS, REPORT_COLUMN_REQUIRED_ROLE
                              FROM WWV_FLOW_REGION_REPORT_COLUMN
                             WHERE FLOW_ID = P_FLOW_ID
                               AND REGION_ID = P_MIGRATE_FROM_REGION
                               AND COLUMN_ALIAS = L_DESCRIBE_RESULT.QUERY_COLUMNS(I).NAME ) LOOP
 
                     L_LABEL            := C1.LABEL;
                     L_DISPLAY_SEQUENCE := C1.COLUMN_DISPLAY_SEQUENCE;
                     L_FORMAT_MASK      := C1.COLUMN_FORMAT;
                     L_COLUMN_LINK      := C1.COLUMN_LINK;
                     L_COLUMN_LINKTEXT  := C1.COLUMN_LINKTEXT;
                     L_COLUMN_LINK_ATTR := C1.COLUMN_LINK_ATTR;
                     IF C1.DISPLAY_AS = 'ESCAPE_SC' THEN
                         L_DISPLAY_TEXT_AS := 'ESCAPE_SC';
                     END IF;
                     IF C1.HIDDEN_COLUMN = 'Y' THEN
                         L_DISPLAY_TEXT_AS := 'HIDDEN';
                     END IF;
                     L_DISPLAY_CONDITION_TYPE   := C1.DISPLAY_WHEN_COND_TYPE;
                     L_DISPLAY_CONDITION        := C1.DISPLAY_WHEN_CONDITION;
                     L_DISPLAY_CONDITION2       := C1.DISPLAY_WHEN_CONDITION2;
                     L_SECURITY_SCHEME          := C1.REPORT_COLUMN_REQUIRED_ROLE;
                 END LOOP;
             END IF;
 
             IF L_DISPLAY_SEQUENCE IS NULL THEN
                 L_DISPLAY_SEQUENCE := I;
             END IF;
 
             WWV_FLOW_API.CREATE_WORKSHEET_COLUMN (
                 P_WORKSHEET_ID            => L_WORKSHEET_ID,
                 P_FLOW_ID                 => P_FLOW_ID,
                 P_PAGE_ID                 => P_PAGE_ID,
                 
                 P_DB_COLUMN_NAME          => L_DESCRIBE_RESULT.QUERY_COLUMNS(I).NAME,
                 P_DISPLAY_ORDER           => L_DISPLAY_SEQUENCE,
                 P_COLUMN_LABEL            => L_LABEL,
                 P_REPORT_LABEL            => L_LABEL,
                 P_COLUMN_LINK             => L_COLUMN_LINK,
                 P_COLUMN_LINKTEXT         => L_COLUMN_LINKTEXT,
                 P_COLUMN_LINK_ATTR        => L_COLUMN_LINK_ATTR,
                 P_COLUMN_TYPE             => L_DATA_TYPE_STRING,
                 P_HEADING_ALIGNMENT       => L_ALIGNMENT,
                 P_COLUMN_ALIGNMENT        => L_ALIGNMENT,
                 P_DISPLAY_AS              => 'TEXT',
                 P_DISPLAY_TEXT_AS         => L_DISPLAY_TEXT_AS,
                 P_FORMAT_MASK             => L_FORMAT_MASK,
                 P_TZ_DEPENDENT            => L_TZ_DEPENDENT,
                 P_DISPLAY_IN_DEFAULT_RPT  => L_DISPLAY_IN_DEFAULT_RPT,
                 
                 P_ALLOW_SORTING           => L_ALLOW_SORTING,
                 P_ALLOW_FILTERING         => L_ALLOW_FILTERING,
                 P_ALLOW_HIGHLIGHTING      => L_ALLOW_HIGHLIGHTING,
                 P_ALLOW_CTRL_BREAKS       => L_ALLOW_CTRL_BREAKS,
                 P_ALLOW_AGGREGATIONS      => L_ALLOW_AGGREGATIONS,
                 P_ALLOW_COMPUTATIONS      => L_ALLOW_COMPUTATIONS,
                 P_ALLOW_CHARTING          => L_ALLOW_CHARTING,
                 P_ALLOW_GROUP_BY          => L_ALLOW_GROUP_BY,
                 P_ALLOW_PIVOT             => L_ALLOW_PIVOT,
                 P_ALLOW_HIDE              => L_ALLOW_HIDE,
                 P_RPT_SHOW_FILTER_LOV     => L_RPT_SHOW_FILTER_LOV,
                 P_DISPLAY_CONDITION_TYPE  => L_DISPLAY_CONDITION_TYPE,
                 P_DISPLAY_CONDITION       => L_DISPLAY_CONDITION,
                 P_DISPLAY_CONDITION2      => L_DISPLAY_CONDITION2,
                 P_SECURITY_SCHEME         => L_SECURITY_SCHEME);
 
         END IF;
     END LOOP;
 
     
     IF P_LOCATION = 'WEB_SOURCE' AND P_WEB_SRC_PARAM_COLLECTION IS NOT NULL THEN
         ADD_REGION_WEB_SOURCE_PARAMS(
             P_FLOW_ID         => P_FLOW_ID,
             P_PAGE_ID         => P_PAGE_ID,
             P_REGION_ID       => L_REGION_ID,
             P_COLLECTION_NAME => P_WEB_SRC_PARAM_COLLECTION,
             P_CREATE_ITEM     => TRUE );
     END IF;
 END CREATE_IR_REGION;
 
 PROCEDURE CREATE_IR_PAGE(
     P_FLOW_ID                   IN NUMBER   DEFAULT NULL,
     P_PAGE_ID                   IN NUMBER   DEFAULT NULL,
     P_PAGE_NAME                 IN VARCHAR2 DEFAULT NULL,
     P_GROUP_NAME                IN VARCHAR2 DEFAULT NULL,
     P_PAGE_MODE                 IN VARCHAR2, 
     P_USER_INTERFACE_ID         IN NUMBER,
     P_REGION_NAME               IN VARCHAR2 DEFAULT NULL,
     P_REGION_TEMPLATE           IN VARCHAR2 DEFAULT NULL,
     P_TAB_SET                   IN VARCHAR2 DEFAULT NULL,
     P_TAB_NAME                  IN VARCHAR2 DEFAULT NULL,
     P_TAB_TEXT                  IN VARCHAR2 DEFAULT NULL,
     
     P_NAV_LIST_ID               IN NUMBER   DEFAULT NULL,
     P_NAV_LIST_ITEM_ID          IN NUMBER   DEFAULT NULL,
     P_NAV_LIST_ITEM_NAME        IN VARCHAR2 DEFAULT NULL,
     P_NAV_LIST_PARENT_ITEM_ID   IN NUMBER   DEFAULT NULL,
     P_NAV_LIST_CHILD_ITEM_NAME  IN VARCHAR2 DEFAULT NULL,
     
     P_BREADCRUMB_ID             IN NUMBER   DEFAULT NULL,
     P_BREADCRUMB_NAME           IN VARCHAR2 DEFAULT NULL,
     P_PARENT_BC_ID              IN NUMBER   DEFAULT NULL,
     
     P_QUERY_TYPE                IN VARCHAR2,
     P_LOCATION                  IN VARCHAR2 DEFAULT 'LOCAL',
     P_REMOTE_SERVER_ID          IN NUMBER   DEFAULT NULL,
     P_WEB_SRC_MODULE_ID         IN NUMBER   DEFAULT NULL,
     P_TABLE_OWNER               IN VARCHAR2 DEFAULT NULL,
     P_TABLE_NAME                IN VARCHAR2 DEFAULT NULL,
     P_SQL_SOURCE                IN VARCHAR2 DEFAULT NULL,
     P_WHERE_CLAUSE              IN VARCHAR2 DEFAULT NULL,
     P_ORDER_BY_CLAUSE           IN VARCHAR2 DEFAULT NULL,
     P_INCLUDE_ROWID_COLUMN      IN BOOLEAN  DEFAULT FALSE,
     P_OPTIMIZER_HINT            IN VARCHAR2 DEFAULT NULL,
     
     P_COLUMNS                   IN VARCHAR2 DEFAULT NULL,
     P_LOOKUPS                   IN T_LOOKUPS DEFAULT C_EMPTY_LOOKUP,
     
     P_SHOW_DETAIL_LINK          IN VARCHAR2 DEFAULT NULL,
     P_USE_UI_DEFAULTS           IN VARCHAR2 DEFAULT NULL,
     P_BASE_PK1                  IN VARCHAR2 DEFAULT NULL,
     P_BASE_PK2                  IN VARCHAR2 DEFAULT NULL,
     P_BASE_PK3                  IN VARCHAR2 DEFAULT NULL,
     P_WEB_SRC_PARAM_COLLECTION  IN VARCHAR2 DEFAULT NULL )
 IS
     L_GROUP_ID  NUMBER := NULL;
 BEGIN
     
     
     
     WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
         P_FLOW_ID           => P_FLOW_ID,
         P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
     
     
     
     IF NOT PAGE_EXISTS (P_FLOW_ID,P_PAGE_ID) THEN
 
         
         
         
         IF P_GROUP_NAME IS NOT NULL THEN
             L_GROUP_ID := WWV_FLOW_UTILITIES.GET_PAGE_GROUP_ID(P_GROUP_NAME => P_GROUP_NAME, P_APPLICATION_ID => P_FLOW_ID);
             
             IF L_GROUP_ID IS NULL THEN
                 L_GROUP_ID := WWV_FLOW_ID.NEXT_VAL;
                 WWV_FLOW_API.CREATE_PAGE_GROUP(P_ID => L_GROUP_ID, P_FLOW_ID => P_FLOW_ID, P_GROUP_NAME => P_GROUP_NAME);
             END IF;
         END IF;
 
         WWV_FLOW_API.CREATE_PAGE(
             P_ID                  => P_PAGE_ID,
             P_FLOW_ID             => P_FLOW_ID,
             P_TAB_SET             => REPLACE(P_TAB_SET,'%null%',NULL),
             P_NAME                => P_PAGE_NAME,
             P_PAGE_MODE           => P_PAGE_MODE,
             P_GROUP_ID            => L_GROUP_ID,
             P_USER_INTERFACE_ID   => P_USER_INTERFACE_ID,
             P_STEP_TITLE          => P_PAGE_NAME,
             P_STEP_SUB_TITLE      => P_PAGE_NAME,
             P_STEP_SUB_TITLE_TYPE => 'TEXT_WITH_SUBSTITUTIONS',
             P_WELCOME_TEXT        => '',
             P_BOX_WELCOME_TEXT    => '',
             P_BOX_FOOTER_TEXT     => '',
             P_FOOTER_TEXT         => '',
             P_STEP_TEMPLATE       => '',
             P_PAGE_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_PAGE_TEMPLATE, 'PAGE'),
             P_BOX_IMAGE           => '',
             P_REQUIRED_ROLE       => '',
             P_PAGE_COMMENT       => NULL);
 
 
         IF P_NAV_LIST_ID IS NOT NULL THEN
         
             CREATE_NAVIGATION_LIST_ITEM (
                 P_FLOW_ID                  => P_FLOW_ID,
                 P_PAGE_ID                  => P_PAGE_ID,
                 P_PAGE_NAME                => P_PAGE_NAME,
                 P_NAV_LIST_ID              => P_NAV_LIST_ID,
                 P_NAV_LIST_ITEM_ID         => P_NAV_LIST_ITEM_ID,
                 P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_ITEM_NAME,
                 P_NAV_LIST_PARENT_ITEM_ID  => P_NAV_LIST_PARENT_ITEM_ID,
                 P_NAV_LIST_CHILD_ITEM_NAME => P_NAV_LIST_CHILD_ITEM_NAME);
         ELSE
 
             
             IF REPLACE(P_TAB_SET,'%null%',NULL) IS NOT NULL THEN
                 CREATE_TAB (
                     P_FLOW_ID  => P_FLOW_ID,
                     P_PAGE_ID  => P_PAGE_ID,
                     P_TAB_SET  => P_TAB_SET,
                     P_TAB_NAME => P_TAB_NAME,
                     P_TAB_TEXT => P_TAB_TEXT);
             END IF;
 
         END IF;
 
     END IF;
 
     
     
     
     WWV_FLOW_WIZARD_API.CREATE_BREADCRUMB_REGION (
         P_APPLICATION_ID             => P_FLOW_ID,
         P_PAGE_ID                    => P_PAGE_ID,
         P_SEQ                        => 10,
         P_BREADCRUMB_ID              => P_BREADCRUMB_ID,
         P_BREADCRUMB_ENTRY_NAME      => P_BREADCRUMB_NAME,
         P_PARENT_BREADCRUMB_ENTRY_ID => P_PARENT_BC_ID );
 
     CREATE_IR_REGION (
         P_FLOW_ID                       => P_FLOW_ID,
         P_PAGE_ID                       => P_PAGE_ID,
         P_PLUG_NAME                     => P_REGION_NAME,
         P_PLUG_TEMPLATE                 => P_REGION_TEMPLATE,
         P_PLUG_DISPLAY_SEQUENCE         => '10',
         P_PLUG_DISPLAY_POINT            => 'BODY',
         
         P_QUERY_TYPE                    => P_QUERY_TYPE,
         P_LOCATION                      => P_LOCATION,
         P_REMOTE_SERVER_ID              => P_REMOTE_SERVER_ID,
         P_WEB_SRC_MODULE_ID             => P_WEB_SRC_MODULE_ID,
         P_OWNER                         => P_TABLE_OWNER,
         P_TABLE_NAME                    => P_TABLE_NAME,
         P_INCLUDE_ROWID_COLUMN          => P_INCLUDE_ROWID_COLUMN,
         P_SQL_SOURCE                    => P_SQL_SOURCE,
         P_COLUMNS                       => P_COLUMNS,
         P_LOOKUPS                       => P_LOOKUPS,
         
         P_SHOW_DETAIL_LINK              => P_SHOW_DETAIL_LINK,
         P_USE_UI_DEFAULTS               => P_USE_UI_DEFAULTS,
         P_BASE_PK1                      => P_BASE_PK1,
         P_BASE_PK2                      => P_BASE_PK2,
         P_BASE_PK3                      => P_BASE_PK3,
         P_WEB_SRC_PARAM_COLLECTION      => P_WEB_SRC_PARAM_COLLECTION
        );
 END CREATE_IR_PAGE;
 
 
 PROCEDURE CREATE_REPORT_ON_WS (
    P_FLOW_ID                  IN NUMBER   DEFAULT NULL,
    P_PAGE_ID                  IN NUMBER   DEFAULT NULL,
    P_PAGE_NAME                IN VARCHAR2 DEFAULT NULL,
    P_GROUP_NAME               IN VARCHAR2 DEFAULT NULL,
    P_PAGE_MODE                IN VARCHAR2,
    P_USER_INTERFACE_ID        IN NUMBER,
    P_REGION_NAME              IN VARCHAR2 DEFAULT NULL,
    P_REGION_TEMPLATE          IN VARCHAR2 DEFAULT NULL,
    
    P_TAB_SET                  IN VARCHAR2 DEFAULT NULL,
    P_TAB_NAME                 IN VARCHAR2 DEFAULT NULL,
    P_TAB_TEXT                 IN VARCHAR2 DEFAULT NULL,
    
    P_NAV_LIST_ID              IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_ITEM_ID         IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_ITEM_NAME       IN VARCHAR2 DEFAULT NULL,
    P_NAV_LIST_PARENT_ITEM_ID  IN NUMBER   DEFAULT NULL,
    P_NAV_LIST_CHILD_ITEM_NAME IN VARCHAR2 DEFAULT NULL,
    
    P_REPORT_TEMPLATE          IN VARCHAR2 DEFAULT NULL,
    P_ROWS_PER_PAGE            IN VARCHAR2 DEFAULT NULL,
    
    P_BREADCRUMB_ID            IN NUMBER   DEFAULT NULL,
    P_BREADCRUMB_NAME          IN VARCHAR2 DEFAULT NULL,
    P_PARENT_BC_ID             IN  NUMBER  DEFAULT NULL,
    
    P_QUERY                    IN VARCHAR2 DEFAULT NULL
    )
 IS
    L_ID                 NUMBER;
    L_GROUP_ID           NUMBER := NULL;
 BEGIN
   
   
   
   WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
       P_FLOW_ID           => P_FLOW_ID,
       P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
    
    
    
    IF NOT PAGE_EXISTS (P_FLOW_ID,P_PAGE_ID) THEN
 
        
        
        
        IF P_GROUP_NAME IS NOT NULL THEN
            L_GROUP_ID := WWV_FLOW_UTILITIES.GET_PAGE_GROUP_ID(P_GROUP_NAME => P_GROUP_NAME, P_APPLICATION_ID => P_FLOW_ID);
            
            IF L_GROUP_ID IS NULL THEN
                L_GROUP_ID := WWV_FLOW_ID.NEXT_VAL;
                WWV_FLOW_API.CREATE_PAGE_GROUP(P_ID => L_GROUP_ID, P_FLOW_ID => P_FLOW_ID, P_GROUP_NAME => P_GROUP_NAME);
            END IF;
        END IF;
 
        WWV_FLOW_API.CREATE_PAGE(
          P_ID                  => P_PAGE_ID,
          P_FLOW_ID             => P_FLOW_ID,
          P_TAB_SET             => REPLACE(P_TAB_SET,'%null%',NULL),
          P_NAME                => P_PAGE_NAME,
          P_PAGE_MODE           => P_PAGE_MODE,
          P_GROUP_ID            => L_GROUP_ID,
          P_USER_INTERFACE_ID   => P_USER_INTERFACE_ID,
          P_STEP_TITLE          => P_PAGE_NAME,
          P_STEP_SUB_TITLE      => P_PAGE_NAME,
          P_STEP_SUB_TITLE_TYPE => 'TEXT_WITH_SUBSTITUTIONS',
          P_WELCOME_TEXT        => '',
          P_BOX_WELCOME_TEXT    => '',
          P_BOX_FOOTER_TEXT     => '',
          P_FOOTER_TEXT         => '',
          P_STEP_TEMPLATE       => '',
          P_PAGE_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_PAGE_TEMPLATE, 'PAGE'),
          P_BOX_IMAGE           => '',
          P_REQUIRED_ROLE       => '',
          P_PAGE_COMMENT       => NULL);
 
       IF P_NAV_LIST_ID IS NOT NULL THEN
           
           CREATE_NAVIGATION_LIST_ITEM (
               P_FLOW_ID                  => P_FLOW_ID,
               P_PAGE_ID                  => P_PAGE_ID,
               P_PAGE_NAME                => P_PAGE_NAME,
               P_NAV_LIST_ID              => P_NAV_LIST_ID,
               P_NAV_LIST_ITEM_ID         => P_NAV_LIST_ITEM_ID,
               P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_ITEM_NAME,
               P_NAV_LIST_PARENT_ITEM_ID  => P_NAV_LIST_PARENT_ITEM_ID,
               P_NAV_LIST_CHILD_ITEM_NAME => P_NAV_LIST_CHILD_ITEM_NAME);
       ELSE
           
           
           IF REPLACE(P_TAB_SET,'%null%',NULL) IS NOT NULL THEN
               CREATE_TAB (
                   P_FLOW_ID  => P_FLOW_ID,
                   P_PAGE_ID  => P_PAGE_ID,
                   P_TAB_SET  => P_TAB_SET,
                   P_TAB_NAME => P_TAB_NAME,
                   P_TAB_TEXT => P_TAB_TEXT);
           END IF;
       END IF;
    END IF;
 
    
    
    
     WWV_FLOW_WIZARD_API.CREATE_BREADCRUMB_REGION (
         P_APPLICATION_ID             => P_FLOW_ID,
         P_PAGE_ID                    => P_PAGE_ID,
         P_SEQ                        => 10,
         P_BREADCRUMB_ID              => P_BREADCRUMB_ID,
         P_BREADCRUMB_ENTRY_NAME      => P_BREADCRUMB_NAME,
         P_PARENT_BREADCRUMB_ENTRY_ID => P_PARENT_BC_ID );
 
    L_ID := WWV_FLOW_ID.NEXT_VAL;
 
    CREATE_QUERY_REGION (
        P_ID => L_ID,
        P_FLOW_ID => P_FLOW_ID,
        P_PAGE_ID => P_PAGE_ID,
        P_PLUG_NAME => P_PAGE_NAME,
        P_PLUG_TEMPLATE => P_REGION_TEMPLATE,
        P_PLUG_DISPLAY_SEQUENCE => '10',
        P_PLUG_DISPLAY_POINT => 'BODY',
        P_PLUG_SOURCE => P_QUERY,
        P_PLUG_SOURCE_TYPE => WWV_FLOW_REGION_NATIVE.C_SQL_REPORT,
        P_PLUG_QUERY_ROW_TEMPLATE=>REPLACE(P_REPORT_TEMPLATE,'%null'||'%',NULL),
        P_PLUG_QUERY_NUM_ROWS_TYPE  => 'ROW_RANGES_IN_SELECT_LIST',
        P_PLUG_QUERY_ROW_COUNT_MAX  => WWV_FLOW_API.C_DEFAULT_QUERY_ROW_COUNT_MAX,
        P_PLUG_QUERY_NUM_ROWS=>NVL(P_ROWS_PER_PAGE,'15'),
        P_PAGINATION_DISPLAY_POSITION=>'BOTTOM_RIGHT',
        P_PLUG_QUERY_SHOW_NULLS_AS=>' - ',
        P_PLUG_QUERY_COL_ALLIGNMENTS=>NULL,
        P_PLUG_QUERY_BREAK_COLS=>NULL,
        P_PLUG_QUERY_SUM_COLS=>NULL,
        P_PLUG_QUERY_NUMBER_FORMATS => NULL );
 
 END CREATE_REPORT_ON_WS;
 
 
 PROCEDURE CREATE_PAGE_DYNAMIC_ACTION (
    P_FLOW_ID                       IN NUMBER,
    P_PAGE_ID                       IN NUMBER,
    P_EVENT_NAME                    IN VARCHAR2,
    P_EVENT_SEQUENCE                IN NUMBER,
    P_EVENT_TRIGGERING_ELEM_TYPE    IN VARCHAR2 DEFAULT NULL,
    P_EVENT_TRIGGERING_REGION_ID    IN NUMBER   DEFAULT NULL,
    P_EVENT_TRIGGERING_BUTTON_ID    IN NUMBER   DEFAULT NULL,
    P_EVENT_TRIGGERING_ELEMENT      IN VARCHAR2 DEFAULT NULL, 
    P_EVENT_CONDITION_ELEMENT       IN VARCHAR2 DEFAULT NULL,
    P_EVENT_TRIGGERING_COND_TYPE    IN VARCHAR2 DEFAULT NULL,
    P_EVENT_TRIGGERING_EXPRESSION   IN VARCHAR2 DEFAULT NULL,
    P_EVENT_BIND_TYPE               IN VARCHAR2,
    P_EVENT_BIND_DELEGATE_TO        IN VARCHAR2 DEFAULT NULL,
    P_EVENT_BIND_EVENT_TYPE         IN VARCHAR2,
    P_EVENT_BIND_EVENT_TYPE_CUSTOM  IN VARCHAR2 DEFAULT NULL,
    P_EVENT_DISPLAY_WHEN_TYPE       IN VARCHAR2 DEFAULT NULL,
    P_EVENT_DISPLAY_WHEN_COND       IN VARCHAR2 DEFAULT NULL,
    P_EVENT_DISPLAY_WHEN_COND2      IN VARCHAR2 DEFAULT NULL,
    P_EVENT_REQUIRED_PATCH          IN VARCHAR2 DEFAULT NULL,
    P_EVENT_SECURITY_SCHEME         IN VARCHAR2 DEFAULT NULL,
    P_EVENT_COMMENT                 IN VARCHAR2 DEFAULT NULL,
    
    P_ACTION_TRUE_ID                IN NUMBER   DEFAULT NULL,
    P_ACTION_TRUE_ACTION_SEQUENCE   IN NUMBER,
    P_ACTION_TRUE_EXEC_ON_INIT      IN VARCHAR2,
    P_ACTION_TRUE_STOP_EXEC_ERROR   IN VARCHAR2 DEFAULT 'Y',
    P_ACTION_TRUE_WAIT_FOR_RESULT   IN VARCHAR2 DEFAULT NULL,
    P_ACTION_TRUE_ACTION            IN VARCHAR2,
    P_ACTION_TRUE_AFF_ELEMS_TYPE    IN VARCHAR2,
    P_ACTION_TRUE_AFF_REGION_ID     IN NUMBER   DEFAULT NULL,
    P_ACTION_TRUE_AFF_BUTTON_ID     IN NUMBER   DEFAULT NULL,
    P_ACTION_TRUE_AFF_ELEMENTS      IN VARCHAR2 DEFAULT NULL,
    P_ACTION_TRUE_ATTRIBUTE_01      IN VARCHAR2 DEFAULT NULL,
    P_ACTION_TRUE_ATTRIBUTE_02      IN VARCHAR2 DEFAULT NULL,
    P_ACTION_TRUE_ATTRIBUTE_03      IN VARCHAR2 DEFAULT NULL,
    P_ACTION_TRUE_ATTRIBUTE_04      IN VARCHAR2 DEFAULT NULL,
    P_ACTION_TRUE_ATTRIBUTE_05      IN VARCHAR2 DEFAULT NULL,
    P_ACTION_TRUE_ATTRIBUTE_06      IN VARCHAR2 DEFAULT NULL,
    P_ACTION_TRUE_ATTRIBUTE_07      IN VARCHAR2 DEFAULT NULL,
    P_ACTION_TRUE_ATTRIBUTE_08      IN VARCHAR2 DEFAULT NULL,
    P_ACTION_TRUE_ATTRIBUTE_09      IN VARCHAR2 DEFAULT NULL,
    P_ACTION_TRUE_ATTRIBUTE_10      IN VARCHAR2 DEFAULT NULL,
    P_ACTION_TRUE_ATTRIBUTE_11      IN VARCHAR2 DEFAULT NULL,
    P_ACTION_TRUE_ATTRIBUTE_12      IN VARCHAR2 DEFAULT NULL,
    P_ACTION_TRUE_ATTRIBUTE_13      IN VARCHAR2 DEFAULT NULL,
    P_ACTION_TRUE_ATTRIBUTE_14      IN VARCHAR2 DEFAULT NULL,
    P_ACTION_TRUE_ATTRIBUTE_15      IN VARCHAR2 DEFAULT NULL,
    P_ACTION_TRUE_COMMENT           IN VARCHAR2 DEFAULT NULL,
    
    P_ACTION_FALSE_ID               IN NUMBER   DEFAULT NULL,
    P_ACTION_FALSE_ACTION_SEQUENCE  IN NUMBER   DEFAULT NULL,
    P_ACTION_FALSE_EXEC_ON_INIT     IN VARCHAR2 DEFAULT NULL,
    P_ACTION_FALSE_STOP_EXEC_ERROR  IN VARCHAR2 DEFAULT 'Y',
    P_ACTION_FALSE_WAIT_FOR_RESULT  IN VARCHAR2 DEFAULT NULL,
    P_ACTION_FALSE_ACTION           IN VARCHAR2 DEFAULT NULL,
    P_ACTION_FALSE_AFF_ELEMS_TYPE   IN VARCHAR2 DEFAULT NULL,
    P_ACTION_FALSE_AFF_REGION_ID    IN NUMBER   DEFAULT NULL,
    P_ACTION_FALSE_AFF_BUTTON_ID    IN NUMBER   DEFAULT NULL,
    P_ACTION_FALSE_AFF_ELEMENTS     IN VARCHAR2 DEFAULT NULL,
    P_ACTION_FALSE_ATTRIBUTE_01     IN VARCHAR2 DEFAULT NULL,
    P_ACTION_FALSE_ATTRIBUTE_02     IN VARCHAR2 DEFAULT NULL,
    P_ACTION_FALSE_ATTRIBUTE_03     IN VARCHAR2 DEFAULT NULL,
    P_ACTION_FALSE_ATTRIBUTE_04     IN VARCHAR2 DEFAULT NULL,
    P_ACTION_FALSE_ATTRIBUTE_05     IN VARCHAR2 DEFAULT NULL,
    P_ACTION_FALSE_ATTRIBUTE_06     IN VARCHAR2 DEFAULT NULL,
    P_ACTION_FALSE_ATTRIBUTE_07     IN VARCHAR2 DEFAULT NULL,
    P_ACTION_FALSE_ATTRIBUTE_08     IN VARCHAR2 DEFAULT NULL,
    P_ACTION_FALSE_ATTRIBUTE_09     IN VARCHAR2 DEFAULT NULL,
    P_ACTION_FALSE_ATTRIBUTE_10     IN VARCHAR2 DEFAULT NULL,
    P_ACTION_FALSE_ATTRIBUTE_11     IN VARCHAR2 DEFAULT NULL,
    P_ACTION_FALSE_ATTRIBUTE_12     IN VARCHAR2 DEFAULT NULL,
    P_ACTION_FALSE_ATTRIBUTE_13     IN VARCHAR2 DEFAULT NULL,
    P_ACTION_FALSE_ATTRIBUTE_14     IN VARCHAR2 DEFAULT NULL,
    P_ACTION_FALSE_ATTRIBUTE_15     IN VARCHAR2 DEFAULT NULL,
    P_ACTION_FALSE_COMMENT          IN VARCHAR2 DEFAULT NULL
    )
 IS
    C_DIALOG_CLOSED_EVENT_TYPE CONSTANT VARCHAR2(20) := 'apexafterclosedialog';
    L_EVENT_ID                          WWV_FLOW_PAGE_DA_EVENTS.ID%TYPE;
 BEGIN
    L_EVENT_ID := WWV_FLOW_ID.NEXT_VAL;
 
    
    WWV_FLOW_API.CREATE_PAGE_DA_EVENT(
        P_ID                        => L_EVENT_ID,
        P_FLOW_ID                   => P_FLOW_ID,
        P_PAGE_ID                   => P_PAGE_ID,
        P_NAME                      => P_EVENT_NAME,
        P_EVENT_SEQUENCE            => P_EVENT_SEQUENCE,
        P_TRIGGERING_ELEMENT_TYPE   => P_EVENT_TRIGGERING_ELEM_TYPE,
        P_TRIGGERING_REGION_ID      => P_EVENT_TRIGGERING_REGION_ID,
        P_TRIGGERING_BUTTON_ID      => P_EVENT_TRIGGERING_BUTTON_ID,
        P_TRIGGERING_ELEMENT        => P_EVENT_TRIGGERING_ELEMENT,
        P_CONDITION_ELEMENT         => P_EVENT_CONDITION_ELEMENT,
        P_TRIGGERING_CONDITION_TYPE => P_EVENT_TRIGGERING_COND_TYPE,
        P_TRIGGERING_EXPRESSION     => P_EVENT_TRIGGERING_EXPRESSION,
        P_BIND_TYPE                 => P_EVENT_BIND_TYPE,
        P_BIND_DELEGATE_TO_SELECTOR => P_EVENT_BIND_DELEGATE_TO,
        P_BIND_EVENT_TYPE           => P_EVENT_BIND_EVENT_TYPE,
        P_BIND_EVENT_TYPE_CUSTOM    => P_EVENT_BIND_EVENT_TYPE_CUSTOM,
        P_DISPLAY_WHEN_TYPE         => P_EVENT_DISPLAY_WHEN_TYPE,
        P_DISPLAY_WHEN_COND         => P_EVENT_DISPLAY_WHEN_COND,
        P_DISPLAY_WHEN_COND2        => P_EVENT_DISPLAY_WHEN_COND2,
        P_REQUIRED_PATCH            => P_EVENT_REQUIRED_PATCH,
        P_SECURITY_SCHEME           => P_EVENT_SECURITY_SCHEME,
        P_DA_EVENT_COMMENT          => P_EVENT_COMMENT
    );
 
    
    WWV_FLOW_API.CREATE_PAGE_DA_ACTION(
        P_ID                        => P_ACTION_TRUE_ID,
        P_FLOW_ID                   => P_FLOW_ID,
        P_PAGE_ID                   => P_PAGE_ID,
        P_EVENT_ID                  => L_EVENT_ID,
        P_EVENT_RESULT              => 'TRUE',
        P_ACTION_SEQUENCE           => P_ACTION_TRUE_ACTION_SEQUENCE,
        P_EXECUTE_ON_PAGE_INIT      => P_ACTION_TRUE_EXEC_ON_INIT,
        P_STOP_EXECUTION_ON_ERROR   => P_ACTION_TRUE_STOP_EXEC_ERROR,
        P_WAIT_FOR_RESULT           => P_ACTION_TRUE_WAIT_FOR_RESULT,
        P_ACTION                    => P_ACTION_TRUE_ACTION,
        P_AFFECTED_ELEMENTS_TYPE    => P_ACTION_TRUE_AFF_ELEMS_TYPE,
        P_AFFECTED_REGION_ID        => P_ACTION_TRUE_AFF_REGION_ID,
        P_AFFECTED_BUTTON_ID        => P_ACTION_TRUE_AFF_BUTTON_ID,
        P_AFFECTED_ELEMENTS         => P_ACTION_TRUE_AFF_ELEMENTS,
        P_ATTRIBUTE_01              => P_ACTION_TRUE_ATTRIBUTE_01,
        P_ATTRIBUTE_02              => P_ACTION_TRUE_ATTRIBUTE_02,
        P_ATTRIBUTE_03              => P_ACTION_TRUE_ATTRIBUTE_03,
        P_ATTRIBUTE_04              => P_ACTION_TRUE_ATTRIBUTE_04,
        P_ATTRIBUTE_05              => P_ACTION_TRUE_ATTRIBUTE_05,
        P_ATTRIBUTE_06              => P_ACTION_TRUE_ATTRIBUTE_06,
        P_ATTRIBUTE_07              => P_ACTION_TRUE_ATTRIBUTE_07,
        P_ATTRIBUTE_08              => P_ACTION_TRUE_ATTRIBUTE_08,
        P_ATTRIBUTE_09              => P_ACTION_TRUE_ATTRIBUTE_09,
        P_ATTRIBUTE_10              => P_ACTION_TRUE_ATTRIBUTE_10,
        P_ATTRIBUTE_11              => P_ACTION_TRUE_ATTRIBUTE_11,
        P_ATTRIBUTE_12              => P_ACTION_TRUE_ATTRIBUTE_12,
        P_ATTRIBUTE_13              => P_ACTION_TRUE_ATTRIBUTE_13,
        P_ATTRIBUTE_14              => P_ACTION_TRUE_ATTRIBUTE_14,
        P_ATTRIBUTE_15              => P_ACTION_TRUE_ATTRIBUTE_15,
        P_DA_ACTION_COMMENT         => P_ACTION_TRUE_COMMENT
    );
    
    IF P_ACTION_FALSE_ACTION IS NOT NULL THEN
        WWV_FLOW_API.CREATE_PAGE_DA_ACTION(
            P_ID                        => P_ACTION_FALSE_ID,
            P_FLOW_ID                   => P_FLOW_ID,
            P_PAGE_ID                   => P_PAGE_ID,
            P_EVENT_ID                  => L_EVENT_ID,
            P_EVENT_RESULT              => 'FALSE',
            P_ACTION_SEQUENCE           => P_ACTION_FALSE_ACTION_SEQUENCE,
            P_EXECUTE_ON_PAGE_INIT      => P_ACTION_FALSE_EXEC_ON_INIT,
            P_STOP_EXECUTION_ON_ERROR   => P_ACTION_FALSE_STOP_EXEC_ERROR,
            P_WAIT_FOR_RESULT           => P_ACTION_FALSE_WAIT_FOR_RESULT,
            P_ACTION                    => P_ACTION_FALSE_ACTION,
            P_AFFECTED_ELEMENTS_TYPE    => P_ACTION_FALSE_AFF_ELEMS_TYPE,
            P_AFFECTED_REGION_ID        => P_ACTION_FALSE_AFF_REGION_ID,
            P_AFFECTED_BUTTON_ID        => P_ACTION_FALSE_AFF_BUTTON_ID,
            P_AFFECTED_ELEMENTS         => P_ACTION_FALSE_AFF_ELEMENTS,
            P_ATTRIBUTE_01              => P_ACTION_FALSE_ATTRIBUTE_01,
            P_ATTRIBUTE_02              => P_ACTION_FALSE_ATTRIBUTE_02,
            P_ATTRIBUTE_03              => P_ACTION_FALSE_ATTRIBUTE_03,
            P_ATTRIBUTE_04              => P_ACTION_FALSE_ATTRIBUTE_04,
            P_ATTRIBUTE_05              => P_ACTION_FALSE_ATTRIBUTE_05,
            P_ATTRIBUTE_06              => P_ACTION_FALSE_ATTRIBUTE_06,
            P_ATTRIBUTE_07              => P_ACTION_FALSE_ATTRIBUTE_07,
            P_ATTRIBUTE_08              => P_ACTION_FALSE_ATTRIBUTE_08,
            P_ATTRIBUTE_09              => P_ACTION_FALSE_ATTRIBUTE_09,
            P_ATTRIBUTE_10              => P_ACTION_FALSE_ATTRIBUTE_10,
            P_ATTRIBUTE_11              => P_ACTION_FALSE_ATTRIBUTE_11,
            P_ATTRIBUTE_12              => P_ACTION_FALSE_ATTRIBUTE_12,
            P_ATTRIBUTE_13              => P_ACTION_FALSE_ATTRIBUTE_13,
            P_ATTRIBUTE_14              => P_ACTION_FALSE_ATTRIBUTE_14,
            P_ATTRIBUTE_15              => P_ACTION_FALSE_ATTRIBUTE_15,
            P_DA_ACTION_COMMENT         => P_ACTION_FALSE_COMMENT
        );
    END IF; 
 
    
    
    IF P_EVENT_TRIGGERING_ELEM_TYPE = 'BUTTON' THEN
        IF P_EVENT_TRIGGERING_BUTTON_ID IS NOT NULL AND P_EVENT_BIND_EVENT_TYPE <> C_DIALOG_CLOSED_EVENT_TYPE THEN
            FOR C1 IN (SELECT ID,
                              'region' BUTTON_TYPE
                         FROM WWV_FLOW_STEP_BUTTONS
                        WHERE FLOW_ID            = P_FLOW_ID
                          AND SECURITY_GROUP_ID  = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                          AND ID                 = P_EVENT_TRIGGERING_BUTTON_ID
                          AND BUTTON_ACTION      != WWV_FLOW_BUTTON.C_ACTION_DEFINED_BY_DA
                        UNION ALL
                       SELECT ID,
                              'item' BUTTON_TYPE
                         FROM WWV_FLOW_STEP_ITEMS
                        WHERE FLOW_ID            = P_FLOW_ID
                          AND SECURITY_GROUP_ID  = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                          AND ID                 = P_EVENT_TRIGGERING_BUTTON_ID
                          AND DISPLAY_AS         = 'BUTTON'
                          AND BUTTON_ACTION      != WWV_FLOW_BUTTON.C_ACTION_DEFINED_BY_DA )
            LOOP
                
                IF C1.BUTTON_TYPE = 'region' THEN
                    UPDATE WWV_FLOW_STEP_BUTTONS
                       SET BUTTON_ACTION        = WWV_FLOW_BUTTON.C_ACTION_DEFINED_BY_DA,
                           BUTTON_REDIRECT_URL  = ''
                     WHERE ID                   = C1.ID
                       AND SECURITY_GROUP_ID    = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
                ELSIF C1.BUTTON_TYPE = 'item' THEN
                    UPDATE WWV_FLOW_STEP_ITEMS
                       SET BUTTON_ACTION        = WWV_FLOW_BUTTON.C_ACTION_DEFINED_BY_DA,
                           BUTTON_REDIRECT_URL  = ''
                     WHERE ID                   = C1.ID
                       AND SECURITY_GROUP_ID    = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
                END IF;
            END LOOP;
        END IF;
    END IF;
 END CREATE_PAGE_DYNAMIC_ACTION;
 
 
 
 
 
 PROCEDURE CREATE_BUTTON (
    P_WHERE                         VARCHAR2,
    P_FLOW_ID                       NUMBER,
    P_FLOW_STEP_ID                  NUMBER,
    P_BUTTON_SEQUENCE               NUMBER      DEFAULT NULL,
    P_BUTTON_PLUG_ID                NUMBER,
    P_BUTTON_NAME                   VARCHAR2,
    P_BUTTON_TEMPLATE_ID            NUMBER      DEFAULT NULL,
    P_BUTTON_IMAGE                  VARCHAR2    DEFAULT NULL,
    P_BUTTON_IS_HOT                 VARCHAR2    DEFAULT 'N',
    P_BUTTON_IMAGE_ALT              VARCHAR2,
    P_BUTTON_REDIRECT_URL           VARCHAR2    DEFAULT NULL,
    P_BUTTON_ACTION                 VARCHAR2    DEFAULT WWV_FLOW_BUTTON.C_ACTION_SUBMIT,
    P_BUTTON_EXECUTE_VALIDATIONS    VARCHAR2    DEFAULT 'Y',
    P_BUTTON_IMAGE_ATTRIBUTES       VARCHAR2    DEFAULT NULL,
    P_BUTTON_ATTRIBUTES             VARCHAR2,
    P_BUTTON_STYLE                  VARCHAR2    DEFAULT 'BUTTON_TEMPLATE',
    
    P_REPORT_QUERY                  VARCHAR2    DEFAULT NULL,
    
    P_BUTTON_POSITION               VARCHAR2    DEFAULT NULL,
    P_BUTTON_ALIGNMENT              VARCHAR2    DEFAULT NULL,
    
    P_BEGINS_ON_NEW_LINE            VARCHAR2    DEFAULT NULL,
    P_BEGINS_ON_NEW_FIELD           VARCHAR2    DEFAULT NULL,
    
    P_BUTTON_CONDITION_TYPE         VARCHAR2    DEFAULT NULL,
    P_BUTTON_CONDITION              VARCHAR2    DEFAULT NULL,
    P_BUTTON_CONDITION2             VARCHAR2    DEFAULT NULL
 )
 IS
    L_ID                    NUMBER;
    
    L_BUTTON_SEQUENCE       WWV_FLOW_STEP_BUTTONS.BUTTON_SEQUENCE%TYPE;
    L_BUTTON_POSITION       WWV_FLOW_STEP_BUTTONS.BUTTON_POSITION%TYPE;
    L_BUTTON_ALIGNMENT      WWV_FLOW_STEP_BUTTONS.BUTTON_ALIGNMENT%TYPE;
    
    L_TAG_ATTRIBUTES        WWV_FLOW_STEP_ITEMS.TAG_ATTRIBUTES%TYPE;
    L_IMAGE_ATTRIBUTES      WWV_FLOW_STEP_ITEMS.BUTTON_IMAGE_ATTR%TYPE;
    L_IMAGE                 WWV_FLOW_STEP_ITEMS.BUTTON_IMAGE%TYPE;
    L_BEGINS_ON_NEW_LINE    WWV_FLOW_STEP_ITEMS.BEGIN_ON_NEW_LINE%TYPE;
    L_BEGINS_ON_NEW_FIELD   WWV_FLOW_STEP_ITEMS.BEGIN_ON_NEW_LINE%TYPE;
 BEGIN
    L_ID := WWV_FLOW_ID.NEXT_VAL;
 
    
    IF P_WHERE = 'REGION' THEN
        
        IF P_BUTTON_SEQUENCE IS NOT NULL THEN
            L_BUTTON_SEQUENCE := P_BUTTON_SEQUENCE;
        ELSE
            
            
            SELECT MAX(BUTTON_SEQUENCE)
              INTO L_BUTTON_SEQUENCE
              FROM WWV_FLOW_STEP_BUTTONS
             WHERE FLOW_STEP_ID = P_FLOW_STEP_ID
               AND FLOW_ID = P_FLOW_ID;
 
            L_BUTTON_SEQUENCE := NVL(L_BUTTON_SEQUENCE, 0);
            L_BUTTON_SEQUENCE := TRUNC(L_BUTTON_SEQUENCE) + 10;
        END IF;
 
        
        L_BUTTON_POSITION := NVL(P_BUTTON_POSITION, 'TOP');
 
        
        L_BUTTON_ALIGNMENT := NVL(P_BUTTON_ALIGNMENT, 'RIGHT');
 
        
        WWV_FLOW_API.CREATE_PAGE_BUTTON (
            P_ID                            => L_ID,
            P_FLOW_ID                       => P_FLOW_ID,
            P_FLOW_STEP_ID                  => P_FLOW_STEP_ID,
            P_BUTTON_SEQUENCE               => L_BUTTON_SEQUENCE,
            P_BUTTON_PLUG_ID                => P_BUTTON_PLUG_ID,
            P_BUTTON_NAME                   => P_BUTTON_NAME,
            P_BUTTON_TEMPLATE_ID            => P_BUTTON_TEMPLATE_ID,
            P_BUTTON_TEMPLATE_OPTIONS       => GET_PRESET_TEMPLATE_OPTIONS (P_BUTTON_TEMPLATE_ID,'BUTTON'),
            P_BUTTON_IMAGE                  => P_BUTTON_IMAGE,
            P_BUTTON_IS_HOT                 => P_BUTTON_IS_HOT,
            P_BUTTON_IMAGE_ALT              => P_BUTTON_IMAGE_ALT,
            P_BUTTON_POSITION               => L_BUTTON_POSITION,
            P_BUTTON_ALIGNMENT              => L_BUTTON_ALIGNMENT,
            P_BUTTON_REDIRECT_URL           => P_BUTTON_REDIRECT_URL,
            P_BUTTON_ACTION                 => REPLACE(P_BUTTON_ACTION, WWV_FLOW_BUTTON.C_ACTION_REPORT, WWV_FLOW_BUTTON.C_ACTION_SUBMIT),
            P_BUTTON_EXECUTE_VALIDATIONS    => P_BUTTON_EXECUTE_VALIDATIONS,
            P_BUTTON_IMAGE_ATTRIBUTES       => P_BUTTON_IMAGE_ATTRIBUTES,
            P_BUTTON_CATTRIBUTES            => P_BUTTON_ATTRIBUTES,
            P_BUTTON_CONDITION_TYPE         => P_BUTTON_CONDITION_TYPE,
            P_BUTTON_CONDITION              => P_BUTTON_CONDITION,
            P_BUTTON_CONDITION2             => P_BUTTON_CONDITION2
        );
    ELSIF P_WHERE = 'ITEM' THEN
        IF P_BUTTON_SEQUENCE IS NOT NULL THEN
            L_BUTTON_SEQUENCE := P_BUTTON_SEQUENCE;
        ELSE
            
            
            SELECT MAX(ITEM_SEQUENCE)
              INTO L_BUTTON_SEQUENCE
              FROM WWV_FLOW_STEP_ITEMS
             WHERE FLOW_STEP_ID = P_FLOW_STEP_ID
               AND FLOW_ID = P_FLOW_ID;
 
            L_BUTTON_SEQUENCE := NVL(L_BUTTON_SEQUENCE, 0);
            L_BUTTON_SEQUENCE := TRUNC(L_BUTTON_SEQUENCE) + 10;
        END IF;
 
        
        IF P_BUTTON_STYLE = 'BUTTON_TEMPLATE' THEN
             L_TAG_ATTRIBUTES := COALESCE(P_BUTTON_IMAGE, 'template:'||P_BUTTON_TEMPLATE_ID);
             L_IMAGE_ATTRIBUTES := P_BUTTON_ATTRIBUTES;
             L_IMAGE := NULL;
        ELSIF P_BUTTON_STYLE = 'HTML' THEN
             L_TAG_ATTRIBUTES := P_BUTTON_ATTRIBUTES;
             L_IMAGE_ATTRIBUTES := NULL;
             L_IMAGE := NULL;
        ELSE
             L_TAG_ATTRIBUTES := NULL;
             L_IMAGE := P_BUTTON_IMAGE;
             L_IMAGE_ATTRIBUTES := P_BUTTON_IMAGE_ATTRIBUTES;
        END IF;
 
        
        L_BEGINS_ON_NEW_LINE    := NVL(P_BEGINS_ON_NEW_LINE, 'NO');
 
        
        L_BEGINS_ON_NEW_FIELD   := NVL(P_BEGINS_ON_NEW_FIELD, 'YES');
 
        
        WWV_FLOW_API.CREATE_PAGE_ITEM (
            P_ID                            => L_ID,
            P_FLOW_ID                       => P_FLOW_ID,
            P_FLOW_STEP_ID                  => P_FLOW_STEP_ID,
            P_NAME                          => P_BUTTON_NAME,
            P_DATA_TYPE                     => 'VARCHAR',
            P_ACCEPT_PROCESSING             => 'REPLACE_EXISTING',
            P_ITEM_SEQUENCE                 => L_BUTTON_SEQUENCE,
            P_ITEM_PLUG_ID                  => P_BUTTON_PLUG_ID,
            P_USE_CACHE_BEFORE_DEFAULT      => 'NO',
            P_ITEM_DEFAULT                  => NULL,
            P_PROMPT                        => P_BUTTON_IMAGE_ALT,
            P_SOURCE                        => NULL,
            P_SOURCE_TYPE                   => 'STATIC',
            P_BUTTON_EXECUTE_VALIDATIONS    => P_BUTTON_EXECUTE_VALIDATIONS,
            P_DISPLAY_AS                    => 'BUTTON',
            P_NAMED_LOV                     => NULL,
            P_CSIZE                         => NULL,
            P_CMAXLENGTH                    => 2000,
            P_CHEIGHT                       => NULL,
            P_CATTRIBUTES                   => NULL,
            P_BEGIN_ON_NEW_LINE             => L_BEGINS_ON_NEW_LINE,
            P_BEGIN_ON_NEW_FIELD            => L_BEGINS_ON_NEW_FIELD,
            P_BUTTON_IMAGE                  => L_IMAGE,
            P_BUTTON_IMAGE_ATTR             => L_IMAGE_ATTRIBUTES,
            P_TAG_ATTRIBUTES                => L_TAG_ATTRIBUTES,
            P_LABEL_ALIGNMENT               => NULL,
            P_FIELD_ALIGNMENT               => 'LEFT',
            P_DISPLAY_WHEN                  => P_BUTTON_CONDITION,
            P_DISPLAY_WHEN2                 => P_BUTTON_CONDITION2,
            P_DISPLAY_WHEN_TYPE             => P_BUTTON_CONDITION_TYPE,
            P_IS_PERSISTENT                 => 'N',
            P_REQUIRED_PATCH                => NULL,
            P_ITEM_COMMENT                  => NULL,
            P_BUTTON_REDIRECT_URL           => P_BUTTON_REDIRECT_URL,
            P_BUTTON_ACTION                 => REPLACE(P_BUTTON_ACTION, WWV_FLOW_BUTTON.C_ACTION_REPORT, WWV_FLOW_BUTTON.C_ACTION_SUBMIT),
            P_BUTTON_IS_HOT                 => P_BUTTON_IS_HOT
        );
    END IF;
 
    
    
    IF P_BUTTON_ACTION = 'REPORT' THEN
        WWV_FLOW_API.CREATE_PAGE_BRANCH (
            P_FLOW_ID                   => P_FLOW_ID,
            P_FLOW_STEP_ID              => P_FLOW_STEP_ID,
            P_BRANCH_ACTION             => 'f?p=&FLOW_ID.:0:&SESSION.:PRINT_REPORT='||P_REPORT_QUERY||':&DEBUG.',
            P_BRANCH_POINT              => 'AFTER_PROCESSING',
            P_BRANCH_TYPE               => 'REDIRECT_URL',
            P_BRANCH_WHEN_BUTTON_ID     => L_ID,
            P_BRANCH_SEQUENCE           => 10
        );
    END IF;
 EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(-20001,
                            WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_WIZARD_API.CREATE_BUTTON',SQLERRM)
                           );
 END CREATE_BUTTON;
 
 
 
 
 
 FUNCTION HAS_REGION_BUTTONS (
    P_REGION_ID         IN NUMBER,
    P_FLOW_ID           IN NUMBER,
    P_PAGE_ID           IN NUMBER,
    P_SECURITY_GROUP_ID IN NUMBER )
    RETURN BOOLEAN
 IS
    L_COUNT NUMBER;
 BEGIN
    SELECT COUNT(*)
      INTO L_COUNT
      FROM ( SELECT BUTTON_PLUG_ID
               FROM WWV_FLOW_STEP_BUTTONS
              WHERE FLOW_ID           = P_FLOW_ID
                AND FLOW_STEP_ID      = P_PAGE_ID
                AND SECURITY_GROUP_ID = P_SECURITY_GROUP_ID
              UNION ALL
             SELECT ITEM_PLUG_ID
               FROM WWV_FLOW_STEP_ITEMS
              WHERE DISPLAY_AS        = 'BUTTON'
                AND FLOW_ID           = P_FLOW_ID
                AND FLOW_STEP_ID      = P_PAGE_ID
                AND SECURITY_GROUP_ID = P_SECURITY_GROUP_ID
           )
     WHERE BUTTON_PLUG_ID IN (
               SELECT ID
                 FROM WWV_FLOW_PAGE_PLUGS
                WHERE FLOW_ID           = P_FLOW_ID
                  AND PAGE_ID           = P_PAGE_ID
                  AND SECURITY_GROUP_ID = P_SECURITY_GROUP_ID
                START WITH ID = P_REGION_ID
              CONNECT BY PRIOR ID = PARENT_PLUG_ID );
 
    RETURN (L_COUNT > 0);
 END HAS_REGION_BUTTONS;
 
 
 
 
 FUNCTION HAS_REGION_ITEMS (
    P_REGION_ID         IN NUMBER,
    P_FLOW_ID           IN NUMBER,
    P_PAGE_ID           IN NUMBER,
    P_SECURITY_GROUP_ID IN NUMBER )
    RETURN BOOLEAN
 IS
    L_COUNT NUMBER;
 BEGIN
    SELECT COUNT(*)
      INTO L_COUNT
      FROM WWV_FLOW_STEP_ITEMS
     WHERE FLOW_ID      = P_FLOW_ID
       AND FLOW_STEP_ID = P_PAGE_ID
       AND SECURITY_GROUP_ID = P_SECURITY_GROUP_ID
       AND DISPLAY_AS  <> 'BUTTON'
       AND ITEM_PLUG_ID IN (
               SELECT ID
                 FROM WWV_FLOW_PAGE_PLUGS
                WHERE FLOW_ID           = P_FLOW_ID
                  AND PAGE_ID           = P_PAGE_ID
                  AND SECURITY_GROUP_ID = P_SECURITY_GROUP_ID
                START WITH ID = P_REGION_ID
              CONNECT BY PRIOR ID = PARENT_PLUG_ID );
 
    RETURN (L_COUNT > 0);
 END HAS_REGION_ITEMS;
 
 
 
 
 FUNCTION HAS_REGION_VALIDATIONS (
    P_REGION_ID         IN NUMBER,
    P_FLOW_ID           IN NUMBER,
    P_PAGE_ID           IN NUMBER,
    P_SECURITY_GROUP_ID IN NUMBER )
    RETURN BOOLEAN
 IS
    L_COUNT NUMBER;
 BEGIN
    SELECT COUNT(*)
      INTO L_COUNT
      FROM WWV_FLOW_STEP_VALIDATIONS
     WHERE FLOW_ID      = P_FLOW_ID
       AND FLOW_STEP_ID = P_PAGE_ID
       AND SECURITY_GROUP_ID = P_SECURITY_GROUP_ID
       AND TABULAR_FORM_REGION_ID IN (
               SELECT ID
                 FROM WWV_FLOW_PAGE_PLUGS
                WHERE FLOW_ID           = P_FLOW_ID
                  AND PAGE_ID           = P_PAGE_ID
                  AND SECURITY_GROUP_ID = P_SECURITY_GROUP_ID
                START WITH ID = P_REGION_ID
              CONNECT BY PRIOR ID = PARENT_PLUG_ID );
 
    RETURN (L_COUNT > 0);
 END HAS_REGION_VALIDATIONS;
 
 
 
 
 FUNCTION HAS_REGION_PROCESSES (
    P_REGION_ID         IN NUMBER,
    P_FLOW_ID           IN NUMBER,
    P_PAGE_ID           IN NUMBER,
    P_SECURITY_GROUP_ID IN NUMBER )
    RETURN BOOLEAN
 IS
    L_COUNT NUMBER;
 BEGIN
    SELECT COUNT(*)
      INTO L_COUNT
      FROM WWV_FLOW_STEP_VALIDATIONS
     WHERE FLOW_ID      = P_FLOW_ID
       AND FLOW_STEP_ID = P_PAGE_ID
       AND SECURITY_GROUP_ID = P_SECURITY_GROUP_ID
       AND TABULAR_FORM_REGION_ID IN (
               SELECT ID
                 FROM WWV_FLOW_PAGE_PLUGS
                WHERE FLOW_ID           = P_FLOW_ID
                  AND PAGE_ID           = P_PAGE_ID
                  AND SECURITY_GROUP_ID = P_SECURITY_GROUP_ID
                START WITH ID = P_REGION_ID
              CONNECT BY PRIOR ID = PARENT_PLUG_ID );
 
    RETURN (L_COUNT > 0);
 END HAS_REGION_PROCESSES;
 
 
 
 
 FUNCTION HAS_REGION_SUB_REGIONS (
    P_REGION_ID         IN NUMBER,
    P_FLOW_ID           IN NUMBER,
    P_PAGE_ID           IN NUMBER,
    P_SECURITY_GROUP_ID IN NUMBER )
    RETURN BOOLEAN
 IS
    L_COUNT NUMBER;
 BEGIN
    SELECT COUNT(*)
      INTO L_COUNT
      FROM WWV_FLOW_PAGE_PLUGS
     WHERE FLOW_ID           = P_FLOW_ID
       AND PAGE_ID           = P_PAGE_ID
       AND SECURITY_GROUP_ID = P_SECURITY_GROUP_ID
       AND PARENT_PLUG_ID    = P_REGION_ID;
 
    RETURN (L_COUNT > 0);
 END HAS_REGION_SUB_REGIONS;
 
 
 
 
 
 FUNCTION HAS_REGION_DELETABLE_LISTS (
    P_REGION_ID         IN NUMBER,
    P_FLOW_ID           IN NUMBER,
    P_PAGE_ID           IN NUMBER,
    P_SECURITY_GROUP_ID IN NUMBER )
    RETURN BOOLEAN
 IS
    L_COUNT NUMBER;
 BEGIN
    SELECT COUNT(*)
      INTO L_COUNT
      FROM WWV_FLOW_PAGE_PLUGS R
     WHERE FLOW_ID           = P_FLOW_ID
       AND PAGE_ID           = P_PAGE_ID
       AND SECURITY_GROUP_ID = P_SECURITY_GROUP_ID
       AND LIST_ID           IS NOT NULL
     START WITH ID = P_REGION_ID
     CONNECT BY PRIOR ID = PARENT_PLUG_ID;
 
    RETURN (L_COUNT > 0);
 END HAS_REGION_DELETABLE_LISTS;
 
 
 
 
 
 
 FUNCTION HAS_REGION_DYNAMIC_ACTIONS (
    P_REGION_ID         IN NUMBER,
    P_FLOW_ID           IN NUMBER,
    P_PAGE_ID           IN NUMBER,
    P_SECURITY_GROUP_ID IN NUMBER )
    RETURN BOOLEAN
 IS
    L_COUNT NUMBER;
 BEGIN
    SELECT COUNT(A.ID)
      INTO L_COUNT
      FROM WWV_FLOW_PAGE_DA_EVENTS A,
           WWV_FLOW_PAGE_DA_ACTIONS B,
              (SELECT ID
                 FROM WWV_FLOW_PAGE_PLUGS
                WHERE FLOW_ID           = P_FLOW_ID
                  AND PAGE_ID           = P_PAGE_ID
                  AND SECURITY_GROUP_ID = P_SECURITY_GROUP_ID
                START WITH ID           = P_REGION_ID
              CONNECT BY PRIOR ID       = PARENT_PLUG_ID ) C
     WHERE A.ID                 = B.EVENT_ID
       AND A.FLOW_ID              = P_FLOW_ID
       AND A.PAGE_ID              = P_PAGE_ID
       AND A.SECURITY_GROUP_ID    = P_SECURITY_GROUP_ID
       AND (A.TRIGGERING_REGION_ID = C.ID
        OR  B.AFFECTED_REGION_ID = C.ID );
 
    RETURN (L_COUNT > 0);
 END HAS_REGION_DYNAMIC_ACTIONS;
 
 
 
 
 
 
 
 
 PROCEDURE DELETE_REGION (
    P_REGION_ID          IN NUMBER,
    P_FLOW_ID            IN NUMBER,
    P_PAGE_ID            IN NUMBER,
    P_SECURITY_GROUP_ID  IN NUMBER,
    P_DELETE_BUTTONS     IN BOOLEAN,
    P_DELETE_ITEMS       IN BOOLEAN,
    P_DELETE_SUB_REGIONS IN BOOLEAN,
    P_DELETE_LISTS       IN BOOLEAN,
    P_DELETE_DYN_ACTIONS IN BOOLEAN )
 IS
 BEGIN
     WWV_FLOW_DEBUG.ENTER (
         'delete_region'       ,
         'p_region_id'         , P_REGION_ID            ,
         'p_flow_id'           , P_FLOW_ID              ,
         'p_page_id'           , P_PAGE_ID              ,
         'p_security_group_id' , P_SECURITY_GROUP_ID );
     
     
     
     
     IF P_DELETE_SUB_REGIONS THEN
         
         
         
         FOR L_SUB_REGION IN (
                 SELECT ID,
                        PAGE_ID
                   FROM WWV_FLOW_PAGE_PLUGS
                  WHERE FLOW_ID           = P_FLOW_ID
                    AND PAGE_ID           = P_PAGE_ID
                    AND SECURITY_GROUP_ID = P_SECURITY_GROUP_ID
                    AND PARENT_PLUG_ID    = P_REGION_ID )
         LOOP
             IF L_SUB_REGION.PAGE_ID = P_PAGE_ID THEN
                 DELETE_REGION (
                     P_REGION_ID          => L_SUB_REGION.ID,
                     P_FLOW_ID            => P_FLOW_ID,
                     P_PAGE_ID            => P_PAGE_ID,
                     P_SECURITY_GROUP_ID  => P_SECURITY_GROUP_ID,
                     P_DELETE_BUTTONS     => P_DELETE_BUTTONS,
                     P_DELETE_ITEMS       => P_DELETE_ITEMS,
                     P_DELETE_SUB_REGIONS => P_DELETE_SUB_REGIONS,
                     P_DELETE_LISTS       => P_DELETE_LISTS,
                     P_DELETE_DYN_ACTIONS => P_DELETE_DYN_ACTIONS );
             ELSE
                 UPDATE WWV_FLOW_PAGE_PLUGS
                    SET PARENT_PLUG_ID = NULL
                  WHERE FLOW_ID           = P_FLOW_ID
                    AND PAGE_ID           = L_SUB_REGION.PAGE_ID
                    AND SECURITY_GROUP_ID = P_SECURITY_GROUP_ID
                    AND PARENT_PLUG_ID    = L_SUB_REGION.ID;
             END IF;
         END LOOP;
     ELSE
         
         UPDATE WWV_FLOW_PAGE_PLUGS
             SET PARENT_PLUG_ID = NULL
           WHERE FLOW_ID           = P_FLOW_ID
             AND PAGE_ID           = P_PAGE_ID
             AND SECURITY_GROUP_ID = P_SECURITY_GROUP_ID
             AND PARENT_PLUG_ID    = P_REGION_ID;
     END IF;
 
     IF P_DELETE_BUTTONS THEN
         DELETE WWV_FLOW_STEP_BUTTONS
          WHERE FLOW_ID           = P_FLOW_ID
            AND FLOW_STEP_ID      = P_PAGE_ID
            AND SECURITY_GROUP_ID = P_SECURITY_GROUP_ID
            AND BUTTON_PLUG_ID    = P_REGION_ID;
     END IF;
     
     IF P_DELETE_ITEMS THEN
         DELETE WWV_FLOW_STEP_ITEMS
          WHERE FLOW_ID           = P_FLOW_ID
            AND FLOW_STEP_ID      = P_PAGE_ID
            AND SECURITY_GROUP_ID = P_SECURITY_GROUP_ID
            AND ITEM_PLUG_ID      = P_REGION_ID;
     END IF;
     
     IF P_DELETE_LISTS THEN
         
         
         
         
         DELETE FROM WWV_FLOW_LISTS L
          WHERE FLOW_ID           = P_FLOW_ID
            AND SECURITY_GROUP_ID = P_SECURITY_GROUP_ID
            AND ID                = ( SELECT LIST_ID
                                        FROM WWV_FLOW_PAGE_PLUGS P
                                       WHERE P.ID                = P_REGION_ID
                                         AND P.FLOW_ID           = P_FLOW_ID
                                         AND P.SECURITY_GROUP_ID = P_SECURITY_GROUP_ID )
            AND 1                 = ( SELECT COUNT(*)
                                        FROM WWV_FLOW_PAGE_PLUGS P
                                       WHERE SECURITY_GROUP_ID = P_SECURITY_GROUP_ID
                                         AND FLOW_ID           = P_FLOW_ID
                                         AND LIST_ID           = L.ID )
            AND 0                 = ( SELECT COUNT(*)
                                        FROM WWV_FLOW_STEPS S
                                       WHERE SECURITY_GROUP_ID  = P_SECURITY_GROUP_ID
                                         AND FLOW_ID            = P_FLOW_ID
                                         AND NAVIGATION_LIST_ID = L.ID )
            AND 0                 = ( SELECT COUNT(*)
                                        FROM WWV_FLOW_USER_INTERFACES S
                                       WHERE SECURITY_GROUP_ID  = P_SECURITY_GROUP_ID
                                         AND FLOW_ID            = P_FLOW_ID
                                         AND (   NAVIGATION_LIST_ID = L.ID
                                              OR NAV_BAR_LIST_ID    = L.ID ));
     END IF;
     
     IF P_DELETE_DYN_ACTIONS THEN
         
         
         DELETE WWV_FLOW_PAGE_DA_EVENTS
          WHERE ID IN (SELECT DISTINCT A.ID
                         FROM WWV_FLOW_PAGE_DA_EVENTS A,
                              WWV_FLOW_PAGE_DA_ACTIONS B
                        WHERE A.ID                      = B.EVENT_ID
                          AND A.FLOW_ID                 = P_FLOW_ID
                          AND A.PAGE_ID                 = P_PAGE_ID
                          AND A.SECURITY_GROUP_ID       = P_SECURITY_GROUP_ID
                          AND (A.TRIGGERING_REGION_ID   = P_REGION_ID
                               OR  B.AFFECTED_REGION_ID = P_REGION_ID ));
     END IF;
     
     
     
     DELETE WWV_FLOW_PAGE_PLUGS
      WHERE FLOW_ID           = P_FLOW_ID
        AND PAGE_ID           = P_PAGE_ID
        AND SECURITY_GROUP_ID = P_SECURITY_GROUP_ID
        AND ID                = P_REGION_ID;
 END DELETE_REGION;
 
 
 
 
 FUNCTION GET_DATALOAD_LIST_TEMPLATE_ID (
     P_FLOW_ID        IN NUMBER,
     P_THEME_ID       IN NUMBER DEFAULT WWV_FLOW_THEME_GLOBALS.G_THEME_ID,
     P_THEME_CLASS_ID IN NUMBER )
     RETURN NUMBER
 IS
 BEGIN
     FOR L_TEMPLATE IN ( SELECT ID
                           FROM WWV_FLOW_LIST_TEMPLATES
                          WHERE FLOW_ID              = P_FLOW_ID
                            AND SECURITY_GROUP_ID    = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                            AND THEME_ID             = P_THEME_ID
                            AND THEME_CLASS_ID       = P_THEME_CLASS_ID
                            AND UPPER(LIST_TEMPLATE_NAME) NOT LIKE '%HORIZONTAL%'     
                       )
     LOOP
         RETURN L_TEMPLATE.ID;
     END LOOP;
 
     RETURN NULL;
 END GET_DATALOAD_LIST_TEMPLATE_ID;
 
 
 PROCEDURE CREATE_BREADCRUMB_REGION (
     P_APPLICATION_ID             IN NUMBER,
     P_PAGE_ID                    IN NUMBER,
     P_SEQ                        IN NUMBER,
     P_BREADCRUMB_ID              IN NUMBER,
     P_BREADCRUMB_ENTRY_ID        IN NUMBER DEFAULT NULL,
     P_BREADCRUMB_ENTRY_NAME      IN VARCHAR2,
     P_PARENT_BREADCRUMB_ENTRY_ID IN NUMBER )
 IS
     L_BREADCRUMB_REGION_EXISTS BOOLEAN := FALSE;
     L_GLOBAL_PAGE_ID           NUMBER;
 BEGIN
     IF P_BREADCRUMB_ID IS NOT NULL AND P_BREADCRUMB_ID <> 0 THEN
 
         L_GLOBAL_PAGE_ID := WWV_FLOW_USER_INTERFACE_DEV.GET_GLOBAL_PAGE_ID (
                                 P_APPLICATION_ID    => P_APPLICATION_ID,
                                 P_USER_INTERFACE_ID => WWV_FLOW_PAGE_DEV.GET_USER_INTERFACE_ID (
                                                            P_APPLICATION_ID => P_APPLICATION_ID,
                                                            P_PAGE_ID        => P_PAGE_ID ));
 
         
         FOR L_REGION IN ( SELECT 1
                             FROM WWV_FLOW_PAGE_PLUGS
                            WHERE FLOW_ID = P_APPLICATION_ID
                              AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
                              AND (PAGE_ID = L_GLOBAL_PAGE_ID OR PAGE_ID = P_PAGE_ID)
                              AND MENU_ID IS NOT NULL )
         LOOP
             L_BREADCRUMB_REGION_EXISTS := TRUE;
         END LOOP;
 
         IF NOT L_BREADCRUMB_REGION_EXISTS THEN
             WWV_FLOW_API.CREATE_PAGE_PLUG (
                 P_FLOW_ID                    => P_APPLICATION_ID,
                 P_PAGE_ID                    => P_PAGE_ID,
                 P_PLUG_NAME                  => WWV_FLOW_LANG.SYSTEM_MESSAGE('BREADCRUMB'),
                 P_PLUG_TEMPLATE              => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_MENUR_TEMPLATE,
                 P_REGION_TEMPLATE_OPTIONS    => GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_MENUR_TEMPLATE,'REGION'),
                 P_PLUG_DISPLAY_SEQUENCE      => P_SEQ,
                 P_PLUG_DISPLAY_POINT         => WWV_FLOW_TEMPLATE_DEV.GET_BREADCRUMB_DISPLAY_POINT (
                                                   P_APPLICATION_ID => P_APPLICATION_ID,
                                                   P_THEME_ID       => WWV_FLOW_THEME_GLOBALS.G_THEME_ID
                                                 ),
                 P_PLUG_SOURCE_TYPE           => WWV_FLOW_REGION_NATIVE.C_BREADCRUMB_REGION,
                 P_MENU_ID                    => P_BREADCRUMB_ID,
                 P_MENU_TEMPLATE_ID           => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_MENU_TEMPLATE,
                 P_COMPONENT_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_MENU_TEMPLATE,'BREADCRUMB')
             );
         END IF;
 
         WWV_FLOW_API.CREATE_MENU_OPTION (
             P_ID              => P_BREADCRUMB_ENTRY_ID,
             P_PARENT_ID       => CASE WHEN P_PARENT_BREADCRUMB_ENTRY_ID <> 0 THEN P_PARENT_BREADCRUMB_ENTRY_ID END,
             P_MENU_ID         => P_BREADCRUMB_ID,
             P_OPTION_SEQUENCE => 10,
             P_SHORT_NAME      => P_BREADCRUMB_ENTRY_NAME,
             P_LINK            => 'f?p=&APP_ID.:'||P_PAGE_ID||':&SESSION.',
             P_PAGE_ID         => P_PAGE_ID );
    END IF;
 END CREATE_BREADCRUMB_REGION;
 
 
 PROCEDURE CREATE_PAGE (
     P_FLOW_ID                  IN NUMBER,
     P_PAGE_ID                  IN NUMBER,
     P_NAME                     IN VARCHAR2,
     P_PAGE_MODE                IN VARCHAR2,
     P_USER_INTERFACE_ID        IN NUMBER,
     P_ALIAS                    IN VARCHAR2 DEFAULT NULL,
     P_TITLE                    IN VARCHAR2 DEFAULT NULL,
     P_GROUP_ID                 IN NUMBER   DEFAULT NULL,
     
     P_TAB_SET                  IN VARCHAR2 DEFAULT NULL,
     P_TAB_NAME                 IN VARCHAR2 DEFAULT NULL,
     P_TAB_LABEL                IN VARCHAR2 DEFAULT NULL,
     
     P_NAV_LIST_ID              IN NUMBER DEFAULT NULL,
     P_NAV_LIST_ITEM_ID         IN NUMBER DEFAULT NULL,
     P_NAV_LIST_ITEM_NAME       IN VARCHAR2 DEFAULT NULL,
     P_NAV_LIST_PARENT_ITEM_ID  IN NUMBER DEFAULT NULL,
     P_NAV_LIST_CHILD_ITEM_NAME IN VARCHAR2 DEFAULT NULL,
     
     P_HTML_PAGE_HEADER         IN VARCHAR2 DEFAULT NULL,
     P_JAVASCRIPT_CODE          IN VARCHAR2 DEFAULT NULL,
     
     P_BREADCRUMB_ID            IN NUMBER   DEFAULT NULL,
     P_BREADCRUMB_NAME          IN VARCHAR2 DEFAULT NULL,
     P_PARENT_BREADCRUMB_ID     IN NUMBER   DEFAULT NULL, 
     P_INLINE_CSS               IN VARCHAR2 DEFAULT NULL,
     P_JAVASCRIPT_CODE_ONLOAD   IN VARCHAR2 DEFAULT NULL )
 IS
 BEGIN
     
     WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
         P_FLOW_ID           => P_FLOW_ID,
         P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
     WWV_FLOW_API.CREATE_PAGE (
         P_ID                     => P_PAGE_ID,
         P_FLOW_ID                => P_FLOW_ID,
         P_TAB_SET                => REPLACE(P_TAB_SET, '%null%', NULL),
         P_NAME                   => P_NAME,
         P_PAGE_MODE              => P_PAGE_MODE,
         P_USER_INTERFACE_ID      => P_USER_INTERFACE_ID,
         P_ALIAS                  => P_ALIAS,
         P_FIRST_ITEM             => 'NO_FIRST_ITEM',
         P_STEP_TITLE             => COALESCE(P_TITLE, P_NAME),
         P_HTML_PAGE_HEADER       => P_HTML_PAGE_HEADER,
         P_JAVASCRIPT_CODE        => P_JAVASCRIPT_CODE,
         P_JAVASCRIPT_CODE_ONLOAD => P_JAVASCRIPT_CODE_ONLOAD,
         P_INLINE_CSS             => P_INLINE_CSS,
         P_STEP_TEMPLATE          => '',
         P_PAGE_TEMPLATE_OPTIONS  => GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_PAGE_TEMPLATE, 'PAGE'),
         P_PAGE_IS_PUBLIC_Y_N     => 'N',
         P_GROUP_ID               => P_GROUP_ID);
 
     IF P_NAV_LIST_ID IS NOT NULL THEN
         
     	CREATE_NAVIGATION_LIST_ITEM (
             P_FLOW_ID                  => P_FLOW_ID,
             P_PAGE_ID                  => P_PAGE_ID,
             P_PAGE_NAME                => P_NAME,
             P_NAV_LIST_ID              => P_NAV_LIST_ID,
             P_NAV_LIST_ITEM_ID         => P_NAV_LIST_ITEM_ID,
             P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_ITEM_NAME,
             P_NAV_LIST_PARENT_ITEM_ID  => P_NAV_LIST_PARENT_ITEM_ID,
             P_NAV_LIST_CHILD_ITEM_NAME => P_NAV_LIST_CHILD_ITEM_NAME
     	);
     ELSE
 	    
 	    IF REPLACE(P_TAB_SET,'%null%',NULL) IS NOT NULL THEN
 	        CREATE_TAB (
 	             P_FLOW_ID  => P_FLOW_ID,
 	             P_PAGE_ID  => P_PAGE_ID,
 	             P_TAB_SET  => P_TAB_SET,
 	             P_TAB_NAME => P_TAB_NAME,
 	             P_TAB_TEXT => P_TAB_LABEL);
 	    END IF;
     END IF;
 
     CREATE_BREADCRUMB_REGION (
         P_APPLICATION_ID             => P_FLOW_ID,
         P_PAGE_ID                    => P_PAGE_ID,
         P_SEQ                        => 10,
         P_BREADCRUMB_ID              => P_BREADCRUMB_ID,
         P_BREADCRUMB_ENTRY_NAME      => P_BREADCRUMB_NAME,
         P_PARENT_BREADCRUMB_ENTRY_ID => P_PARENT_BREADCRUMB_ID );
 
 END CREATE_PAGE;
 
 
 PROCEDURE CREATE_GLOBAL_PAGE (
     P_APPLICATION_ID    IN NUMBER,
     P_PAGE_ID           IN NUMBER,
     P_USER_INTERFACE_ID IN NUMBER )
 IS
     L_PAGE_NAME WWV_FLOW_STEPS.NAME%TYPE;
 BEGIN
     SELECT SUBSTR(WWV_FLOW_LANG.SYSTEM_MESSAGE('GLOBAL_PAGE') || ' - ' || DISPLAY_NAME, 1, 255)
       INTO L_PAGE_NAME
       FROM WWV_FLOW_USER_INTERFACES
      WHERE ID                = P_USER_INTERFACE_ID
        AND FLOW_ID           = P_APPLICATION_ID
        AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
 
     WWV_FLOW_API.CREATE_PAGE (
         P_ID                => P_PAGE_ID,
         P_FLOW_ID           => P_APPLICATION_ID,
         P_USER_INTERFACE_ID => P_USER_INTERFACE_ID,
         P_PAGE_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_PAGE_TEMPLATE, 'PAGE'),
         P_TAB_SET           => NULL,
         P_NAME              => L_PAGE_NAME,
         P_STEP_TITLE        => L_PAGE_NAME,
         P_PROTECTION_LEVEL  => 'D',
         P_FIRST_ITEM        => 'NO_FIRST_ITEM');
 
     UPDATE WWV_FLOW_USER_INTERFACES
        SET GLOBAL_PAGE_ID    = P_PAGE_ID
      WHERE ID                = P_USER_INTERFACE_ID
        AND FLOW_ID           = P_APPLICATION_ID
        AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
        AND GLOBAL_PAGE_ID    IS NULL;
 
 END CREATE_GLOBAL_PAGE;
 
 
 PROCEDURE CREATE_LIST_REGION (
     P_FLOW_ID                      IN NUMBER,
     P_PAGE_ID                      IN NUMBER,
     P_NAME                         IN VARCHAR2,
     P_SEQ                          IN NUMBER,
     P_LIST_ID                      IN NUMBER,
     P_LIST_TEMPLATE_THEME_CLASS_ID IN NUMBER DEFAULT 17,
     P_REGION_TEMPLATE              IN NUMBER DEFAULT 0)
 IS
    L_LIST_TEMPLATE_ID NUMBER;
 BEGIN
     L_LIST_TEMPLATE_ID := GET_DATALOAD_LIST_TEMPLATE_ID (
                               P_FLOW_ID        => P_FLOW_ID,
                               P_THEME_CLASS_ID => P_LIST_TEMPLATE_THEME_CLASS_ID );
 
     WWV_FLOW_API.CREATE_PAGE_PLUG (
         P_FLOW_ID               => P_FLOW_ID,
         P_PAGE_ID               => P_PAGE_ID,
         P_PLUG_NAME             => P_NAME,
         P_TRANSLATE_TITLE       => 'N',
         P_PLUG_TEMPLATE         => P_REGION_TEMPLATE,
         P_PLUG_DISPLAY_SEQUENCE => P_SEQ,
         P_PLUG_DISPLAY_POINT    => 'BODY',
         P_PLUG_SOURCE_TYPE      => WWV_FLOW_REGION_NATIVE.C_LIST_REGION,
         P_LIST_ID               => P_LIST_ID,
         P_LIST_TEMPLATE_ID      => L_LIST_TEMPLATE_ID,
         P_PLUG_CUSTOMIZED       =>'0',
         P_PLUG_CACHING          => 'NOT_CACHED' );
 END CREATE_LIST_REGION;
 
 
 PROCEDURE CREATE_HTML_REGION (
     P_ID               IN NUMBER   DEFAULT NULL,
     P_FLOW_ID          IN NUMBER,
     P_PAGE_ID          IN NUMBER,
     P_NAME             IN VARCHAR2,
     P_SEQ              IN NUMBER,
     P_TEMPLATE_ID      IN NUMBER,
     P_PARENT_REGION_ID IN NUMBER DEFAULT NULL,
     P_ATTRIBUTES       IN VARCHAR2 DEFAULT NULL )
 IS
 BEGIN
     WWV_FLOW_API.CREATE_PAGE_PLUG (
         P_ID                      => P_ID,
         P_FLOW_ID                 => P_FLOW_ID,
         P_PAGE_ID                 => P_PAGE_ID,
         P_PLUG_NAME               => P_NAME,
         P_PARENT_PLUG_ID          => P_PARENT_REGION_ID,
         P_TRANSLATE_TITLE         => 'Y',
         P_REGION_ATTRIBUTES       => P_ATTRIBUTES,
         P_PLUG_TEMPLATE           => P_TEMPLATE_ID,
         P_REGION_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS (P_TEMPLATE_ID,'REGION'),
         P_PLUG_DISPLAY_SEQUENCE   => P_SEQ,
         P_PLUG_DISPLAY_POINT      => 'BODY',
         P_PLUG_ITEM_DISPLAY_POINT => 'ABOVE',
         P_PLUG_SOURCE_TYPE        => WWV_FLOW_REGION_NATIVE.C_STATIC );
 END CREATE_HTML_REGION;
 
 
 PROCEDURE CREATE_JQM_LIST_VIEW_REGION (
     P_ID                     IN NUMBER   DEFAULT NULL,
     P_FLOW_ID                IN NUMBER,
     P_PAGE_ID                IN NUMBER,
     P_NAME                   IN VARCHAR2,
     P_SEQ                    IN NUMBER,
     P_TEMPLATE_ID            IN NUMBER,
     P_DISPLAY_POINT          IN VARCHAR2 DEFAULT 'BODY',
     
     P_SQL_STATEMENT          IN VARCHAR2,
     P_PAGE_ITEMS_TO_SUBMIT   IN VARCHAR2 DEFAULT NULL,
     P_TEXT_COLUMN            IN VARCHAR2,
     P_SUPPLEMENT_INFO_COLUMN IN VARCHAR2 DEFAULT NULL,
     P_COUNTER_COLUMN         IN VARCHAR2 DEFAULT NULL,
     P_LIST_DIVIDER           IN VARCHAR2 DEFAULT NULL,
     P_LINK_TARGET            IN VARCHAR2 DEFAULT NULL,
     P_ENABLE_SEARCH          IN BOOLEAN  DEFAULT FALSE,
     P_IS_INSET               IN BOOLEAN  DEFAULT FALSE )
 IS
     L_OPTIONS     WWV_FLOW_PAGE_PLUGS.ATTRIBUTE_01%TYPE;
     L_SEARCH_TYPE WWV_FLOW_PAGE_PLUGS.ATTRIBUTE_18%TYPE;
 
     PROCEDURE ADD_OPTION (
         P_VALUE IN VARCHAR2 )
     IS
     BEGIN
         L_OPTIONS := L_OPTIONS || CASE WHEN L_OPTIONS IS NOT NULL THEN ':' END ||
                      P_VALUE;
     END ADD_OPTION;
 BEGIN
     IF P_ENABLE_SEARCH THEN
         ADD_OPTION('SEARCH');
         L_SEARCH_TYPE := 'SERVER_EXACT_IGNORE';
     END IF;
 
     IF P_IS_INSET THEN
         ADD_OPTION('INSET');
     END IF;
 
     IF P_LIST_DIVIDER IS NOT NULL THEN
         ADD_OPTION('DIVIDER');
     END IF;
 
     WWV_FLOW_API.CREATE_PAGE_PLUG (
         P_ID                      => P_ID,
         P_FLOW_ID                 => P_FLOW_ID,
         P_PAGE_ID                 => P_PAGE_ID,
         P_PLUG_NAME               => P_NAME,
         P_TRANSLATE_TITLE         => 'Y',
         P_PLUG_TEMPLATE           => P_TEMPLATE_ID,
         P_REGION_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS (P_TEMPLATE_ID,'REGION'),
         P_PLUG_DISPLAY_SEQUENCE   => P_SEQ,
         P_PLUG_DISPLAY_POINT      => P_DISPLAY_POINT,
         P_PLUG_ITEM_DISPLAY_POINT => 'ABOVE',
         P_ESCAPE_ON_HTTP_OUTPUT   => 'Y',
         P_PLUG_SOURCE_TYPE        => WWV_FLOW_REGION_NATIVE.C_JQM_LIST_VIEW,
         P_PLUG_SOURCE             => P_SQL_STATEMENT,
         P_ATTRIBUTE_01            => L_OPTIONS,
         P_ATTRIBUTE_02            => P_TEXT_COLUMN,
         P_ATTRIBUTE_06            => P_SUPPLEMENT_INFO_COLUMN,
         P_ATTRIBUTE_08            => P_COUNTER_COLUMN,
         P_ATTRIBUTE_14            => P_LIST_DIVIDER,
         P_ATTRIBUTE_16            => P_LINK_TARGET,
         P_ATTRIBUTE_18            => L_SEARCH_TYPE );
 END CREATE_JQM_LIST_VIEW_REGION;
 
 
 PROCEDURE CREATE_RADIOGROUP_ITEM (
     P_ID            IN NUMBER   DEFAULT NULL,
     P_FLOW_ID       IN NUMBER,
     P_PAGE_ID       IN NUMBER,
     P_NAME_POSTFIX  IN VARCHAR2,
     P_LABEL         IN VARCHAR2,
     P_IS_REQUIRED   IN BOOLEAN,
     P_SEQ           IN NUMBER,
     P_REGION_ID     IN NUMBER,
     P_NAMED_LOV     IN VARCHAR2,
     P_NAMED_LOV_ID  IN NUMBER,
     P_SOURCE_TYPE   IN VARCHAR2 DEFAULT 'STATIC',
     P_SOURCE        IN VARCHAR2 DEFAULT NULL,
     P_DEFAULT_TYPE  IN VARCHAR2 DEFAULT 'STATIC_TEXT_WITH_SUBSTITUTIONS',
     P_DEFAULT_VALUE IN VARCHAR2 DEFAULT NULL,
     P_HELP_TEXT     IN VARCHAR2 DEFAULT NULL )
 IS
 BEGIN
     WWV_FLOW_API.CREATE_PAGE_ITEM (
         P_ID                       => P_ID,
         P_FLOW_ID                  => P_FLOW_ID,
         P_FLOW_STEP_ID             => P_PAGE_ID,
         P_NAME                     => 'P'||P_PAGE_ID||'_'||P_NAME_POSTFIX,
         P_DISPLAY_AS               => WWV_FLOW_NATIVE_ITEM.C_RADIOGROUP,
         P_ATTRIBUTE_01             => '1',    
         P_ATTRIBUTE_02             => 'NONE', 
         P_IS_REQUIRED              => P_IS_REQUIRED,
         P_ITEM_SEQUENCE            => P_SEQ,
         P_ITEM_PLUG_ID             => P_REGION_ID,
         P_PROMPT                   => P_LABEL,
         P_LABEL_ALIGNMENT          => 'RIGHT-TOP',
         P_FIELD_ALIGNMENT          => 'LEFT',
         P_FIELD_TEMPLATE           => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,
         P_ITEM_TEMPLATE_OPTIONS    => GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,'ITEM'),
         P_NAMED_LOV                => P_NAMED_LOV,
         P_LOV                      => '.'||TO_CHAR(P_NAMED_LOV_ID)||'.',
         P_LOV_DISPLAY_NULL         => 'NO',
         P_LOV_DISPLAY_EXTRA        => 'YES',
         P_USE_CACHE_BEFORE_DEFAULT => CASE WHEN P_SOURCE_TYPE = 'DB_COLUMN' THEN 'NO' ELSE 'YES' END,
         P_SOURCE_TYPE              => P_SOURCE_TYPE,
         P_SOURCE                   => P_SOURCE,
         P_ITEM_DEFAULT_TYPE        => P_DEFAULT_TYPE,
         P_ITEM_DEFAULT             => P_DEFAULT_VALUE,
         P_BEGIN_ON_NEW_LINE        => 'YES',
         P_BEGIN_ON_NEW_FIELD       => 'YES',
         P_DATA_TYPE                => 'VARCHAR',
         P_ACCEPT_PROCESSING        => 'REPLACE_EXISTING',
         P_IS_PERSISTENT            => 'Y',
         P_PROTECTION_LEVEL         => 'N',
         P_ESCAPE_ON_HTTP_INPUT     => 'Y',
         P_ESCAPE_ON_HTTP_OUTPUT    => 'Y',
         P_SHOW_QUICK_PICKS         => 'N',
         P_HELP_TEXT                => P_HELP_TEXT );
 END CREATE_RADIOGROUP_ITEM;
 
 
 PROCEDURE CREATE_CHECKBOX_ITEM (
     P_ID            IN NUMBER   DEFAULT NULL,
     P_FLOW_ID       IN NUMBER,
     P_PAGE_ID       IN NUMBER,
     P_NAME_POSTFIX  IN VARCHAR2,
     P_LABEL         IN VARCHAR2,
     P_IS_REQUIRED   IN BOOLEAN,
     P_SEQ           IN NUMBER,
     P_REGION_ID     IN NUMBER,
     P_STATIC_LOV    IN VARCHAR2 DEFAULT NULL,
     P_NAMED_LOV     IN VARCHAR2 DEFAULT NULL,
     P_NAMED_LOV_ID  IN NUMBER   DEFAULT NULL,
     P_SOURCE_TYPE   IN VARCHAR2 DEFAULT 'STATIC',
     P_SOURCE        IN VARCHAR2 DEFAULT NULL,
     P_DEFAULT_TYPE  IN VARCHAR2 DEFAULT 'STATIC_TEXT_WITH_SUBSTITUTIONS',
     P_DEFAULT_VALUE IN VARCHAR2 DEFAULT NULL,
     P_HELP_TEXT     IN VARCHAR2 DEFAULT NULL )
 IS
 BEGIN
     WWV_FLOW_API.CREATE_PAGE_ITEM (
         P_ID                       => P_ID,
         P_FLOW_ID                  => P_FLOW_ID,
         P_FLOW_STEP_ID             => P_PAGE_ID,
         P_NAME                     => 'P'||P_PAGE_ID||'_'||P_NAME_POSTFIX,
         P_DISPLAY_AS               => WWV_FLOW_NATIVE_ITEM.C_CHECKBOX,
         P_ATTRIBUTE_01             => '1',    
         P_IS_REQUIRED              => P_IS_REQUIRED,
         P_ITEM_SEQUENCE            => P_SEQ,
         P_ITEM_PLUG_ID             => P_REGION_ID,
         P_PROMPT                   => P_LABEL,
         P_LABEL_ALIGNMENT          => 'RIGHT',
         P_FIELD_ALIGNMENT          => 'LEFT-CENTER',
         P_FIELD_TEMPLATE           => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,
         P_ITEM_TEMPLATE_OPTIONS    => GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,'ITEM'),
         P_NAMED_LOV                => P_NAMED_LOV,
         P_LOV                      => CASE 
                                           WHEN P_NAMED_LOV_ID IS NOT NULL THEN '.'||TO_CHAR(P_NAMED_LOV_ID)||'.' 
                                           ELSE P_STATIC_LOV
                                       END,
         P_LOV_DISPLAY_NULL         => 'NO',
         P_LOV_DISPLAY_EXTRA        => 'YES',
         P_USE_CACHE_BEFORE_DEFAULT => CASE WHEN P_SOURCE_TYPE = 'DB_COLUMN' THEN 'NO' ELSE 'YES' END,
         P_SOURCE_TYPE              => P_SOURCE_TYPE,
         P_SOURCE                   => P_SOURCE,
         P_ITEM_DEFAULT_TYPE        => P_DEFAULT_TYPE,
         P_ITEM_DEFAULT             => P_DEFAULT_VALUE,
         P_BEGIN_ON_NEW_LINE        => 'YES',
         P_BEGIN_ON_NEW_FIELD       => 'YES',
         P_DATA_TYPE                => 'VARCHAR',
         P_ACCEPT_PROCESSING        => 'REPLACE_EXISTING',
         P_IS_PERSISTENT            => 'Y',
         P_PROTECTION_LEVEL         => 'N',
         P_ESCAPE_ON_HTTP_INPUT     => 'Y',
         P_ESCAPE_ON_HTTP_OUTPUT    => 'Y',
         P_SHOW_QUICK_PICKS         => 'N',
         P_HELP_TEXT                => P_HELP_TEXT );
 END CREATE_CHECKBOX_ITEM;
 
 
 PROCEDURE CREATE_FILE_ITEM (
     P_ID             IN NUMBER   DEFAULT NULL,
     P_FLOW_ID        IN NUMBER,
     P_PAGE_ID        IN NUMBER,
     P_NAME_POSTFIX   IN VARCHAR2,
     P_LABEL          IN VARCHAR2,
     P_IS_REQUIRED    IN BOOLEAN,
     P_FIELD_TEMPLATE IN NUMBER   DEFAULT WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,
     P_SEQ            IN NUMBER,
     P_REGION_ID      IN NUMBER,
     P_SOURCE_TYPE    IN VARCHAR2 DEFAULT 'STATIC',
     P_SOURCE         IN VARCHAR2 DEFAULT NULL,
     P_DEFAULT_TYPE   IN VARCHAR2 DEFAULT 'STATIC_TEXT_WITH_SUBSTITUTIONS',
     P_DEFAULT_VALUE  IN VARCHAR2 DEFAULT NULL,
     P_HELP_TEXT      IN VARCHAR2 DEFAULT NULL )
 IS
 BEGIN
     WWV_FLOW_API.CREATE_PAGE_ITEM (
         P_ID                       => P_ID,
         P_FLOW_ID                  => P_FLOW_ID,
         P_FLOW_STEP_ID             => P_PAGE_ID,
         P_NAME                     => 'P'||P_PAGE_ID||'_'||P_NAME_POSTFIX,
         P_DISPLAY_AS               => WWV_FLOW_NATIVE_ITEM.C_FILE,
         P_ATTRIBUTE_01             => 'APEX_APPLICATION_TEMP_FILES', 
         P_ATTRIBUTE_09             => 'REQUEST',
         P_IS_REQUIRED              => P_IS_REQUIRED,
         P_ITEM_SEQUENCE            => P_SEQ,
         P_ITEM_PLUG_ID             => P_REGION_ID,
         P_PROMPT                   => P_LABEL,
         P_LABEL_ALIGNMENT          => 'RIGHT',
         P_FIELD_ALIGNMENT          => 'LEFT',
         P_FIELD_TEMPLATE           => P_FIELD_TEMPLATE,
         P_ITEM_TEMPLATE_OPTIONS    => GET_PRESET_TEMPLATE_OPTIONS (P_FIELD_TEMPLATE,'ITEM'),
         P_USE_CACHE_BEFORE_DEFAULT => CASE WHEN P_SOURCE_TYPE = 'DB_COLUMN' THEN 'NO' ELSE 'YES' END,
         P_SOURCE_TYPE              => P_SOURCE_TYPE,
         P_SOURCE                   => P_SOURCE,
         P_ITEM_DEFAULT_TYPE        => P_DEFAULT_TYPE,
         P_ITEM_DEFAULT             => P_DEFAULT_VALUE,
         P_BEGIN_ON_NEW_LINE        => 'YES',
         P_BEGIN_ON_NEW_FIELD       => 'YES',
         P_DATA_TYPE                => 'VARCHAR',
         P_ACCEPT_PROCESSING        => 'REPLACE_EXISTING',
         P_IS_PERSISTENT            => 'Y',
         P_PROTECTION_LEVEL         => 'N',
         P_ESCAPE_ON_HTTP_INPUT     => 'Y',
         P_ESCAPE_ON_HTTP_OUTPUT    => 'Y',
         P_SHOW_QUICK_PICKS         => 'N',
         P_HELP_TEXT                => P_HELP_TEXT );
 END CREATE_FILE_ITEM;
 
 
 PROCEDURE CREATE_TEXT_ITEM (
     P_ID             IN NUMBER   DEFAULT NULL,
     P_FLOW_ID        IN NUMBER,
     P_PAGE_ID        IN NUMBER,
     P_NAME_POSTFIX   IN VARCHAR2,
     P_LABEL          IN VARCHAR2,
     P_WIDTH          IN NUMBER,
     P_MAX_WIDTH      IN NUMBER,
     P_IS_REQUIRED    IN BOOLEAN,
     P_SEQ            IN NUMBER,
     P_REGION_ID      IN NUMBER,
     P_FIELD_TEMPLATE IN NUMBER   DEFAULT WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,
     P_SOURCE_TYPE    IN VARCHAR2 DEFAULT 'STATIC',
     P_SOURCE         IN VARCHAR2 DEFAULT NULL,
     P_DEFAULT_TYPE   IN VARCHAR2 DEFAULT 'STATIC_TEXT_WITH_SUBSTITUTIONS',
     P_DEFAULT_VALUE  IN VARCHAR2 DEFAULT NULL,
     P_HELP_TEXT      IN VARCHAR2 DEFAULT NULL )
 IS
 BEGIN
     WWV_FLOW_API.CREATE_PAGE_ITEM (
         P_ID                       => P_ID,
         P_FLOW_ID                  => P_FLOW_ID,
         P_FLOW_STEP_ID             => P_PAGE_ID,
         P_NAME                     => 'P'||P_PAGE_ID||'_'||P_NAME_POSTFIX,
         P_DISPLAY_AS               => WWV_FLOW_NATIVE_ITEM.C_TEXT_FIELD,
         P_ATTRIBUTE_01             => 'N', 
         P_ATTRIBUTE_02             => 'N', 
         P_CSIZE                    => P_WIDTH,
         P_CMAXLENGTH               => P_MAX_WIDTH,
         P_CHEIGHT                  => 1,
         P_CATTRIBUTES              => 'nowrap="nowrap"',
         P_IS_REQUIRED              => P_IS_REQUIRED,
         P_ITEM_SEQUENCE            => P_SEQ,
         P_ITEM_PLUG_ID             => P_REGION_ID,
         P_PROMPT                   => P_LABEL,
         P_LABEL_ALIGNMENT          => 'RIGHT',
         P_FIELD_ALIGNMENT          => 'LEFT',
         P_FIELD_TEMPLATE           => P_FIELD_TEMPLATE,
         P_ITEM_TEMPLATE_OPTIONS    => GET_PRESET_TEMPLATE_OPTIONS (P_FIELD_TEMPLATE,'ITEM'),
         P_USE_CACHE_BEFORE_DEFAULT => CASE WHEN P_SOURCE_TYPE = 'DB_COLUMN' THEN 'NO' ELSE 'YES' END,
         P_SOURCE_TYPE              => P_SOURCE_TYPE,
         P_SOURCE                   => P_SOURCE,
         P_ITEM_DEFAULT_TYPE        => P_DEFAULT_TYPE,
         P_ITEM_DEFAULT             => P_DEFAULT_VALUE,
         P_BEGIN_ON_NEW_LINE        => 'YES',
         P_BEGIN_ON_NEW_FIELD       => 'YES',
         P_DATA_TYPE                => 'VARCHAR',
         P_ACCEPT_PROCESSING        => 'REPLACE_EXISTING',
         P_IS_PERSISTENT            => 'Y',
         P_PROTECTION_LEVEL         => 'N',
         P_ESCAPE_ON_HTTP_INPUT     => 'Y',
         P_ESCAPE_ON_HTTP_OUTPUT    => 'Y',
         P_SHOW_QUICK_PICKS         => 'N',
         P_HELP_TEXT                => P_HELP_TEXT );
 END CREATE_TEXT_ITEM;
 
 
 PROCEDURE CREATE_TEXTAREA_ITEM (
     P_ID             IN NUMBER   DEFAULT NULL,
     P_FLOW_ID        IN NUMBER,
     P_PAGE_ID        IN NUMBER,
     P_NAME_POSTFIX   IN VARCHAR2,
     P_LABEL          IN VARCHAR2,
     P_WIDTH          IN NUMBER,
     P_MAX_WIDTH      IN NUMBER,
     P_HEIGHT         IN NUMBER,
     P_IS_REQUIRED    IN BOOLEAN,
     P_SEQ            IN NUMBER,
     P_REGION_ID      IN NUMBER,
     P_FIELD_TEMPLATE IN NUMBER   DEFAULT WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,
     P_SOURCE_TYPE    IN VARCHAR2 DEFAULT 'STATIC',
     P_SOURCE         IN VARCHAR2 DEFAULT NULL,
     P_DEFAULT_TYPE   IN VARCHAR2 DEFAULT 'STATIC_TEXT_WITH_SUBSTITUTIONS',
     P_DEFAULT_VALUE  IN VARCHAR2 DEFAULT NULL,
     P_HELP_TEXT      IN VARCHAR2 DEFAULT NULL,
     P_LABEL_ALIGN    IN VARCHAR2 DEFAULT 'ABOVE'
  )
 IS
 BEGIN
     WWV_FLOW_API.CREATE_PAGE_ITEM (
         P_ID                       => P_ID,
         P_FLOW_ID                  => P_FLOW_ID,
         P_FLOW_STEP_ID             => P_PAGE_ID,
         P_NAME                     => 'P'||P_PAGE_ID||'_'||P_NAME_POSTFIX,
         P_DISPLAY_AS               => WWV_FLOW_NATIVE_ITEM.C_TEXTAREA,
         P_ATTRIBUTE_01             => 'Y', 
         P_ATTRIBUTE_02             => 'N', 
         P_ATTRIBUTE_03             => 'N', 
         P_CSIZE                    => P_WIDTH,
         P_CMAXLENGTH               => P_MAX_WIDTH,
         P_CHEIGHT                  => P_HEIGHT,
         P_CATTRIBUTES              => 'nowrap="nowrap"',
         P_TAG_ATTRIBUTES           => 'spellcheck="false"',
         P_IS_REQUIRED              => P_IS_REQUIRED,
         P_ITEM_SEQUENCE            => P_SEQ,
         P_ITEM_PLUG_ID             => P_REGION_ID,
         P_PROMPT                   => P_LABEL,
         P_LABEL_ALIGNMENT          => P_LABEL_ALIGN,
         P_FIELD_ALIGNMENT          => 'LEFT',
         P_FIELD_TEMPLATE           => P_FIELD_TEMPLATE,
         P_ITEM_TEMPLATE_OPTIONS    => GET_PRESET_TEMPLATE_OPTIONS (P_FIELD_TEMPLATE,'ITEM'),
         P_USE_CACHE_BEFORE_DEFAULT => CASE WHEN P_SOURCE_TYPE = 'DB_COLUMN' THEN 'NO' ELSE 'YES' END,
         P_SOURCE_TYPE              => P_SOURCE_TYPE,
         P_SOURCE                   => P_SOURCE,
         P_ITEM_DEFAULT_TYPE        => P_DEFAULT_TYPE,
         P_ITEM_DEFAULT             => P_DEFAULT_VALUE,
         P_BEGIN_ON_NEW_LINE        => 'YES',
         P_BEGIN_ON_NEW_FIELD       => 'YES',
         P_DATA_TYPE                => 'VARCHAR',
         P_ACCEPT_PROCESSING        => 'REPLACE_EXISTING',
         P_IS_PERSISTENT            => 'Y',
         P_PROTECTION_LEVEL         => 'N',
         P_ESCAPE_ON_HTTP_INPUT     => 'Y',
         P_ESCAPE_ON_HTTP_OUTPUT    => 'Y',
         P_SHOW_QUICK_PICKS         => 'N',
         P_HELP_TEXT                => P_HELP_TEXT );
 END CREATE_TEXTAREA_ITEM;
 
 
 PROCEDURE CREATE_DISPLAY_ONLY_ITEM (
     P_ID            IN NUMBER   DEFAULT NULL,
     P_FLOW_ID       IN NUMBER,
     P_PAGE_ID       IN NUMBER,
     P_NAME_POSTFIX  IN VARCHAR2,
     P_LABEL         IN VARCHAR2,
     P_SEQ           IN NUMBER,
     P_REGION_ID     IN NUMBER,
     P_SOURCE_TYPE   IN VARCHAR2 DEFAULT 'STATIC',
     P_SOURCE        IN VARCHAR2 DEFAULT NULL,
     P_DEFAULT_TYPE  IN VARCHAR2 DEFAULT 'STATIC_TEXT_WITH_SUBSTITUTIONS',
     P_DEFAULT_VALUE IN VARCHAR2 DEFAULT NULL,
     P_HELP_TEXT     IN VARCHAR2 DEFAULT NULL)
 IS
 BEGIN
     WWV_FLOW_API.CREATE_PAGE_ITEM (
         P_ID                       => P_ID,
         P_FLOW_ID                  => P_FLOW_ID,
         P_FLOW_STEP_ID             => P_PAGE_ID,
         P_NAME                     => 'P'||P_PAGE_ID||'_'||P_NAME_POSTFIX,
         P_DISPLAY_AS               => WWV_FLOW_NATIVE_ITEM.C_DISPLAY_ONLY,
         P_ATTRIBUTE_01             => 'N',     
         P_ATTRIBUTE_02             => 'VALUE', 
         P_ATTRIBUTE_04             => 'Y',     
         P_ITEM_SEQUENCE            => P_SEQ,
         P_ITEM_PLUG_ID             => P_REGION_ID,
         P_PROMPT                   => P_LABEL,
         P_LABEL_ALIGNMENT          => 'RIGHT',
         P_FIELD_ALIGNMENT          => 'LEFT',
         P_FIELD_TEMPLATE           => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,
         P_ITEM_TEMPLATE_OPTIONS    => GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,'ITEM'),
         P_USE_CACHE_BEFORE_DEFAULT => CASE WHEN P_SOURCE_TYPE = 'DB_COLUMN' THEN 'NO' WHEN P_SOURCE_TYPE = 'QUERY' THEN 'NO' ELSE 'YES' END,
         P_SOURCE_TYPE              => P_SOURCE_TYPE,
         P_SOURCE                   => P_SOURCE,
         P_ITEM_DEFAULT_TYPE        => P_DEFAULT_TYPE,
         P_ITEM_DEFAULT             => P_DEFAULT_VALUE,
         P_BEGIN_ON_NEW_LINE        => 'YES',
         P_BEGIN_ON_NEW_FIELD       => 'YES',
         P_DATA_TYPE                => 'VARCHAR',
         P_ACCEPT_PROCESSING        => NULL,
         P_IS_PERSISTENT            => 'Y',
         P_PROTECTION_LEVEL         => 'N',
         P_ESCAPE_ON_HTTP_INPUT     => 'Y',
         P_ESCAPE_ON_HTTP_OUTPUT    => 'Y',
         P_HELP_TEXT                => P_HELP_TEXT );
 END CREATE_DISPLAY_ONLY_ITEM;
 
 PROCEDURE CREATE_SELECTLIST_ITEM (
     P_ID             IN NUMBER   DEFAULT NULL,
     P_FLOW_ID        IN NUMBER,
     P_PAGE_ID        IN NUMBER,
     P_NAME_POSTFIX   IN VARCHAR2,
     P_LABEL          IN VARCHAR2,
     P_IS_REQUIRED    IN BOOLEAN,
     P_SEQ            IN NUMBER,
     P_REGION_ID      IN NUMBER,
     P_NAMED_LOV      IN VARCHAR2,
     P_NAMED_LOV_ID   IN NUMBER,
     P_WIDTH          IN NUMBER DEFAULT 30,
     P_MAX_WIDTH      IN NUMBER DEFAULT 2000,
     P_FIELD_TEMPLATE IN NUMBER   DEFAULT WWV_FLOW_THEME_GLOBALS.G_DEFAULT_LABEL_TEMPLATE,
     P_SOURCE_TYPE    IN VARCHAR2 DEFAULT 'STATIC',
     P_SOURCE         IN VARCHAR2 DEFAULT NULL,
     P_DEFAULT_TYPE   IN VARCHAR2 DEFAULT 'STATIC_TEXT_WITH_SUBSTITUTIONS',
     P_DEFAULT_VALUE  IN VARCHAR2 DEFAULT NULL, 
     P_HELP_TEXT      IN VARCHAR2 DEFAULT NULL )
 IS
 BEGIN
        WWV_FLOW_API.CREATE_PAGE_ITEM(
            P_ID                       => P_ID,
            P_FLOW_ID                  => P_FLOW_ID,
            P_FLOW_STEP_ID             => P_PAGE_ID,
            P_NAME                     => 'P'||P_PAGE_ID||'_'||P_NAME_POSTFIX,
            P_DISPLAY_AS               => WWV_FLOW_NATIVE_ITEM.C_SELECT_LIST,
            P_NAMED_LOV                => P_NAMED_LOV,
            P_LOV                      => '.'||TO_CHAR(P_NAMED_LOV_ID)||'.',
            P_LOV_DISPLAY_NULL         => 'NO',
            P_LOV_TRANSLATED           => 'N',
            
            
            P_CSIZE                    => P_WIDTH,
            P_CMAXLENGTH               => P_MAX_WIDTH, 
            P_CHEIGHT                  => 1,
            P_CATTRIBUTES              => 'nowrap="nowrap"',
            P_IS_REQUIRED              => P_IS_REQUIRED,
            P_ITEM_SEQUENCE            => P_SEQ,
            P_ITEM_PLUG_ID             => P_REGION_ID,
            P_PROMPT                   => P_LABEL,
            P_LABEL_ALIGNMENT          => 'RIGHT',
            P_FIELD_ALIGNMENT          => 'LEFT',
            P_FIELD_TEMPLATE           => P_FIELD_TEMPLATE,
            P_ITEM_TEMPLATE_OPTIONS    => GET_PRESET_TEMPLATE_OPTIONS (P_FIELD_TEMPLATE,'ITEM'),
            P_USE_CACHE_BEFORE_DEFAULT => 'YES',
            
            P_SOURCE_TYPE              => P_SOURCE_TYPE,
            P_SOURCE                   => P_SOURCE,
            P_ITEM_DEFAULT_TYPE        => P_DEFAULT_TYPE,
            P_ITEM_DEFAULT             => P_DEFAULT_VALUE,
            P_BEGIN_ON_NEW_LINE        => 'YES',
            P_BEGIN_ON_NEW_FIELD       => 'YES',
            P_DATA_TYPE                => 'VARCHAR',
            P_ACCEPT_PROCESSING        => 'REPLACE_EXISTING',
            P_IS_PERSISTENT            => 'Y',
            P_PROTECTION_LEVEL         => 'N',
            P_ESCAPE_ON_HTTP_INPUT     => 'Y',
            P_ESCAPE_ON_HTTP_OUTPUT    => 'Y',
            P_SHOW_QUICK_PICKS         => 'N',
            P_HELP_TEXT                => P_HELP_TEXT );
 END CREATE_SELECTLIST_ITEM;
 
 PROCEDURE CREATE_BUTTON (
     P_ID                  IN NUMBER  DEFAULT NULL,
     P_FLOW_ID             IN NUMBER,
     P_PAGE_ID             IN NUMBER,
     P_REGION_ID           IN NUMBER,
     P_NAME                IN VARCHAR2,
     P_SEQ                 IN NUMBER,
     P_LABEL               IN VARCHAR2,
     P_REGION_TEMPLATE_ID  IN NUMBER,
     P_POSITION_NAME       IN VARCHAR2,
     P_ACTION              IN VARCHAR2,
     P_TARGET              IN VARCHAR2 DEFAULT NULL,
     P_EXECUTE_VALIDATIONS IN BOOLEAN  DEFAULT TRUE,
     P_BUTTON_IS_HOT       IN VARCHAR2 DEFAULT 'N' )
 IS
 
     L_BUTTON_IMAGE             VARCHAR2(255);
     L_BUTTON_TEMPLATE_OPTIONS  VARCHAR2(255);
 
 BEGIN
 
     IF WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE IS NOT NULL THEN
         L_BUTTON_IMAGE := 'template:'||WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE;
         L_BUTTON_TEMPLATE_OPTIONS :=  GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE,'BUTTON');
     END IF;
 
     WWV_FLOW_API.CREATE_PAGE_BUTTON (
         P_ID                         => P_ID,
         P_FLOW_ID                    => P_FLOW_ID,
         P_FLOW_STEP_ID               => P_PAGE_ID,
         P_BUTTON_PLUG_ID             => P_REGION_ID,
         P_BUTTON_SEQUENCE            => P_SEQ,
         P_BUTTON_NAME                => P_NAME,
         P_BUTTON_IS_HOT              => P_BUTTON_IS_HOT,
         P_BUTTON_IMAGE               => L_BUTTON_IMAGE,
         P_BUTTON_IMAGE_ALT           => P_LABEL,
         P_BUTTON_TEMPLATE_OPTIONS    => L_BUTTON_TEMPLATE_OPTIONS,
         P_BUTTON_POSITION            => WWV_FLOW_THEME_MANAGER.GET_BUTTON_POSTION(
                                             P_TEMPLATE_ID => P_REGION_TEMPLATE_ID,
                                             P_POSITION    => '#'||P_POSITION_NAME||'#' ),
         P_BUTTON_ALIGNMENT           => 'RIGHT',
         P_BUTTON_ACTION              => P_ACTION,
         P_BUTTON_REDIRECT_URL        => CASE
                                           WHEN P_ACTION = WWV_FLOW_BUTTON.C_ACTION_REDIRECT_PAGE THEN 'f?p=&APP_ID.:'||P_TARGET||':&SESSION.::&DEBUG.'
                                           ELSE P_TARGET
                                         END,
         P_BUTTON_EXECUTE_VALIDATIONS => CASE WHEN P_EXECUTE_VALIDATIONS THEN 'Y' ELSE 'N' END );
 
 END CREATE_BUTTON;
 
 
 
 
 
 PROCEDURE CREATE_DATA_LOAD_WIZARD (
     P_FLOW_ID                  IN NUMBER,
     
     P_NAME                     IN VARCHAR2,
     P_OWNER                    IN VARCHAR2,
     P_TABLE_NAME               IN VARCHAR2,
     P_EXISTS                   IN VARCHAR2 DEFAULT 'no',
     P_PAGE_MODE                IN VARCHAR2,
     P_GROUP_NAME               IN VARCHAR2 DEFAULT NULL,
     
     P_USER_INTERFACE_ID        IN NUMBER,
     
     P_TAB_SET                  IN VARCHAR2,
     P_TAB_NAME                 IN VARCHAR2,
     P_TAB_LABEL                IN VARCHAR2,
     
     P_NAV_LIST_ID              IN NUMBER   DEFAULT NULL,
     P_NAV_LIST_ITEM_ID         IN NUMBER   DEFAULT NULL,
     P_NAV_LIST_ITEM_NAME       IN VARCHAR2 DEFAULT NULL,
     P_NAV_LIST_PARENT_ITEM_ID  IN NUMBER   DEFAULT NULL,
     P_NAV_LIST_CHILD_ITEM_NAME IN VARCHAR2 DEFAULT NULL,
     
     P_BREADCRUMB_ID            IN NUMBER,
     P_BREADCRUMB_NAME          IN VARCHAR2,
     P_PARENT_BREADCRUMB_ID     IN NUMBER,
     
     P_PAGE_STEP_1              IN NUMBER,
     P_PAGE_STEP_2              IN NUMBER,
     P_PAGE_STEP_3              IN NUMBER,
     P_PAGE_STEP_4              IN NUMBER,
     
     P_PAGE_LABEL_STEP_1        IN VARCHAR2,
     P_PAGE_LABEL_STEP_2        IN VARCHAR2,
     P_PAGE_LABEL_STEP_3        IN VARCHAR2,
     P_PAGE_LABEL_STEP_4        IN VARCHAR2,
     
     P_REGION_NAME_STEP_1       IN VARCHAR2,
     P_REGION_NAME_STEP_2       IN VARCHAR2,
     P_REGION_NAME_STEP_3       IN VARCHAR2,
     P_REGION_NAME_STEP_4       IN VARCHAR2,
     
     P_PAGE_NEXT_LABEL          IN VARCHAR2 DEFAULT 'NEXT',
     P_PAGE_PREVIOUS_LABEL      IN VARCHAR2 DEFAULT 'PREVIOUS',
     P_PAGE_CANCEL_LABEL        IN VARCHAR2 DEFAULT 'CANCEL',
     P_PAGE_CANCEL_BRANCH       IN VARCHAR2 DEFAULT '1',
     P_PAGE_FINISH_LABEL        IN VARCHAR2 DEFAULT 'SUBMIT',
     P_PAGE_FINISH_BRANCH       IN VARCHAR2 DEFAULT '1')
 IS
     C_PROGRESS_LIST_NAME CONSTANT VARCHAR2(255) := WWV_FLOW_LANG.SYSTEM_MESSAGE('DATA_LOAD.PROGRESS_TITLE');
 
     L_LOAD_TABLE_ID          NUMBER;
     L_REGION_TEMPLATE_ID     NUMBER;
     L_REPORT_TEMPLATE_ID     NUMBER;
     L_PROGRESS_TRAIN_LIST_ID NUMBER;
     L_ITEM_PREFIX            VARCHAR2(30);
     L_REGION_ID              NUMBER;
     L_LOV_ID                 NUMBER;
     L_ITEM_ID                NUMBER;
     L_DA_EVENT_ID            NUMBER;
     L_NEXT_BUTTON_ID         NUMBER;
     L_GROUP_ID               NUMBER := NULL;
     L_QUERY_HEADINGS         VARCHAR2(32667);
     L_QUERY                  VARCHAR2(32667);
 
     L_OWNER                  WWV_FLOWS.OWNER%TYPE;
     L_LOOKUP_OWNER           WWV_FLOWS.OWNER%TYPE;
 
     L_NEW_LOV_ID             NUMBER;
     L_LOV_CHARSET            VARCHAR2(255) := 'I18N_IANA_CHARSET';
     L_LOV_DATALOAD_CHARSET   VARCHAR2(255) := 'DATA_LOAD_CHARSET';
     L_TRANSLATED_APP_ID      NUMBER;
     L_LANGUAGE_CODE          VARCHAR2(255);
 
     L_BRANCH_CONDITION       VARCHAR2(4000);
 
     PROCEDURE CREATE_PAGE_AND_STD_REGIONS (
         P_PAGE_ID                  IN NUMBER,
         P_NAME                     IN VARCHAR2,
         P_HTML_PAGE_HEADER         IN VARCHAR2 DEFAULT NULL,
         P_JAVASCRIPT_CODE          IN VARCHAR2 DEFAULT NULL,
         P_PAGE_MODE                IN VARCHAR2,
         P_GROUP_ID                 IN NUMBER   DEFAULT NULL,
         P_NAV_LIST_ID              IN NUMBER   DEFAULT NULL,
         P_NAV_LIST_ITEM_ID         IN NUMBER   DEFAULT NULL,
         P_NAV_LIST_ITEM_NAME       IN VARCHAR2 DEFAULT NULL,
         P_NAV_LIST_PARENT_ITEM_ID  IN NUMBER   DEFAULT NULL,
         P_NAV_LIST_CHILD_ITEM_NAME IN VARCHAR2 DEFAULT NULL,
         P_INLINE_CSS               IN VARCHAR2 DEFAULT NULL,
         P_JAVASCRIPT_CODE_ONLOAD   IN VARCHAR2 DEFAULT NULL,
         P_REGION_TEMPLATE          IN NUMBER   DEFAULT 0)
     IS
     BEGIN
         CREATE_PAGE (
             P_FLOW_ID                  => P_FLOW_ID,
             P_PAGE_ID                  => P_PAGE_ID,
             P_NAME                     => P_NAME,
             P_PAGE_MODE                => P_PAGE_MODE,
             P_USER_INTERFACE_ID        => P_USER_INTERFACE_ID,
             P_TAB_SET                  => P_TAB_SET,
             P_TAB_NAME                 => P_TAB_NAME,
             P_TAB_LABEL                => P_TAB_LABEL,
             
             P_NAV_LIST_ID              => P_NAV_LIST_ID,
             P_NAV_LIST_ITEM_ID         => P_NAV_LIST_ITEM_ID,
             P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_ITEM_NAME,
             P_NAV_LIST_PARENT_ITEM_ID  => P_NAV_LIST_PARENT_ITEM_ID,
             P_NAV_LIST_CHILD_ITEM_NAME => P_NAV_LIST_CHILD_ITEM_NAME,
             
             P_INLINE_CSS               => P_INLINE_CSS,
             P_HTML_PAGE_HEADER         => P_HTML_PAGE_HEADER,
             P_JAVASCRIPT_CODE          => P_JAVASCRIPT_CODE,
             P_JAVASCRIPT_CODE_ONLOAD   => P_JAVASCRIPT_CODE_ONLOAD,
             P_BREADCRUMB_ID            => P_BREADCRUMB_ID,
             P_BREADCRUMB_NAME          => P_BREADCRUMB_NAME,
             P_PARENT_BREADCRUMB_ID     => P_PARENT_BREADCRUMB_ID,
             P_GROUP_ID                 => P_GROUP_ID);
 
         
         CREATE_LIST_REGION (
             P_FLOW_ID => P_FLOW_ID,
             P_PAGE_ID => P_PAGE_ID,
             P_NAME    => C_PROGRESS_LIST_NAME,
             P_SEQ     => 10,
             P_LIST_ID => L_PROGRESS_TRAIN_LIST_ID,
             P_LIST_TEMPLATE_THEME_CLASS_ID => 17, 
             P_REGION_TEMPLATE => P_REGION_TEMPLATE);    
     END CREATE_PAGE_AND_STD_REGIONS;
 BEGIN
 
     
     
     
     IF P_GROUP_NAME IS NOT NULL THEN
         L_GROUP_ID := WWV_FLOW_UTILITIES.GET_PAGE_GROUP_ID(P_GROUP_NAME => P_GROUP_NAME, P_APPLICATION_ID => P_FLOW_ID);
         
         IF L_GROUP_ID IS NULL THEN
             L_GROUP_ID := WWV_FLOW_ID.NEXT_VAL;
             WWV_FLOW_API.CREATE_PAGE_GROUP(P_ID => L_GROUP_ID, P_FLOW_ID => P_FLOW_ID, P_GROUP_NAME => P_GROUP_NAME);
         END IF;
     END IF;
 
     
     
     
     IF P_EXISTS = 'no' THEN
         
         FOR L_DATA_LOAD IN ( SELECT C001 OWNER,
                                     C002 TABLE_NAME,
                                     C003 UK_1,
                                     C004 CASE_1,
                                     C005 UK_2,
                                     C006 CASE_2,
                                     C007 UK_3,
                                     C008 CASE_3
                                FROM WWV_FLOW_COLLECTIONS
                               WHERE COLLECTION_NAME = 'DATA_LOAD_TABLES' )
         LOOP
             L_LOAD_TABLE_ID := WWV_FLOW_ID.NEXT_VAL;
             L_OWNER := GET_OWNER(P_FLOW_ID=>P_FLOW_ID,P_OWNER=>L_DATA_LOAD.OWNER);
 
             WWV_FLOW_API.CREATE_LOAD_TABLE (
                 P_ID                    => L_LOAD_TABLE_ID,
                 P_FLOW_ID               => P_FLOW_ID,
                 P_NAME                  => P_NAME,
                 P_OWNER                 => L_OWNER,
                 P_TABLE_NAME            => L_DATA_LOAD.TABLE_NAME,
                 P_UNIQUE_COLUMN_1       => L_DATA_LOAD.UK_1,
                 P_IS_UK1_CASE_SENSITIVE => L_DATA_LOAD.CASE_1,
                 P_UNIQUE_COLUMN_2       => L_DATA_LOAD.UK_2,
                 P_IS_UK2_CASE_SENSITIVE => L_DATA_LOAD.CASE_2,
                 P_UNIQUE_COLUMN_3       => L_DATA_LOAD.UK_3,
                 P_IS_UK3_CASE_SENSITIVE => L_DATA_LOAD.CASE_3,
                 P_SKIP_VALIDATION       => 'N' );
         END LOOP;
 
         
         FOR L_LOOKUP IN ( SELECT C003 COLUMN_NAME,
                                  C004 OWNER,
                                  C005 TABLE_NAME,
                                  C006 KEY_COLUMN,
                                  C007 DISPLAY_COLUMN,
                                  C008 DISPLAY_ALT_COLUMN1,
                                  C009 DISPLAY_ALT_COLUMN2
                             FROM WWV_FLOW_COLLECTIONS
                            WHERE COLLECTION_NAME = 'DATA_LOAD_TABLE_LOOKUPS' )
         LOOP
             L_LOOKUP_OWNER := GET_OWNER(P_FLOW_ID=>P_FLOW_ID,P_OWNER=>L_LOOKUP.OWNER);
 
             WWV_FLOW_API.CREATE_LOAD_TABLE_LOOKUP(
                 P_FLOW_ID           => P_FLOW_ID,
                 P_LOAD_TABLE_ID     => L_LOAD_TABLE_ID,
                 P_LOAD_COLUMN_NAME  => L_LOOKUP.COLUMN_NAME,
                 P_LOOKUP_OWNER      => L_LOOKUP_OWNER,
                 P_LOOKUP_TABLE_NAME => L_LOOKUP.TABLE_NAME,
                 P_KEY_COLUMN        => L_LOOKUP.KEY_COLUMN,
                 P_DISPLAY_COLUMN    => L_LOOKUP.DISPLAY_COLUMN,
                 P_ALTERNATIVE_DISPLAY_COLUMN1  => L_LOOKUP.DISPLAY_ALT_COLUMN1,
                 P_ALTERNATIVE_DISPLAY_COLUMN2  => L_LOOKUP.DISPLAY_ALT_COLUMN2);
         END LOOP;
 
         
         FOR L_RULE IN ( SELECT C003 COLUMN_NAME,
                                C004 SEQ,
                                C005 TYPE,
                                C006 NAME,
                                C007 EXPR1,
                                C008 EXPR2
                           FROM WWV_FLOW_COLLECTIONS
                          WHERE COLLECTION_NAME = 'DATA_LOAD_TABLE_RULES' )
         LOOP
             
             
             
             
             
             WWV_FLOW_API.CREATE_LOAD_TABLE_RULE (
                     P_FLOW_ID          => P_FLOW_ID,
                     P_LOAD_TABLE_ID    => L_LOAD_TABLE_ID,
                     P_LOAD_COLUMN_NAME => L_RULE.COLUMN_NAME,
                     P_RULE_NAME        => L_RULE.NAME,
                     P_RULE_TYPE        => L_RULE.TYPE,
                     P_RULE_SEQUENCE    => L_RULE.SEQ,
                     P_RULE_EXPRESSION1 => L_RULE.EXPR1,
                     P_RULE_EXPRESSION2 => L_RULE.EXPR2 );
         END LOOP;
     ELSIF P_EXISTS = 'yes' THEN
         SELECT ID INTO L_LOAD_TABLE_ID
                FROM WWV_FLOW_LOAD_TABLES
               WHERE FLOW_ID = P_FLOW_ID
                 AND NAME = P_NAME;
     END IF;
 
     
   WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
       P_FLOW_ID           => P_FLOW_ID,
       P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
     L_REGION_TEMPLATE_ID := WWV_FLOW_THEME_GLOBALS.G_DEFAULT_REGION_TEMPLATE;
     L_REPORT_TEMPLATE_ID := WWV_FLOW_THEME_GLOBALS.G_DEFAULT_REPORT_TEMPLATE;
 
     
     
     
     CREATE_STATIC_LIST (
         P_ID      => L_PROGRESS_TRAIN_LIST_ID,
         P_FLOW_ID => P_FLOW_ID,
         P_NAME    => C_PROGRESS_LIST_NAME || ' - '||P_NAME );
 
     CREATE_LINK_LIST_ITEM (
         P_LIST_ID     => L_PROGRESS_TRAIN_LIST_ID,
         P_SEQ         => 10,
         P_LINK_TEXT   => P_PAGE_LABEL_STEP_1,
         P_TARGET_PAGE => P_PAGE_STEP_1 );
 
     CREATE_LINK_LIST_ITEM (
         P_LIST_ID     => L_PROGRESS_TRAIN_LIST_ID,
         P_SEQ         => 20,
         P_LINK_TEXT   => P_PAGE_LABEL_STEP_2,
         P_TARGET_PAGE => P_PAGE_STEP_2 );
 
     CREATE_LINK_LIST_ITEM (
         P_LIST_ID     => L_PROGRESS_TRAIN_LIST_ID,
         P_SEQ         => 30,
         P_LINK_TEXT   => P_PAGE_LABEL_STEP_3,
         P_TARGET_PAGE => P_PAGE_STEP_3 );
 
     CREATE_LINK_LIST_ITEM (
         P_LIST_ID     => L_PROGRESS_TRAIN_LIST_ID,
         P_SEQ         => 40,
         P_LINK_TEXT   => P_PAGE_LABEL_STEP_4,
         P_TARGET_PAGE => P_PAGE_STEP_4 );
 
     
     
     
     L_ITEM_PREFIX := 'P'||P_PAGE_STEP_1||'_';
     G_NAV_LIST_ITEM_ID := NULL;
     CREATE_PAGE_AND_STD_REGIONS (
         P_PAGE_ID                  => P_PAGE_STEP_1,
         P_NAME                     => P_PAGE_LABEL_STEP_1,
         P_PAGE_MODE                => P_PAGE_MODE,
         P_GROUP_ID                 => L_GROUP_ID,
         P_NAV_LIST_ID              => P_NAV_LIST_ID,
         P_NAV_LIST_ITEM_ID         => P_NAV_LIST_ITEM_ID,
         P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_ITEM_NAME,
         P_NAV_LIST_PARENT_ITEM_ID  => P_NAV_LIST_PARENT_ITEM_ID,
         P_NAV_LIST_CHILD_ITEM_NAME => P_NAV_LIST_CHILD_ITEM_NAME,
         P_REGION_TEMPLATE          => L_REGION_TEMPLATE_ID );
 
     
     L_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
     CREATE_HTML_REGION (
         P_ID          => L_REGION_ID,
         P_FLOW_ID     => P_FLOW_ID,
         P_PAGE_ID     => P_PAGE_STEP_1,
         P_NAME        => P_REGION_NAME_STEP_1,
         P_SEQ         => 20,
         P_TEMPLATE_ID => L_REGION_TEMPLATE_ID,
         P_ATTRIBUTES  => 'style="width:100%;max-width:none;"' );
 
     
     L_CANCEL_BUTTON_ID := WWV_FLOW_ID.NEXT_VAL;
     IF P_PAGE_MODE = WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN
         L_CANCEL_BUTTON_REDIRECT_URL := P_PAGE_CANCEL_BRANCH;
         L_CANCEL_BUTTON_ACTION := WWV_FLOW_BUTTON.C_ACTION_REDIRECT_PAGE;
     ELSE
         
         L_CANCEL_BUTTON_REDIRECT_URL := NULL;
         L_CANCEL_BUTTON_ACTION := WWV_FLOW_BUTTON.C_ACTION_DEFINED_BY_DA;
     END IF;
 
     CREATE_BUTTON (
         P_ID                 => L_CANCEL_BUTTON_ID,
         P_FLOW_ID            => P_FLOW_ID,
         P_PAGE_ID            => P_PAGE_STEP_1,
         P_REGION_ID          => L_REGION_ID,
         P_NAME               => 'CANCEL',
         P_SEQ                => 10,
         P_LABEL              => P_PAGE_CANCEL_LABEL,
         P_REGION_TEMPLATE_ID => L_REGION_TEMPLATE_ID,
         P_POSITION_NAME      => 'PREVIOUS',
         P_ACTION             => L_CANCEL_BUTTON_ACTION,
         P_TARGET             => L_CANCEL_BUTTON_REDIRECT_URL );
 
     IF P_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN
       L_CANCEL_BUTTON_DA_ID := WWV_FLOW_ID.NEXT_VAL;
       WWV_FLOW_API.CREATE_PAGE_DA_EVENT(
           P_ID                      => L_CANCEL_BUTTON_DA_ID,
           P_FLOW_ID                 => P_FLOW_ID,
           P_PAGE_ID                 => P_PAGE_STEP_1,
           P_NAME                    => WWV_FLOW_LANG.SYSTEM_MESSAGE('DA_NAME.NATIVE_DIALOG_CANCEL'),
           P_EVENT_SEQUENCE          => 10,
           P_TRIGGERING_ELEMENT_TYPE => 'BUTTON',
           P_TRIGGERING_BUTTON_ID    => L_CANCEL_BUTTON_ID,
           P_BIND_TYPE               => 'bind',
           P_BIND_EVENT_TYPE         => 'click');
 
       WWV_FLOW_API.CREATE_PAGE_DA_ACTION(
           P_EVENT_ID                => L_CANCEL_BUTTON_DA_ID,
           P_FLOW_ID                 => P_FLOW_ID,
           P_PAGE_ID                 => P_PAGE_STEP_1,
           P_EVENT_RESULT            => 'TRUE',
           P_ACTION_SEQUENCE         => 10,
           P_EXECUTE_ON_PAGE_INIT    => 'N',
           P_ACTION                  => 'NATIVE_DIALOG_CANCEL',
           P_STOP_EXECUTION_ON_ERROR => 'Y');
     END IF;
 
     L_NEXT_BUTTON_ID := WWV_FLOW_ID.NEXT_VAL;
     CREATE_BUTTON (
         P_ID                 => L_NEXT_BUTTON_ID,
         P_FLOW_ID            => P_FLOW_ID,
         P_PAGE_ID            => P_PAGE_STEP_1,
         P_REGION_ID          => L_REGION_ID,
         P_NAME               => 'NEXT',
         P_BUTTON_IS_HOT      => 'Y',
         P_SEQ                => 20,
         P_LABEL              => P_PAGE_NEXT_LABEL,
         P_REGION_TEMPLATE_ID => L_REGION_TEMPLATE_ID,
         P_POSITION_NAME      => 'NEXT',
         P_ACTION             => WWV_FLOW_BUTTON.C_ACTION_REDIRECT_URL,
         P_TARGET             => 'javascript:apex.widget.textareaClob.uploadNonEmpty('''||L_ITEM_PREFIX||'COPY_PASTE'', ''NEXT'');' );
 
     
     L_LOV_ID := CREATE_STATIC_LOV (
                     P_FLOW_ID        => P_FLOW_ID,
                     P_NAME           => 'DATA_LOAD_OPTION',
                     P_DISPLAY_VALUE1 => WWV_FLOW_LANG.SYSTEM_MESSAGE('DATA_LOAD.UPLOAD_FILE'),
                     P_RETURN_VALUE1  => 'UPLOAD',
                     P_DISPLAY_VALUE2 => WWV_FLOW_LANG.SYSTEM_MESSAGE('DATA_LOAD.COPY_PASTE'),
                     P_RETURN_VALUE2  => 'PASTE' );
 
     
     CREATE_RADIOGROUP_ITEM (
         P_FLOW_ID       => P_FLOW_ID,
         P_PAGE_ID       => P_PAGE_STEP_1,
         P_NAME_POSTFIX  => 'IMPORT_FROM',
         P_LABEL         => WWV_FLOW_LANG.SYSTEM_MESSAGE('DATA_LOAD.LOAD_TO'),
         P_IS_REQUIRED   => TRUE,
         P_SEQ           => 10,
         P_REGION_ID     => L_REGION_ID,
         P_NAMED_LOV     => 'DATA_LOAD_OPTION',
         P_NAMED_LOV_ID  => L_LOV_ID,
         P_SOURCE_TYPE   => 'STATIC',
         P_DEFAULT_TYPE  => 'STATIC_TEXT_WITH_SUBSTITUTIONS',
         P_DEFAULT_VALUE => 'PASTE' );
 
     
     L_ITEM_ID := WWV_FLOW_ID.NEXT_VAL;
     CREATE_FILE_ITEM (
         P_ID             => L_ITEM_ID,
         P_FLOW_ID        => P_FLOW_ID,
         P_PAGE_ID        => P_PAGE_STEP_1,
         P_NAME_POSTFIX   => 'FILE_NAME',
         P_LABEL          => WWV_FLOW_LANG.SYSTEM_MESSAGE('F4500_P25_FILE_NAME'),
         P_IS_REQUIRED    => FALSE,
         P_FIELD_TEMPLATE => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_REQUIRED_LABEL,
         P_SEQ            => 20,
         P_REGION_ID      => L_REGION_ID,
         P_HELP_TEXT      => WWV_FLOW_LANG.SYSTEM_MESSAGE('DATA_LOAD.FILE_NAME_ITEM') );
 
     
     WWV_FLOW_API.CREATE_PAGE_VALIDATION(
         P_FLOW_ID                   => P_FLOW_ID,
         P_FLOW_STEP_ID              => P_PAGE_STEP_1,
         P_VALIDATION_NAME           => 'Filename is not null',
         P_VALIDATION_SEQUENCE       => 10,
         P_VALIDATION                => L_ITEM_PREFIX||'FILE_NAME',
         P_VALIDATION_TYPE           => 'ITEM_NOT_NULL',
         P_ERROR_DISPLAY_LOCATION    => 'INLINE_WITH_FIELD_AND_NOTIFICATION',
         P_ERROR_MESSAGE             => WWV_FLOW_LANG.SYSTEM_MESSAGE('WIZARD.VALIDATION.PAGE_ITEM_IS_REQUIRED'),
         P_ASSOCIATED_ITEM           => L_ITEM_ID,
         P_ALWAYS_EXECUTE            => 'N',
         P_VALIDATION_CONDITION_TYPE => 'VAL_OF_ITEM_IN_COND_EQ_COND2',
         P_VALIDATION_CONDITION      => L_ITEM_PREFIX||'IMPORT_FROM',
         P_VALIDATION_CONDITION2     => 'UPLOAD',
         P_WHEN_BUTTON_PRESSED       => L_NEXT_BUTTON_ID );
 
    
    L_ITEM_ID := WWV_FLOW_ID.NEXT_VAL;
    CREATE_TEXTAREA_ITEM (
         P_ID             => L_ITEM_ID,
         P_FLOW_ID        => P_FLOW_ID,
         P_PAGE_ID        => P_PAGE_STEP_1,
         P_NAME_POSTFIX   => 'COPY_PASTE',
         P_LABEL          => WWV_FLOW_LANG.SYSTEM_MESSAGE('DATA_LOAD.COPY_PASTE_TEXTAREA'),
         P_WIDTH          => 80,
         P_MAX_WIDTH      => NULL,
         P_HEIGHT         => 10,
         P_IS_REQUIRED    => FALSE,
         P_SEQ            => 15,
         P_REGION_ID      => L_REGION_ID,
         P_FIELD_TEMPLATE => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_REQUIRED_LABEL,
         P_SOURCE_TYPE    => 'ALWAYS_NULL',
         P_LABEL_ALIGN    => 'RIGHT' );
 
     
     CREATE_TEXT_ITEM (
         P_FLOW_ID        => P_FLOW_ID,
         P_PAGE_ID        => P_PAGE_STEP_1,
         P_NAME_POSTFIX   => 'SEPARATOR',
         P_LABEL          => WWV_FLOW_LANG.SYSTEM_MESSAGE('DATA_LOAD.SEPARATOR_ITEM_LABEL'),
         P_WIDTH          => 2,
         P_MAX_WIDTH      => 2,
         P_IS_REQUIRED    => TRUE,
         P_SEQ            => 30,
         P_REGION_ID      => L_REGION_ID,
         P_FIELD_TEMPLATE => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_REQUIRED_LABEL,
         P_SOURCE_TYPE    => 'ALWAYS_NULL',
         P_DEFAULT_TYPE   => 'STATIC_TEXT_WITH_SUBSTITUTIONS',
         P_DEFAULT_VALUE  => '\t',
         P_HELP_TEXT      => WWV_FLOW_LANG.SYSTEM_MESSAGE('DATA_LOAD.SEPARATOR_ITEM_HELP') );
 
     
     CREATE_TEXT_ITEM (
         P_FLOW_ID       => P_FLOW_ID,
         P_PAGE_ID       => P_PAGE_STEP_1,
         P_NAME_POSTFIX  => 'ENCLOSED_BY',
         P_LABEL         => WWV_FLOW_LANG.SYSTEM_MESSAGE('DATA_LOAD.OPTIONAL_ENCLOSE_ITEM'),
         P_WIDTH         => 2,
         P_MAX_WIDTH     => 2,
         P_IS_REQUIRED   => FALSE,
         P_SEQ           => 40,
         P_REGION_ID     => L_REGION_ID,
         P_SOURCE_TYPE   => 'ALWAYS_NULL',
         P_DEFAULT_TYPE  => 'STATIC_TEXT_WITH_SUBSTITUTIONS',
         P_DEFAULT_VALUE => '"',
         P_HELP_TEXT     => 'Enter a delimiter character. You can use this character to delineate the starting and ending boundary of a data value. If you specify a delimiter character, Data Workshop ignores whitespace occurring before the starting and ending boundary of a data value. You can also use this option to enclose a data value with the specified delimiter character.' ); 
 
     
     CREATE_CHECKBOX_ITEM (
         P_FLOW_ID       => P_FLOW_ID,
         P_PAGE_ID       => P_PAGE_STEP_1,
         P_NAME_POSTFIX  => 'FIRST_ROW',
         P_LABEL         => '&nbsp;',
         P_IS_REQUIRED   => FALSE,
         P_SEQ           => 50,
         P_REGION_ID     => L_REGION_ID,
         P_STATIC_LOV    => 'STATIC:'||WWV_FLOW_LANG.SYSTEM_MESSAGE('DATA_LOAD.FIRST_ROW')||';Y',
         P_SOURCE_TYPE   => 'STATIC',
         P_DEFAULT_VALUE => 'Y',
         P_HELP_TEXT     => WWV_FLOW_LANG.SYSTEM_MESSAGE('DATA_LOAD.FIRST_ROW_HELP') );
 
     CREATE_CHECKBOX_ITEM (
         P_FLOW_ID       => P_FLOW_ID,
         P_PAGE_ID       => P_PAGE_STEP_1,
         P_NAME_POSTFIX  => 'SHOW_ADV_SETTINGS',
         P_LABEL         => '&nbsp;',
         P_IS_REQUIRED   => FALSE,
         P_SEQ           => 55,
         P_REGION_ID     => L_REGION_ID,
         P_STATIC_LOV    => 'STATIC:'||WWV_FLOW_LANG.SYSTEM_MESSAGE('DATA_LOAD.SHOW_ADVANCED_SETTINGS')||';Y',
         P_SOURCE_TYPE   => 'STATIC',
         P_DEFAULT_VALUE => NULL,
         P_HELP_TEXT     => WWV_FLOW_LANG.SYSTEM_MESSAGE('DATA_LOAD.SHOW_ADVANCED_SETTINGS_HELP') );
 
     
     WWV_FLOW_API.CREATE_PAGE_VALIDATION(
         P_FLOW_ID                   => P_FLOW_ID,
         P_FLOW_STEP_ID              => P_PAGE_STEP_1,
         P_VALIDATION_NAME           => 'Uploaded data is not null',
         P_VALIDATION_SEQUENCE       => 20,
         P_VALIDATION                => L_ITEM_PREFIX||'COPY_PASTE',
         P_VALIDATION_TYPE           => 'ITEM_NOT_NULL',
         P_ERROR_DISPLAY_LOCATION    => 'INLINE_WITH_FIELD_AND_NOTIFICATION',
         P_ERROR_MESSAGE             => WWV_FLOW_LANG.SYSTEM_MESSAGE('WIZARD.VALIDATION.PAGE_ITEM_IS_REQUIRED'),
         P_ASSOCIATED_ITEM           => L_ITEM_ID,
         P_ALWAYS_EXECUTE            => 'N',
         P_VALIDATION_CONDITION_TYPE => 'VAL_OF_ITEM_IN_COND_EQ_COND2',
         P_VALIDATION_CONDITION      => L_ITEM_PREFIX||'IMPORT_FROM',
         P_VALIDATION_CONDITION2     => 'PASTE',
         P_WHEN_BUTTON_PRESSED       => L_NEXT_BUTTON_ID );
 
     
     L_DA_EVENT_ID :=  WWV_FLOW_ID.NEXT_VAL;
     WWV_FLOW_API.CREATE_PAGE_DA_EVENT (
         P_ID                        => L_DA_EVENT_ID,
         P_FLOW_ID                   => P_FLOW_ID,
         P_PAGE_ID                   => P_PAGE_STEP_1,
         P_NAME                      => 'Show/Hide Advanced Settings',
         P_EVENT_SEQUENCE            => 10,
         P_TRIGGERING_ELEMENT_TYPE   => 'ITEM',
         P_TRIGGERING_ELEMENT        => L_ITEM_PREFIX||'SHOW_ADV_SETTINGS',
         P_CONDITION_ELEMENT         => L_ITEM_PREFIX||'SHOW_ADV_SETTINGS',
         P_TRIGGERING_CONDITION_TYPE => 'EQUALS',
         P_TRIGGERING_EXPRESSION     => 'Y',
         P_BIND_TYPE                 => 'bind',
         P_BIND_EVENT_TYPE           => 'change');
 
     WWV_FLOW_API.CREATE_PAGE_DA_ACTION (
         P_FLOW_ID                   => P_FLOW_ID,
         P_PAGE_ID                   => P_PAGE_STEP_1,
         P_EVENT_ID                  => L_DA_EVENT_ID,
         P_EVENT_RESULT              => 'TRUE',
         P_ACTION_SEQUENCE           => 10,
         P_EXECUTE_ON_PAGE_INIT      => 'Y',
         P_ACTION                    => 'NATIVE_SHOW',
         P_AFFECTED_ELEMENTS_TYPE    => 'ITEM',
         P_AFFECTED_ELEMENTS         => L_ITEM_PREFIX||'CURRENCY,' ||
                                        L_ITEM_PREFIX||'GROUP_SEPARATOR,' ||
                                        L_ITEM_PREFIX||'DECIMAL_CHARACTER,' ||
                                        L_ITEM_PREFIX||'APP_DATE_FORMAT,' ||
                                        L_ITEM_PREFIX||'CHAR_SET' 
     );
     WWV_FLOW_API.CREATE_PAGE_DA_ACTION (
         P_FLOW_ID                   => P_FLOW_ID,
         P_PAGE_ID                   => P_PAGE_STEP_1,
         P_EVENT_ID                  => L_DA_EVENT_ID,
         P_EVENT_RESULT              => 'FALSE',
         P_ACTION_SEQUENCE           => 10,
         P_EXECUTE_ON_PAGE_INIT      => 'Y',
         P_ACTION                    => 'NATIVE_HIDE',
         P_AFFECTED_ELEMENTS_TYPE    => 'ITEM',
         P_AFFECTED_ELEMENTS         => L_ITEM_PREFIX||'CURRENCY,' ||
                                        L_ITEM_PREFIX||'GROUP_SEPARATOR,' ||
                                        L_ITEM_PREFIX||'DECIMAL_CHARACTER,' ||
                                        L_ITEM_PREFIX||'APP_DATE_FORMAT,' ||
                                        L_ITEM_PREFIX||'CHAR_SET' 
     );
 
     
     L_LOV_ID := CREATE_STATIC_LOV (
                     P_FLOW_ID        => P_FLOW_ID,
                     P_NAME           => 'DATE_FORMAT_OPT',
                     P_DISPLAY_VALUE1 => WWV_FLOW_LANG.SYSTEM_MESSAGE('DATA_LOAD.DATE_FORMAT_APP'),
                     P_RETURN_VALUE1  => 'Y',
                     P_DISPLAY_VALUE2 => WWV_FLOW_LANG.SYSTEM_MESSAGE('DATA_LOAD.DATE_FORMAT_CUSTOM'),
                     P_RETURN_VALUE2  => 'N'
     );
 
     
     CREATE_RADIOGROUP_ITEM (
         P_FLOW_ID       => P_FLOW_ID,
         P_PAGE_ID       => P_PAGE_STEP_1,
         P_NAME_POSTFIX  => 'APP_DATE_FORMAT',
         P_LABEL         => WWV_FLOW_LANG.SYSTEM_MESSAGE('DATA_LOAD.APP_DATE_FORMAT'),
         P_IS_REQUIRED   => FALSE,
         P_SEQ           => 150,
         P_REGION_ID     => L_REGION_ID,
         P_NAMED_LOV     => 'DATE_FORMAT_OPT',
         P_NAMED_LOV_ID  => L_LOV_ID,
         P_SOURCE_TYPE   => 'STATIC',
         P_DEFAULT_VALUE => 'Y',
         P_HELP_TEXT     => WWV_FLOW_LANG.SYSTEM_MESSAGE('DATA_LOAD.APP_DATE_FORMAT_HELP') );
 
     
     
     
     
     
 
     L_LANGUAGE_CODE      := WWV_FLOW_LANG.GET_G_SESSION_LANG;
     FOR C1 IN (SELECT TRANSLATION_FLOW_ID
                     FROM WWV_FLOW_LANGUAGE_MAP
                    WHERE PRIMARY_LANGUAGE_FLOW_ID = 4000
                     AND TRANSLATION_FLOW_LANGUAGE_CODE = L_LANGUAGE_CODE) LOOP
             L_TRANSLATED_APP_ID := C1.TRANSLATION_FLOW_ID;
     END LOOP;
 
     FOR C1 IN ( SELECT ID
                  FROM WWV_FLOW_LISTS_OF_VALUES$
                 WHERE LOV_NAME = L_LOV_CHARSET
                 AND FLOW_ID = NVL(L_TRANSLATED_APP_ID, 4000))
     LOOP
         L_LOV_ID := C1.ID;
     END LOOP;
     
     BEGIN
         SELECT ID
           INTO L_NEW_LOV_ID
           FROM WWV_FLOW_LISTS_OF_VALUES$
          WHERE FLOW_ID           = P_FLOW_ID
            AND LOV_NAME          = L_LOV_DATALOAD_CHARSET;
            WWV_FLOW.DEBUG(' LOV id= '||L_NEW_LOV_ID);
     EXCEPTION WHEN NO_DATA_FOUND THEN
         L_NEW_LOV_ID := WWV_FLOW_ID.NEXT_VAL;
         COPY_NAMED_LOV (
                         P_LOV_ID_FROM         => L_LOV_ID,
                         P_LOV_NAME_TO         => L_LOV_DATALOAD_CHARSET,
                         P_COPY_FROM_FLOW_ID   => NVL(L_TRANSLATED_APP_ID, 4000),
                         P_FLOW_ID             => P_FLOW_ID,
                         P_LOV_ID_TO           => L_NEW_LOV_ID);
     END;
 
     CREATE_SELECTLIST_ITEM (
                 P_FLOW_ID            => P_FLOW_ID,
                 P_PAGE_ID            => P_PAGE_STEP_1,
                 P_NAME_POSTFIX       => 'CHAR_SET',
                 P_LABEL              => WWV_FLOW_LANG.SYSTEM_MESSAGE('DATA_LOAD.CHARSET'),
                 P_IS_REQUIRED        => TRUE,
                 P_SEQ                => 140,
                 P_REGION_ID          => L_REGION_ID,
                 P_NAMED_LOV          => L_LOV_DATALOAD_CHARSET,
                 P_NAMED_LOV_ID       => L_NEW_LOV_ID,
                 P_DEFAULT_VALUE      => 'UTF-8',
                 P_HELP_TEXT          => WWV_FLOW_LANG.SYSTEM_MESSAGE('DATA_LOAD.CHAR_SET_ITEM_HELP') );
 
 
     
     CREATE_TEXT_ITEM (
         P_FLOW_ID       => P_FLOW_ID,
         P_PAGE_ID       => P_PAGE_STEP_1,
         P_NAME_POSTFIX  => 'CURRENCY',
         P_LABEL         => WWV_FLOW_LANG.SYSTEM_MESSAGE('DATA_LOAD.CURRENCY_ITEM'),
         P_WIDTH         => 2,
         P_MAX_WIDTH     => 2,
         P_IS_REQUIRED   => FALSE,
         P_SEQ           => 130,
         P_REGION_ID     => L_REGION_ID,
         P_SOURCE_TYPE   => 'QUERY',
         P_SOURCE        => 'select value'||UNISTR('\000a')||
                            '  from nls_session_parameters'||UNISTR('\000a')||
                            ' where parameter = ''NLS_CURRENCY''',
         P_DEFAULT_TYPE  => 'STATIC_TEXT_WITH_SUBSTITUTIONS',
         P_DEFAULT_VALUE => '$',
         P_HELP_TEXT     => WWV_FLOW_LANG.SYSTEM_MESSAGE('DATA_LOAD.CURRENCY_ITEM_HELP') );
 
     
     CREATE_TEXT_ITEM (
         P_FLOW_ID       => P_FLOW_ID,
         P_PAGE_ID       => P_PAGE_STEP_1,
         P_NAME_POSTFIX  => 'GROUP_SEPARATOR',
         P_LABEL         => WWV_FLOW_LANG.SYSTEM_MESSAGE('DATA_LOAD.GROUP_SEPARATOR_ITEM'),
         P_WIDTH         => 2,
         P_MAX_WIDTH     => 2,
         P_IS_REQUIRED   => FALSE,
         P_SEQ           => 120,
         P_REGION_ID     => L_REGION_ID,
         P_SOURCE_TYPE   => 'FUNCTION',
         P_SOURCE        => 'apex_application.get_nls_group_separator',
         P_HELP_TEXT     => WWV_FLOW_LANG.SYSTEM_MESSAGE('DATA_LOAD.GROUP_SEPARATOR_HELP') );
 
     
     CREATE_TEXT_ITEM (
         P_FLOW_ID       => P_FLOW_ID,
         P_PAGE_ID       => P_PAGE_STEP_1,
         P_NAME_POSTFIX  => 'DECIMAL_CHARACTER',
         P_LABEL         => WWV_FLOW_LANG.SYSTEM_MESSAGE('DATA_LOAD.DECIMAL_CHARACTER_ITEM'),
         P_WIDTH         => 2,
         P_MAX_WIDTH     => 2,
         P_IS_REQUIRED   => FALSE,
         P_SEQ           => 110,
         P_REGION_ID     => L_REGION_ID,
         P_SOURCE_TYPE   => 'FUNCTION',
         P_SOURCE        => 'apex_application.get_nls_decimal_separator',
         P_HELP_TEXT     => WWV_FLOW_LANG.SYSTEM_MESSAGE('DATA_LOAD.DECIMAL_CHARACTER_HELP') );
 
     
     
     L_DA_EVENT_ID :=  WWV_FLOW_ID.NEXT_VAL;
     WWV_FLOW_API.CREATE_PAGE_DA_EVENT (
         P_ID                        => L_DA_EVENT_ID,
         P_FLOW_ID                   => P_FLOW_ID,
         P_PAGE_ID                   => P_PAGE_STEP_1,
         P_NAME                      => 'Import From Copy and Paste',
         P_EVENT_SEQUENCE            => 10,
         P_TRIGGERING_ELEMENT_TYPE   => 'ITEM',
         P_TRIGGERING_ELEMENT        => L_ITEM_PREFIX||'IMPORT_FROM',
         P_CONDITION_ELEMENT         => L_ITEM_PREFIX||'IMPORT_FROM',
         P_TRIGGERING_CONDITION_TYPE => 'EQUALS',
         P_TRIGGERING_EXPRESSION     => 'PASTE',
         P_BIND_TYPE                 => 'bind',
         P_BIND_EVENT_TYPE           => 'change');
 
     
     WWV_FLOW_API.CREATE_PAGE_DA_ACTION (
         P_FLOW_ID                   => P_FLOW_ID,
         P_PAGE_ID                   => P_PAGE_STEP_1,
         P_EVENT_ID                  => L_DA_EVENT_ID,
         P_EVENT_RESULT              => 'TRUE',
         P_ACTION_SEQUENCE           => 20,
         P_EXECUTE_ON_PAGE_INIT      => 'Y',
         P_ACTION                    => 'NATIVE_SHOW',
         P_AFFECTED_ELEMENTS_TYPE    => 'ITEM',
         P_AFFECTED_ELEMENTS         => L_ITEM_PREFIX||'COPY_PASTE',
         P_ATTRIBUTE_01              => 'Y' ); 
 
    
     
     WWV_FLOW_API.CREATE_PAGE_DA_ACTION (
         P_FLOW_ID                   => P_FLOW_ID,
         P_PAGE_ID                   => P_PAGE_STEP_1,
         P_EVENT_ID                  => L_DA_EVENT_ID,
         P_EVENT_RESULT              => 'TRUE',
         P_ACTION_SEQUENCE           => 20,
         P_EXECUTE_ON_PAGE_INIT      => 'N',
         P_ACTION                    => 'NATIVE_SET_VALUE',
         P_AFFECTED_ELEMENTS_TYPE    => 'ITEM',
         P_AFFECTED_ELEMENTS         => L_ITEM_PREFIX||'SEPARATOR',
         P_ATTRIBUTE_01              => 'STATIC_ASSIGNMENT',
         P_ATTRIBUTE_02              => '\t');
 
     
     WWV_FLOW_API.CREATE_PAGE_DA_ACTION (
         P_FLOW_ID                   => P_FLOW_ID,
         P_PAGE_ID                   => P_PAGE_STEP_1,
         P_EVENT_ID                  => L_DA_EVENT_ID,
         P_EVENT_RESULT              => 'FALSE',
         P_ACTION_SEQUENCE           => 20,
         P_EXECUTE_ON_PAGE_INIT      => 'Y',
         P_ACTION                    => 'NATIVE_HIDE',
         P_AFFECTED_ELEMENTS_TYPE    => 'ITEM',
         P_AFFECTED_ELEMENTS         => L_ITEM_PREFIX||'COPY_PASTE',
         P_ATTRIBUTE_01              => 'Y' ); 
 
     
     L_DA_EVENT_ID :=  WWV_FLOW_ID.NEXT_VAL;
     WWV_FLOW_API.CREATE_PAGE_DA_EVENT (
         P_ID                        => L_DA_EVENT_ID,
         P_FLOW_ID                   => P_FLOW_ID,
         P_PAGE_ID                   => P_PAGE_STEP_1,
         P_NAME                      => 'Import from File',
         P_EVENT_SEQUENCE            => 20,
         P_TRIGGERING_ELEMENT_TYPE   => 'ITEM',
         P_TRIGGERING_ELEMENT        => L_ITEM_PREFIX||'IMPORT_FROM',
         P_CONDITION_ELEMENT         => L_ITEM_PREFIX||'IMPORT_FROM',
         P_TRIGGERING_CONDITION_TYPE => 'EQUALS',
         P_TRIGGERING_EXPRESSION     => 'UPLOAD',
         P_BIND_TYPE                 => 'bind',
         P_BIND_EVENT_TYPE           => 'change' );
 
     
     WWV_FLOW_API.CREATE_PAGE_DA_ACTION (
         P_FLOW_ID                   => P_FLOW_ID,
         P_PAGE_ID                   => P_PAGE_STEP_1,
         P_EVENT_ID                  => L_DA_EVENT_ID,
         P_EVENT_RESULT              => 'TRUE',
         P_ACTION_SEQUENCE           => 10,
         P_EXECUTE_ON_PAGE_INIT      => 'Y',
         P_ACTION                    => 'NATIVE_SHOW',
         P_AFFECTED_ELEMENTS_TYPE    => 'ITEM',
         P_AFFECTED_ELEMENTS         => L_ITEM_PREFIX||'FILE_NAME',
         P_ATTRIBUTE_01              => 'Y' ); 
 
     
     WWV_FLOW_API.CREATE_PAGE_DA_ACTION (
         P_FLOW_ID                   => P_FLOW_ID,
         P_PAGE_ID                   => P_PAGE_STEP_1,
         P_EVENT_ID                  => L_DA_EVENT_ID,
         P_EVENT_RESULT              => 'TRUE',
         P_ACTION_SEQUENCE           => 20,
         P_EXECUTE_ON_PAGE_INIT      => 'N',
         P_ACTION                    => 'NATIVE_SET_VALUE',
         P_AFFECTED_ELEMENTS_TYPE    => 'ITEM',
         P_AFFECTED_ELEMENTS         => L_ITEM_PREFIX||'SEPARATOR',
         P_ATTRIBUTE_01              => 'STATIC_ASSIGNMENT',
         P_ATTRIBUTE_02              => ',');
 
     
     WWV_FLOW_API.CREATE_PAGE_DA_ACTION (
         P_FLOW_ID                   => P_FLOW_ID,
         P_PAGE_ID                   => P_PAGE_STEP_1,
         P_EVENT_ID                  => L_DA_EVENT_ID,
         P_EVENT_RESULT              => 'FALSE',
         P_ACTION_SEQUENCE           => 20,
         P_EXECUTE_ON_PAGE_INIT      => 'Y',
         P_ACTION                    => 'NATIVE_HIDE',
         P_AFFECTED_ELEMENTS_TYPE    => 'ITEM',
         P_AFFECTED_ELEMENTS         => L_ITEM_PREFIX||'FILE_NAME',
         P_ATTRIBUTE_01              => 'Y' ); 
 
     
     WWV_FLOW_API.CREATE_PAGE_PROCESS (
         P_FLOW_ID                => P_FLOW_ID,
         P_FLOW_STEP_ID           => P_PAGE_STEP_1,
         P_PROCESS_NAME           => 'Parse Uploaded Data',
         P_PROCESS_SEQUENCE       => 10,
         P_PROCESS_POINT          => 'AFTER_SUBMIT',
         P_PROCESS_TYPE           => WWV_FLOW_PROCESS_NATIVE.C_PARSE_UPLOADED_DATA,
         P_ATTRIBUTE_01           => L_LOAD_TABLE_ID,                    
         P_ATTRIBUTE_02           => L_ITEM_PREFIX||'IMPORT_FROM',       
         P_ATTRIBUTE_03           => L_ITEM_PREFIX||'SEPARATOR',         
         P_ATTRIBUTE_04           => L_ITEM_PREFIX||'ENCLOSED_BY',       
         P_ATTRIBUTE_05           => L_ITEM_PREFIX||'FIRST_ROW',         
         P_ATTRIBUTE_06           => L_ITEM_PREFIX||'CURRENCY',          
         P_ATTRIBUTE_07           => L_ITEM_PREFIX||'GROUP_SEPARATOR',   
         P_ATTRIBUTE_08           => L_ITEM_PREFIX||'DECIMAL_CHARACTER', 
         P_ATTRIBUTE_09           => L_ITEM_PREFIX||'FILE_NAME',         
         P_ATTRIBUTE_10           => L_ITEM_PREFIX||'COPY_PASTE',        
         P_ATTRIBUTE_11           => L_ITEM_PREFIX||'CHAR_SET',          
         P_ATTRIBUTE_12           => L_ITEM_PREFIX||'APP_DATE_FORMAT',   
         P_ERROR_DISPLAY_LOCATION => WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION,
         P_PROCESS_WHEN_BUTTON_ID => L_NEXT_BUTTON_ID );
 
     
     WWV_FLOW_API.CREATE_PAGE_BRANCH (
         P_FLOW_ID               => P_FLOW_ID,
         P_FLOW_STEP_ID          => P_PAGE_STEP_1,
         P_BRANCH_POINT          => 'AFTER_PROCESSING',
         P_BRANCH_TYPE           => 'REDIRECT_URL',
         P_BRANCH_ACTION         => 'f?p=&APP_ID.:'||P_PAGE_STEP_2||':&SESSION.&success_msg=#SUCCESS_MSG#',
         P_BRANCH_WHEN_BUTTON_ID => L_NEXT_BUTTON_ID,
         P_BRANCH_SEQUENCE       => 10 );
 
     
     
     
     L_ITEM_PREFIX := 'P'||P_PAGE_STEP_2||'_';
 
     
     
     
     
     CREATE_PAGE_AND_STD_REGIONS (
         P_PAGE_ID                  => P_PAGE_STEP_2,
         P_NAME                     => P_PAGE_LABEL_STEP_2,
         P_PAGE_MODE                => P_PAGE_MODE,
         P_GROUP_ID                 => L_GROUP_ID,
         P_NAV_LIST_ID              => P_NAV_LIST_ID,
         P_NAV_LIST_ITEM_ID         => NVL(P_NAV_LIST_ITEM_ID,G_NAV_LIST_ITEM_ID),
         P_NAV_LIST_ITEM_NAME       => NULL,
         P_NAV_LIST_PARENT_ITEM_ID  => NULL,
         P_NAV_LIST_CHILD_ITEM_NAME => NULL,
         P_INLINE_CSS               => '.rc-content-main {height: 400px; overflow: auto !important;}',
         P_REGION_TEMPLATE => L_REGION_TEMPLATE_ID);    
 
     
     L_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
     WWV_FLOW_API.CREATE_PAGE_PLUG (
         P_ID                      => L_REGION_ID,
         P_FLOW_ID                 => P_FLOW_ID,
         P_PAGE_ID                 => P_PAGE_STEP_2,
         P_PLUG_NAME               => P_REGION_NAME_STEP_2,
         P_TRANSLATE_TITLE         => 'Y',
         P_REGION_ATTRIBUTES       => 'style="width:100%;max-width:none;"',
         P_PLUG_TEMPLATE           => L_REGION_TEMPLATE_ID,
         P_REGION_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS (L_REGION_TEMPLATE_ID,'REGION'),
         P_PLUG_DISPLAY_SEQUENCE   => 20,
         P_PLUG_DISPLAY_POINT      => 'BODY',
         P_PLUG_ITEM_DISPLAY_POINT => 'ABOVE',
         P_PLUG_SOURCE_TYPE        => WWV_FLOW_REGION_NATIVE.C_DATA_UPLOAD_COLUMN_MAPPING,
         P_ATTRIBUTE_01            => L_LOAD_TABLE_ID ); 
 
     
     L_CANCEL_BUTTON_ID := WWV_FLOW_ID.NEXT_VAL;
     CREATE_BUTTON (
         P_ID                 => L_CANCEL_BUTTON_ID,
         P_FLOW_ID            => P_FLOW_ID,
         P_PAGE_ID            => P_PAGE_STEP_2,
         P_REGION_ID          => L_REGION_ID,
         P_NAME               => 'CANCEL',
         P_SEQ                => 20,
         P_LABEL              => P_PAGE_CANCEL_LABEL,
         P_REGION_TEMPLATE_ID => L_REGION_TEMPLATE_ID,
         P_POSITION_NAME      => 'PREVIOUS',
         P_ACTION             => L_CANCEL_BUTTON_ACTION,
         P_TARGET             => L_CANCEL_BUTTON_REDIRECT_URL );
 
     IF P_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN
       L_CANCEL_BUTTON_DA_ID := WWV_FLOW_ID.NEXT_VAL;
       WWV_FLOW_API.CREATE_PAGE_DA_EVENT(
           P_ID                      => L_CANCEL_BUTTON_DA_ID,
           P_FLOW_ID                 => P_FLOW_ID,
           P_PAGE_ID                 => P_PAGE_STEP_2,
           P_NAME                    => WWV_FLOW_LANG.SYSTEM_MESSAGE('DA_NAME.NATIVE_DIALOG_CANCEL'),
           P_EVENT_SEQUENCE          => 10,
           P_TRIGGERING_ELEMENT_TYPE => 'BUTTON',
           P_TRIGGERING_BUTTON_ID    => L_CANCEL_BUTTON_ID,
           P_BIND_TYPE               => 'bind',
           P_BIND_EVENT_TYPE         => 'click');
 
       WWV_FLOW_API.CREATE_PAGE_DA_ACTION(
           P_EVENT_ID                => L_CANCEL_BUTTON_DA_ID,
           P_FLOW_ID                 => P_FLOW_ID,
           P_PAGE_ID                 => P_PAGE_STEP_2,
           P_EVENT_RESULT            => 'TRUE',
           P_ACTION_SEQUENCE         => 10,
           P_EXECUTE_ON_PAGE_INIT    => 'N',
           P_ACTION                  => 'NATIVE_DIALOG_CANCEL',
           P_STOP_EXECUTION_ON_ERROR => 'Y');
     END IF;
 
     CREATE_BUTTON (
         P_FLOW_ID            => P_FLOW_ID,
         P_PAGE_ID            => P_PAGE_STEP_2,
         P_REGION_ID          => L_REGION_ID,
         P_NAME               => 'PREVIOUS',
         P_SEQ                => 10,
         P_LABEL              => P_PAGE_PREVIOUS_LABEL,
         P_REGION_TEMPLATE_ID => L_REGION_TEMPLATE_ID,
         P_POSITION_NAME      => 'PREVIOUS',
         P_ACTION             => WWV_FLOW_BUTTON.C_ACTION_REDIRECT_PAGE,
         P_TARGET             => P_PAGE_STEP_1 );
 
     L_NEXT_BUTTON_ID := WWV_FLOW_ID.NEXT_VAL;
     CREATE_BUTTON (
         P_ID                 => L_NEXT_BUTTON_ID,
         P_FLOW_ID            => P_FLOW_ID,
         P_PAGE_ID            => P_PAGE_STEP_2,
         P_REGION_ID          => L_REGION_ID,
         P_NAME               => 'NEXT',
         P_BUTTON_IS_HOT      => 'Y',
         P_SEQ                => 30,
         P_LABEL              => P_PAGE_NEXT_LABEL,
         P_REGION_TEMPLATE_ID => L_REGION_TEMPLATE_ID,
         P_POSITION_NAME      => 'NEXT',
         P_ACTION             => WWV_FLOW_BUTTON.C_ACTION_SUBMIT );
 
     
     WWV_FLOW_API.CREATE_PAGE_PROCESS (
         P_FLOW_ID                => P_FLOW_ID,
         P_FLOW_STEP_ID           => P_PAGE_STEP_2,
         P_PROCESS_NAME           => 'Prepare Uploaded Data',
         P_PROCESS_SEQUENCE       => 10,
         P_PROCESS_POINT          => 'AFTER_SUBMIT',
         P_PROCESS_TYPE           => WWV_FLOW_PROCESS_NATIVE.C_PREPARE_UPLOADED_DATA,
         P_ATTRIBUTE_01           => L_LOAD_TABLE_ID, 
         
         P_ATTRIBUTE_02           => 'P'||P_PAGE_STEP_4||'_'||'INSERT_COUNT', 
         P_ATTRIBUTE_03           => 'P'||P_PAGE_STEP_4||'_'||'UPDATE_COUNT', 
         P_ATTRIBUTE_04           => 'P'||P_PAGE_STEP_4||'_'||'ERROR_COUNT',  
         P_ATTRIBUTE_05           => 'P'||P_PAGE_STEP_4||'_'||'REVIEW_COUNT', 
         P_ERROR_DISPLAY_LOCATION => WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION,
         P_PROCESS_WHEN_BUTTON_ID => L_NEXT_BUTTON_ID );
 
     
     
     L_BRANCH_CONDITION :=
     '                   begin
                             for c1 in (select skip_validation
                                       from apex_appl_load_tables
                                       where name = '''||P_NAME||''' and application_id = apex_application.g_flow_id )
                             loop
                                 if c1.skip_validation = ''N'' then return true;
                                 else return false;
                                 end if;
                             end loop;
                         end;';
     WWV_FLOW_API.CREATE_PAGE_BRANCH (
         P_FLOW_ID               => P_FLOW_ID,
         P_FLOW_STEP_ID          => P_PAGE_STEP_2,
         P_BRANCH_POINT          => 'AFTER_PROCESSING',
         P_BRANCH_TYPE           => 'REDIRECT_URL',
         P_BRANCH_ACTION         => 'f?p=&APP_ID.:'||P_PAGE_STEP_3||':&SESSION.&success_msg=#SUCCESS_MSG#',
         P_BRANCH_WHEN_BUTTON_ID => L_NEXT_BUTTON_ID,
         P_BRANCH_SEQUENCE       => 10,
         P_BRANCH_CONDITION_TYPE => 'FUNCTION_BODY',
         P_BRANCH_CONDITION      => L_BRANCH_CONDITION,
         P_BRANCH_CONDITION_TEXT => NULL,
         P_REQUIRED_PATCH        => NULL,
         P_BRANCH_COMMENT        => NULL);
 
     
     L_BRANCH_CONDITION :=
     '                   begin
                             for c1 in (select skip_validation
                                       from apex_appl_load_tables
                                       where name = '''||P_NAME||''' and application_id = apex_application.g_flow_id )
                             loop
                                 if c1.skip_validation = ''Y'' then return true;
                                 else return false;
                                 end if;
                             end loop;
                         end;';
 
     
     WWV_FLOW_API.CREATE_PAGE_BRANCH (
         P_FLOW_ID               => P_FLOW_ID,
         P_FLOW_STEP_ID          => P_PAGE_STEP_2,
         P_BRANCH_POINT          => 'AFTER_PROCESSING',
         P_BRANCH_TYPE           => 'REDIRECT_URL',
         P_BRANCH_ACTION         => 'f?p=&APP_ID.:'||P_PAGE_STEP_4||':&SESSION.&success_msg=#SUCCESS_MSG#',
         P_BRANCH_WHEN_BUTTON_ID => L_NEXT_BUTTON_ID,
         P_BRANCH_SEQUENCE       => 20,
         P_BRANCH_CONDITION_TYPE => 'FUNCTION_BODY',
         P_BRANCH_CONDITION      => L_BRANCH_CONDITION,
         P_BRANCH_CONDITION_TEXT => NULL,
         P_REQUIRED_PATCH        => NULL,
         P_BRANCH_COMMENT        => NULL);
 
     
     
     
     
     
     
     
     CREATE_PAGE_AND_STD_REGIONS (
         P_PAGE_ID                  => P_PAGE_STEP_3,
         P_NAME                     => P_PAGE_LABEL_STEP_3,
         P_PAGE_MODE                => P_PAGE_MODE,
         P_GROUP_ID                 => L_GROUP_ID,
         P_NAV_LIST_ID              => P_NAV_LIST_ID,
         P_NAV_LIST_ITEM_ID         => NVL(P_NAV_LIST_ITEM_ID,G_NAV_LIST_ITEM_ID),
         P_NAV_LIST_ITEM_NAME       => NULL,
         P_NAV_LIST_PARENT_ITEM_ID  => NULL,
         P_NAV_LIST_CHILD_ITEM_NAME => NULL,
         P_JAVASCRIPT_CODE_ONLOAD   => '/* apply u-Report--dataLoad CSS class to Data Load Report and hide empty columns */
 apex.jQuery("table.standardLook").addClass("u-Report u-Report--standardLook");
 apex.jQuery("table.u-Report--standardLook tr:nth-child(1) td:empty").css("display", "none");
 apex.jQuery("table.u-Report--standardLook tr th:empty").css("display", "none");
 apex.jQuery("table.u-Report--standardLook tr th:empty").each( function (idx, elem) { apex.jQuery("table.u-Report--standardLook tr td[headers=\""+apex.jQuery(elem).attr(''id'')+"\"]").css("display", "none");});',
         P_REGION_TEMPLATE => L_REGION_TEMPLATE_ID);
 
     
     L_QUERY_HEADINGS := 'declare  ' || WWV_FLOW.LF ||
                         '    l_string varchar(32767);' || WWV_FLOW.LF ||
                         'begin'|| WWV_FLOW.LF ||
                     '    l_string := wwv_flow_lang.system_message(''DATA_LOAD.SEQUENCE_ACTION'');'||WWV_FLOW.LF|| 
                         '    for l_heading in ( select c005 as label' || WWV_FLOW.LF ||
                         '                         from apex_collections' || WWV_FLOW.LF ||
                         '                        where collection_name = ''LOAD_COL_HEAD''' || WWV_FLOW.LF||
                         '                        order by seq_id )' || WWV_FLOW.LF ||
                         '    loop'||WWV_FLOW.LF||
                         '        l_string := l_string || '':'' || l_heading.label;' || WWV_FLOW.LF ||
                         '    end loop;'||WWV_FLOW.LF||
                         '    return l_string;'||WWV_FLOW.LF||
                         'end;';
 
     L_QUERY := 'select n001 as row_num,'  || WWV_FLOW.LF ||
                '       wwv_flow_lang.system_message( ''DATA_LOAD.'' || c049 ) as action,'   || WWV_FLOW.LF ||
                '       c001, c002, c003,' || WWV_FLOW.LF ||
                '       c004, c005, c006,' || WWV_FLOW.LF ||
                '       c007, c008, c009,' || WWV_FLOW.LF ||
                '       c010, c011, c012,' || WWV_FLOW.LF ||
                '       c013, c014, c015,' || WWV_FLOW.LF ||
                '       c016, c017, c018,' || WWV_FLOW.LF ||
                '       c019, c020, c021,' || WWV_FLOW.LF ||
                '       c022, c023, c024,' || WWV_FLOW.LF ||
                '       c025, c026, c027,' || WWV_FLOW.LF ||
                '       c028, c029, c030,' || WWV_FLOW.LF ||
                '       c031, c032, c033,' || WWV_FLOW.LF ||
                '       c034, c035, c036,' || WWV_FLOW.LF ||
                '       c037, c038, c040,' || WWV_FLOW.LF ||
                '       c041, c042, c043,' || WWV_FLOW.LF ||
                '       c044, c045'        || WWV_FLOW.LF ||
                '  from apex_collections'  || WWV_FLOW.LF ||
                ' where collection_name = ''LOAD_CONTENT''' || WWV_FLOW.LF ||
            '   and c049 in (''INSERT'',''UPDATE'', ''FAILED'')'   || WWV_FLOW.LF ||
                ' order by seq_id';
 
     L_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
     WWV_FLOW_API.CREATE_PAGE_PLUG (
         P_ID                            => L_REGION_ID,
         P_FLOW_ID                       => P_FLOW_ID,
         P_PAGE_ID                       => P_PAGE_STEP_3,
         P_PLUG_NAME                     => P_REGION_NAME_STEP_3,
         P_PLUG_TEMPLATE                 => L_REGION_TEMPLATE_ID,
         P_REGION_TEMPLATE_OPTIONS       => GET_PRESET_TEMPLATE_OPTIONS (L_REGION_TEMPLATE_ID,'REGION'),
         P_REGION_CSS_CLASSES            => 'data-upload-validation',
         P_REGION_ATTRIBUTES             => 'style="width:100%;max-width:none;"',
         P_PLUG_DISPLAY_SEQUENCE         => 20,
         P_PLUG_DISPLAY_POINT            => 'BODY',
         P_PLUG_ITEM_DISPLAY_POINT       => 'ABOVE',
         P_PLUG_SOURCE_TYPE              => WWV_FLOW_REGION_NATIVE.C_SQL_REPORT,
         P_PLUG_SOURCE                   => L_QUERY,
         P_PLUG_QUERY_ROW_TEMPLATE       => 1,
         P_PLUG_QUERY_NUM_ROWS_TYPE      => 'ROW_RANGES_IN_SELECT_LIST',
         P_PLUG_QUERY_ROW_COUNT_MAX      => WWV_FLOW_API.C_DEFAULT_QUERY_ROW_COUNT_MAX,
         P_PLUG_QUERY_SHOW_NULLS_AS      => NULL,
         P_PLUG_QUERY_NUM_ROWS           => 15,
         P_PLUG_QUERY_HEADINGS_TYPE      => 'FUNCTION_BODY_RETURNING_COLON_DELIMITED_LIST',
         P_PLUG_QUERY_HEADINGS           => L_QUERY_HEADINGS,
         P_PAGINATION_DISPLAY_POSITION   => 'BOTTOM_RIGHT',
         P_PLUG_QUERY_FORMAT_OUT         => 'HTML' );
 
 
     
     L_CANCEL_BUTTON_ID := WWV_FLOW_ID.NEXT_VAL;
     CREATE_BUTTON (
         P_ID                 => L_CANCEL_BUTTON_ID,
         P_FLOW_ID            => P_FLOW_ID,
         P_PAGE_ID            => P_PAGE_STEP_3,
         P_REGION_ID          => L_REGION_ID,
         P_NAME               => 'CANCEL',
         P_SEQ                => 20,
         P_LABEL              => P_PAGE_CANCEL_LABEL,
         P_REGION_TEMPLATE_ID => L_REGION_TEMPLATE_ID,
         P_POSITION_NAME      => 'PREVIOUS',
         P_ACTION             => L_CANCEL_BUTTON_ACTION,
         P_TARGET             => L_CANCEL_BUTTON_REDIRECT_URL );
 
     IF P_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN
       L_CANCEL_BUTTON_DA_ID := WWV_FLOW_ID.NEXT_VAL;
       WWV_FLOW_API.CREATE_PAGE_DA_EVENT(
           P_ID                      => L_CANCEL_BUTTON_DA_ID,
           P_FLOW_ID                 => P_FLOW_ID,
           P_PAGE_ID                 => P_PAGE_STEP_3,
           P_NAME                    => WWV_FLOW_LANG.SYSTEM_MESSAGE('DA_NAME.NATIVE_DIALOG_CANCEL'),
           P_EVENT_SEQUENCE          => 10,
           P_TRIGGERING_ELEMENT_TYPE => 'BUTTON',
           P_TRIGGERING_BUTTON_ID    => L_CANCEL_BUTTON_ID,
           P_BIND_TYPE               => 'bind',
           P_BIND_EVENT_TYPE         => 'click');
 
       WWV_FLOW_API.CREATE_PAGE_DA_ACTION(
           P_EVENT_ID                => L_CANCEL_BUTTON_DA_ID,
           P_FLOW_ID                 => P_FLOW_ID,
           P_PAGE_ID                 => P_PAGE_STEP_3,
           P_EVENT_RESULT            => 'TRUE',
           P_ACTION_SEQUENCE         => 10,
           P_EXECUTE_ON_PAGE_INIT    => 'N',
           P_ACTION                  => 'NATIVE_DIALOG_CANCEL',
           P_STOP_EXECUTION_ON_ERROR => 'Y');
   END IF;
 
     CREATE_BUTTON (
         P_FLOW_ID            => P_FLOW_ID,
         P_PAGE_ID            => P_PAGE_STEP_3,
         P_REGION_ID          => L_REGION_ID,
         P_NAME               => 'PREVIOUS',
         P_SEQ                => 10,
         P_LABEL              => P_PAGE_PREVIOUS_LABEL,
         P_REGION_TEMPLATE_ID => L_REGION_TEMPLATE_ID,
         P_POSITION_NAME      => 'PREVIOUS',
         P_ACTION             => WWV_FLOW_BUTTON.C_ACTION_REDIRECT_PAGE,
         P_TARGET             => P_PAGE_STEP_2 );
 
     L_NEXT_BUTTON_ID := WWV_FLOW_ID.NEXT_VAL;
     CREATE_BUTTON (
         P_ID                 => L_NEXT_BUTTON_ID,
         P_FLOW_ID            => P_FLOW_ID,
         P_PAGE_ID            => P_PAGE_STEP_3,
         P_REGION_ID          => L_REGION_ID,
         P_NAME               => 'NEXT',
         P_BUTTON_IS_HOT      => 'Y',
         P_SEQ                => 30,
         P_LABEL              => WWV_FLOW_LANG.SYSTEM_MESSAGE('LOAD_DATA'), 
         P_REGION_TEMPLATE_ID => L_REGION_TEMPLATE_ID,
         P_POSITION_NAME      => 'NEXT',
         P_ACTION             => WWV_FLOW_BUTTON.C_ACTION_SUBMIT );
 
     
     L_ITEM_PREFIX := 'P'||P_PAGE_STEP_4||'_';
     WWV_FLOW_API.CREATE_PAGE_PROCESS (
         P_FLOW_ID                => P_FLOW_ID,
         P_FLOW_STEP_ID           => P_PAGE_STEP_3,
         P_PROCESS_NAME           => 'Prepare Uploaded Data',
         P_PROCESS_SEQUENCE       => 10,
         P_PROCESS_POINT          => 'AFTER_SUBMIT',
         P_PROCESS_TYPE           => WWV_FLOW_PROCESS_NATIVE.C_LOAD_UPLOADED_DATA,
         P_ATTRIBUTE_01           => L_LOAD_TABLE_ID,               
         P_ATTRIBUTE_02           => L_ITEM_PREFIX||'INSERT_COUNT', 
         P_ATTRIBUTE_03           => L_ITEM_PREFIX||'UPDATE_COUNT', 
         P_ATTRIBUTE_04           => L_ITEM_PREFIX||'ERROR_COUNT',  
         P_ATTRIBUTE_05           => L_ITEM_PREFIX||'REVIEW_COUNT', 
         P_ERROR_DISPLAY_LOCATION => WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION,
         P_PROCESS_ERROR_MESSAGE  => WWV_FLOW_LANG.SYSTEM_MESSAGE('DATA_LOAD.LOAD_DATA_PROCESS_ERROR'),
         P_PROCESS_WHEN_BUTTON_ID => L_NEXT_BUTTON_ID );
 
     
     WWV_FLOW_API.CREATE_PAGE_BRANCH (
         P_FLOW_ID               => P_FLOW_ID,
         P_FLOW_STEP_ID          => P_PAGE_STEP_3,
         P_BRANCH_POINT          => 'AFTER_PROCESSING',
         P_BRANCH_TYPE           => 'REDIRECT_URL',
         P_BRANCH_ACTION         => 'f?p=&APP_ID.:'||P_PAGE_STEP_4||':&SESSION.&success_msg=#SUCCESS_MSG#',
         P_BRANCH_WHEN_BUTTON_ID => L_NEXT_BUTTON_ID,
         P_BRANCH_SEQUENCE       => 10 );
 
     
     
     
     
     
     
     
     CREATE_PAGE_AND_STD_REGIONS (
         P_PAGE_ID                  => P_PAGE_STEP_4,
         P_NAME                     => P_PAGE_LABEL_STEP_4,
         P_PAGE_MODE                => P_PAGE_MODE,
         P_GROUP_ID                 => L_GROUP_ID,
         P_NAV_LIST_ID              => P_NAV_LIST_ID,
         P_NAV_LIST_ITEM_ID         => NVL(P_NAV_LIST_ITEM_ID,G_NAV_LIST_ITEM_ID),
         P_NAV_LIST_ITEM_NAME       => NULL,
         P_NAV_LIST_PARENT_ITEM_ID  => NULL,
         P_NAV_LIST_CHILD_ITEM_NAME => NULL,
         P_JAVASCRIPT_CODE_ONLOAD   => '/* apply u-Report--dataLoad CSS class to Data Load Report and hide empty columns */
 apex.jQuery("table.standardLook").addClass("u-Report u-Report--standardLook");
 apex.jQuery("table.u-Report--standardLook tr:nth-child(1) td:empty").css("display", "none");
 apex.jQuery("table.u-Report--standardLook tr th:empty").css("display", "none");
 apex.jQuery("table.u-Report--standardLook tr th:empty").each( function (idx, elem) { apex.jQuery("table.u-Report--standardLook tr td[headers=\""+apex.jQuery(elem).attr(''id'')+"\"]").css("display", "none");});',
         P_REGION_TEMPLATE => L_REGION_TEMPLATE_ID);
 
     
     L_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
     CREATE_HTML_REGION (
         P_ID          => L_REGION_ID,
         P_FLOW_ID     => P_FLOW_ID,
         P_PAGE_ID     => P_PAGE_STEP_4,
         P_NAME        => P_REGION_NAME_STEP_4,
         P_SEQ         => 20,
         P_TEMPLATE_ID => L_REGION_TEMPLATE_ID,
         P_ATTRIBUTES  => 'style="width:100%;max-width:none;"' );
 
     L_NEXT_BUTTON_ID := WWV_FLOW_ID.NEXT_VAL;
     CREATE_BUTTON (
         P_ID                 => L_NEXT_BUTTON_ID,
         P_FLOW_ID            => P_FLOW_ID,
         P_PAGE_ID            => P_PAGE_STEP_4,
         P_REGION_ID          => L_REGION_ID,
         P_BUTTON_IS_HOT      => 'Y',
         P_NAME               => 'FINISH',
         P_SEQ                => 30,
         P_LABEL              => P_PAGE_FINISH_LABEL,
         P_REGION_TEMPLATE_ID => L_REGION_TEMPLATE_ID,
         P_POSITION_NAME      => 'NEXT',
         P_ACTION             => WWV_FLOW_BUTTON.C_ACTION_REDIRECT_PAGE,
         P_TARGET             => P_PAGE_FINISH_BRANCH );
 
     IF P_PAGE_MODE <> WWV_FLOW_PAGE.C_PAGE_MODE_NORMAL THEN
         WWV_FLOW_API.CREATE_PAGE_PROCESS(
             P_ID                      => NULL,
             P_FLOW_ID                 => P_FLOW_ID,
             P_FLOW_STEP_ID            => P_PAGE_STEP_4,
             P_PROCESS_SEQUENCE        => 50,
             P_PROCESS_POINT           => 'AFTER_SUBMIT',
             P_PROCESS_TYPE            => WWV_FLOW_PROCESS_NATIVE.C_CLOSE_WINDOW,
             P_PROCESS_NAME            => 'Close Dialog',
             P_ERROR_DISPLAY_LOCATION  => WWV_FLOW_ERROR_API.C_INLINE_IN_NOTIFICATION,
             P_PROCESS_WHEN            => 'CREATE,SAVE,DELETE',
             P_PROCESS_WHEN_TYPE       => 'REQUEST_IN_CONDITION');
     END IF;
 
     
     CREATE_DISPLAY_ONLY_ITEM (
         P_FLOW_ID      => P_FLOW_ID,
         P_PAGE_ID      => P_PAGE_STEP_4,
         P_NAME_POSTFIX => 'INSERT_COUNT',
         P_LABEL        => WWV_FLOW_LANG.SYSTEM_MESSAGE('DATA_LOAD.INSERTED_COUNT'),
         P_SEQ          => 10,
         P_REGION_ID    => L_REGION_ID,
         P_SOURCE_TYPE  => 'STATIC' );
 
     
     CREATE_DISPLAY_ONLY_ITEM (
         P_FLOW_ID      => P_FLOW_ID,
         P_PAGE_ID      => P_PAGE_STEP_4,
         P_NAME_POSTFIX => 'UPDATE_COUNT',
         P_LABEL        => WWV_FLOW_LANG.SYSTEM_MESSAGE('DATA_LOAD.UPDATED_COUNT'),
         P_SEQ          => 20,
         P_REGION_ID    => L_REGION_ID,
         P_SOURCE_TYPE  => 'STATIC');
 
     
     CREATE_DISPLAY_ONLY_ITEM (
         P_FLOW_ID      => P_FLOW_ID,
         P_PAGE_ID      => P_PAGE_STEP_4,
         P_NAME_POSTFIX => 'ERROR_COUNT',
         P_LABEL        => WWV_FLOW_LANG.SYSTEM_MESSAGE('DATA_LOAD.FAILED_COUNT'),
         P_SEQ          => 30,
         P_REGION_ID    => L_REGION_ID,
         P_SOURCE_TYPE  => 'QUERY',
         P_SOURCE       => 'select count(*) c from apex_collections where collection_name = ''LOAD_CONTENT'' and c047 = ''FAILED''');
 
     
     CREATE_DISPLAY_ONLY_ITEM (
         P_FLOW_ID      => P_FLOW_ID,
         P_PAGE_ID      => P_PAGE_STEP_4,
         P_NAME_POSTFIX => 'REVIEW_COUNT',
         P_LABEL        => WWV_FLOW_LANG.SYSTEM_MESSAGE('DATA_LOAD.REVIEW_COUNT'),
         P_SEQ          => 40,
         P_REGION_ID    => L_REGION_ID,
         P_SOURCE_TYPE  => 'STATIC' );
 
     
     L_QUERY_HEADINGS := 'declare  ' || WWV_FLOW.LF ||
                         '    l_string varchar(32667);' || WWV_FLOW.LF ||
                         'begin'|| WWV_FLOW.LF ||
                         '    l_string := wwv_flow_lang.system_message(''DATA_LOAD.SEQUENCE_ACTION'');'||WWV_FLOW.LF|| 
                         '    l_string := l_string ||'':''|| wwv_flow_lang.system_message(''ERROR'');'||WWV_FLOW.LF||
                         '    for l_heading in ( select c005 as label' || WWV_FLOW.LF ||
                         '                         from apex_collections' || WWV_FLOW.LF ||
                         '                        where collection_name = ''LOAD_COL_HEAD''' || WWV_FLOW.LF||
                         '                        order by seq_id )' || WWV_FLOW.LF ||
                         '    loop'||WWV_FLOW.LF||
                         '        l_string := l_string || '':'' || l_heading.label;' || WWV_FLOW.LF ||
                         '    end loop;'||WWV_FLOW.LF||
                         '    return l_string;'||WWV_FLOW.LF||
                         'end;';
 
     L_QUERY := 'select n001 as row_num,'  || WWV_FLOW.LF ||
                '       wwv_flow_lang.system_message( ''DATA_LOAD.'' || c049 ) as action,'   || WWV_FLOW.LF ||
                '       c048 as error,'    || WWV_FLOW.LF ||
                '       c001, c002, c003,' || WWV_FLOW.LF ||
                '       c004, c005, c006,' || WWV_FLOW.LF ||
                '       c007, c008, c009,' || WWV_FLOW.LF ||
                '       c010, c011, c012,' || WWV_FLOW.LF ||
                '       c013, c014, c015,' || WWV_FLOW.LF ||
                '       c016, c017, c018,' || WWV_FLOW.LF ||
                '       c019, c020, c021,' || WWV_FLOW.LF ||
                '       c022, c023, c024,' || WWV_FLOW.LF ||
                '       c025, c026, c027,' || WWV_FLOW.LF ||
                '       c028, c029, c030,' || WWV_FLOW.LF ||
                '       c031, c032, c033,' || WWV_FLOW.LF ||
                '       c034, c035, c036,' || WWV_FLOW.LF ||
                '       c037, c038, c040,' || WWV_FLOW.LF ||
                '       c041, c042, c043,' || WWV_FLOW.LF ||
                '       c044, c045'        || WWV_FLOW.LF ||
                '  from apex_collections'  || WWV_FLOW.LF ||
                ' where collection_name = ''LOAD_CONTENT''' || WWV_FLOW.LF ||
            '   and c047 in (''FAILED'') '   || WWV_FLOW.LF ||
                ' order by seq_id';
 
     L_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
     WWV_FLOW_API.CREATE_PAGE_PLUG (
         P_ID                          => L_REGION_ID,
         P_FLOW_ID                     => P_FLOW_ID,
         P_PAGE_ID                     => P_PAGE_STEP_4,
         P_PLUG_NAME                   => WWV_FLOW_LANG.SYSTEM_MESSAGE('DATA_LOAD.FAILED_RECORD'),
         P_REGION_ATTRIBUTES           => 'style="width:100%;max-width:none;" ',
         P_REGION_CSS_CLASSES          => 'data-upload-result',
         P_PLUG_TEMPLATE               => L_REGION_TEMPLATE_ID,
         P_REGION_TEMPLATE_OPTIONS     => GET_PRESET_TEMPLATE_OPTIONS (L_REGION_TEMPLATE_ID,'REGION'),
         P_PLUG_DISPLAY_SEQUENCE       => 20,
         P_PLUG_DISPLAY_POINT          => 'BODY',
         P_PLUG_ITEM_DISPLAY_POINT     => 'ABOVE',
         P_PLUG_SOURCE_TYPE            => WWV_FLOW_REGION_NATIVE.C_SQL_REPORT,
         P_PLUG_SOURCE                 => L_QUERY,
         P_PLUG_QUERY_ROW_TEMPLATE     => 1,
         P_PLUG_QUERY_NUM_ROWS_TYPE    => 'ROW_RANGES_IN_SELECT_LIST',
         P_PLUG_QUERY_ROW_COUNT_MAX    => WWV_FLOW_API.C_DEFAULT_QUERY_ROW_COUNT_MAX,
         P_PLUG_QUERY_SHOW_NULLS_AS    => NULL,
         P_PLUG_QUERY_NUM_ROWS         => 15,
         P_PLUG_QUERY_HEADINGS_TYPE    => 'FUNCTION_BODY_RETURNING_COLON_DELIMITED_LIST',
         P_PLUG_QUERY_HEADINGS         => L_QUERY_HEADINGS,
         P_PAGINATION_DISPLAY_POSITION => 'BOTTOM_RIGHT',
         P_PLUG_QUERY_FORMAT_OUT       => 'HTML',
         P_PLUG_DISPLAY_CONDITION_TYPE => 'ITEM_NOT_NULL_OR_ZERO',
         P_PLUG_DISPLAY_WHEN_CONDITION => L_ITEM_PREFIX||'ERROR_COUNT' );
 
 
     
     
        UPDATE WWV_FLOW_REGION_REPORT_COLUMN
           SET DISPLAY_AS = 'WITHOUT_MODIFICATION'
         WHERE REGION_ID = L_REGION_ID
           AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
           AND FLOW_ID = P_FLOW_ID
           AND COLUMN_ALIAS = 'ERROR';
 
     
     L_QUERY := 'select n001 as row_num,'  || WWV_FLOW.LF ||
                '       wwv_flow_lang.system_message( ''DATA_LOAD.'' || c049 ) as action,'   || WWV_FLOW.LF ||
                '       c048 as error,'    || WWV_FLOW.LF ||
                '       c001, c002, c003,' || WWV_FLOW.LF ||
                '       c004, c005, c006,' || WWV_FLOW.LF ||
                '       c007, c008, c009,' || WWV_FLOW.LF ||
                '       c010, c011, c012,' || WWV_FLOW.LF ||
                '       c013, c014, c015,' || WWV_FLOW.LF ||
                '       c016, c017, c018,' || WWV_FLOW.LF ||
                '       c019, c020, c021,' || WWV_FLOW.LF ||
                '       c022, c023, c024,' || WWV_FLOW.LF ||
                '       c025, c026, c027,' || WWV_FLOW.LF ||
                '       c028, c029, c030,' || WWV_FLOW.LF ||
                '       c031, c032, c033,' || WWV_FLOW.LF ||
                '       c034, c035, c036,' || WWV_FLOW.LF ||
                '       c037, c038, c040,' || WWV_FLOW.LF ||
                '       c041, c042, c043,' || WWV_FLOW.LF ||
                '       c044, c045'        || WWV_FLOW.LF ||
                '  from apex_collections'  || WWV_FLOW.LF ||
                ' where collection_name = ''LOAD_CONTENT''' || WWV_FLOW.LF ||
            '   and c049 in (''REVIEW'') '   || WWV_FLOW.LF ||
                ' order by seq_id';
 
     
     L_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
     WWV_FLOW_API.CREATE_PAGE_PLUG (
         P_ID                          => L_REGION_ID,
         P_FLOW_ID                     => P_FLOW_ID,
         P_PAGE_ID                     => P_PAGE_STEP_4,
         P_PLUG_NAME                   => WWV_FLOW_LANG.SYSTEM_MESSAGE('DATA_LOAD.JUSTCHANGED_RECORD'),
         P_REGION_CSS_CLASSES          => 'data-upload-result',
         P_REGION_ATTRIBUTES           => 'style="width:100%;max-width:none;" ',
         P_PLUG_TEMPLATE               => L_REGION_TEMPLATE_ID,
         P_REGION_TEMPLATE_OPTIONS     => GET_PRESET_TEMPLATE_OPTIONS (L_REGION_TEMPLATE_ID,'REGION'),
         P_PLUG_DISPLAY_SEQUENCE       => 30,
         P_PLUG_DISPLAY_POINT          => 'BODY',
         P_PLUG_ITEM_DISPLAY_POINT     => 'ABOVE',
         P_PLUG_SOURCE_TYPE            => WWV_FLOW_REGION_NATIVE.C_SQL_REPORT,
         P_PLUG_SOURCE                 => L_QUERY,
         P_PLUG_QUERY_ROW_TEMPLATE     => 1,
         P_PLUG_QUERY_NUM_ROWS_TYPE    => 'ROW_RANGES_IN_SELECT_LIST',
         P_PLUG_QUERY_ROW_COUNT_MAX    => WWV_FLOW_API.C_DEFAULT_QUERY_ROW_COUNT_MAX,
         P_PLUG_QUERY_SHOW_NULLS_AS    => NULL,
         P_PLUG_QUERY_NUM_ROWS         => 15,
         P_PLUG_QUERY_HEADINGS_TYPE    => 'FUNCTION_BODY_RETURNING_COLON_DELIMITED_LIST',
         P_PLUG_QUERY_HEADINGS         => L_QUERY_HEADINGS,
         P_PAGINATION_DISPLAY_POSITION => 'BOTTOM_RIGHT',
         P_PLUG_QUERY_FORMAT_OUT       => 'HTML',
         P_PLUG_DISPLAY_CONDITION_TYPE => 'ITEM_NOT_NULL_OR_ZERO',
         P_PLUG_DISPLAY_WHEN_CONDITION => L_ITEM_PREFIX||'REVIEW_COUNT' );
 
 END CREATE_DATA_LOAD_WIZARD;
 
 
 
 
 PROCEDURE CREATE_REGION_PLUGIN_PAGE (
     P_FLOW_ID                  IN NUMBER,
     P_PAGE_ID                  IN NUMBER,
     P_PAGE_NAME                IN VARCHAR2,
     P_GROUP_NAME               IN VARCHAR2                       DEFAULT NULL,
     P_PAGE_MODE                IN VARCHAR2,
     P_USER_INTERFACE_ID        IN NUMBER,
     
     P_TAB_SET                  IN VARCHAR2,
     P_TAB_NAME                 IN VARCHAR2,
     P_TAB_LABEL                IN VARCHAR2,
     
     P_NAV_LIST_ID              IN NUMBER                         DEFAULT NULL,
     P_NAV_LIST_ITEM_ID         IN NUMBER                         DEFAULT NULL,
     P_NAV_LIST_ITEM_NAME       IN VARCHAR2                       DEFAULT NULL,
     P_NAV_LIST_PARENT_ITEM_ID  IN NUMBER                         DEFAULT NULL,
     P_NAV_LIST_CHILD_ITEM_NAME IN VARCHAR2                       DEFAULT NULL,
     
     P_BREADCRUMB_ID            IN NUMBER,
     P_BREADCRUMB_NAME          IN VARCHAR2,
     P_PARENT_BREADCRUMB_ID     IN NUMBER,
     
     P_REGION_NAME              IN VARCHAR2,
     P_REGION_TYPE              IN VARCHAR2,
     
     P_LOCATION                 IN WWV_FLOW_EXEC_API.T_LOCATION   DEFAULT WWV_FLOW_EXEC_API.C_LOCATION_LOCAL_DB,
     P_SOURCE_TYPE              IN WWV_FLOW_EXEC_API.T_QUERY_TYPE DEFAULT WWV_FLOW_EXEC_API.C_QUERY_TYPE_SQL_QUERY,
     P_REMOTE_SERVER_ID         IN NUMBER                         DEFAULT NULL,
     P_TABLE_OWNER              IN VARCHAR2                       DEFAULT NULL,
     P_TABLE_NAME               IN VARCHAR2                       DEFAULT NULL,
     P_REGION_SOURCE            IN VARCHAR2                       DEFAULT NULL,
     P_COLUMN_NAMES             IN VARCHAR2                       DEFAULT NULL,
     P_WEB_SRC_MODULE_ID        IN NUMBER                         DEFAULT NULL,
     
     P_ATTRIBUTE_01             IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_02             IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_03             IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_04             IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_05             IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_06             IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_07             IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_08             IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_09             IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_10             IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_11             IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_12             IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_13             IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_14             IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_15             IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_16             IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_17             IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_18             IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_19             IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_20             IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_21             IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_22             IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_23             IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_24             IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_25             IN VARCHAR2                       DEFAULT NULL )
 IS
     L_GROUP_ID NUMBER;
 BEGIN
     
     WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
         P_FLOW_ID           => P_FLOW_ID,
         P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
     IF NOT PAGE_EXISTS(P_FLOW_ID, P_PAGE_ID) THEN
 
         
         
         
         IF P_GROUP_NAME IS NOT NULL THEN
             L_GROUP_ID := WWV_FLOW_UTILITIES.GET_PAGE_GROUP_ID(P_GROUP_NAME => P_GROUP_NAME, P_APPLICATION_ID => P_FLOW_ID);
             
             IF L_GROUP_ID IS NULL THEN
                 L_GROUP_ID := WWV_FLOW_ID.NEXT_VAL;
                 WWV_FLOW_API.CREATE_PAGE_GROUP(P_ID => L_GROUP_ID, P_FLOW_ID => P_FLOW_ID, P_GROUP_NAME => P_GROUP_NAME);
             END IF;
         END IF;
 
         
         CREATE_PAGE (
             P_FLOW_ID                  => P_FLOW_ID,
             P_PAGE_ID                  => P_PAGE_ID,
             P_NAME                     => P_PAGE_NAME,
             P_PAGE_MODE                => P_PAGE_MODE,
             P_GROUP_ID                 => L_GROUP_ID,
             P_USER_INTERFACE_ID        => P_USER_INTERFACE_ID,
             
             P_TAB_SET                  => P_TAB_SET,
             P_TAB_NAME                 => P_TAB_NAME,
             P_TAB_LABEL                => P_TAB_LABEL,
             
             P_NAV_LIST_ID              => P_NAV_LIST_ID,
             P_NAV_LIST_ITEM_ID         => P_NAV_LIST_ITEM_ID,
             P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_ITEM_NAME,
             P_NAV_LIST_PARENT_ITEM_ID  => P_NAV_LIST_PARENT_ITEM_ID,
             P_NAV_LIST_CHILD_ITEM_NAME => P_NAV_LIST_CHILD_ITEM_NAME,
             
             P_BREADCRUMB_ID            => P_BREADCRUMB_ID,
             P_BREADCRUMB_NAME          => P_BREADCRUMB_NAME,
             P_PARENT_BREADCRUMB_ID     => P_PARENT_BREADCRUMB_ID);
     END IF;
 
     
     CREATE_REGION_PLUGIN (
         P_APPLICATION_ID    => P_FLOW_ID,
         P_PAGE_ID           => P_PAGE_ID,
         P_TITLE             => P_REGION_NAME,
         P_TYPE              => P_REGION_TYPE,
         
         P_LOCATION          => P_LOCATION,
         P_SOURCE_TYPE       => P_SOURCE_TYPE,
         P_REMOTE_SERVER_ID  => P_REMOTE_SERVER_ID,
         P_TABLE_OWNER       => P_TABLE_OWNER,
         P_TABLE_NAME        => P_TABLE_NAME,
         P_SOURCE            => P_REGION_SOURCE,
         P_WEB_SRC_MODULE_ID => P_WEB_SRC_MODULE_ID,
         P_COLUMN_NAMES      => P_COLUMN_NAMES,
         
         P_ATTRIBUTE_01      => P_ATTRIBUTE_01,
         P_ATTRIBUTE_02      => P_ATTRIBUTE_02,
         P_ATTRIBUTE_03      => P_ATTRIBUTE_03,
         P_ATTRIBUTE_04      => P_ATTRIBUTE_04,
         P_ATTRIBUTE_05      => P_ATTRIBUTE_05,
         P_ATTRIBUTE_06      => P_ATTRIBUTE_06,
         P_ATTRIBUTE_07      => P_ATTRIBUTE_07,
         P_ATTRIBUTE_08      => P_ATTRIBUTE_08,
         P_ATTRIBUTE_09      => P_ATTRIBUTE_09,
         P_ATTRIBUTE_10      => P_ATTRIBUTE_10,
         P_ATTRIBUTE_11      => P_ATTRIBUTE_11,
         P_ATTRIBUTE_12      => P_ATTRIBUTE_12,
         P_ATTRIBUTE_13      => P_ATTRIBUTE_13,
         P_ATTRIBUTE_14      => P_ATTRIBUTE_14,
         P_ATTRIBUTE_15      => P_ATTRIBUTE_15,
         P_ATTRIBUTE_16      => P_ATTRIBUTE_16,
         P_ATTRIBUTE_17      => P_ATTRIBUTE_17,
         P_ATTRIBUTE_18      => P_ATTRIBUTE_18,
         P_ATTRIBUTE_19      => P_ATTRIBUTE_19,
         P_ATTRIBUTE_20      => P_ATTRIBUTE_20,
         P_ATTRIBUTE_21      => P_ATTRIBUTE_21,
         P_ATTRIBUTE_22      => P_ATTRIBUTE_22,
         P_ATTRIBUTE_23      => P_ATTRIBUTE_23,
         P_ATTRIBUTE_24      => P_ATTRIBUTE_24,
         P_ATTRIBUTE_25      => P_ATTRIBUTE_25 );
 
 END CREATE_REGION_PLUGIN_PAGE;
 
 
 
 
 PROCEDURE CREATE_REGION_PLUGIN (
     P_ID                          IN NUMBER                         DEFAULT NULL,
     P_APPLICATION_ID              IN NUMBER,
     P_PAGE_ID                     IN NUMBER,
     P_TITLE                       IN VARCHAR2,                      
     P_PARENT_REGION_ID            IN NUMBER                         DEFAULT NULL,
     P_DISPLAY_POINT               IN VARCHAR2                       DEFAULT 'BODY',
     P_DISPLAY_SEQUENCE            IN NUMBER                         DEFAULT 10,
     P_TEMPLATE_ID                 IN NUMBER                         DEFAULT NULL,
     P_REGION_TEMPLATE_OPTIONS     IN VARCHAR2                       DEFAULT NULL,
     P_COMPONENT_TEMPLATE_OPTIONS  IN VARCHAR2                       DEFAULT NULL,
     P_TYPE                        IN VARCHAR2,
     
     P_LOCATION                    IN WWV_FLOW_EXEC_API.T_LOCATION   DEFAULT WWV_FLOW_EXEC_API.C_LOCATION_LOCAL_DB,
     P_SOURCE_TYPE                 IN WWV_FLOW_EXEC_API.T_QUERY_TYPE DEFAULT WWV_FLOW_EXEC_API.C_QUERY_TYPE_SQL_QUERY,
     P_REMOTE_SERVER_ID            IN NUMBER                         DEFAULT NULL,
     P_TABLE_OWNER                 IN VARCHAR2                       DEFAULT NULL,
     P_TABLE_NAME                  IN VARCHAR2                       DEFAULT NULL,
     P_SOURCE                      IN VARCHAR2                       DEFAULT NULL,
     P_COLUMN_NAMES                IN VARCHAR2                       DEFAULT NULL,
     P_WEB_SRC_MODULE_ID           IN NUMBER                         DEFAULT NULL,
     
     P_AJAX_ITEMS_TO_SUBMIT        IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_01                IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_02                IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_03                IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_04                IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_05                IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_06                IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_07                IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_08                IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_09                IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_10                IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_11                IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_12                IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_13                IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_14                IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_15                IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_16                IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_17                IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_18                IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_19                IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_20                IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_21                IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_22                IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_23                IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_24                IN VARCHAR2                       DEFAULT NULL,
     P_ATTRIBUTE_25                IN VARCHAR2                       DEFAULT NULL,
     P_CONDITION_TYPE              IN VARCHAR2                       DEFAULT NULL,
     P_CONDITION_EXPR              IN VARCHAR2                       DEFAULT NULL,
     P_CONDITION_EXPR2             IN VARCHAR2                       DEFAULT NULL )
 IS
     L_REGION_ID               NUMBER := P_ID;
     L_TEMPLATE_ID             NUMBER := P_TEMPLATE_ID;
     L_REGION_TEMPLATE_OPTIONS WWV_FLOW_PAGE_PLUGS.REGION_TEMPLATE_OPTIONS%TYPE := P_REGION_TEMPLATE_OPTIONS;
     L_ATTRIBUTE_01            WWV_FLOW_PAGE_PLUGS.ATTRIBUTE_01%TYPE := P_ATTRIBUTE_01;
     L_ATTRIBUTE_02            WWV_FLOW_PAGE_PLUGS.ATTRIBUTE_02%TYPE := P_ATTRIBUTE_02;
     L_ATTRIBUTE_03            WWV_FLOW_PAGE_PLUGS.ATTRIBUTE_03%TYPE := P_ATTRIBUTE_03;
     L_ATTRIBUTE_04            WWV_FLOW_PAGE_PLUGS.ATTRIBUTE_04%TYPE := P_ATTRIBUTE_04;
     L_ATTRIBUTE_05            WWV_FLOW_PAGE_PLUGS.ATTRIBUTE_05%TYPE := P_ATTRIBUTE_05;
     L_ATTRIBUTE_06            WWV_FLOW_PAGE_PLUGS.ATTRIBUTE_06%TYPE := P_ATTRIBUTE_06;
     L_ATTRIBUTE_07            WWV_FLOW_PAGE_PLUGS.ATTRIBUTE_07%TYPE := P_ATTRIBUTE_07;
     L_ATTRIBUTE_08            WWV_FLOW_PAGE_PLUGS.ATTRIBUTE_08%TYPE := P_ATTRIBUTE_08;
     L_ATTRIBUTE_09            WWV_FLOW_PAGE_PLUGS.ATTRIBUTE_09%TYPE := P_ATTRIBUTE_09;
     L_ATTRIBUTE_10            WWV_FLOW_PAGE_PLUGS.ATTRIBUTE_10%TYPE := P_ATTRIBUTE_10;
     L_ATTRIBUTE_11            WWV_FLOW_PAGE_PLUGS.ATTRIBUTE_11%TYPE := P_ATTRIBUTE_11;
     L_ATTRIBUTE_12            WWV_FLOW_PAGE_PLUGS.ATTRIBUTE_12%TYPE := P_ATTRIBUTE_12;
     L_ATTRIBUTE_13            WWV_FLOW_PAGE_PLUGS.ATTRIBUTE_13%TYPE := P_ATTRIBUTE_13;
     L_ATTRIBUTE_14            WWV_FLOW_PAGE_PLUGS.ATTRIBUTE_14%TYPE := P_ATTRIBUTE_14;
     L_ATTRIBUTE_15            WWV_FLOW_PAGE_PLUGS.ATTRIBUTE_15%TYPE := P_ATTRIBUTE_15;
     L_ATTRIBUTE_16            WWV_FLOW_PAGE_PLUGS.ATTRIBUTE_16%TYPE := P_ATTRIBUTE_16;
     L_ATTRIBUTE_17            WWV_FLOW_PAGE_PLUGS.ATTRIBUTE_17%TYPE := P_ATTRIBUTE_17;
     L_ATTRIBUTE_18            WWV_FLOW_PAGE_PLUGS.ATTRIBUTE_18%TYPE := P_ATTRIBUTE_18;
     L_ATTRIBUTE_19            WWV_FLOW_PAGE_PLUGS.ATTRIBUTE_19%TYPE := P_ATTRIBUTE_19;
     L_ATTRIBUTE_20            WWV_FLOW_PAGE_PLUGS.ATTRIBUTE_20%TYPE := P_ATTRIBUTE_20;
     L_ATTRIBUTE_21            WWV_FLOW_PAGE_PLUGS.ATTRIBUTE_21%TYPE := P_ATTRIBUTE_21;
     L_ATTRIBUTE_22            WWV_FLOW_PAGE_PLUGS.ATTRIBUTE_22%TYPE := P_ATTRIBUTE_22;
     L_ATTRIBUTE_23            WWV_FLOW_PAGE_PLUGS.ATTRIBUTE_23%TYPE := P_ATTRIBUTE_23;
     L_ATTRIBUTE_24            WWV_FLOW_PAGE_PLUGS.ATTRIBUTE_24%TYPE := P_ATTRIBUTE_24;
     L_ATTRIBUTE_25            WWV_FLOW_PAGE_PLUGS.ATTRIBUTE_25%TYPE := P_ATTRIBUTE_25;
 
     L_TABLE_OWNER             WWV_FLOW_GLOBAL.T_DBMS_ID             := P_TABLE_OWNER;
 BEGIN           
     
     WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
         P_FLOW_ID           => P_APPLICATION_ID,
         P_USER_INTERFACE_ID => WWV_FLOW_PAGE_DEV.GET_USER_INTERFACE_ID (
                                    P_APPLICATION_ID => P_APPLICATION_ID,
                                    P_PAGE_ID        => P_PAGE_ID ) );
 
     IF L_REGION_ID IS NULL THEN
         L_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
     END IF;
 
     IF L_TEMPLATE_ID IS NULL THEN
         L_TEMPLATE_ID := WWV_FLOW_THEME_GLOBALS.G_DEFAULT_REGION_TEMPLATE;
     END IF;
 
     IF L_REGION_TEMPLATE_OPTIONS IS NULL THEN
         L_REGION_TEMPLATE_OPTIONS := GET_PRESET_TEMPLATE_OPTIONS( L_TEMPLATE_ID, 'REGION' );
     END IF;
 
     
     IF P_LOCATION    = WWV_FLOW_EXEC_API.C_LOCATION_LOCAL_DB AND 
        P_TABLE_OWNER = WWV_FLOW_SECURITY.FLOW_OWNER( P_FLOW_ID           => P_APPLICATION_ID, 
                                                      P_SECURITY_GROUP_ID => WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID )
     THEN
         L_TABLE_OWNER := NULL;
     END IF;
 
     
     WWV_FLOW_PLUGIN_DEV.SET_DEFAULTS (
         P_APPLICATION_ID => P_APPLICATION_ID,
         P_PLUGIN_TYPE    => WWV_FLOW_PLUGIN.C_PLUGIN_TYPE_REGION_TYPE,
         P_PLUGIN_NAME    => P_TYPE,
         P_ATTRIBUTE_01   => L_ATTRIBUTE_01,
         P_ATTRIBUTE_02   => L_ATTRIBUTE_02,
         P_ATTRIBUTE_03   => L_ATTRIBUTE_03,
         P_ATTRIBUTE_04   => L_ATTRIBUTE_04,
         P_ATTRIBUTE_05   => L_ATTRIBUTE_05,
         P_ATTRIBUTE_06   => L_ATTRIBUTE_06,
         P_ATTRIBUTE_07   => L_ATTRIBUTE_07,
         P_ATTRIBUTE_08   => L_ATTRIBUTE_08,
         P_ATTRIBUTE_09   => L_ATTRIBUTE_09,
         P_ATTRIBUTE_10   => L_ATTRIBUTE_10,
         P_ATTRIBUTE_11   => L_ATTRIBUTE_11,
         P_ATTRIBUTE_12   => L_ATTRIBUTE_12,
         P_ATTRIBUTE_13   => L_ATTRIBUTE_13,
         P_ATTRIBUTE_14   => L_ATTRIBUTE_14,
         P_ATTRIBUTE_15   => L_ATTRIBUTE_15,
         P_ATTRIBUTE_16   => L_ATTRIBUTE_16,
         P_ATTRIBUTE_17   => L_ATTRIBUTE_17,
         P_ATTRIBUTE_18   => L_ATTRIBUTE_18,
         P_ATTRIBUTE_19   => L_ATTRIBUTE_19,
         P_ATTRIBUTE_20   => L_ATTRIBUTE_20,
         P_ATTRIBUTE_21   => L_ATTRIBUTE_21,
         P_ATTRIBUTE_22   => L_ATTRIBUTE_22,
         P_ATTRIBUTE_23   => L_ATTRIBUTE_23,
         P_ATTRIBUTE_24   => L_ATTRIBUTE_24,
         P_ATTRIBUTE_25   => L_ATTRIBUTE_25 );
 
     
     WWV_FLOW_API.CREATE_PAGE_PLUG (
         P_ID                          => L_REGION_ID,
         P_FLOW_ID                     => P_APPLICATION_ID,
         P_PAGE_ID                     => P_PAGE_ID,
         P_PLUG_NAME                   => P_TITLE,
         P_PLUG_TEMPLATE               => L_TEMPLATE_ID,
         P_REGION_TEMPLATE_OPTIONS     => L_REGION_TEMPLATE_OPTIONS,
         P_COMPONENT_TEMPLATE_OPTIONS  => P_COMPONENT_TEMPLATE_OPTIONS,
         P_PLUG_DISPLAY_SEQUENCE       => P_DISPLAY_SEQUENCE,
         P_PLUG_DISPLAY_POINT          => P_DISPLAY_POINT,
         P_PARENT_PLUG_ID              => P_PARENT_REGION_ID,
         P_PLUG_ITEM_DISPLAY_POINT     => 'ABOVE',
         P_PLUG_SOURCE_TYPE            => P_TYPE,
         
         P_LOCATION                    => P_LOCATION,
         P_REMOTE_SERVER_ID            => P_REMOTE_SERVER_ID,
         P_QUERY_TYPE                  => P_SOURCE_TYPE,
         P_QUERY_OWNER                 => L_TABLE_OWNER,
         P_QUERY_TABLE                 => P_TABLE_NAME,
         P_PLUG_SOURCE                 => P_SOURCE,
         P_WEB_SRC_MODULE_ID           => P_WEB_SRC_MODULE_ID,
         
         P_AJAX_ITEMS_TO_SUBMIT        => P_AJAX_ITEMS_TO_SUBMIT,
         P_PLUG_QUERY_HEADINGS_TYPE    => 'COLON_DELMITED_LIST',
         P_PLUG_QUERY_NUM_ROWS         => 15,
         P_ESCAPE_ON_HTTP_OUTPUT       => 'Y',
         P_PLUG_DISPLAY_CONDITION_TYPE => P_CONDITION_TYPE,
         P_PLUG_DISPLAY_WHEN_CONDITION => P_CONDITION_EXPR,
         P_PLUG_DISPLAY_WHEN_COND2     => P_CONDITION_EXPR2,
         P_ATTRIBUTE_01                => L_ATTRIBUTE_01,
         P_ATTRIBUTE_02                => L_ATTRIBUTE_02,
         P_ATTRIBUTE_03                => L_ATTRIBUTE_03,
         P_ATTRIBUTE_04                => L_ATTRIBUTE_04,
         P_ATTRIBUTE_05                => L_ATTRIBUTE_05,
         P_ATTRIBUTE_06                => L_ATTRIBUTE_06,
         P_ATTRIBUTE_07                => L_ATTRIBUTE_07,
         P_ATTRIBUTE_08                => L_ATTRIBUTE_08,
         P_ATTRIBUTE_09                => L_ATTRIBUTE_09,
         P_ATTRIBUTE_10                => L_ATTRIBUTE_10,
         P_ATTRIBUTE_11                => L_ATTRIBUTE_11,
         P_ATTRIBUTE_12                => L_ATTRIBUTE_12,
         P_ATTRIBUTE_13                => L_ATTRIBUTE_13,
         P_ATTRIBUTE_14                => L_ATTRIBUTE_14,
         P_ATTRIBUTE_15                => L_ATTRIBUTE_15,
         P_ATTRIBUTE_16                => L_ATTRIBUTE_16,
         P_ATTRIBUTE_17                => L_ATTRIBUTE_17,
         P_ATTRIBUTE_18                => L_ATTRIBUTE_18,
         P_ATTRIBUTE_19                => L_ATTRIBUTE_19,
         P_ATTRIBUTE_20                => L_ATTRIBUTE_20,
         P_ATTRIBUTE_21                => L_ATTRIBUTE_21,
         P_ATTRIBUTE_22                => L_ATTRIBUTE_22,
         P_ATTRIBUTE_23                => L_ATTRIBUTE_23,
         P_ATTRIBUTE_24                => L_ATTRIBUTE_24,
         P_ATTRIBUTE_25                => L_ATTRIBUTE_25 );
 
     CREATE_REGION_COLUMNS (
         P_APPLICATION_ID    => P_APPLICATION_ID,
         P_PAGE_ID           => P_PAGE_ID,
         P_REGION_ID         => L_REGION_ID,
         P_REGION_TYPE       => P_TYPE,
         P_REGION_SQL        => P_SOURCE,
         P_COLUMN_NAMES      => P_COLUMN_NAMES,
         
         P_LOCATION          => P_LOCATION,
         P_SOURCE_TYPE       => P_SOURCE_TYPE,
         P_REMOTE_SERVER_ID  => P_REMOTE_SERVER_ID,
         P_TABLE_OWNER       => L_TABLE_OWNER,
         P_TABLE_NAME        => P_TABLE_NAME,
         P_WEB_SRC_MODULE_ID => P_WEB_SRC_MODULE_ID );
 
 END CREATE_REGION_PLUGIN;
 
 
 
 
 
 PROCEDURE CREATE_REGION_COLUMNS (
     P_APPLICATION_ID           IN NUMBER,
     P_PAGE_ID                  IN NUMBER,
     P_REGION_ID                IN NUMBER,
     P_REGION_TYPE              IN VARCHAR2,
     
     P_LOCATION                 IN WWV_FLOW_EXEC_API.T_LOCATION   DEFAULT WWV_FLOW_EXEC_API.C_LOCATION_LOCAL_DB,
     P_SOURCE_TYPE              IN WWV_FLOW_EXEC_API.T_QUERY_TYPE DEFAULT WWV_FLOW_EXEC_API.C_QUERY_TYPE_SQL_QUERY,
     P_REMOTE_SERVER_ID         IN NUMBER                         DEFAULT NULL,
     P_TABLE_OWNER              IN VARCHAR2                       DEFAULT NULL,
     P_TABLE_NAME               IN VARCHAR2                       DEFAULT NULL,
     P_REGION_SQL               IN VARCHAR2                       DEFAULT NULL,
     P_COLUMN_NAMES             IN VARCHAR2                       DEFAULT NULL,
     P_WEB_SRC_MODULE_ID        IN NUMBER                         DEFAULT NULL )
 IS
     L_HAS_HEADING           BOOLEAN;
     L_HAS_HEADING_ALIGNMENT BOOLEAN;
     L_HAS_VALUE_ALIGNMENT   BOOLEAN;
     L_DATA_TYPE             WWV_FLOW_EXEC_API.T_DATA_TYPE;
     L_IS_VISIBLE            BOOLEAN;
     L_DISPLAY_SEQUENCE      NUMBER := 0;
     L_HEADING               WWV_FLOW_REGION_COLUMNS.HEADING%TYPE;
     L_HEADING_ALIGNMENT     WWV_FLOW_REGION_COLUMNS.HEADING_ALIGNMENT%TYPE;
     L_VALUE_ALIGNMENT       WWV_FLOW_REGION_COLUMNS.VALUE_ALIGNMENT%TYPE;
     L_COLUMN_ATTRIBUTE_01   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_01%TYPE;
     L_COLUMN_ATTRIBUTE_02   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_02%TYPE;
     L_COLUMN_ATTRIBUTE_03   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_03%TYPE;
     L_COLUMN_ATTRIBUTE_04   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_04%TYPE;
     L_COLUMN_ATTRIBUTE_05   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_05%TYPE;
     L_COLUMN_ATTRIBUTE_06   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_06%TYPE;
     L_COLUMN_ATTRIBUTE_07   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_07%TYPE;
     L_COLUMN_ATTRIBUTE_08   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_08%TYPE;
     L_COLUMN_ATTRIBUTE_09   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_09%TYPE;
     L_COLUMN_ATTRIBUTE_10   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_10%TYPE;
     L_COLUMN_ATTRIBUTE_11   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_11%TYPE;
     L_COLUMN_ATTRIBUTE_12   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_12%TYPE;
     L_COLUMN_ATTRIBUTE_13   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_13%TYPE;
     L_COLUMN_ATTRIBUTE_14   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_14%TYPE;
     L_COLUMN_ATTRIBUTE_15   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_15%TYPE;
     L_COLUMN_ATTRIBUTE_16   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_16%TYPE;
     L_COLUMN_ATTRIBUTE_17   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_17%TYPE;
     L_COLUMN_ATTRIBUTE_18   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_18%TYPE;
     L_COLUMN_ATTRIBUTE_19   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_19%TYPE;
     L_COLUMN_ATTRIBUTE_20   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_20%TYPE;
     L_COLUMN_ATTRIBUTE_21   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_21%TYPE;
     L_COLUMN_ATTRIBUTE_22   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_22%TYPE;
     L_COLUMN_ATTRIBUTE_23   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_23%TYPE;
     L_COLUMN_ATTRIBUTE_24   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_24%TYPE;
     L_COLUMN_ATTRIBUTE_25   WWV_FLOW_REGION_COLUMNS.ATTRIBUTE_25%TYPE;
 
     L_COLUMNS               WWV_FLOW_EXEC_API.T_COLUMNS;
     L_COLUMN_NAMES          WWV_FLOW_T_VARCHAR2;
     L_DESCR_RESULT          WWV_FLOW_EXEC_DEV.T_DESCRIBE_RESULT;
 
     FUNCTION HAS_PLUGIN_STD_ATTRIBUTE (
         P_FEATURE IN VARCHAR2 )
         RETURN BOOLEAN
     IS
     BEGIN
         RETURN WWV_FLOW_PLUGIN_DEV.HAS_STANDARD_ATTRIBUTE (
                    P_APPLICATION_ID => P_APPLICATION_ID,
                    P_PLUGIN_TYPE    => WWV_FLOW_PLUGIN.C_PLUGIN_TYPE_REGION_TYPE,
                    P_PLUGIN_NAME    => P_REGION_TYPE,
                    P_FEATURE        => P_FEATURE );
     END HAS_PLUGIN_STD_ATTRIBUTE;
 BEGIN
     IF NOT HAS_PLUGIN_STD_ATTRIBUTE( 'COLUMNS' ) THEN
         RETURN;
     END IF;
 
     L_HAS_HEADING           := HAS_PLUGIN_STD_ATTRIBUTE( 'COLUMN_HEADING' );
     L_HAS_HEADING_ALIGNMENT := HAS_PLUGIN_STD_ATTRIBUTE( 'HEADING_ALIGNMENT' );
     L_HAS_VALUE_ALIGNMENT   := HAS_PLUGIN_STD_ATTRIBUTE( 'VALUE_ALIGNMENT' );
 
     
     WWV_FLOW_PLUGIN_DEV.SET_DEFAULTS (
         P_APPLICATION_ID  => P_APPLICATION_ID,
         P_PLUGIN_TYPE     => WWV_FLOW_PLUGIN.C_PLUGIN_TYPE_REGION_TYPE,
         P_PLUGIN_NAME     => P_REGION_TYPE,
         P_ATTRIBUTE_SCOPE => 'COLUMN',
         P_ATTRIBUTE_01    => L_COLUMN_ATTRIBUTE_01,
         P_ATTRIBUTE_02    => L_COLUMN_ATTRIBUTE_02,
         P_ATTRIBUTE_03    => L_COLUMN_ATTRIBUTE_03,
         P_ATTRIBUTE_04    => L_COLUMN_ATTRIBUTE_04,
         P_ATTRIBUTE_05    => L_COLUMN_ATTRIBUTE_05,
         P_ATTRIBUTE_06    => L_COLUMN_ATTRIBUTE_06,
         P_ATTRIBUTE_07    => L_COLUMN_ATTRIBUTE_07,
         P_ATTRIBUTE_08    => L_COLUMN_ATTRIBUTE_08,
         P_ATTRIBUTE_09    => L_COLUMN_ATTRIBUTE_09,
         P_ATTRIBUTE_10    => L_COLUMN_ATTRIBUTE_10,
         P_ATTRIBUTE_11    => L_COLUMN_ATTRIBUTE_11,
         P_ATTRIBUTE_12    => L_COLUMN_ATTRIBUTE_12,
         P_ATTRIBUTE_13    => L_COLUMN_ATTRIBUTE_13,
         P_ATTRIBUTE_14    => L_COLUMN_ATTRIBUTE_14,
         P_ATTRIBUTE_15    => L_COLUMN_ATTRIBUTE_15,
         P_ATTRIBUTE_16    => L_COLUMN_ATTRIBUTE_16,
         P_ATTRIBUTE_17    => L_COLUMN_ATTRIBUTE_17,
         P_ATTRIBUTE_18    => L_COLUMN_ATTRIBUTE_18,
         P_ATTRIBUTE_19    => L_COLUMN_ATTRIBUTE_19,
         P_ATTRIBUTE_20    => L_COLUMN_ATTRIBUTE_20,
         P_ATTRIBUTE_21    => L_COLUMN_ATTRIBUTE_21,
         P_ATTRIBUTE_22    => L_COLUMN_ATTRIBUTE_22,
         P_ATTRIBUTE_23    => L_COLUMN_ATTRIBUTE_23,
         P_ATTRIBUTE_24    => L_COLUMN_ATTRIBUTE_24,
         P_ATTRIBUTE_25    => L_COLUMN_ATTRIBUTE_25 );
 
     
     IF P_COLUMN_NAMES IS NOT NULL THEN
         L_COLUMN_NAMES := WWV_FLOW_STRING.SPLIT( P_COLUMN_NAMES, ':' );
         FOR C IN 1 .. L_COLUMN_NAMES.COUNT LOOP
             L_COLUMNS( L_COLUMNS.COUNT + 1 ).NAME := L_COLUMN_NAMES( C );
         END LOOP;
     END IF;
     L_DESCR_RESULT := WWV_FLOW_EXEC_DEV.CHECK_AND_DESCRIBE(
                      P_LOCATION            => P_LOCATION,
                      P_QUERY_TYPE          => P_SOURCE_TYPE,
                      P_REMOTE_SERVER_ID    => P_REMOTE_SERVER_ID,
                      P_OWNER               => P_TABLE_OWNER,
                      P_TABLE_NAME          => P_TABLE_NAME,
                      P_SQL_QUERY           => P_REGION_SQL,
                      P_COLUMNS             => L_COLUMNS,
                      P_PLSQL_FUNCTION_BODY => P_REGION_SQL,
                      P_WEB_SRC_MODULE_ID   => P_WEB_SRC_MODULE_ID,
                      P_APPLICATION_ID      => P_APPLICATION_ID );
 
     FOR I IN 1 .. L_DESCR_RESULT.QUERY_COLUMNS.COUNT LOOP
         L_DATA_TYPE := L_DESCR_RESULT.QUERY_COLUMNS( I ).DATA_TYPE;
 
         
         
         
         IF NOT ( L_DATA_TYPE = WWV_FLOW_EXEC_API.C_DATA_TYPE_ROWID AND I = 1 ) THEN
             L_IS_VISIBLE       := ( L_DATA_TYPE <> WWV_FLOW_EXEC_API.C_DATA_TYPE_ROWID );
             L_DISPLAY_SEQUENCE := L_DISPLAY_SEQUENCE + 10;
 
             
             IF L_HAS_HEADING AND L_IS_VISIBLE THEN
                 L_HEADING := INITCAP( REPLACE( L_DESCR_RESULT.QUERY_COLUMNS( I ).NAME, '_', ' ' ));
             ELSE
                 L_HEADING := NULL;
             END IF;
 
             IF L_HAS_VALUE_ALIGNMENT AND L_IS_VISIBLE THEN
                 IF L_DATA_TYPE IN ( WWV_FLOW_EXEC_API.C_DATA_TYPE_DATE, 
                                     WWV_FLOW_EXEC_API.C_DATA_TYPE_TIMESTAMP,
                                     WWV_FLOW_EXEC_API.C_DATA_TYPE_TIMESTAMP_TZ,
                                     WWV_FLOW_EXEC_API.C_DATA_TYPE_TIMESTAMP_LTZ ) 
                 THEN
                     L_VALUE_ALIGNMENT := 'CENTER';
                     L_HEADING_ALIGNMENT := 'CENTER';
                 ELSIF L_DATA_TYPE = WWV_FLOW_EXEC_API.C_DATA_TYPE_NUMBER THEN
                     L_VALUE_ALIGNMENT := 'RIGHT';
                     L_HEADING_ALIGNMENT := 'RIGHT';
                 ELSE
                     L_VALUE_ALIGNMENT := 'LEFT';
                     L_HEADING_ALIGNMENT := 'LEFT';
                 END IF;
             ELSE
                 L_VALUE_ALIGNMENT := NULL;
                 L_HEADING_ALIGNMENT := NULL;
             END IF;
 
             WWV_FLOW_API.CREATE_REGION_COLUMN(
                 P_FLOW_ID               => P_APPLICATION_ID,
                 P_PAGE_ID               => P_PAGE_ID,
                 P_REGION_ID             => P_REGION_ID,
                 P_NAME                  => L_DESCR_RESULT.QUERY_COLUMNS( I ).NAME,
                 P_DATA_TYPE             => WWV_FLOW_EXEC_API.GET_DATA_TYPE_VC2_PLUGIN( L_DATA_TYPE ),
                 P_IS_VISIBLE            => L_IS_VISIBLE,
                 P_DISPLAY_SEQUENCE      => L_DISPLAY_SEQUENCE,
                 P_HEADING               => L_HEADING,
                 P_HEADING_ALIGNMENT     => L_HEADING_ALIGNMENT,
                 P_VALUE_ALIGNMENT       => L_VALUE_ALIGNMENT,
                 P_ESCAPE_ON_HTTP_OUTPUT => TRUE,
                 
                 P_ATTRIBUTE_01          => L_COLUMN_ATTRIBUTE_01,
                 P_ATTRIBUTE_02          => L_COLUMN_ATTRIBUTE_02,
                 P_ATTRIBUTE_03          => L_COLUMN_ATTRIBUTE_03,
                 P_ATTRIBUTE_04          => L_COLUMN_ATTRIBUTE_04,
                 P_ATTRIBUTE_05          => L_COLUMN_ATTRIBUTE_05,
                 P_ATTRIBUTE_06          => L_COLUMN_ATTRIBUTE_06,
                 P_ATTRIBUTE_07          => L_COLUMN_ATTRIBUTE_07,
                 P_ATTRIBUTE_08          => L_COLUMN_ATTRIBUTE_08,
                 P_ATTRIBUTE_09          => L_COLUMN_ATTRIBUTE_09,
                 P_ATTRIBUTE_10          => L_COLUMN_ATTRIBUTE_10,
                 P_ATTRIBUTE_11          => L_COLUMN_ATTRIBUTE_11,
                 P_ATTRIBUTE_12          => L_COLUMN_ATTRIBUTE_12,
                 P_ATTRIBUTE_13          => L_COLUMN_ATTRIBUTE_13,
                 P_ATTRIBUTE_14          => L_COLUMN_ATTRIBUTE_14,
                 P_ATTRIBUTE_15          => L_COLUMN_ATTRIBUTE_15,
                 P_ATTRIBUTE_16          => L_COLUMN_ATTRIBUTE_16,
                 P_ATTRIBUTE_17          => L_COLUMN_ATTRIBUTE_17,
                 P_ATTRIBUTE_18          => L_COLUMN_ATTRIBUTE_18,
                 P_ATTRIBUTE_19          => L_COLUMN_ATTRIBUTE_19,
                 P_ATTRIBUTE_20          => L_COLUMN_ATTRIBUTE_20,
                 P_ATTRIBUTE_21          => L_COLUMN_ATTRIBUTE_21,
                 P_ATTRIBUTE_22          => L_COLUMN_ATTRIBUTE_22,
                 P_ATTRIBUTE_23          => L_COLUMN_ATTRIBUTE_23,
                 P_ATTRIBUTE_24          => L_COLUMN_ATTRIBUTE_24,
                 P_ATTRIBUTE_25          => L_COLUMN_ATTRIBUTE_25 );
         END IF;
 
     END LOOP;
 
 END CREATE_REGION_COLUMNS;
 
 
 PROCEDURE CREATE_NAMED_LOV (
     P_ID      IN OUT NUMBER,
     P_FLOW_ID IN     NUMBER,
     P_NAME    IN     VARCHAR2,
     P_QUERY   IN     VARCHAR2 )
 IS
     TYPE T_LOV_DATA IS REF CURSOR;
 
     L_ROW           VARCHAR(32767);
     L_COL           VARCHAR(32767);
     L_LOV_QUERY     VARCHAR2(32767);
     L_LOV_DATA      T_LOV_DATA;
     L_SEQ           NUMBER := 0;
     L_DISPLAY_VALUE VARCHAR2(32767);
     L_RETURN_VALUE  VARCHAR2(32767);
 BEGIN
     IF P_ID IS NULL THEN
         P_ID := WWV_FLOW_ID.NEXT_VAL;
     END IF;
 
     IF SUBSTR(P_QUERY, 1, 6) = 'STATIC' THEN
         
         L_LOV_QUERY := '.'||TO_CHAR(P_ID)||'.';
     ELSE
         
         L_LOV_QUERY := P_QUERY;
     END IF;
 
     
     UPDATE WWV_FLOW_LISTS_OF_VALUES$
        SET LOV_QUERY         = L_LOV_QUERY
      WHERE ID                = P_ID
        AND FLOW_ID           = P_FLOW_ID
        AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
 
     
     IF SQL%ROWCOUNT = 0 THEN
         WWV_FLOW_API.CREATE_LIST_OF_VALUES (
             P_ID        => P_ID,
             P_FLOW_ID   => P_FLOW_ID,
             P_LOV_NAME  => UPPER(P_NAME),
             P_LOV_QUERY => L_LOV_QUERY );
     ELSE
         
         DELETE FROM WWV_FLOW_LIST_OF_VALUES_DATA
          WHERE LOV_ID = P_ID
            AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
     END IF;
 
     
     IF SUBSTR(P_QUERY, 1, 6) = 'STATIC' THEN
         IF SUBSTR(REPLACE(LTRIM(REPLACE(P_QUERY, 'STATIC2', 'STATIC'), 'STATIC'), ' ', ''), 1, 1) = '(' THEN
             WWV_FLOW_UTILITIES.GET_LOV_DELIMITERS(P_QUERY, L_ROW, L_COL);
         END IF;
         
         L_LOV_QUERY := WWV_FLOW_UTILITIES.GET_TEMP_LOV_QUERY (
                            P_DISPLAY_VALUES => SUBSTR(P_QUERY, INSTR(P_QUERY, ':') + 1),
                            P_RETURN_VALUES  => NVL(L_ROW, ','),
                            P_DELIMITER      => NVL(L_COL, ';'),
                            P_ORDER_BY       => CASE
                                                  WHEN SUBSTR(P_QUERY, 7, 1) = '2' THEN 'SEQ'
                                                  ELSE                                  'DISPLAY'
                                                END );
 
         OPEN L_LOV_DATA FOR WWV_FLOW_ASSERT.SQL_QUERY_START(L_LOV_QUERY);
         LOOP
             FETCH L_LOV_DATA INTO L_DISPLAY_VALUE, L_RETURN_VALUE;
             EXIT WHEN L_LOV_DATA%NOTFOUND;  
 
             L_SEQ := L_SEQ + 10;
             WWV_FLOW_API.CREATE_STATIC_LOV_DATA (
                 P_ID                => WWV_FLOW_ID.NEXT_VAL,
                 P_LOV_ID            => P_ID,
                 P_LOV_DISP_SEQUENCE => L_SEQ,
                 P_LOV_DISP_VALUE    => L_DISPLAY_VALUE,
                 P_LOV_RETURN_VALUE  => L_RETURN_VALUE );
         END LOOP;
         CLOSE L_LOV_DATA;
     END IF;
 END CREATE_NAMED_LOV;
 
 PROCEDURE COPY_NAMED_LOV (
     P_LOV_ID_FROM         IN NUMBER,
     P_LOV_NAME_TO         IN VARCHAR2,
     P_COPY_FROM_FLOW_ID   IN NUMBER DEFAULT NULL,
     P_FLOW_ID             IN NUMBER DEFAULT NULL,
     P_LOV_ID_TO           IN NUMBER DEFAULT NULL)
 IS
     L_ROWCNT      INT := 0;
     L_ID          NUMBER;
     L_LOV_ID_TO   NUMBER;
 
     L_COPY_FROM_FLOW_ID  NUMBER;
     L_FLOW_ID            NUMBER;
 
     L_LOV         VARCHAR2(4000);
     L_LOV_TYPE    NUMBER := 0;
 BEGIN
 
     WWV_FLOW.DEBUG(' LOV id=  '||P_LOV_ID_FROM||'  lov name '||P_LOV_NAME_TO||'  '||P_COPY_FROM_FLOW_ID||'  '||P_FLOW_ID||'  '||P_LOV_ID_TO);
     BEGIN
         L_ID := P_LOV_ID_FROM;
     EXCEPTION WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR (-20001,WWV_FLOW_LANG.SYSTEM_MESSAGE('copy_named_lov.numeric_err',P_LOV_ID_FROM));
     END;
 
     L_LOV_ID_TO := P_LOV_ID_TO;
     IF L_LOV_ID_TO IS NULL THEN
         L_LOV_ID_TO := WWV_FLOW_ID.NEXT_VAL;
     END IF;
 
     L_COPY_FROM_FLOW_ID := NVL(P_COPY_FROM_FLOW_ID,WWV_FLOW.G_FLOW_ID);
     L_FLOW_ID := NVL(P_FLOW_ID,WWV_FLOW.G_FLOW_ID);
 
     FOR C1 IN (SELECT *
                  FROM WWV_FLOW_LISTS_OF_VALUES$
                 WHERE ID = L_ID
                   AND FLOW_ID = L_COPY_FROM_FLOW_ID) LOOP
 
         SELECT COUNT(*) INTO L_LOV_TYPE
           FROM WWV_FLOW_LIST_OF_VALUES_DATA
          WHERE LOV_ID = C1.ID;
 
         IF L_LOV_TYPE = 0 THEN
             L_LOV := C1.LOV_QUERY;
         ELSE
             L_LOV := '.'||L_LOV_ID_TO||'.';
         END IF;
 
         WWV_FLOW_API.CREATE_LIST_OF_VALUES (
             P_ID        => L_LOV_ID_TO,
             P_FLOW_ID   => L_FLOW_ID,
             P_LOV_NAME  => P_LOV_NAME_TO,
             P_LOV_QUERY => L_LOV );
 
         L_ROWCNT := L_ROWCNT + 1;
     END LOOP;
 
     FOR C1 IN (SELECT * FROM  WWV_FLOW_LIST_OF_VALUES_DATA WHERE LOV_ID = L_ID) LOOP
         WWV_FLOW_API.CREATE_STATIC_LOV_DATA (
              P_ID                 => NULL,
              P_LOV_ID             => L_LOV_ID_TO,
              P_LOV_DISP_SEQUENCE  => C1.LOV_DISP_SEQUENCE,
              P_LOV_DISP_VALUE     => C1.LOV_DISP_VALUE,
              P_LOV_RETURN_VALUE   => C1.LOV_RETURN_VALUE,
              P_LOV_DISP_COND_TYPE => C1.LOV_DISP_COND_TYPE,
              P_LOV_DISP_COND      => C1.LOV_DISP_COND,
              P_LOV_DISP_COND2     => C1.LOV_DISP_COND2,
              P_REQUIRED_PATCH     => C1.REQUIRED_PATCH,
              P_LOV_TEMPLATE       => C1.LOV_TEMPLATE);
     END LOOP;
 
     IF L_ROWCNT = 0 THEN
         RAISE_APPLICATION_ERROR (-20001,WWV_FLOW_LANG.SYSTEM_MESSAGE('copy_named_lov.not_found_err',P_LOV_ID_FROM));
     END IF;
 EXCEPTION WHEN OTHERS THEN
     ROLLBACK;
     RAISE_APPLICATION_ERROR (-20001,WWV_FLOW_LANG.SYSTEM_MESSAGE('copy_named_lov.execution_err',SQLERRM));
 END COPY_NAMED_LOV;
 
 PROCEDURE COPY_BUTTON (
     P_BUTTON_ID_FROM         IN NUMBER,
     P_BUTTON_NAME_TO         IN VARCHAR2,
     P_BUTTON_TEXT_TO         IN VARCHAR2,
     P_BUTTON_PAGE_ID_TO      IN NUMBER DEFAULT NULL,
     P_BUTTON_REGION_TO       IN NUMBER DEFAULT NULL,
     P_BUTTON_SEQUENCE_TO     IN NUMBER DEFAULT NULL)
 IS
     L_LAST  VARCHAR2(255);
 BEGIN
     
     
     
     L_LAST := 'WWV_FLOW_STEP_BUTTONS';
     FOR C1 IN (SELECT * FROM WWV_FLOW_STEP_BUTTONS WHERE ID = P_BUTTON_ID_FROM ) LOOP
         INSERT INTO  WWV_FLOW_STEP_BUTTONS (
            ID,
            FLOW_ID,
            FLOW_STEP_ID,
            BUTTON_SEQUENCE,
            BUTTON_PLUG_ID,
            BUTTON_NAME,
            BUTTON_STATIC_ID,
            
            BUTTON_TEMPLATE_ID,
            BUTTON_TEMPLATE_OPTIONS,
            BUTTON_IMAGE,
            BUTTON_IS_HOT,
            BUTTON_IMAGE_ALT,
            BUTTON_POSITION,
            BUTTON_REDIRECT_URL,
            BUTTON_ACTION,
            BUTTON_EXECUTE_VALIDATIONS,
            WARN_ON_UNSAVED_CHANGES,
            BUTTON_CONDITION,
            BUTTON_CONDITION2,
            BUTTON_CONDITION_TYPE,
            BUTTON_IMAGE_ATTRIBUTES,
            REQUIRED_PATCH,
            SECURITY_SCHEME,
            BUTTON_ALIGNMENT,
            BUTTON_CSS_CLASSES,
            ICON_CSS_CLASSES,
            BUTTON_CATTRIBUTES,
            
            BUTTON_COMMENT,
            DATABASE_ACTION,
            REQUEST_SOURCE,
            REQUEST_SOURCE_TYPE,
            PRE_ELEMENT_TEXT,
            POST_ELEMENT_TEXT,
            
            GRID_COLUMN_ATTRIBUTES,
            GRID_COLUMN_CSS_CLASSES,
            GRID_NEW_GRID,
            GRID_NEW_ROW,
            GRID_NEW_COLUMN,
            GRID_COLUMN_SPAN,
            GRID_ROW_SPAN,
            GRID_COLUMN )
         VALUES (
            NULL,
            C1.FLOW_ID,
            NVL(P_BUTTON_PAGE_ID_TO,C1.FLOW_STEP_ID),
            P_BUTTON_SEQUENCE_TO,
            P_BUTTON_REGION_TO,
            P_BUTTON_NAME_TO,
            C1.BUTTON_STATIC_ID,
            
            C1.BUTTON_TEMPLATE_ID,
            C1.BUTTON_TEMPLATE_OPTIONS,
            C1.BUTTON_IMAGE,
            C1.BUTTON_IS_HOT,
            P_BUTTON_TEXT_TO,
            C1.BUTTON_POSITION,
            C1.BUTTON_REDIRECT_URL,
            C1.BUTTON_ACTION,
            C1.BUTTON_EXECUTE_VALIDATIONS,
            C1.WARN_ON_UNSAVED_CHANGES,
            C1.BUTTON_CONDITION,
            C1.BUTTON_CONDITION2,
            C1.BUTTON_CONDITION_TYPE,
            C1.BUTTON_IMAGE_ATTRIBUTES,
            C1.REQUIRED_PATCH,
            C1.SECURITY_SCHEME,
            C1.BUTTON_ALIGNMENT,
            C1.BUTTON_CSS_CLASSES,
            C1.ICON_CSS_CLASSES,
            C1.BUTTON_CATTRIBUTES,
            
            C1.BUTTON_COMMENT,
            C1.DATABASE_ACTION,
            C1.REQUEST_SOURCE,
            C1.REQUEST_SOURCE_TYPE,
            C1.PRE_ELEMENT_TEXT,
            C1.POST_ELEMENT_TEXT,
            
            C1.GRID_COLUMN_ATTRIBUTES,
            C1.GRID_COLUMN_CSS_CLASSES,
            C1.GRID_NEW_GRID,
            C1.GRID_NEW_ROW,
            C1.GRID_NEW_COLUMN,
            C1.GRID_COLUMN_SPAN,
            C1.GRID_ROW_SPAN,
            C1.GRID_COLUMN );
     END LOOP;
 EXCEPTION WHEN OTHERS THEN
     ROLLBACK;
     RAISE_APPLICATION_ERROR (-20001,WWV_FLOW_LANG.SYSTEM_MESSAGE('copy_button.execution_err',L_LAST,SQLERRM));
 END COPY_BUTTON;
 
 PROCEDURE COPY_PAGE_ITEM (
     P_COPY_FROM_ITEM_ID     IN NUMBER,
     P_COPY_TO_ITEM_NAME     IN VARCHAR2,
     P_COPY_TO_ITEM_SEQUENCE IN VARCHAR2,
     P_COPY_TO_PAGE_ID       IN NUMBER DEFAULT NULL,
     P_COPY_TO_ITEM_PLUG     IN VARCHAR2 DEFAULT NULL,
     P_COPY_TO_PROMPT        IN VARCHAR2 DEFAULT NULL,
     P_COPY_TO_SOURCE_TYPE   IN VARCHAR2 DEFAULT NULL,
     P_COPY_TO_SOURCE        IN VARCHAR2 DEFAULT NULL)
 IS
     L_LAST  VARCHAR2(255);
     L_ID    NUMBER;
 BEGIN
     WWV_FLOW_DEBUG.ENTER (
         'copy_page_item',
         'p_copy_from_item_id',     P_COPY_FROM_ITEM_ID,
         'p_copy_to_item_name',     P_COPY_TO_ITEM_NAME,
         'p_copy_to_item_sequence', P_COPY_TO_ITEM_SEQUENCE,
         'p_copy_to_page_id',       P_COPY_TO_PAGE_ID,
         'p_copy_to_item_plug',     P_COPY_TO_ITEM_PLUG,
         'p_copy_to_prompt',        P_COPY_TO_PROMPT,
         'p_copy_to_source_type',   P_COPY_TO_SOURCE_TYPE,
         'p_copy_to_source',        P_COPY_TO_SOURCE );
     
     
     
     L_LAST := 'WWV_FLOW_STEP_ITEMS';
     FOR C1 IN (
         SELECT *
         FROM WWV_FLOW_STEP_ITEMS
         WHERE ID = P_COPY_FROM_ITEM_ID ) LOOP
         INSERT INTO WWV_FLOW_STEP_ITEMS (
             ID,
             FLOW_ID,
             FLOW_STEP_ID,
             NAME,
             NAME_LENGTH,
             DATA_TYPE,
             IS_REQUIRED,
             STANDARD_VALIDATIONS,
             ACCEPT_PROCESSING,
             ITEM_SEQUENCE,
             ITEM_PLUG_ID,
             USE_CACHE_BEFORE_DEFAULT,
             ITEM_DEFAULT,
             ITEM_DEFAULT_TYPE,
             PROMPT,
             PLACEHOLDER,
             PRE_ELEMENT_TEXT,
             POST_ELEMENT_TEXT,
             FORMAT_MASK,
             SOURCE,
             SOURCE_TYPE,
             SOURCE_POST_COMPUTATION,
             DISPLAY_AS,
             NAMED_LOV,
             LOV,
             LOV_COLUMNS,
             LOV_DISPLAY_NULL,
             LOV_NULL_TEXT,
             LOV_NULL_VALUE,
             LOV_TRANSLATED,
             LOV_DISPLAY_EXTRA,
             LOV_CASCADE_PARENT_ITEMS,
             AJAX_ITEMS_TO_SUBMIT,
             AJAX_OPTIMIZE_REFRESH,
             CSIZE,
             CMAXLENGTH,
             CHEIGHT,
             CATTRIBUTES,
             CATTRIBUTES_ELEMENT,
             TAG_CSS_CLASSES,
             ICON_CSS_CLASSES,
             ITEM_CSS_CLASSES,
             ITEM_ICON_CSS_CLASSES,
             TAG_ATTRIBUTES,
             TAG_ATTRIBUTES2,
             NEW_GRID,
             BEGIN_ON_NEW_LINE,
             BEGIN_ON_NEW_FIELD,
             COLSPAN,
             ROWSPAN,
             GRID_COLUMN,
             GRID_LABEL_COLUMN_SPAN,
             GRID_COLUMN_CSS_CLASSES,
             LABEL_ALIGNMENT,
             FIELD_ALIGNMENT,
             DISPLAY_WHEN,
             DISPLAY_WHEN2,
             DISPLAY_WHEN_TYPE,
             WARN_ON_UNSAVED_CHANGES,
             IS_PERSISTENT,
             SECURITY_SCHEME,
             REQUIRED_PATCH,
             ITEM_COMMENT,
             BUTTON_IMAGE,
             BUTTON_IMAGE_ATTR,
             ITEM_FIELD_TEMPLATE,
             READ_ONLY_WHEN,
             READ_ONLY_WHEN2,
             READ_ONLY_WHEN_TYPE,
             READ_ONLY_DISP_ATTR,
             PROTECTION_LEVEL,
             ESCAPE_ON_HTTP_INPUT,
             ESCAPE_ON_HTTP_OUTPUT,
             RESTRICTED_CHARACTERS,
             ENCRYPT_SESSION_STATE_YN,
             PLUGIN_INIT_JAVASCRIPT_CODE,
             ATTRIBUTE_01,
             ATTRIBUTE_02,
             ATTRIBUTE_03,
             ATTRIBUTE_04,
             ATTRIBUTE_05,
             ATTRIBUTE_06,
             ATTRIBUTE_07,
             ATTRIBUTE_08,
             ATTRIBUTE_09,
             ATTRIBUTE_10,
             ATTRIBUTE_11,
             ATTRIBUTE_12,
             ATTRIBUTE_13,
             ATTRIBUTE_14,
             ATTRIBUTE_15,
             INLINE_HELP_TEXT,
             SHOW_QUICK_PICKS,
             QUICK_PICK_LABEL_01,
             QUICK_PICK_VALUE_01,
             QUICK_PICK_LABEL_02,
             QUICK_PICK_VALUE_02,
             QUICK_PICK_LABEL_03,
             QUICK_PICK_VALUE_03,
             QUICK_PICK_LABEL_04,
             QUICK_PICK_VALUE_04,
             QUICK_PICK_LABEL_05,
             QUICK_PICK_VALUE_05,
             QUICK_PICK_LABEL_06,
             QUICK_PICK_VALUE_06,
             QUICK_PICK_LABEL_07,
             QUICK_PICK_VALUE_07,
             QUICK_PICK_LABEL_08,
             QUICK_PICK_VALUE_08,
             QUICK_PICK_LABEL_09,
             QUICK_PICK_VALUE_09,
             QUICK_PICK_LABEL_10,
             QUICK_PICK_VALUE_10,
             QUICK_PICK_LINK_ATTR,
             BUTTON_EXECUTE_VALIDATIONS,
             BUTTON_ACTION,
             BUTTON_REDIRECT_URL,
             BUTTON_IS_HOT )
         VALUES (
             NULL,
             C1.FLOW_ID,
             NVL(P_COPY_TO_PAGE_ID,C1.FLOW_STEP_ID),
             P_COPY_TO_ITEM_NAME,
             C1.NAME_LENGTH,
             C1.DATA_TYPE,
             C1.IS_REQUIRED,
             C1.STANDARD_VALIDATIONS,
             C1.ACCEPT_PROCESSING,
             P_COPY_TO_ITEM_SEQUENCE,
             REPLACE(P_COPY_TO_ITEM_PLUG,'%null%',NULL),
             C1.USE_CACHE_BEFORE_DEFAULT,
             C1.ITEM_DEFAULT,
             C1.ITEM_DEFAULT_TYPE,
             P_COPY_TO_PROMPT,
             C1.PLACEHOLDER,
             C1.PRE_ELEMENT_TEXT,
             C1.POST_ELEMENT_TEXT,
             C1.FORMAT_MASK,
             P_COPY_TO_SOURCE,
             REPLACE(P_COPY_TO_SOURCE_TYPE,'%null%',NULL),
             C1.SOURCE_POST_COMPUTATION,
             C1.DISPLAY_AS,
             C1.NAMED_LOV,
             C1.LOV,
             C1.LOV_COLUMNS,
             C1.LOV_DISPLAY_NULL,
             C1.LOV_NULL_TEXT,
             C1.LOV_NULL_VALUE,
             C1.LOV_TRANSLATED,
             C1.LOV_DISPLAY_EXTRA,
             C1.LOV_CASCADE_PARENT_ITEMS,
             C1.AJAX_ITEMS_TO_SUBMIT,
             C1.AJAX_OPTIMIZE_REFRESH,
             C1.CSIZE,
             C1.CMAXLENGTH,
             C1.CHEIGHT,
             C1.CATTRIBUTES,
             C1.CATTRIBUTES_ELEMENT,
             C1.TAG_CSS_CLASSES,
             C1.ICON_CSS_CLASSES,
             C1.ITEM_CSS_CLASSES,
             C1.ITEM_ICON_CSS_CLASSES,
             C1.TAG_ATTRIBUTES,
             C1.TAG_ATTRIBUTES2,
             C1.NEW_GRID,
             C1.BEGIN_ON_NEW_LINE,
             C1.BEGIN_ON_NEW_FIELD,
             C1.COLSPAN,
             C1.ROWSPAN,
             C1.GRID_COLUMN,
             C1.GRID_LABEL_COLUMN_SPAN,
             C1.GRID_COLUMN_CSS_CLASSES,
             C1.LABEL_ALIGNMENT,
             C1.FIELD_ALIGNMENT,
             C1.DISPLAY_WHEN,
             C1.DISPLAY_WHEN2,
             C1.DISPLAY_WHEN_TYPE,
             C1.WARN_ON_UNSAVED_CHANGES,
             C1.IS_PERSISTENT,
             C1.SECURITY_SCHEME,
             C1.REQUIRED_PATCH,
             C1.ITEM_COMMENT,
             C1.BUTTON_IMAGE,
             C1.BUTTON_IMAGE_ATTR,
             C1.ITEM_FIELD_TEMPLATE,
             C1.READ_ONLY_WHEN,
             C1.READ_ONLY_WHEN2,
             C1.READ_ONLY_WHEN_TYPE,
             C1.READ_ONLY_DISP_ATTR,
             C1.PROTECTION_LEVEL,
             C1.ESCAPE_ON_HTTP_INPUT,
             C1.ESCAPE_ON_HTTP_OUTPUT,
             C1.RESTRICTED_CHARACTERS,
             C1.ENCRYPT_SESSION_STATE_YN,
             C1.PLUGIN_INIT_JAVASCRIPT_CODE,
             C1.ATTRIBUTE_01,
             C1.ATTRIBUTE_02,
             C1.ATTRIBUTE_03,
             C1.ATTRIBUTE_04,
             C1.ATTRIBUTE_05,
             C1.ATTRIBUTE_06,
             C1.ATTRIBUTE_07,
             C1.ATTRIBUTE_08,
             C1.ATTRIBUTE_09,
             C1.ATTRIBUTE_10,
             C1.ATTRIBUTE_11,
             C1.ATTRIBUTE_12,
             C1.ATTRIBUTE_13,
             C1.ATTRIBUTE_14,
             C1.ATTRIBUTE_15,
             C1.INLINE_HELP_TEXT,
             C1.SHOW_QUICK_PICKS,
             C1.QUICK_PICK_LABEL_01,
             C1.QUICK_PICK_VALUE_01,
             C1.QUICK_PICK_LABEL_02,
             C1.QUICK_PICK_VALUE_02,
             C1.QUICK_PICK_LABEL_03,
             C1.QUICK_PICK_VALUE_03,
             C1.QUICK_PICK_LABEL_04,
             C1.QUICK_PICK_VALUE_04,
             C1.QUICK_PICK_LABEL_05,
             C1.QUICK_PICK_VALUE_05,
             C1.QUICK_PICK_LABEL_06,
             C1.QUICK_PICK_VALUE_06,
             C1.QUICK_PICK_LABEL_07,
             C1.QUICK_PICK_VALUE_07,
             C1.QUICK_PICK_LABEL_08,
             C1.QUICK_PICK_VALUE_08,
             C1.QUICK_PICK_LABEL_09,
             C1.QUICK_PICK_VALUE_09,
             C1.QUICK_PICK_LABEL_10,
             C1.QUICK_PICK_VALUE_10,
             C1.QUICK_PICK_LINK_ATTR,
             C1.BUTTON_EXECUTE_VALIDATIONS,
             C1.BUTTON_ACTION,
             C1.BUTTON_REDIRECT_URL,
             C1.BUTTON_IS_HOT )
     RETURNING ID INTO L_ID;
 
     
     
     
     FOR C2 IN (SELECT HELP_TEXT, REFERENCE_ID
                FROM   WWV_FLOW_STEP_ITEM_HELP
                WHERE  FLOW_ID = C1.FLOW_ID
                AND    FLOW_ITEM_ID = P_COPY_FROM_ITEM_ID)
     LOOP
         INSERT INTO WWV_FLOW_STEP_ITEM_HELP
         (FLOW_ID, FLOW_ITEM_ID, HELP_TEXT, REFERENCE_ID)
         VALUES
         (C1.FLOW_ID, L_ID, C2.HELP_TEXT, C2.REFERENCE_ID);
     END LOOP;
     END LOOP;
 END COPY_PAGE_ITEM;
 
 FUNCTION GET_REGION_BY_TEMPLATE_ID (
     P_APPLICATION_ID    IN NUMBER,
     P_USER_INTERFACE_ID IN NUMBER,
     P_TEMPLATE_ID       IN NUMBER )
     RETURN NUMBER
 IS
     L_GLOBAL_PAGE_ID NUMBER;
     L_REGION_ID      NUMBER;
 BEGIN
     L_GLOBAL_PAGE_ID := WWV_FLOW_USER_INTERFACE_DEV.GET_GLOBAL_PAGE_ID (
                             P_APPLICATION_ID    => P_APPLICATION_ID,
                             P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
     FOR L_REGION IN (
         SELECT ID
           FROM WWV_FLOW_PAGE_PLUGS
          WHERE FLOW_ID           = P_APPLICATION_ID
            AND PAGE_ID           = L_GLOBAL_PAGE_ID
            AND PLUG_TEMPLATE     = P_TEMPLATE_ID
            AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID )
     LOOP
         L_REGION_ID := L_REGION.ID;
     END LOOP;
 
     RETURN L_REGION_ID;
 
 END GET_REGION_BY_TEMPLATE_ID;
 
 FUNCTION GET_HEADER_TOOLBAR_REGION_ID (
     P_APPLICATION_ID    IN NUMBER,
     P_USER_INTERFACE_ID IN NUMBER )
     RETURN NUMBER
 IS
     L_THEME_ID    NUMBER;
     L_TEMPLATE_ID NUMBER;
 BEGIN
     L_THEME_ID := WWV_FLOW_USER_INTERFACE_DEV.GET_CURRENT_THEME_ID (
                       P_APPLICATION_ID    => P_APPLICATION_ID,
                       P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
     SELECT DEFAULT_HEADER_TEMPLATE
       INTO L_TEMPLATE_ID
       FROM WWV_FLOW_THEMES
      WHERE FLOW_ID           = P_APPLICATION_ID
        AND THEME_ID          = L_THEME_ID
        AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
 
     RETURN GET_REGION_BY_TEMPLATE_ID (
                P_APPLICATION_ID    => P_APPLICATION_ID,
                P_USER_INTERFACE_ID => P_USER_INTERFACE_ID,
                P_TEMPLATE_ID       => L_TEMPLATE_ID );
 
 END GET_HEADER_TOOLBAR_REGION_ID;
 
 FUNCTION GET_FOOTER_TOOLBAR_REGION_ID (
    P_APPLICATION_ID         IN NUMBER,
    P_USER_INTERFACE_ID      IN NUMBER )
    RETURN NUMBER
 IS
     L_THEME_ID    NUMBER;
     L_TEMPLATE_ID NUMBER;
 BEGIN
     L_THEME_ID := WWV_FLOW_USER_INTERFACE_DEV.GET_CURRENT_THEME_ID (
                       P_APPLICATION_ID    => P_APPLICATION_ID,
                       P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
     SELECT DEFAULT_FOOTER_TEMPLATE
       INTO L_TEMPLATE_ID
       FROM WWV_FLOW_THEMES
      WHERE FLOW_ID           = P_APPLICATION_ID
        AND THEME_ID          = L_THEME_ID
        AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
 
     RETURN GET_REGION_BY_TEMPLATE_ID (
                P_APPLICATION_ID    => P_APPLICATION_ID,
                P_USER_INTERFACE_ID => P_USER_INTERFACE_ID,
                P_TEMPLATE_ID       => L_TEMPLATE_ID );
 
 END GET_FOOTER_TOOLBAR_REGION_ID;
 
 
 FUNCTION GET_FOOTER_DEFAULT_TEMPLATE_ID (
     P_FLOW_ID                   IN NUMBER,
     P_USER_INTERFACE_ID         IN NUMBER )
     RETURN NUMBER
 IS
     L_THEME_ID         NUMBER;
     L_TEMPLATE_ID      NUMBER;
 BEGIN
     L_THEME_ID := WWV_FLOW_USER_INTERFACE_DEV.GET_CURRENT_THEME_ID (
                       P_APPLICATION_ID    => P_FLOW_ID,
                       P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
     FOR C1 IN ( SELECT DEFAULT_FOOTER_TEMPLATE
                     FROM WWV_FLOW_THEMES
                 WHERE FLOW_ID           = P_FLOW_ID
                 AND THEME_ID            = L_THEME_ID
                 AND SECURITY_GROUP_ID   = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID )
     LOOP
         L_TEMPLATE_ID := C1.DEFAULT_FOOTER_TEMPLATE;
     END LOOP;
     RETURN L_TEMPLATE_ID;
 END GET_FOOTER_DEFAULT_TEMPLATE_ID;
 
 
 FUNCTION GET_HEADER_DEFAULT_TEMPLATE_ID (
     P_FLOW_ID                   IN NUMBER,
     P_USER_INTERFACE_ID         IN NUMBER )
     RETURN NUMBER
 IS
     L_THEME_ID         NUMBER;
     L_TEMPLATE_ID      NUMBER;
 BEGIN
     L_THEME_ID := WWV_FLOW_USER_INTERFACE_DEV.GET_CURRENT_THEME_ID (
                       P_APPLICATION_ID    => P_FLOW_ID,
                       P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
     FOR C1 IN ( SELECT DEFAULT_HEADER_TEMPLATE
                     FROM WWV_FLOW_THEMES
                 WHERE FLOW_ID           = P_FLOW_ID
                 AND THEME_ID            = L_THEME_ID
                 AND SECURITY_GROUP_ID   = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID )
     LOOP
         L_TEMPLATE_ID := C1.DEFAULT_HEADER_TEMPLATE;
     END LOOP;
     RETURN L_TEMPLATE_ID;
 END GET_HEADER_DEFAULT_TEMPLATE_ID;
 
 
 
 
 PROCEDURE CREATE_USER_INTERFACE (
     P_FLOW_ID         IN NUMBER,
     P_UI_TYPE_NAME    IN VARCHAR2,
     P_DISPLAY_NAME    IN VARCHAR2,
     P_DISPLAY_SEQ     IN NUMBER,
     P_USE_AUTO_DETECT IN VARCHAR2,
     P_IS_DEFAULT      IN VARCHAR2,
     P_THEME_ID        IN NUMBER,
     P_HOME_URL        IN VARCHAR2,
     P_LOGIN_URL       IN VARCHAR2,
     P_GLOBAL_PAGE_ID  IN NUMBER
 ) IS
 
     L_HOME_PAGE_ID                NUMBER;
     L_GLOBAL_PAGE_ID              NUMBER;
     L_LOGIN_PAGE_ID               NUMBER;
     L_USER_INTERFACE_ID           NUMBER;
     L_REGION_ID                   NUMBER;
     L_MENU_BT_ID                  NUMBER;
     L_DA_EVENT_ID                 NUMBER;
     L_LIST_ITEM_ID                NUMBER;
     L_NAVIGATION_LIST_ID          NUMBER;
     L_SEQ_ID                      NUMBER  := 10;
     L_NAV_BAR_LIST_ID             NUMBER;
     L_NAV_BAR_LIST_TEMPLATE_ID    NUMBER;
     L_NAVIGATION_LIST_TEMPLATE_ID NUMBER;
     L_NAVIGATION_LIST_POSITION    WWV_FLOW_USER_INTERFACES.NAVIGATION_LIST_POSITION%TYPE;
 
 BEGIN
 
     L_USER_INTERFACE_ID := WWV_FLOW_ID.NEXT_VAL;
 
     WWV_FLOW_API.CREATE_USER_INTERFACE (
         P_ID              => L_USER_INTERFACE_ID,
         P_FLOW_ID         => P_FLOW_ID,
         P_UI_TYPE_NAME    => P_UI_TYPE_NAME,
         P_DISPLAY_NAME    => P_DISPLAY_NAME,
         P_DISPLAY_SEQ     => P_DISPLAY_SEQ,
         P_USE_AUTO_DETECT => (P_USE_AUTO_DETECT='Y'),
         P_IS_DEFAULT      => (P_IS_DEFAULT='Y'),
         P_THEME_ID        => P_THEME_ID,
         P_HOME_URL        => P_HOME_URL,
         P_LOGIN_URL       => P_LOGIN_URL,
         P_GLOBAL_PAGE_ID  => P_GLOBAL_PAGE_ID
     );
 
     WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
         P_FLOW_ID           => P_FLOW_ID,
         P_USER_INTERFACE_ID => L_USER_INTERFACE_ID
     );
 
     
 
     IF (NOT PAGE_EXISTS(P_FLOW_ID,101)) THEN
         L_LOGIN_PAGE_ID := 101;
     ELSIF (NOT PAGE_EXISTS(P_FLOW_ID,1001)) THEN
         L_LOGIN_PAGE_ID := 1001;
     ELSIF (NOT PAGE_EXISTS(P_FLOW_ID,10001)) THEN
         L_LOGIN_PAGE_ID := 10001;
     ELSE
         L_LOGIN_PAGE_ID := WWV_FLOW_UTILITIES.MINIMUM_FREE_PAGE(P_FLOW_ID,1);
     END IF;
 
     CREATE_LOGIN_PAGE (
         P_FLOW_ID           => P_FLOW_ID,
         P_PAGE_ID           => L_LOGIN_PAGE_ID,
         P_USER_INTERFACE_ID => L_USER_INTERFACE_ID );
 
 
     
 
     IF (NOT PAGE_EXISTS(P_FLOW_ID,0)) THEN
         L_GLOBAL_PAGE_ID := 0;
     ELSIF (NOT PAGE_EXISTS(P_FLOW_ID,999)) THEN
         L_GLOBAL_PAGE_ID := 999;
     ELSIF (NOT PAGE_EXISTS(P_FLOW_ID,9999)) THEN
         L_GLOBAL_PAGE_ID := 9999;
     ELSE
         L_GLOBAL_PAGE_ID := WWV_FLOW_UTILITIES.MINIMUM_FREE_PAGE(P_FLOW_ID,1);
     END IF;
 
     CREATE_GLOBAL_PAGE (
         P_APPLICATION_ID    => P_FLOW_ID,
         P_PAGE_ID           => L_GLOBAL_PAGE_ID,
         P_USER_INTERFACE_ID => L_USER_INTERFACE_ID );
 
     
     
     IF WWV_FLOW_PAGE.IS_JQM_UI ( P_APPLICATION_ID    => P_FLOW_ID,
                                  P_PAGE_ID           => L_GLOBAL_PAGE_ID,
                                  P_SECURITY_GROUP_ID => WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID ) THEN
 
         L_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
 
         WWV_FLOW_API.CREATE_PAGE_PLUG (
             P_ID                          => L_REGION_ID,
             P_FLOW_ID                     => P_FLOW_ID,
             P_PAGE_ID                     => L_GLOBAL_PAGE_ID,
             P_PLUG_NAME                   => WWV_FLOW_LANG.SYSTEM_MESSAGE('JQM_HEADER'),
             P_PLUG_TEMPLATE               => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_HEADER_TEMPLATE,
             P_REGION_TEMPLATE_OPTIONS     => GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_HEADER_TEMPLATE,'REGION'),
             P_PLUG_DISPLAY_SEQUENCE       => 10,
             P_PLUG_DISPLAY_POINT          => 'REGION_POSITION_01',
             P_PLUG_ITEM_DISPLAY_POINT     => 'ABOVE',
             P_PLUG_SOURCE_TYPE            => WWV_FLOW_REGION_NATIVE.C_STATIC,
             P_TRANSLATE_TITLE             => 'Y',
             P_PLUG_DISPLAY_CONDITION_TYPE => 'CURRENT_PAGE_NOT_IN_CONDITION',
             P_PLUG_DISPLAY_WHEN_CONDITION => '101',
             P_PLUG_CUSTOMIZED             => '0',
             P_PLUG_CACHING                => 'NOT_CACHED',
             P_PLUG_COMMENT                => WWV_FLOW_LANG.SYSTEM_MESSAGE('JQM_HEADER') );
 
 
         L_MENU_BT_ID := WWV_FLOW_ID.NEXT_VAL;
         WWV_FLOW_API.CREATE_PAGE_BUTTON(
             P_ID                  => L_MENU_BT_ID,
             P_FLOW_ID             => P_FLOW_ID,
             P_FLOW_STEP_ID        => 0,
             P_BUTTON_SEQUENCE     => 10,
             P_BUTTON_PLUG_ID      => L_REGION_ID,
             P_BUTTON_NAME         => 'MENU',
             P_BUTTON_ACTION       => 'DEFINED_BY_DA',
             P_BUTTON_TEMPLATE_ID  => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE,
             P_BUTTON_TEMPLATE_OPTIONS => WWV_FLOW_WIZARD_API.GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE,'BUTTON'),
             P_BUTTON_IS_HOT       => 'N',
             P_BUTTON_IMAGE_ALT    => 'Menu',
             P_BUTTON_POSITION     => 'REGION_TEMPLATE_PREVIOUS',
             P_BUTTON_ALIGNMENT    => 'RIGHT',
             P_BUTTON_REDIRECT_URL => '',
             P_BUTTON_CATTRIBUTES  =>'data-icon="bars" data-iconpos="notext" data-direction="reverse"',
             P_REQUIRED_PATCH      => NULL);
 
         L_MENU_BT_ID := WWV_FLOW_ID.NEXT_VAL;
         WWV_FLOW_API.CREATE_PAGE_BUTTON(
             P_ID                  => L_MENU_BT_ID,
             P_FLOW_ID             => P_FLOW_ID,
             P_FLOW_STEP_ID        => 0,
             P_BUTTON_SEQUENCE     => 20,
             P_BUTTON_PLUG_ID      => L_REGION_ID,
             P_BUTTON_NAME         => 'LOGOUT',
             P_BUTTON_ACTION       => 'REDIRECT_URL',
             P_BUTTON_TEMPLATE_ID  => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE,
             P_BUTTON_TEMPLATE_OPTIONS => WWV_FLOW_WIZARD_API.GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE,'BUTTON'),
             P_BUTTON_IS_HOT       => 'N',
             P_BUTTON_IMAGE_ALT    => WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW.LOGOUT'),
             P_BUTTON_POSITION     => 'REGION_TEMPLATE_NEXT',
             P_BUTTON_ALIGNMENT    => 'RIGHT',
             P_BUTTON_REDIRECT_URL => 'javascript:location.href="&LOGOUT_URL.";',
             P_BUTTON_CATTRIBUTES  => '',
             P_REQUIRED_PATCH      => NULL);
 
         WWV_FLOW_API.CREATE_PAGE_PLUG (
             P_FLOW_ID                     => P_FLOW_ID,
             P_PAGE_ID                     => 0,
             P_PLUG_NAME                   => WWV_FLOW_LANG.SYSTEM_MESSAGE('JQM_FOOTER'),
             P_PLUG_TEMPLATE               => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_FOOTER_TEMPLATE,
             P_REGION_TEMPLATE_OPTIONS     => GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_FOOTER_TEMPLATE,'REGION'),
             P_PLUG_DISPLAY_SEQUENCE       => 100,
             P_PLUG_DISPLAY_POINT          => 'REGION_POSITION_08',
             P_PLUG_ITEM_DISPLAY_POINT     => 'ABOVE',
             P_PLUG_SOURCE_TYPE            => WWV_FLOW_REGION_NATIVE.C_STATIC,
             P_TRANSLATE_TITLE             => 'Y',
             P_PLUG_DISPLAY_CONDITION_TYPE => 'CURRENT_PAGE_NOT_IN_CONDITION',
             P_PLUG_DISPLAY_WHEN_CONDITION => '101',
             P_PLUG_CUSTOMIZED             => '0',
             P_PLUG_CACHING                => 'NOT_CACHED',
             P_PLUG_COMMENT                => WWV_FLOW_LANG.SYSTEM_MESSAGE('JQM_FOOTER') );
 
         L_DA_EVENT_ID := WWV_FLOW_ID.NEXT_VAL;
 
         WWV_FLOW_API.CREATE_PAGE_DA_EVENT(
             P_ID                      => L_DA_EVENT_ID,
             P_FLOW_ID                 => P_FLOW_ID,
             P_PAGE_ID                 => 0,
             P_NAME                    => 'open panel',
             P_EVENT_SEQUENCE          => 10,
             P_TRIGGERING_ELEMENT_TYPE => 'BUTTON',
             P_TRIGGERING_BUTTON_ID    => L_MENU_BT_ID,
             P_BIND_TYPE               => 'bind',
             P_BIND_EVENT_TYPE         => 'click');
 
         WWV_FLOW_API.CREATE_PAGE_DA_ACTION(
             P_ID                      =>L_DA_EVENT_ID,
             P_FLOW_ID                 => P_FLOW_ID,
             P_EVENT_ID                =>L_DA_EVENT_ID,
             P_EVENT_RESULT            =>'TRUE',
             P_ACTION_SEQUENCE         =>10,
             P_EXECUTE_ON_PAGE_INIT    =>'N',
             P_ACTION                  =>'NATIVE_JAVASCRIPT_CODE',
             P_ATTRIBUTE_01            =>'$.mobile.activePage.find(''#menupanel'').panel("open");',
             P_STOP_EXECUTION_ON_ERROR =>'Y');
     END IF;
 
 
     
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
     
 
     L_HOME_PAGE_ID := WWV_FLOW_UTILITIES.MINIMUM_FREE_PAGE(P_FLOW_ID,1);
 
     CREATE_HOME_PAGE (
         P_FLOW_ID           => P_FLOW_ID,
         P_PAGE_ID           => L_HOME_PAGE_ID,
         P_USER_INTERFACE_ID => L_USER_INTERFACE_ID );
 
     
     SELECT T.DEFAULT_NAV_LIST_POSITION,
            CASE DEFAULT_NAV_LIST_POSITION
              WHEN 'TOP'  THEN T.DEFAULT_TOP_NAV_LIST_TEMPLATE
              WHEN 'SIDE' THEN T.DEFAULT_SIDE_NAV_LIST_TEMPLATE
            END,
            T.DEFAULT_NAV_BAR_LIST_TEMPLATE
       INTO L_NAVIGATION_LIST_POSITION,
            L_NAVIGATION_LIST_TEMPLATE_ID,
            L_NAV_BAR_LIST_TEMPLATE_ID
           FROM WWV_FLOW_THEMES T
      WHERE T.FLOW_ID           = P_FLOW_ID
        AND T.THEME_ID          = P_THEME_ID
        AND T.SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
 
     
 
     IF WWV_FLOW_THEME_GLOBALS.G_NAVIGATION_TYPE = 'L' THEN
 
         
         L_NAVIGATION_LIST_ID := WWV_FLOW_ID.NEXT_VAL;
 
         WWV_FLOW_API.CREATE_LIST (
             P_ID         => L_NAVIGATION_LIST_ID,
             P_FLOW_ID    => P_FLOW_ID,
             P_NAME       => CASE   
                               WHEN WWV_FLOW_PAGE.IS_JQM_UI ( P_APPLICATION_ID    => P_FLOW_ID,
                                                              P_PAGE_ID           => L_GLOBAL_PAGE_ID,
                                                              P_SECURITY_GROUP_ID => WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID )
                                 THEN WWV_FLOW_LANG.SYSTEM_MESSAGE('UI_TYPE.JQM_SMARTPHONE')
                               ELSE WWV_FLOW_LANG.SYSTEM_MESSAGE('UI_TYPE.DESKTOP')
                             END||' '||WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW_CREATE_MODEL_APP.MENUBAR'),
         P_LIST_STATUS    => 'PUBLIC',
         P_LIST_DISPLAYED => 'BY_DEFAULT' );
 
         
         UPDATE WWV_FLOW_USER_INTERFACES
            SET NAVIGATION_LIST_ID = L_NAVIGATION_LIST_ID,
                NAVIGATION_LIST_POSITION = L_NAVIGATION_LIST_POSITION,
                NAVIGATION_LIST_TEMPLATE_ID = L_NAVIGATION_LIST_TEMPLATE_ID,
                NAV_LIST_TEMPLATE_OPTIONS = '#DEFAULT#'
          WHERE ID = L_USER_INTERFACE_ID
            AND FLOW_ID = P_FLOW_ID
            AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
 
         
         L_LIST_ITEM_ID := WWV_FLOW_ID.NEXT_VAL;
 
         WWV_FLOW_API.CREATE_LIST_ITEM (
             P_ID                          => L_LIST_ITEM_ID,
             P_LIST_ID                     => L_NAVIGATION_LIST_ID,
             P_PARENT_LIST_ITEM_ID         => NULL,
             P_LIST_ITEM_TYPE              => 'LINK',
             P_LIST_ITEM_STATUS            => 'PUBLIC',
             P_ITEM_DISPLAYED              => 'BY_DEFAULT',
             P_LIST_ITEM_DISPLAY_SEQUENCE  => L_SEQ_ID,
             P_LIST_ITEM_LINK_TEXT         => WWV_FLOW_LANG.SYSTEM_MESSAGE('HOME'),
             P_LIST_ITEM_LINK_TARGET       => 'f?p=&APP_ID.:'||L_HOME_PAGE_ID||':&APP_SESSION.::&DEBUG.:',
             P_LIST_COUNTCLICKS_Y_N        => 'N',
             P_LIST_ITEM_CURRENT_TYPE      => 'COLON_DELIMITED_PAGE_LIST',
             P_LIST_ITEM_CURRENT_FOR_PAGES => L_HOME_PAGE_ID,
             P_LIST_ITEM_OWNER             => '' );
 
     END IF;
 
     
 
     IF WWV_FLOW_THEME_GLOBALS.G_NAV_BAR_TYPE = 'LIST' THEN
         L_NAV_BAR_LIST_ID := WWV_FLOW_ID.NEXT_VAL;
 
         WWV_FLOW_API.CREATE_LIST (
             P_ID                      => L_NAV_BAR_LIST_ID,
             P_FLOW_ID                 => P_FLOW_ID,
             P_NAME                    => CASE   
                                            WHEN WWV_FLOW_PAGE.IS_JQM_UI ( P_APPLICATION_ID    => P_FLOW_ID,
                                                              P_PAGE_ID           => L_GLOBAL_PAGE_ID,
                                                              P_SECURITY_GROUP_ID => WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID )
                                              THEN WWV_FLOW_LANG.SYSTEM_MESSAGE('UI_TYPE.JQM_SMARTPHONE')
                                            ELSE WWV_FLOW_LANG.SYSTEM_MESSAGE('UI_TYPE.DESKTOP')
                                          END||' '||WWV_FLOW_LANG.SYSTEM_MESSAGE('NAVIGATION BAR'),
             P_LIST_STATUS             => 'PUBLIC',
             P_LIST_DISPLAYED          => 'BY_DEFAULT' );
 
         L_LIST_ITEM_ID := WWV_FLOW_ID.NEXT_VAL;
 
         WWV_FLOW_API.CREATE_LIST_ITEM (
             P_ID                          => L_LIST_ITEM_ID,
             P_LIST_ID                     => L_NAV_BAR_LIST_ID,
             P_PARENT_LIST_ITEM_ID         => NULL,
             P_LIST_ITEM_TYPE              => 'LINK',
             P_LIST_ITEM_STATUS            => 'PUBLIC',
             P_ITEM_DISPLAYED              => 'BY_DEFAULT',
             P_LIST_ITEM_DISPLAY_SEQUENCE  => L_SEQ_ID,
             P_LIST_ITEM_LINK_TEXT         => WWV_FLOW_LANG.SYSTEM_MESSAGE('WWV_FLOW.LOGOUT'),
             P_LIST_ITEM_LINK_TARGET       => '&LOGOUT_URL.',
             P_LIST_COUNTCLICKS_Y_N        => NULL,
             P_LIST_ITEM_CURRENT_TYPE      => NULL,
             P_LIST_ITEM_CURRENT_FOR_PAGES => '&LOGOUT_URL.',
             P_LIST_ITEM_OWNER             => '' );
 
         
         UPDATE WWV_FLOW_USER_INTERFACES
            SET NAV_BAR_TYPE = WWV_FLOW_THEME_GLOBALS.G_NAV_BAR_TYPE,
                NAV_BAR_LIST_ID = L_NAV_BAR_LIST_ID,
                NAV_BAR_LIST_TEMPLATE_ID = L_NAV_BAR_LIST_TEMPLATE_ID,
                NAV_BAR_TEMPLATE_OPTIONS = '#DEFAULT#'
          WHERE ID = L_USER_INTERFACE_ID
            AND FLOW_ID = P_FLOW_ID
            AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
     END IF;
 
 END CREATE_USER_INTERFACE;
 
 
 PROCEDURE CREATE_LIST (
     P_FLOW_ID                  IN NUMBER,
     P_PAGE_ID                  IN NUMBER,
     P_NAME                     IN VARCHAR2,
     P_ENTRY_NAME_01            IN VARCHAR2,
     P_PAGE_01                  IN VARCHAR2,
     P_ENTRY_NAME_02            IN VARCHAR2,
     P_PAGE_02                  IN VARCHAR2,
     P_ENTRY_NAME_03            IN VARCHAR2,
     P_PAGE_03                  IN VARCHAR2,
     P_ENTRY_NAME_04            IN VARCHAR2,
     P_PAGE_04                  IN VARCHAR2,
     P_ENTRY_NAME_05            IN VARCHAR2,
     P_PAGE_05                  IN VARCHAR2,
     P_DEPLOY                   IN VARCHAR2, 
     P_REGION_TEMPLATE          IN VARCHAR2,
     P_LIST_TEMPLATE_ID         IN VARCHAR2,
     P_REGION_POSITION          IN VARCHAR2,
     P_REQUIRED_PATCH           IN VARCHAR2 )
 IS
     L_LIST_ID NUMBER;
     P         NUMBER;
     S         NUMBER := 0;
 
     PROCEDURE CREATE_LIST_ENTRY (
         P_LIST_ID IN NUMBER,
         P_NAME    IN VARCHAR2 DEFAULT NULL,
         P_TARGET  IN VARCHAR2 DEFAULT NULL)
     IS
         P_ENTRY_ID           NUMBER;
         P                    NUMBER;         
         L_TARGET_TYPE        VARCHAR2(30);   
         L_CURRENT_FOR_PAGES  VARCHAR2(4000); 
         L_TARGET             VARCHAR2(4000);
     BEGIN
         IF P_NAME IS NULL THEN RETURN; END IF;
         
         P_ENTRY_ID := WWV_FLOW_ID.NEXT_VAL;
         S          := S + 10;
         
         BEGIN
             P := P_TARGET;
             
             L_TARGET      := 'f?p='||'&'||'APP_ID.:'||P||':&'||'SESSION.:';
             L_TARGET_TYPE := 'TARGET_PAGE';  
         EXCEPTION WHEN OTHERS THEN
             L_TARGET            := P_TARGET;
             L_CURRENT_FOR_PAGES := P_TARGET; 
         END;
         INSERT INTO WWV_FLOW_LIST_ITEMS (
             ID, LIST_ID, FLOW_ID, LIST_ITEM_TYPE,
             LIST_ITEM_STATUS, ITEM_DISPLAYED , LIST_ITEM_DISPLAY_SEQUENCE,
             LIST_ITEM_LINK_TEXT, LIST_ITEM_LINK_TARGET, LIST_ITEM_CURRENT_FOR_PAGES,
             LIST_ITEM_CURRENT_TYPE
         ) VALUES (
             P_ENTRY_ID, P_LIST_ID, P_FLOW_ID, 'LINK',
             'PUBLIC', 'BY_DEFAULT', S,
             P_NAME, L_TARGET, L_CURRENT_FOR_PAGES, 
             L_TARGET_TYPE);
         COMMIT;
     END CREATE_LIST_ENTRY;
 
     PROCEDURE CREATE_LIST_REGION (
         P_PAGE_ID IN VARCHAR2 DEFAULT NULL,
         P_LIST_ID IN NUMBER DEFAULT NULL,
         P_DISPLAY_POINT IN VARCHAR2 DEFAULT NULL,
         P_LIST_NAME     IN VARCHAR2 DEFAULT NULL)
     IS
         L_MAX_SEQ NUMBER DEFAULT NULL;
         P NUMBER;
         L_DISPLAY_POINT VARCHAR2(30) := 'REGION_POSITION_01';
     BEGIN
         IF P_PAGE_ID IS NULL OR P_LIST_ID IS NULL THEN
             RETURN;
         END IF;
         BEGIN
             P := P_PAGE_ID;
         EXCEPTION WHEN OTHERS THEN
             P := NULL;
         END;
         IF P IS NULL THEN 
             RETURN;
         END IF;
         IF P_DISPLAY_POINT IS NOT NULL THEN
             L_DISPLAY_POINT := P_DISPLAY_POINT;
         END IF;
             
         SELECT NVL(MAX(PLUG_DISPLAY_SEQUENCE),0) + 10 INTO L_MAX_SEQ
         FROM WWV_FLOW_PAGE_PLUGS 
         WHERE FLOW_ID = P_FLOW_ID AND PAGE_ID = P;
 
         IF L_MAX_SEQ IS NULL THEN
             L_MAX_SEQ := 10;
         END IF;
         WWV_FLOW_API.CREATE_PAGE_PLUG (
             P_ID => WWV_FLOW_ID.NEXT_VAL,
             P_FLOW_ID                     => P_FLOW_ID,
             P_PAGE_ID                     => P_PAGE_ID,
             P_PLUG_NAME                   => P_LIST_NAME,
             P_PLUG_TEMPLATE               => CASE WHEN P_REGION_TEMPLATE <> 0 THEN P_REGION_TEMPLATE END,
             P_LIST_TEMPLATE_ID            => P_LIST_TEMPLATE_ID,
             P_PLUG_DISPLAY_SEQUENCE       => L_MAX_SEQ,
             P_PLUG_DISPLAY_POINT          => L_DISPLAY_POINT,
             P_PLUG_SOURCE                 => NULL,
             P_PLUG_SOURCE_TYPE            => P_LIST_ID,
             P_PLUG_DISPLAY_WHEN_CONDITION => NULL,
             P_PLUG_DISPLAY_WHEN_COND2     => NULL,
             P_PLUG_DISPLAY_CONDITION_TYPE => NULL,
             P_PLUG_REQUIRED_ROLE          => NULL,
             P_MENU_TEMPLATE_ID            => NULL);
     END CREATE_LIST_REGION;
 
 BEGIN
     
     
     
     L_LIST_ID := WWV_FLOW_ID.NEXT_VAL;
     BEGIN
         P := P_REQUIRED_PATCH;
     EXCEPTION WHEN OTHERS THEN P := NULL;
     END;
  
     FOR C1 IN (SELECT ID 
                  FROM WWV_FLOWS 
                 WHERE ID                = P_FLOW_ID
                   AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID
     ) LOOP
 
         INSERT INTO WWV_FLOW_LISTS (
                  ID, FLOW_ID , NAME, 
                  LIST_STATUS, LIST_DISPLAYED,
                  REQUIRED_PATCH,
                  CREATED_ON, CREATED_BY)
         VALUES (
                  L_LIST_ID, C1.ID, P_NAME,
                  'PUBLIC', 'BY_DEFAULT',
                  P,
                  SYSDATE, WWV_FLOW.G_USER); 
         NULL;
     END LOOP;
 
     
     
     
     CREATE_LIST_ENTRY (P_LIST_ID => L_LIST_ID, P_NAME => P_ENTRY_NAME_01, P_TARGET => P_PAGE_01);
     CREATE_LIST_ENTRY (P_LIST_ID => L_LIST_ID, P_NAME => P_ENTRY_NAME_02, P_TARGET => P_PAGE_02);
     CREATE_LIST_ENTRY (P_LIST_ID => L_LIST_ID, P_NAME => P_ENTRY_NAME_03, P_TARGET => P_PAGE_03);
     CREATE_LIST_ENTRY (P_LIST_ID => L_LIST_ID, P_NAME => P_ENTRY_NAME_04, P_TARGET => P_PAGE_04);
     CREATE_LIST_ENTRY (P_LIST_ID => L_LIST_ID, P_NAME => P_ENTRY_NAME_05, P_TARGET => P_PAGE_05);
 
     
     
     
     IF P_DEPLOY = 'CURRENT_PAGE' THEN
         CREATE_LIST_REGION (P_PAGE_ID =>P_PAGE_ID, P_LIST_ID=>L_LIST_ID,  P_DISPLAY_POINT=>P_REGION_POSITION, P_LIST_NAME=>P_NAME);
     ELSIF P_DEPLOY = 'EACH_ENTRY' THEN
         CREATE_LIST_REGION (P_PAGE_ID =>P_PAGE_01, P_LIST_ID=>L_LIST_ID,  P_DISPLAY_POINT=>P_REGION_POSITION, P_LIST_NAME=>P_NAME);
         CREATE_LIST_REGION (P_PAGE_ID =>P_PAGE_02, P_LIST_ID=>L_LIST_ID,  P_DISPLAY_POINT=>P_REGION_POSITION, P_LIST_NAME=>P_NAME);
         CREATE_LIST_REGION (P_PAGE_ID =>P_PAGE_03, P_LIST_ID=>L_LIST_ID,  P_DISPLAY_POINT=>P_REGION_POSITION, P_LIST_NAME=>P_NAME);
         CREATE_LIST_REGION (P_PAGE_ID =>P_PAGE_04, P_LIST_ID=>L_LIST_ID,  P_DISPLAY_POINT=>P_REGION_POSITION, P_LIST_NAME=>P_NAME);
         CREATE_LIST_REGION (P_PAGE_ID =>P_PAGE_05, P_LIST_ID=>L_LIST_ID,  P_DISPLAY_POINT=>P_REGION_POSITION, P_LIST_NAME=>P_NAME);
     END IF;
     COMMIT;
 END CREATE_LIST;
 
 PROCEDURE GET_MASTER_DETAIL_COLUMN (
     P_OWNER              IN VARCHAR2,
     P_MASTER_TABLE_NAME  IN VARCHAR2,
     P_DETAIL_TABLE_NAME  IN VARCHAR2,
     P_FK_CONSTRAINT_NAME IN VARCHAR2,
     
     P_MASTER_COL_LIST    OUT WWV_FLOW_GLOBAL.VC_ARR2,
     P_DETAIL_COL_LIST    OUT WWV_FLOW_GLOBAL.VC_ARR2 )
 IS
     L_MASTER_COL_LIST    WWV_FLOW_GLOBAL.VC_ARR2;
     L_DETAIL_COL_LIST    WWV_FLOW_GLOBAL.VC_ARR2;
 BEGIN
     WITH CC AS (
         SELECT /*+materialize*/
                CC.OWNER,
                CC.CONSTRAINT_NAME,
                CC.TABLE_NAME,
                CC.COLUMN_NAME,
                CC.POSITION
           FROM SYS.DBA_CONS_COLUMNS CC
          WHERE CC.OWNER           =  P_OWNER
            AND CC.TABLE_NAME      IN (P_DETAIL_TABLE_NAME, P_MASTER_TABLE_NAME) ),
       CONS_COLS AS (
         SELECT CC.OWNER,
                CC.CONSTRAINT_NAME,
                CC.TABLE_NAME,
                CC.COLUMN_NAME,
                CC.POSITION,
                C.CONSTRAINT_TYPE,
                C.R_OWNER,
                C.R_CONSTRAINT_NAME
           FROM CC,
                SYS.DBA_CONSTRAINTS  C
          WHERE CC.OWNER           =  C.OWNER
            AND CC.CONSTRAINT_NAME =  C.CONSTRAINT_NAME
            AND C.CONSTRAINT_TYPE  IN ('R', 'P', 'U') )
     SELECT PARENT.COLUMN_NAME MASTER_COLUMN,
            CHILD.COLUMN_NAME  DETAIL_COLUMN
     BULK COLLECT INTO 
            L_MASTER_COL_LIST,
            L_DETAIL_COL_LIST
       FROM CONS_COLS CHILD,
            CONS_COLS PARENT
      WHERE CHILD.R_CONSTRAINT_NAME = PARENT.CONSTRAINT_NAME
        AND CHILD.R_OWNER           = PARENT.OWNER
        AND CHILD.POSITION          = PARENT.POSITION
        AND CHILD.CONSTRAINT_TYPE   = 'R'
        AND PARENT.CONSTRAINT_TYPE  IN ('P', 'U')
        AND CHILD.CONSTRAINT_NAME   = P_FK_CONSTRAINT_NAME
     ORDER BY CHILD.POSITION;
 
     P_MASTER_COL_LIST := L_MASTER_COL_LIST;
     P_DETAIL_COL_LIST := L_DETAIL_COL_LIST;
 END GET_MASTER_DETAIL_COLUMN;
 
 PROCEDURE CREATE_MD_SINGLE_PAGE (
     P_APPLICATION_ID            IN NUMBER,
     P_PAGE_ID                   IN NUMBER,
     P_PAGE_NAME                 IN VARCHAR2 DEFAULT NULL,
     P_PAGE_MODE                 IN VARCHAR2,
     P_USER_INTERFACE_ID         IN NUMBER,
     P_TAB_SET                   IN VARCHAR2 DEFAULT NULL,
     P_TAB_NAME                  IN VARCHAR2 DEFAULT NULL,
     P_TAB_TEXT                  IN VARCHAR2 DEFAULT NULL,
     
     P_NAV_LIST_ID               IN NUMBER   DEFAULT NULL,
     P_NAV_LIST_ITEM_ID          IN NUMBER   DEFAULT NULL,
     P_NAV_LIST_ITEM_NAME        IN VARCHAR2 DEFAULT NULL,
     P_NAV_LIST_PARENT_ITEM_ID   IN NUMBER   DEFAULT NULL,
     P_NAV_LIST_CHILD_ITEM_NAME  IN VARCHAR2 DEFAULT NULL,
     
     P_BREADCRUMB_ID             IN NUMBER   DEFAULT NULL,
     P_BREADCRUMB_NAME           IN VARCHAR2 DEFAULT NULL,
     P_PARENT_BC_ID              IN NUMBER   DEFAULT NULL,
     
     P_MASTER_REGION             IN T_MD,
     P_DETAIL_REGION             IN T_MD )
 IS
     L_MASTER_REGION_ID          NUMBER;
     L_DETAIL_REGION_ID          NUMBER;
     L_MASTER_COLUMN_LIST        WWV_FLOW_GLOBAL.VC_ARR2;
     L_DETAIL_COLUMN_LIST        WWV_FLOW_GLOBAL.VC_ARR2;
     L_SAVE_BUTTON_ID            NUMBER;
 BEGIN
     
     
     
     WWV_FLOW_THEME_MANAGER.SET_GLOBALS (
         P_FLOW_ID           => P_APPLICATION_ID,
         P_USER_INTERFACE_ID => P_USER_INTERFACE_ID );
 
     
     
     
     IF NOT PAGE_EXISTS (P_APPLICATION_ID,P_PAGE_ID) THEN
         WWV_FLOW_API.CREATE_PAGE(
             P_ID                  => P_PAGE_ID,
             P_FLOW_ID             => P_APPLICATION_ID,
             P_TAB_SET             => REPLACE(P_TAB_SET,'%null%',NULL),
             P_NAME                => P_PAGE_NAME,
             P_PAGE_MODE           => P_PAGE_MODE,
             P_USER_INTERFACE_ID   => P_USER_INTERFACE_ID,
             P_STEP_TITLE          => P_PAGE_NAME,
             P_STEP_SUB_TITLE      => P_PAGE_NAME,
             P_STEP_SUB_TITLE_TYPE => 'TEXT_WITH_SUBSTITUTIONS',
             P_WELCOME_TEXT        => '',
             P_BOX_WELCOME_TEXT    => '',
             P_BOX_FOOTER_TEXT     => '',
             P_FOOTER_TEXT         => '',
             P_STEP_TEMPLATE       => '',
             P_PAGE_TEMPLATE_OPTIONS => GET_PRESET_TEMPLATE_OPTIONS(WWV_FLOW_THEME_GLOBALS.G_DEFAULT_PAGE_TEMPLATE, 'PAGE'),
             P_BOX_IMAGE           => '',
             P_REQUIRED_ROLE       => '',
             P_PAGE_COMMENT       => NULL );
 
         IF P_NAV_LIST_ID IS NOT NULL THEN
             
             CREATE_NAVIGATION_LIST_ITEM (
                 P_FLOW_ID                  => P_APPLICATION_ID,
                 P_PAGE_ID                  => P_PAGE_ID,
                 P_PAGE_NAME                => P_PAGE_NAME,
                 P_NAV_LIST_ID              => P_NAV_LIST_ID,
                 P_NAV_LIST_ITEM_ID         => P_NAV_LIST_ITEM_ID,
                 P_NAV_LIST_ITEM_NAME       => P_NAV_LIST_ITEM_NAME,
                 P_NAV_LIST_PARENT_ITEM_ID  => P_NAV_LIST_PARENT_ITEM_ID,
                 P_NAV_LIST_CHILD_ITEM_NAME => P_NAV_LIST_CHILD_ITEM_NAME );
         ELSE
             
             IF REPLACE(P_TAB_SET,'%null%',NULL) IS NOT NULL THEN
                 CREATE_TAB (
                     P_FLOW_ID  => P_APPLICATION_ID,
                     P_PAGE_ID  => P_PAGE_ID,
                     P_TAB_SET  => P_TAB_SET,
                     P_TAB_NAME => P_TAB_NAME,
                     P_TAB_TEXT => P_TAB_TEXT );
             END IF;
         END IF;
     END IF;
 
     
     WWV_FLOW_WIZARD_API.CREATE_BREADCRUMB_REGION (
         P_APPLICATION_ID             => P_APPLICATION_ID,
         P_PAGE_ID                    => P_PAGE_ID,
         P_SEQ                        => 10,
         P_BREADCRUMB_ID              => P_BREADCRUMB_ID,
         P_BREADCRUMB_ENTRY_NAME      => P_BREADCRUMB_NAME,
         P_PARENT_BREADCRUMB_ENTRY_ID => P_PARENT_BC_ID );
 
     
     L_SAVE_BUTTON_ID := WWV_FLOW_ID.NEXT_VAL;
     L_MASTER_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
     CREATE_IG_REGION (
         P_ID                  => L_MASTER_REGION_ID,
         P_APPLICATION_ID      => P_APPLICATION_ID,
         P_PAGE_ID             => P_PAGE_ID,
         P_TITLE               => P_MASTER_REGION.REGION_TITLE,
         P_DISPLAY_SEQUENCE    => 20,
         P_SQL                 => WWV_FLOW_PLUGIN_DEV.BUILD_SQL_STATEMENT (
                                  P_APPLICATION_ID => P_APPLICATION_ID,
                                  P_TABLE_OWNER    => P_MASTER_REGION.OWNER,
                                  P_TABLE_NAME     => P_MASTER_REGION.TABLE_NAME,
                                  P_COLUMNS        => P_MASTER_REGION.COLS ),
         P_IS_EDITABLE         => TRUE,
         P_SAVE_WHEN_BUTTON_ID => L_SAVE_BUTTON_ID,
         P_TOOLBAR_BUTTONS     => 'RESET',
         P_PK_COLUMN           => P_MASTER_REGION.PK_COL,
         P_PK2_COLUMN          => (CASE WHEN P_MASTER_REGION.PK_COL != 'ROWID' THEN P_MASTER_REGION.PK_COL2 END) );
 
     WWV_FLOW_API.CREATE_PAGE_BUTTON (
         P_ID                     => L_SAVE_BUTTON_ID,
         P_FLOW_ID                => P_APPLICATION_ID,
         P_FLOW_STEP_ID           => P_PAGE_ID,
         P_BUTTON_SEQUENCE        => 10,
         P_BUTTON_PLUG_ID         => L_MASTER_REGION_ID,
         P_BUTTON_NAME            => 'SAVE',
         P_BUTTON_ACTION          => WWV_FLOW_BUTTON.C_ACTION_SUBMIT,
         P_BUTTON_TEMPLATE_OPTIONS=> GET_PRESET_TEMPLATE_OPTIONS (WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE, 'BUTTON'),
         P_BUTTON_TEMPLATE_ID     => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_BUTTON_TEMPLATE,
         P_BUTTON_IS_HOT          => 'Y',
         P_BUTTON_IMAGE_ALT       => WWV_FLOW_LANG.SYSTEM_MESSAGE('SAVE'),
         P_BUTTON_POSITION        => WWV_FLOW_THEME_MANAGER.GET_BUTTON_POSTION(
                                         P_TEMPLATE_ID => WWV_FLOW_THEME_GLOBALS.G_DEFAULT_REPORTR_TEMPLATE,
                                         P_POSITION    => '#EDIT#') );
 
     
     IF P_DETAIL_REGION.FK_CON IS NOT NULL THEN
         GET_MASTER_DETAIL_COLUMN (
             P_OWNER              => P_MASTER_REGION.OWNER,
             P_MASTER_TABLE_NAME  => P_MASTER_REGION.TABLE_NAME,
             P_DETAIL_TABLE_NAME  => P_DETAIL_REGION.TABLE_NAME,
             P_FK_CONSTRAINT_NAME => P_DETAIL_REGION.FK_CON,
             
             P_MASTER_COL_LIST    => L_MASTER_COLUMN_LIST,
             P_DETAIL_COL_LIST    => L_DETAIL_COLUMN_LIST );
     ELSE
         L_MASTER_COLUMN_LIST(1) := P_DETAIL_REGION.MASTER_COL;
         L_DETAIL_COLUMN_LIST(1) := P_DETAIL_REGION.DETAIL_COL;
     END IF;
 
     
     L_DETAIL_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
     CREATE_IG_REGION (
         P_ID                  => L_DETAIL_REGION_ID,
         P_APPLICATION_ID      => P_APPLICATION_ID,
         P_PAGE_ID             => P_PAGE_ID,
         P_TITLE               => P_DETAIL_REGION.REGION_TITLE,
         P_DISPLAY_SEQUENCE    => 30,
         P_SQL                 => WWV_FLOW_PLUGIN_DEV.BUILD_SQL_STATEMENT (
                                  P_APPLICATION_ID => P_APPLICATION_ID,
                                  P_TABLE_OWNER    => P_DETAIL_REGION.OWNER,
                                  P_TABLE_NAME     => P_DETAIL_REGION.TABLE_NAME,
                                  P_COLUMNS        => P_DETAIL_REGION.COLS ),
         P_IS_EDITABLE         => TRUE,
         P_SAVE_WHEN_BUTTON_ID => L_SAVE_BUTTON_ID,
         P_TOOLBAR_BUTTONS     => 'RESET',
         P_PK_COLUMN           => P_DETAIL_REGION.PK_COL,
         P_PK2_COLUMN          => (CASE WHEN P_DETAIL_REGION.PK_COL != 'ROWID' THEN P_DETAIL_REGION.PK_COL2 END),
         P_FK_COLUMNS          => WWV_FLOW_UTILITIES.TABLE_TO_STRING2( L_DETAIL_COLUMN_LIST ) );
 
     
     UPDATE WWV_FLOW_PAGE_PLUGS
     SET MASTER_REGION_ID = L_MASTER_REGION_ID
     WHERE ID = L_DETAIL_REGION_ID
     AND FLOW_ID = P_APPLICATION_ID
     AND PAGE_ID = P_PAGE_ID
     AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
 
     
     FOR I IN 1..L_MASTER_COLUMN_LIST.COUNT
     LOOP
         FOR L_MASTER_COL IN (SELECT ID
                               FROM WWV_FLOW_REGION_COLUMNS
                               WHERE NAME = L_MASTER_COLUMN_LIST(I)
                               AND FLOW_ID = P_APPLICATION_ID
                               AND PAGE_ID = P_PAGE_ID
                               AND REGION_ID = L_MASTER_REGION_ID
                               AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID )
         LOOP
             
             
 
 
 
 
 
 
     
             
             UPDATE WWV_FLOW_REGION_COLUMNS
             SET PARENT_COLUMN_ID = L_MASTER_COL.ID
             WHERE NAME = L_DETAIL_COLUMN_LIST(I)
             AND FLOW_ID = P_APPLICATION_ID
             AND PAGE_ID = P_PAGE_ID
             AND REGION_ID = L_DETAIL_REGION_ID
             AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
         END LOOP;
     END LOOP;
 END CREATE_MD_SINGLE_PAGE;
 
 PROCEDURE CREATE_MD_TWO_PAGE (
     P_APPLICATION_ID            IN NUMBER,
     P_USER_INTERFACE_ID         IN NUMBER,
     P_TAB_SET                   IN VARCHAR2 DEFAULT NULL,
     P_TAB_NAME                  IN VARCHAR2 DEFAULT NULL,
     P_TAB_TEXT                  IN VARCHAR2 DEFAULT NULL,
     
     P_NAV_LIST_ID               IN NUMBER   DEFAULT NULL,
     P_NAV_LIST_ITEM_ID          IN NUMBER   DEFAULT NULL,
     P_NAV_LIST_ITEM_NAME        IN VARCHAR2 DEFAULT NULL,
     P_NAV_LIST_PARENT_ITEM_ID   IN NUMBER   DEFAULT NULL,
     P_NAV_LIST_CHILD_ITEM_NAME  IN VARCHAR2 DEFAULT NULL,
     
     P_BREADCRUMB_ID             IN NUMBER   DEFAULT NULL,
     P_PARENT_BC_ID              IN NUMBER   DEFAULT NULL,
     
     P_MASTER                    IN T_MD,
     P_DETAIL                    IN T_MD )
 IS
     L_MASTER_COLUMN_LIST        WWV_FLOW_GLOBAL.VC_ARR2;
     L_DETAIL_COLUMN_LIST        WWV_FLOW_GLOBAL.VC_ARR2;
 
     L_MASTER_PK_ITEM            VARCHAR2(255);
     L_MASTER_PK2_ITEM           VARCHAR2(255);
     
     L_AJAX_ITEMS_TO_SUBMIT      VARCHAR2(4000);
     L_DETAIL_IG_REGION_ID       NUMBER;
     L_DETAIL_IG_WHERE_CLAUSE    VARCHAR2(4000);
     L_DEFAULT_EXPRESSION        VARCHAR2(4000);
 BEGIN
     CREATE_FORM_AND_IG_PAGE (
         P_APPLICATION_ID            => P_APPLICATION_ID,
         P_USER_INTERFACE_ID         => P_USER_INTERFACE_ID,
         
         P_TAB_SET                   => P_TAB_SET,
         P_TAB_NAME                  => P_TAB_NAME,
         P_TAB_TEXT                  => P_TAB_TEXT,
         
         P_NAV_LIST_ID               => P_NAV_LIST_ID,
         P_NAV_LIST_ITEM_ID          => P_NAV_LIST_ITEM_ID,
         P_NAV_LIST_ITEM_NAME        => P_NAV_LIST_ITEM_NAME,
         P_NAV_LIST_PARENT_ITEM_ID   => P_NAV_LIST_PARENT_ITEM_ID,
         P_NAV_LIST_CHILD_ITEM_NAME  => P_NAV_LIST_CHILD_ITEM_NAME,
         
         P_BREADCRUMB_ID             => P_BREADCRUMB_ID,
         P_PARENT_BC_ID              => P_PARENT_BC_ID,
         
         P_OWNER                     => P_MASTER.OWNER,
         P_TABLE_NAME                => P_MASTER.TABLE_NAME,
         P_PK_COL                    => P_MASTER.PK_COL,
         P_PK_COL2                   => P_MASTER.PK_COL2,
         
         P_REPORT_PAGE_ID            => P_MASTER.PAGE_ID,
         P_REPORT_PAGE_NAME          => P_MASTER.PAGE_NAME,
         P_REPORT_BREADCRUMB_NAME    => P_MASTER.BREADCRUMB_NAME,
         P_REPORT_COLUMNS            => P_MASTER.COLS,
         
         P_FORM_PAGE_ID              => P_DETAIL.PAGE_ID,
         P_FORM_PAGE_NAME            => P_DETAIL.PAGE_NAME,
         P_FORM_PAGE_MODE            => P_DETAIL.PAGE_MODE,
         P_FORM_BREADCRUMB_NAME      => P_DETAIL.BREADCRUMB_NAME,
         P_FORM_COLUMNS              => P_MASTER.COLS );
 
     L_MASTER_PK_ITEM := GET_VALID_ITEM_NAME ( P_COLUMN_NAME => P_MASTER.PK_COL, P_PAGE_ID => P_DETAIL.PAGE_ID );
     IF P_MASTER.PK_COL2 IS NOT NULL THEN
         L_MASTER_PK2_ITEM := GET_VALID_ITEM_NAME ( P_COLUMN_NAME => P_MASTER.PK_COL2, P_PAGE_ID => P_DETAIL.PAGE_ID );
     END IF;
 
     
     CREATE_NEXT_PREV_PK_PROCESS (
         P_FLOW_ID          => P_APPLICATION_ID,
         P_PAGE_ID          => P_DETAIL.PAGE_ID,
         P_PAGE_MODE        => P_DETAIL.PAGE_MODE,
         P_OWNER            => P_MASTER.OWNER,
         P_TABLE            => P_MASTER.TABLE_NAME,
         P_PK_COLUMN        => P_MASTER.PK_COL,
         P_PK_COLUMN2       => P_MASTER.PK_COL2,
         P_SORT_COLUMN      => P_MASTER.NAVIGATION_ORDER_COL,
         P_ITEM_PK          => L_MASTER_PK_ITEM,
         P_ITEM_PK2         => L_MASTER_PK2_ITEM);
 
     IF P_DETAIL.FK_CON IS NOT NULL THEN
         
         GET_MASTER_DETAIL_COLUMN (
             P_OWNER              => P_MASTER.OWNER,
             P_MASTER_TABLE_NAME  => P_MASTER.TABLE_NAME,
             P_DETAIL_TABLE_NAME  => P_DETAIL.TABLE_NAME,
             P_FK_CONSTRAINT_NAME => P_DETAIL.FK_CON,
             
             P_MASTER_COL_LIST    => L_MASTER_COLUMN_LIST,
             P_DETAIL_COL_LIST    => L_DETAIL_COLUMN_LIST );
     ELSE
         L_MASTER_COLUMN_LIST(1) := P_DETAIL.MASTER_COL;
         L_DETAIL_COLUMN_LIST(1) := P_DETAIL.DETAIL_COL;
     END IF;
 
     L_DETAIL_IG_REGION_ID := WWV_FLOW_ID.NEXT_VAL;
     FOR I IN 1..L_DETAIL_COLUMN_LIST.COUNT
     LOOP
         IF L_DETAIL_IG_WHERE_CLAUSE IS NOT NULL THEN
             L_AJAX_ITEMS_TO_SUBMIT := L_AJAX_ITEMS_TO_SUBMIT||', ';
             L_DETAIL_IG_WHERE_CLAUSE := L_DETAIL_IG_WHERE_CLAUSE||WWV_FLOW.LF||' and ';
         END IF;
 
         L_AJAX_ITEMS_TO_SUBMIT   := L_AJAX_ITEMS_TO_SUBMIT|| GET_VALID_ITEM_NAME ( P_COLUMN_NAME => L_MASTER_COLUMN_LIST(I), P_PAGE_ID => P_DETAIL.PAGE_ID );
         L_DETAIL_IG_WHERE_CLAUSE := L_DETAIL_IG_WHERE_CLAUSE|| L_DETAIL_COLUMN_LIST(I) || ' = ' ||GET_ITEM_BIND_VARIABLE( GET_VALID_ITEM_NAME ( P_COLUMN_NAME => L_MASTER_COLUMN_LIST(I), P_PAGE_ID => P_DETAIL.PAGE_ID ) );
     END LOOP;
 
     CREATE_IG_REGION (
         P_ID                   => L_DETAIL_IG_REGION_ID,
         P_APPLICATION_ID       => P_APPLICATION_ID,
         P_PAGE_ID              => P_DETAIL.PAGE_ID,
         P_TITLE                => P_DETAIL.REGION_TITLE,
         P_DISPLAY_SEQUENCE     => 30,
         P_SQL                  => WWV_FLOW_PLUGIN_DEV.BUILD_SQL_STATEMENT (
                                   P_APPLICATION_ID => P_APPLICATION_ID,
                                   P_TABLE_OWNER    => P_DETAIL.OWNER,
                                   P_TABLE_NAME     => P_DETAIL.TABLE_NAME,
                                   P_COLUMNS        => P_DETAIL.COLS,
                                   P_WHERE_CLAUSE   => L_DETAIL_IG_WHERE_CLAUSE ),
         P_IS_EDITABLE          => TRUE,
         P_TOOLBAR_BUTTONS      => 'RESET',
         P_PK_COLUMN            => P_DETAIL.PK_COL,
         P_PK2_COLUMN           => (CASE WHEN P_DETAIL.PK_COL != 'ROWID' THEN P_DETAIL.PK_COL2 END),
         P_FK_COLUMNS           => WWV_FLOW_UTILITIES.TABLE_TO_STRING2( L_DETAIL_COLUMN_LIST ),
         P_AJAX_ITEMS_TO_SUBMIT => L_AJAX_ITEMS_TO_SUBMIT );
 
     
     UPDATE WWV_FLOW_PAGE_PLUGS
     SET PLUG_DISPLAY_CONDITION_TYPE = 'ITEM_IS_NOT_NULL',
         PLUG_DISPLAY_WHEN_CONDITION = L_MASTER_PK_ITEM
     WHERE ID = L_DETAIL_IG_REGION_ID
     AND FLOW_ID = P_APPLICATION_ID
     AND PAGE_ID = P_DETAIL.PAGE_ID
     AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID;
 
     
     FOR I IN 1..L_DETAIL_COLUMN_LIST.COUNT
     LOOP
         FOR L_FK_COL IN (SELECT ID
                          FROM WWV_FLOW_REGION_COLUMNS
                          WHERE NAME = L_DETAIL_COLUMN_LIST(I)
                          AND FLOW_ID = P_APPLICATION_ID
                          AND PAGE_ID = P_DETAIL.PAGE_ID
                          AND REGION_ID = L_DETAIL_IG_REGION_ID
                          AND SECURITY_GROUP_ID = WWV_FLOW_SECURITY.G_SECURITY_GROUP_ID )
         LOOP
             L_DEFAULT_EXPRESSION := GET_VALID_ITEM_NAME ( P_COLUMN_NAME => L_MASTER_COLUMN_LIST(I), P_PAGE_ID => P_DETAIL.PAGE_ID );
 
             UPDATE WWV_FLOW_REGION_COLUMNS
             SET DEFAULT_TYPE = 'ITEM',
                 DEFAULT_EXPRESSION = L_DEFAULT_EXPRESSION
             WHERE ID = L_FK_COL.ID;
         END LOOP;
     END LOOP;
 END CREATE_MD_TWO_PAGE;
 
 END my_FLOW_WIZARD_API;